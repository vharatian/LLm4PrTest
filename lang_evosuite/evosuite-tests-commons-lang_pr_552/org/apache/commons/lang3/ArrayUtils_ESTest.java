/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 10:05:41 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = 293.951128085715;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 8;
      double[] doubleArray1 = ArrayUtils.insert(8, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {8.0, 8.0, 8.0, 8.0, 8.0, 293.951128085715, 8.0, 8.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-302);
      shortArray0[2] = (short) (-1611);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-302), (short) (-1611)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-302), (short) (-1611)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 1, (-1781), 159);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (short)0, 1, 1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Object[] objectArray0 = new Object[25];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Integer");
      assertNotNull(stringArray0);
      assertEquals(25, objectArray0.length);
      assertEquals(25, stringArray0.length);
      
      String string0 = ArrayUtils.toString(objectArray0[6], (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(25, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'Q');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2342));
      assertNotNull(integer0);
      assertEquals((-2342), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 6;
      Integer integer1 = new Integer(6);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger((String) null, (-2342));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2342), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-2), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(6, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-445));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-445), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[2]);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-2342), (int)integer6);
      assertEquals(8, integerArray0.length);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[6]);
      assertTrue(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals((-2342), (int)integer7);
      assertEquals(8, integerArray0.length);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) int0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {81L, (-2342L), 6L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)19045);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1036;
      intArray0[1] = 13;
      ArrayUtils.shift(intArray0, (-2145807558), 1036, 1036);
      assertArrayEquals(new int[] {1036, 13}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1036;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1036}, intArray0);
      assertArrayEquals(new int[] {1036, 1036}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Integer integer0 = new Integer((-4981));
      assertNotNull(integer0);
      assertEquals((-4981), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Integer integer0 = Integer.getInteger("io");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1509.0977F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1509.0977F;
      floatArray1[1] = 1509.0977F;
      floatArray1[2] = 1509.0977F;
      float[] floatArray2 = ArrayUtils.remove(floatArray1, 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1509.0977F, 1509.0977F, 1509.0977F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1509.0977F, 1509.0977F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)64);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray2, 1845.2559F);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1509.0977F, 1509.0977F, 1509.0977F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1509.0977F, 1509.0977F}, floatArray2, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Double double0 = new Double(2562.340631899353);
      assertNotNull(double0);
      assertEquals(2562.340631899353, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2562.340631899353, 2562.340631899353}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2562.340631899353, 2562.340631899353}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-20);
      ArrayUtils.shift(byteArray0, (int) (short) (-26));
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = '^';
      charArray0[3] = 'u';
      charArray0[4] = 'L';
      charArray0[5] = ')';
      charArray0[6] = 'T';
      ArrayUtils.shift(charArray0, (int) (byte) (-20), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new char[] {'K', '&', '^', 'u', 'L', ')', 'T'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 896, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 79;
      intArray0[1] = 79;
      intArray0[2] = 13;
      intArray0[3] = 79;
      intArray0[4] = 79;
      intArray0[5] = 79;
      ArrayUtils.swap(intArray0, (-90), 6, 6);
      assertArrayEquals(new int[] {79, 79, 13, 79, 79, 79}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1114);
      floatArray0[1] = (float) 79;
      floatArray0[2] = (float) 79;
      floatArray0[3] = (float) 79;
      floatArray0[4] = (float) 6;
      floatArray0[5] = 2589.5024F;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE, 1408, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-1114.0F), 79.0F, 79.0F, 79.0F, 6.0F, 2589.5024F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-4283));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)70;
      ArrayUtils.shift(byteArray0, 2, (int) (byte)97, 122);
      assertArrayEquals(new byte[] {(byte)44, (byte)97, (byte)1, (byte)70}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)44;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)44;
      shortArray0[3] = (short) (-953);
      shortArray0[4] = (short) (-743);
      shortArray0[5] = (short) (byte)44;
      shortArray0[6] = (short) (byte)1;
      shortArray0[7] = (short) (-128);
      shortArray0[8] = (short) (byte)70;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)70, (int) (byte)44);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)44, (short)1, (short)44, (short) (-953), (short) (-743), (short)44, (short)1, (short) (-128), (short)70}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 6;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)2, (byte) (-104), (byte)2}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((-927), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-263);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)4627;
      shortArray0[3] = (short)70;
      shortArray0[4] = (short)523;
      shortArray0[5] = (short)114;
      shortArray0[6] = (short)109;
      ArrayUtils.shift(shortArray0, (int) (short) (-263), (int) (short)6, (int) (short)70);
      assertArrayEquals(new short[] {(short)4627, (short)70, (short)523, (short)114, (short) (-263), (short)6, (short)109}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1603.11, (int) (short)4627, 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 54.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {54.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'O';
      charArray0[2] = '_';
      charArray0[3] = '/';
      charArray0[4] = '{';
      charArray0[5] = '7';
      charArray0[6] = ' ';
      char[] charArray1 = ArrayUtils.insert(7, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', 'O', '_', '/', '{', '7', ' '}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 2596;
      longArray0[2] = (-4199L);
      longArray0[3] = (long) 2596;
      longArray0[4] = (long) 2596;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4199L));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 2596L, (-4199L), 2596L, 2596L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'p';
      charArray0[3] = '7';
      charArray0[4] = 'x';
      charArray0[5] = 'K';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'>', 'p', '\u0000', '7', 'x', 'K'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 2596, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, Integer.MAX_VALUE, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2267);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-8);
      ArrayUtils.swap(byteArray0, 3, (int) (byte) (-8), (int) (byte) (-66));
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-81), (byte) (-8)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 747L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {747L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(393);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(393, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1985);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1985, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integer1;
      Integer integer3 = new Integer(56);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(56, (int)integer3);
      
      integerArray1[3] = integer3;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertEquals(1, integerArray2.length);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((byte)46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)46);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1463));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1463), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1463), (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((int) (byte)46);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(46, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-1463), (int)integer5);
      assertEquals(9, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((byte)46);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(46, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[5]);
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals((-1463), (int)integer7);
      assertEquals(9, integerArray0.length);
      
      integerArray0[7] = integer7;
      int int0 = 1;
      Integer integer8 = new Integer(1);
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals(1, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray0, (Object) integer3);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertTrue(integer3.equals((Object)integer5));
      assertTrue(integer3.equals((Object)integer7));
      assertFalse(integer3.equals((Object)integer6));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer4));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer8));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(8, integerArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) integerArray0[3];
      intArray0[1] = (-1463);
      intArray0[2] = (int) integerArray0[5];
      intArray0[3] = int0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1463), (-1463), (-1463), 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1463), (-1463), (-1463), 1}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2601.844116254488;
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 2601.844116254488;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = 2601.844116254488;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 2601.844116254488, (-1.0), 2601.844116254488, 2601.844116254488}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 1, 839, 1);
      assertArrayEquals(new double[] {(-1.0), 2601.844116254488, 0.0, (-1.0), 2601.844116254488, (-1.0), 2601.844116254488}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-98));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-98), (byte)byte1);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-98));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-98L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 3148.637F;
      floatArray0[1] = (float) (byte) (-98);
      floatArray0[2] = (float) (byte) (-98);
      floatArray0[3] = (float) (byte) (-98);
      floatArray0[4] = (float) (byte) (-98);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-98), 5);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3148.637F, (-98.0F), (-98.0F), (-98.0F), (-98.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3148.637F, (-98.0F), (-98.0F), (-98.0F), (-98.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift(longArray0, 104);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '9', 104);
      assertEquals((-1), int0);
      assertEquals(15, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 5);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(4, int1);
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'U';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {85.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {85.0, 85.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-2865));
      assertNotNull(integer0);
      assertEquals((-2865), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1551);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1551, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2758);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2758, (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      Integer integer3 = mutableInt0.getValue();
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(2758, (int)integer4);
      assertEquals(8, integerArray0.length);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt1 = new MutableInt((-2865));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-2865L), mutableInt1.longValue());
      assertEquals((-2865), mutableInt1.intValue());
      assertEquals((-2865.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2865), (int)mutableInt1.toInteger());
      assertEquals("-2865", mutableInt1.toString());
      assertEquals((-2865), (int)mutableInt1.getValue());
      assertEquals((short) (-2865), mutableInt1.shortValue());
      assertEquals((byte) (-49), mutableInt1.byteValue());
      assertEquals((-2865.0F), mutableInt1.floatValue(), 0.01F);
      
      Integer integer5 = mutableInt1.toInteger();
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-2865L), mutableInt1.longValue());
      assertEquals((-2865), mutableInt1.intValue());
      assertEquals((-2865.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2865), (int)mutableInt1.toInteger());
      assertEquals("-2865", mutableInt1.toString());
      assertEquals((-2865), (int)mutableInt1.getValue());
      assertEquals((short) (-2865), mutableInt1.shortValue());
      assertEquals((byte) (-49), mutableInt1.byteValue());
      assertEquals((-2865.0F), mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals((-2865), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2865));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals((-2865), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[0]);
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      assertEquals((-2865), (int)integer7);
      assertEquals(8, integerArray0.length);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(16, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte)11, (byte)122, (byte)84, (byte) (-6), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte)11, (byte)122, (byte)84, (byte) (-6), (byte) (-1)}, byteArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)11;
      boolean boolean0 = ArrayUtils.contains(byteArray2, (byte) (-1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)11}, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)49;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)110, (byte)40, (byte)82, (byte) (-30), (byte) (-70), (byte)49}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1023.055156);
      doubleArray0[1] = (-548.5763891);
      doubleArray0[2] = 73.0;
      doubleArray0[3] = 1387.76;
      ArrayUtils.swap(doubleArray0, 4, 1, 1);
      assertArrayEquals(new double[] {(-1023.055156), (-548.5763891), 73.0, 1387.76}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ", '";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle";
      stringArray0[3] = "VdwZC4]*#lvN[p";
      stringArray0[4] = "java.lang.Integer";
      stringArray0[5] = "len must be > 0";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(1747);
      int[] intArray0 = new int[5];
      intArray0[0] = 1747;
      intArray0[1] = 1747;
      intArray0[2] = (-2170);
      intArray0[3] = 1747;
      intArray0[4] = 1747;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1747;
      intArray1[1] = (-2170);
      intArray1[2] = (-2170);
      intArray1[3] = (-2170);
      intArray1[4] = 1747;
      intArray1[5] = 1747;
      intArray1[6] = (-1678);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1747, 1747, (-2170), 1747, 1747}, intArray0);
      assertArrayEquals(new int[] {1747, (-2170), (-2170), (-2170), 1747, 1747, (-1678)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1747;
      longArray0[1] = (long) (-1678);
      longArray0[2] = (long) 1747;
      longArray0[3] = (long) 1747;
      longArray0[4] = (long) 1747;
      longArray0[5] = (long) 1747;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 1747);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1747L, (-1678L), 1747L, 1747L, 1747L, 1747L}, longArray0);
      assertArrayEquals(new long[] {1747L, (-1678L), 1747L, 1747L, 1747L, 1747L, 1747L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-67.5375);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-2818.78389302);
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-67.5375), 0.0, 1.0, (-2818.78389302), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-67.5375), 0.0, 1.0, (-2818.78389302), 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      int[] intArray0 = new int[5];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3010;
      doubleArray0[1] = (double) 3010;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {3010.0, 3010.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, 3010, 2, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int0 = 1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      ArrayUtils.shift(charArray0, 1, 3010, 1);
      assertArrayEquals(new char[] {'O', 'O', 'p', 'O', 'O'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3010);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3010, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 3010, 2, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      charArray1[3] = 'O';
      charArray1[4] = 'p';
      charArray1[5] = 'p';
      boolean boolean0 = ArrayUtils.contains(charArray1, 'p');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'p', 'p', 'O', 'p', 'p'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray1, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray2.length);
      
      Object[] objectArray0 = new Object[8];
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1073741824);
      assertNotNull(integer0);
      assertEquals(1073741824, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(918);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(918, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2779);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2779, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1291));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1291), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-1291), (int)integer4);
      assertEquals(9, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(918);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(918, (int)integer5);
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt(2779);
      assertNotNull(mutableInt0);
      assertEquals(2779L, mutableInt0.longValue());
      assertEquals(2779, mutableInt0.intValue());
      assertEquals(2779.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2779, (int)mutableInt0.getValue());
      assertEquals(2779.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals(2779, (int)mutableInt0.toInteger());
      assertEquals("2779", mutableInt0.toString());
      assertEquals((short)2779, mutableInt0.shortValue());
      
      Integer integer6 = mutableInt0.getValue();
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(2779L, mutableInt0.longValue());
      assertEquals(2779, mutableInt0.intValue());
      assertEquals(2779.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2779, (int)mutableInt0.getValue());
      assertEquals(2779.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals(2779, (int)mutableInt0.toInteger());
      assertEquals("2779", mutableInt0.toString());
      assertEquals((short)2779, mutableInt0.shortValue());
      assertEquals(2779, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-372));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals((-372), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = mutableInt0.getValue();
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals(2779L, mutableInt0.longValue());
      assertEquals(2779, mutableInt0.intValue());
      assertEquals(2779.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2779, (int)mutableInt0.getValue());
      assertEquals(2779.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals(2779, (int)mutableInt0.toInteger());
      assertEquals("2779", mutableInt0.toString());
      assertEquals((short)2779, mutableInt0.shortValue());
      assertEquals(2779, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = ArrayUtils.get(integerArray0, 1073741824);
      assertNull(integer9);
      assertEquals(9, integerArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)52;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-13), (byte)52}, byteArray0);
      assertEquals("{0, 3, 8, 9, 12, 13, 14, 15, 18, 20, 21}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(22, bitSet0.length());
      assertEquals(11, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-13), (byte)52}, byteArray0);
      assertEquals("{0, 3, 8, 9, 12, 13, 14, 15, 18, 20, 21}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(22, bitSet0.length());
      assertEquals(11, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1930.2444F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1930.2444F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1930.2444F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1930.2444F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Integer integer0 = new Integer(1051);
      assertNotNull(integer0);
      assertEquals(1051, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)49, (int) (byte)49);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(characterArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 2013;
      floatArray0[1] = (float) 2013;
      floatArray0[2] = (float) 2013;
      floatArray0[3] = (float) 2013;
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2013.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2013.0F, 2239.0);
      assertArrayEquals(new double[] {2013.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2013;
      longArray0[1] = (long) 2013;
      longArray0[2] = (long) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 2013;
      intArray0[1] = 2013;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2013;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2013, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1485;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[4] = 6;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 6;
      objectArray0[1] = (Object) 6;
      objectArray0[2] = (Object) 0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 6);
      assertEquals((-1), int0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'o';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = 'V';
      charArray0[5] = 'p';
      ArrayUtils.swap(charArray0, 6, Integer.MAX_VALUE, 2220);
      assertArrayEquals(new char[] {'L', 'o', '`', 'y', 'V', 'p'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[3] = 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'C';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'v', 'C'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'v', 'C'}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      Byte byte1 = new Byte((byte)16);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)16, (byte)byte1);
      
      Byte byte2 = new Byte((byte)16);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)16, (byte)byte2);
      
      Character character0 = Character.valueOf('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (double) 'Z';
      doubleArray0[2] = 1.5;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {90.0, 90.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)16);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(16, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3223);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3223, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.shift((double[]) null, 17, 2, 1059);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1229));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      ArrayUtils.shift((double[]) null, (-1229), 1629, 120);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2225.25F);
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2225.25F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2225.25F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      Integer integer0 = new Integer(1102);
      assertNotNull(integer0);
      assertEquals(1102, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1102, object0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'n';
      charArray0[2] = 'u';
      charArray0[3] = '1';
      charArray0[4] = ' ';
      charArray0[5] = 'c';
      charArray0[6] = '~';
      charArray0[7] = 'c';
      charArray0[8] = '3';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\"', 'n', 'u', '1', ' ', 'c', '~', 'c', '3'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2601.844116254488;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 2601.844116254488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-942), 6, 2146015798);
      assertArrayEquals(new double[] {2601.844116254488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      int[] intArray0 = new int[14];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(intArray0, 0, 673, 0);
      assertEquals(14, intArray0.length);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      int[] intArray1 = new int[14];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(14, intArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 673;
      longArray0[2] = (long) 0;
      longArray0[4] = (long) 673;
      longArray0[5] = (long) 673;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {673L, 0L, 0L, 673L, 673L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)14, (byte) (-122)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)14, (byte) (-122)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      int[] intArray0 = new int[14];
      ArrayUtils.shift(intArray0, 0, 673, 0);
      assertEquals(14, intArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray1 = new int[14];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(14, intArray1.length);
      assertEquals(14, intArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 673;
      longArray0[2] = (long) 0;
      longArray0[4] = (long) 673;
      longArray0[5] = (long) 673;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {673L, 0L, 0L, 673L, 673L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)14, (byte) (-122)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)14, (byte) (-122)}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-371));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 1);
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (-371), 2147483601, 2147483601);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1033;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3454, 2147483601);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1033}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '/';
      charArray0[2] = 'k';
      charArray0[3] = '{';
      charArray0[4] = '<';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'z', '/', 'k', '{', '<'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) '{';
      doubleArray0[2] = (double) '{';
      doubleArray0[3] = (double) 'z';
      doubleArray0[4] = (double) '/';
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      doubleArray0[5] = (double) '/';
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 123.0, 122.0, 47.0, 47.0, 123.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-942), 2146015798, (-1623));
      assertArrayEquals(new double[] {47.0, 47.0, 123.0, 0.0, 123.0, 122.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.insert((-475), integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, '4');
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'v';
      charArray2[1] = '1';
      charArray2[2] = 'N';
      charArray2[3] = 'N';
      int int1 = ArrayUtils.indexOf(charArray2, '1', 2943);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'v', '1', 'N', 'N'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals((-1), int1);
      assertEquals(4, charArray2.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.getInteger("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(2943);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(2943, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(2146362628);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(2146362628, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((-1737));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-1737), (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((-482));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertNotNull(integer6);
      assertEquals((-482), (int)integer6);
      
      integerArray0[5] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      Integer[] integerArray2 = new Integer[0];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      Integer[] integerArray3 = ArrayUtils.insert((int) integerArray0[2], integerArray2, integerArray2);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray3);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray3.length);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-22), (int) (byte)1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertArrayEquals(new char[] {'A'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-22);
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte) (-22);
      shortArray0[4] = (short) (byte) (-22);
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (byte)1;
      shortArray0[7] = (short) (byte) (-22);
      shortArray0[8] = (short) (byte) (-22);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 2713);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2713, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      Object object0 = ArrayUtils.get(objectArray0, (-2472), (Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0;
      Integer integer1 = new Integer(111);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(111, (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'j';
      charArray0[2] = 'Z';
      charArray0[3] = '';
      charArray0[4] = 'a';
      char[] charArray1 = ArrayUtils.add(charArray0, '');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'3', 'j', 'Z', '', 'a'}, charArray0);
      assertArrayEquals(new char[] {'3', 'j', 'Z', '', 'a', ''}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Boolean boolean0 = new Boolean("KWT{z");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("KWT{z");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(111);
      assertNotNull(integer0);
      assertEquals(111, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2776));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2776), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-159));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-159), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(32);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(32, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 32);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {111, (-2776), (-159), 32}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-50);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, (-744));
      assertArrayEquals(new byte[] {(byte)5, (byte)34, (byte) (-50)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      Double double0 = new Double((-2955.46114096381));
      assertNotNull(double0);
      assertEquals((-2955.46114096381), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double1 = new Double(1.5);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.5, (double)double1, 0.01);
      
      doubleArray0[4] = double1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) (byte) (-98));
      assertNotNull(float0);
      assertEquals((-98.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-205.92284118009997));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-205.92284F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-98.0F), (-205.92284F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 651L, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)630;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1060;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)630, (short) (-1), (short)1060}, shortArray0);
      assertArrayEquals(new short[] {(short)630, (short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-654), (-213), (-2768));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-4425));
      assertNotNull(integer0);
      assertEquals((-4425), (int)integer0);
      
      ArrayUtils.swap(longArray0, (-4425), 1, 1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '-');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer1 = new Integer((-4425));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4425), (int)integer1);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 1, (-4425));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1114);
      floatArray0[1] = 16.0F;
      floatArray0[2] = (float) (-1114);
      floatArray0[3] = (float) 'k';
      ArrayUtils.shift(floatArray0, 2, 2, 491);
      assertArrayEquals(new float[] {(-1114.0F), 16.0F, (-1114.0F), 107.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (-1234.3004884980517);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1234.3004884980517)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
      
      ArrayUtils.shuffle((Object[]) doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, (-1234.3004884980517)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = '-';
      charArray0[4] = 'R';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'R';
      charArray0[8] = 'I';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'{', 'I', 'I', '-', 'R', 'I', 'I', 'R', 'I'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      
      Integer integer0 = new Integer(2437);
      assertNotNull(integer0);
      assertEquals(2437, (int)integer0);
      
      Double double0 = new Double(2437);
      assertNotNull(double0);
      assertEquals(2437.0, (double)double0, 0.01);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = Integer.valueOf((-472));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-472), (int)integer2);
      
      BitSet bitSet0 = new BitSet(36);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {7}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1234.3004884980517));
      assertNotNull(float0);
      assertEquals((-1234.3005F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 7);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(7.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = (Byte) byte0;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byteArray0[2] = byte3;
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short(byte0);
      assertNotNull(short0);
      assertEquals((short) (-5), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)581);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)581, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-5));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-5), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-17));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-17), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte) (-5));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-5), (short)short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-5), (short)581, (short) (-5), (short) (-17), (short) (-5)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Integer integer0 = Integer.getInteger("z=&0n'9k#tFd_.Q", (int) (byte) (-5));
      assertNotNull(integer0);
      assertEquals((-5), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer1 = Integer.getInteger("Array element ");
      assertNull(integer1);
      
      integerArray0[6] = null;
      integerArray0[7] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, 56, integer1);
      assertNull(integer2);
      assertEquals(8, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) null, (int) (byte) (-5));
      assertEquals(3, int0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 0, 0, (-942));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift((char[]) null, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (-118));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-118);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new long[] {(-118L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2111;
      shortArray0[1] = (short)2111;
      shortArray0[5] = (short)2111;
      shortArray0[3] = (short)2111;
      shortArray0[4] = (short)2111;
      shortArray0[5] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 76, (int) (short)2111);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2111, (short)2111, (short)0, (short)2111, (short)2111, (short)2111}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2111, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2111, (short)2111, (short)0, (short)2111, (short)2111, (short)2111}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      Integer integer0 = new Integer((-1847));
      assertNotNull(integer0);
      assertEquals((-1847), (int)integer0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2111;
      shortArray0[1] = (short)2111;
      shortArray0[2] = (short)2111;
      shortArray0[3] = (short)2111;
      shortArray0[4] = (short)2111;
      shortArray0[5] = (short)2111;
      shortArray0[6] = (short)2111;
      shortArray0[7] = (short)2111;
      shortArray0[8] = (short)2173;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1235), 1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2173}, shortArray0);
      assertArrayEquals(new short[] {(short)2111}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2111, 2146464563);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2111, (short)2173}, shortArray0);
      assertArrayEquals(new short[] {(short)2111}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, int0);
      assertEquals(9, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 0, 2, 32);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {2, 32, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 32;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 2;
      objectArray0[4] = (Object) 32;
      ArrayUtils.swap(objectArray0, 0, 2, 32);
      assertEquals(5, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'O';
      ArrayUtils.shift(charArray0, 126, (-5), (-5));
      assertArrayEquals(new char[] {'p', 'O'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4098);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-4098));
      assertArrayEquals(new short[] {(short) (-4098)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)46;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[6];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[8];
      Integer integer0 = Integer.getInteger("double");
      assertNull(integer0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-2277.3547041156));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (byte)46;
      objectArray0[2] = (Object) (byte)46;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) (byte)46;
      objectArray0[5] = (Object) (byte)46;
      objectArray0[6] = (Object) (byte)46;
      objectArray0[7] = (Object) (byte)46;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)46);
      assertEquals(0, int0);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(charArray0, (int) (byte)46, 59, (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)46;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)46;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {46L, (-1L), 46L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 46L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007003);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 5.007003);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007003}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007003}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {5.007003}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      ArrayUtils.shift(charArray0, (-1), 1, (-1));
      assertArrayEquals(new char[] {'0', 'n', 'O'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.0F);
      floatArray0[1] = (-32.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2166.601F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-32.0F), (-32.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2166.601F), (-32.0F), (-32.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Integer integer0 = new Integer((-1168));
      assertNotNull(integer0);
      assertEquals((-1168), (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1168), (-1168), (-1168), (-1168), (-1168), (-1168), (-1168)}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1168), (-1168), (-1168), (-1168), (-1168), (-1168), (-1168)}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2166.601F);
      doubleArray0[1] = (double) (-32.0F);
      ArrayUtils.shift(doubleArray0, (-1168), 7, (int) integerArray0[3]);
      assertArrayEquals(new double[] {(-2166.60107421875), (-32.0)}, doubleArray0, 0.01);
      assertEquals(7, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = ')';
      charArray0[2] = 'a';
      charArray0[3] = '+';
      charArray0[4] = '/';
      charArray0[5] = '(';
      charArray0[6] = '3';
      charArray0[7] = '/';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '/');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'Z', ')', 'a', '+', '/', '(', '3', '/'}, charArray0);
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{4, 7}", bitSet0.toString());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2839.51F;
      floatArray0[3] = (-2153.247F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-4583.0F);
      floatArray0[6] = 46.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 2839.51F, (-2153.247F), Float.NaN, (-4583.0F), 46.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 2839.51F, (-2153.247F), Float.NaN, (-4583.0F), 46.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1538, (-443));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer((-443));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-443), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-443);
      Integer integer1 = new Integer((-2777));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2777), (int)integer1);
      
      Integer integer2 = new Integer(3016);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(3016, (int)integer2);
      
      Integer integer3 = new Integer((-1423));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1423), (int)integer3);
      
      Integer integer4 = new Integer((-804));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-804), (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer5 = new Integer(3154);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(3154, (int)integer5);
      
      Integer integer6 = new Integer(3706);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(3706, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer6, integer2);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer4));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, (-804), 376);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-246));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1300));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(957);
      assertNotNull(mutableInt0);
      assertEquals(957, (int)mutableInt0.getValue());
      assertEquals(957, (int)mutableInt0.toInteger());
      assertEquals(957.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("957", mutableInt0.toString());
      assertEquals((byte) (-67), mutableInt0.byteValue());
      assertEquals(957, mutableInt0.intValue());
      assertEquals((short)957, mutableInt0.shortValue());
      assertEquals(957L, mutableInt0.longValue());
      assertEquals(957.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer0 = mutableInt0.getValue();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(957, (int)mutableInt0.getValue());
      assertEquals(957, (int)mutableInt0.toInteger());
      assertEquals(957.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("957", mutableInt0.toString());
      assertEquals((byte) (-67), mutableInt0.byteValue());
      assertEquals(957, mutableInt0.intValue());
      assertEquals((short)957, mutableInt0.shortValue());
      assertEquals(957L, mutableInt0.longValue());
      assertEquals(957.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(957, (int)integer0);
      
      Integer integer1 = new Integer(3916);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3916, (int)integer1);
      
      Integer integer2 = new Integer(1745);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1745, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Integer integer3 = new Integer((-1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      Integer integer4 = new Integer((-2054));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2054), (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer5);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals(957, (int)mutableInt0.getValue());
      assertEquals(957, (int)mutableInt0.toInteger());
      assertEquals(957.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("957", mutableInt0.toString());
      assertEquals((byte) (-67), mutableInt0.byteValue());
      assertEquals(957, mutableInt0.intValue());
      assertEquals((short)957, mutableInt0.shortValue());
      assertEquals(957L, mutableInt0.longValue());
      assertEquals(957.0, mutableInt0.doubleValue(), 0.01);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals(957, (int)mutableInt0.getValue());
      assertEquals(957, (int)mutableInt0.toInteger());
      assertEquals(957.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("957", mutableInt0.toString());
      assertEquals((byte) (-67), mutableInt0.byteValue());
      assertEquals(957, mutableInt0.intValue());
      assertEquals((short)957, mutableInt0.shortValue());
      assertEquals(957L, mutableInt0.longValue());
      assertEquals(957.0, mutableInt0.doubleValue(), 0.01);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertEquals(957, (int)mutableInt0.getValue());
      assertEquals(957, (int)mutableInt0.toInteger());
      assertEquals(957.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("957", mutableInt0.toString());
      assertEquals((byte) (-67), mutableInt0.byteValue());
      assertEquals(957, mutableInt0.intValue());
      assertEquals((short)957, mutableInt0.shortValue());
      assertEquals(957L, mutableInt0.longValue());
      assertEquals(957.0, mutableInt0.doubleValue(), 0.01);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer6 = Integer.valueOf(1789986942);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(1789986942, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer6, integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, 0, 2478);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)78;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)120);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)120, (byte)119, (byte)7, (byte)78}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (-679.4F);
      doubleArray0[4] = (double) (-679.4F);
      doubleArray0[5] = (double) (-679.4F);
      ArrayUtils.shift(doubleArray0, (int) (byte)4, (int) (byte)4, 330);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, (-679.4000244140625), (-679.4000244140625), (-679.4000244140625)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 330);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {330}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {330}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-679.4F);
      doubleArray1[1] = (double) (byte)4;
      doubleArray1[2] = (double) (byte)4;
      doubleArray1[3] = (double) (byte)4;
      doubleArray1[4] = (double) (-679.4F);
      doubleArray1[5] = (double) (-679.4F);
      doubleArray1[6] = (double) 330;
      doubleArray1[7] = (double) (-679.4F);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, (-679.4000244140625), (-679.4000244140625), (-679.4000244140625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-679.4000244140625), 4.0, 4.0, 4.0, (-679.4000244140625), (-679.4000244140625), 330.0, (-679.4000244140625)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(14, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-46.997932F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-46.997932F);
      doubleArray0[1] = 1956.5194335;
      doubleArray0[2] = (double) (-46.997932F);
      doubleArray0[3] = (double) (-46.997932F);
      doubleArray0[4] = (double) (-46.997932F);
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      assertArrayEquals(new double[] {(-46.99793243408203), 1956.5194335, (-46.99793243408203), (-46.99793243408203), (-46.99793243408203)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1719.458746870222;
      Integer integer0 = new Integer((-657));
      assertNotNull(integer0);
      assertEquals((-657), (int)integer0);
      
      Integer integer1 = new Integer((-4448));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4448), (int)integer1);
      
      Integer integer2 = new Integer((-4448));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-4448), (int)integer2);
      
      Integer integer3 = new Integer((-4448));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-4448), (int)integer3);
      
      Integer integer4 = Integer.getInteger("", 367);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(367, (int)integer4);
      
      int int0 = 111;
      Integer[] integerArray0 = new Integer[1];
      Integer integer5 = new Integer(111);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(111, (int)integer5);
      
      integerArray0[0] = integer5;
      Integer integer6 = ArrayUtils.get(integerArray0, int0);
      assertNull(integer6);
      assertEquals(1, integerArray0.length);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer5, (-657));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, integerArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 111;
      longArray0[2] = (long) int0;
      longArray0[3] = (long) 367;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) (-4448);
      longArray0[6] = (long) (-657);
      longArray0[7] = (long) 0;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 111L, 111L, 367L, 111L, (-4448L), (-657L), 0L}, longArray0);
      assertFalse(boolean1);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)3492);
      assertNotNull(short0);
      assertEquals((short)3492, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3861);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)3861, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3861);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)3861, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1502));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1502), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1137));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-1137), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1502));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-1502), (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)814);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertNotNull(short6);
      assertEquals((short)814, (short)short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)6);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3492, (short)3861, (short)3861, (short) (-1502), (short) (-1137), (short) (-1502), (short)814}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-32.0F), (-1000), (-223.7524));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (-1000), 19, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 2513.916813528363, (-1000), (double) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(booleanArray0, 0, 2605, 45);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)97;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), 202);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-63), (byte)46, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-63), (byte)46, (byte)97}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      Double double0 = new Double(13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2, 1, 2.0);
      assertArrayEquals(new double[] {2.0, 13.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(6, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 2, 1136, 589);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 457.0, 1, 2.0);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {2.0, 13.0, 2.0, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-5834);
      intArray0[1] = 1073741824;
      intArray0[2] = 1526;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1460));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-5834), 1073741824, 1526, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1460), (-5834), 1073741824, 1526, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) 1073741824;
      integerArray0[3] = (Integer) (-5834);
      integerArray0[4] = (Integer) 1526;
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) 1526;
      integerArray0[7] = (Integer) (-5834);
      integerArray0[8] = (Integer) (-1);
      Integer integer0 = new Integer(1526);
      assertNotNull(integer0);
      assertEquals(1526, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(10, integerArray1.length);
      assertEquals(9, integerArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1526;
      doubleArray0[1] = (double) (-5834);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte) (-6);
      doubleArray0[4] = (double) (-1);
      ArrayUtils.swap(doubleArray0, 1, 0, 956);
      assertArrayEquals(new double[] {(-5834.0), (-1.0), (-6.0), (-1.0), 1526.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1179L);
      longArray0[2] = 0L;
      longArray0[3] = 1735L;
      longArray0[4] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-1460));
      assertArrayEquals(new long[] {(-1L), (-1179L), 0L, 1735L, 0L}, longArray0);
      assertEquals(2, int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Short short0 = new Short((short)31282);
      assertNotNull(short0);
      assertEquals((short)31282, (short)short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8, (short)short1);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      shortArray0[3] = shortArray0[2];
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      Integer integer0 = Integer.getInteger("+NxT", (int) (short)31282);
      assertNotNull(integer0);
      assertEquals(31282, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer((-2145538624));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2145538624), (int)integer1);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) integer1, (int) shortArray0[6]);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.insert(2145013799, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Character character0 = Character.valueOf('p');
      assertNotNull(character0);
      assertEquals('p', (char)character0);
      
      int[] intArray1 = new int[6];
      intArray1[0] = 2145013799;
      intArray1[1] = (int) 'p';
      intArray1[2] = (int) 'p';
      intArray1[3] = (int) 'p';
      intArray1[4] = 2145013799;
      intArray1[5] = 2145265519;
      int int0 = ArrayUtils.lastIndexOf(intArray1, 112);
      assertArrayEquals(new int[] {2145013799, 112, 112, 112, 2145013799, 2145265519}, intArray1);
      assertEquals(3, int0);
      assertEquals(6, intArray1.length);
      
      int[] intArray2 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((short)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-643));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-643), (int)integer1);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, integerArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) (-643));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-643.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '%';
      charArray0[2] = 'x';
      charArray0[3] = 'M';
      charArray0[4] = ']';
      charArray0[5] = 'b';
      charArray0[6] = 'v';
      charArray0[7] = 's';
      ArrayUtils.shift(charArray0, (-199), 960, 960);
      assertArrayEquals(new char[] {':', '%', 'x', 'M', ']', 'b', 'v', 's'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 876L;
      longArray0[3] = 876L;
      longArray0[4] = 876L;
      longArray0[5] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 876L);
      assertArrayEquals(new long[] {(-1L), (-1L), 876L, 876L, 876L, (-1L)}, longArray0);
      assertEquals(4, int0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 876L;
      floatArray2[1] = (float) 876L;
      floatArray2[2] = (float) 876L;
      float[] floatArray3 = ArrayUtils.insert(4, floatArray2, floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {876.0F, 876.0F, 876.0F, 0.0F, 876.0F, 876.0F, 876.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {876.0F, 876.0F, 876.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(8, floatArray3.length);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short)0;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'B');
      assertNull(charArray0);
      
      ArrayUtils.shift((char[]) null, 51);
      char[] charArray1 = ArrayUtils.removeAllOccurrences((char[]) null, 'J');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2145319181));
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.insert((-2145319181), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-508), (-508));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer integer0 = new Integer((-508));
      assertNotNull(integer0);
      assertEquals((-508), (int)integer0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 3076;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 3076L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = ArrayUtils.insert(1789986942, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Character character0 = Character.valueOf('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      short short0 = (short)1;
      int int0 = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1, 2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Double double0 = new Double(109.0);
      assertNotNull(double0);
      assertEquals(109.0, (double)double0, 0.01);
      
      Double double1 = new Double(2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2.0, (double)double1, 0.01);
      
      Long long0 = Long.getLong("java.lang.Object", (long) 2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(2);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      Long long2 = new Long(2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(2L, (long)long2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int1 = (-480);
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '\"';
      char char0 = '\"';
      charArray0[2] = '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-480), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -480, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2641.0);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2641.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      ArrayUtils.shift(doubleArray0, (int) (short)1);
      assertArrayEquals(new double[] {2.147483647E9, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 2, 1847, (int) (short)1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = 1511.88;
      doubleArray1[2] = (double) Integer.MAX_VALUE;
      doubleArray1[3] = (double) (short)1;
      doubleArray1[4] = (double) 1847;
      doubleArray1[5] = (double) 1847;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 1847;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.147483647E9, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 1511.88, 2.147483647E9, 1.0, 1847.0, 1847.0, 2.0, 1847.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, (-4818));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((-1168), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Integer integer0 = new Integer(2933);
      assertNotNull(integer0);
      assertEquals(2933, (int)integer0);
      
      Integer integer1 = new Integer(2933);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2933, (int)integer1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 30L;
      longArray0[1] = (long) 2145097956;
      longArray0[2] = 30L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 30L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {30L, 2145097956L, 30L}, longArray0);
      assertArrayEquals(new long[] {2145097956L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, '`');
      assertArrayEquals(new char[] {'n', 'n', 'n', 'n', 'n'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1629);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-1629);
      shortArray0[4] = (short) (-1629);
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)8;
      ArrayUtils.swap(shortArray0, 0, 1, 97);
      assertArrayEquals(new short[] {(short) (-1629), (short)8, (short) (-1629), (short) (-1629), (short)8, (short)8, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'n', 'n'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-67));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 50, 785);
      assertEquals(0, objectArray0.length);
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)1, (byte)byte1);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1148);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1148}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Byte byte0 = new Byte((byte)63);
      assertNotNull(byte0);
      assertEquals((byte)63, (byte)byte0);
      
      Byte byte1 = new Byte((byte)63);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)63, (byte)byte1);
      
      Byte byte2 = new Byte((byte)63);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)63, (byte)byte2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)63);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)63, (byte)63}, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)63, (byte)63, (byte)63}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((byte)63);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(63, (int)integer1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (byte)63);
      assertNull(doubleArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('|');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('|', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('|');
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('|', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('=');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('=', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('I');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('I', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('8');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('8', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('4');
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('4', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('~');
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertNotNull(character7);
      assertEquals('~', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('s');
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character1));
      assertNotNull(character8);
      assertEquals('s', (char)character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character6));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character8));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character7));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'~', '|', '|', '=', 'I', '8', '4', '~', 's'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) 2146015798;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 2146015798);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {34.0F, 2.14601574E9F}, floatArray0, 0.01F);
      assertEquals(1, int1);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)34, 101);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)34, (byte)34}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      try { 
        Integer.valueOf("Ukv+H<AR%Ixpo=#~`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ukv+H<AR%Ixpo=#~`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)0, (double) (byte)34);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 305, 960);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)34, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift(booleanArray0, (-472), (int) (byte)0, 946);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2910);
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ArrayUtils.shift(booleanArray0, (-1396));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)82;
      ArrayUtils.swap(byteArray0, 2, (int) (byte) (-1), (-2709));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-76), (byte)82}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, int0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " 99Ng1C,Haq";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "5Y|";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[3];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2920);
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ArrayUtils.shift(booleanArray0, (-1396));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)82;
      ArrayUtils.swap(byteArray0, 2, (int) (byte) (-1), (-2709));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-76), (byte)82}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 770, 770, 4750);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 770, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      booleanArray1[8] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 3604L;
      longArray0[3] = 4L;
      longArray0[4] = 3604L;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray0, booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Integer integer0 = new Integer(68);
      assertNotNull(integer0);
      assertEquals(68, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      int int0 = ArrayUtils.indexOf(charArray0, 'E');
      assertArrayEquals(new char[] {'/', '3', '/', '/', '/', '/'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(973, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Integer integer0 = new Integer((short) (-7));
      assertNotNull(integer0);
      assertEquals((-7), (int)integer0);
      
      Integer integer1 = new Integer(61);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(61, (int)integer1);
      
      Integer integer2 = new Integer((short) (-7));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-7), (int)integer2);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)89;
      byteArray0[7] = (byte)58;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-51), (byte) (-20), (byte)17, (byte)33, (byte)89, (byte)0, (byte)58}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'H';
      charArray0[2] = 'o';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      charArray0[5] = ')';
      charArray0[6] = '2';
      ArrayUtils.shift(charArray0, (int) (byte) (-51), 1839, (int) (byte)17);
      assertArrayEquals(new char[] {'y', ')', '2', '\u0000', 'H', 'o', '>'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Short short0 = new Short((short)31282);
      assertNotNull(short0);
      assertEquals((short)31282, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)31282, (short)31282}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Integer integer0 = Integer.getInteger(",Q^nf?JB/ABL1", (int) (short)8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = new Integer((-2141227176));
      assertEquals((-2141227176), int0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 455.7F;
      floatArray0[1] = 455.7F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 455.7F;
      floatArray0[4] = 455.7F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {455.7F, 455.7F, (-1.0F), 455.7F, 455.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {455.7F, 455.7F, (-1.0F), 455.7F, 455.7F, 455.7F, 455.7F, (-1.0F), 455.7F, 455.7F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {455.7F, 455.7F, (-1.0F), 455.7F, 455.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {455.7F, 455.7F, (-1.0F), 455.7F, 455.7F, 455.7F, 455.7F, (-1.0F), 455.7F, 455.7F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1681.4;
      doubleArray0[2] = 1410.610662434987;
      Integer integer0 = new Integer((-330));
      assertNotNull(integer0);
      assertEquals((-330), (int)integer0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1410.610662434987;
      objectArray0[1] = (Object) 1410.610662434987;
      objectArray0[2] = (Object) 1410.610662434987;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) 1681.4;
      objectArray0[5] = (Object) integer0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object0);
      assertEquals(1410.610662434987, object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 1681.4;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 6}", bitSet0.toString());
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(doubleArray0, 0, (-1), (-1));
      assertArrayEquals(new double[] {1681.4, 0.0, 1410.610662434987}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1410.610662434987;
      objectArray0[2] = (Object) integer0;
      objectArray1[2] = (Object) 1681.4;
      objectArray1[3] = (Object) null;
      objectArray1[4] = (Object) 1410.610662434987;
      objectArray1[5] = object0;
      objectArray1[6] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1, (String) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(stringArray0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(7, objectArray1.length);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      boolean boolean0 = ArrayUtils.isEmpty(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)10314);
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'8', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'8', '\u0000', '8', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2019, 1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(8, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.007002625289575;
      doubleArray0[1] = (-657.0593);
      doubleArray0[2] = 5.007002625289575;
      doubleArray0[3] = (-657.0593);
      doubleArray0[4] = 5.007002625289575;
      doubleArray0[5] = 5.007002625289575;
      doubleArray0[6] = (-1153.516894);
      doubleArray0[7] = 5.007002625289575;
      doubleArray0[8] = 5.007002625289575;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1153.516894));
      assertArrayEquals(new double[] {5.007002625289575, (-657.0593), 5.007002625289575, (-657.0593), 5.007002625289575, 5.007002625289575, (-1153.516894), 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertEquals(6, int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = Character.toChars(6);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0006'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {5.007002625289575, (-657.0593), 5.007002625289575, (-657.0593), 5.007002625289575, 5.007002625289575, (-1153.516894), 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 6L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {6L, 6L}, longArray0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(2, longArray0.length);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertSame(floatArray2, floatArray1);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2842);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2842, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 19;
      Integer integer1 = new Integer(19);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(19, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(19, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(19, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2842);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(2842, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("", 2842);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(2842, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = ArrayUtils.get(integerArray0, 111);
      assertNull(integer6);
      assertEquals(6, integerArray0.length);
      
      int int2 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) null, int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertEquals((-1), int2);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(101, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      Long long0 = new Long(1169);
      assertNotNull(long0);
      assertEquals(1169L, (long)long0);
      
      Long long1 = new Long((-1095L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1095L), (long)long1);
      
      Long long2 = new Long((-1095L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1095L), (long)long2);
      
      Long long3 = new Long((-2804L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-2804L), (long)long3);
      
      Long long4 = new Long((-1095L));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-1095L), (long)long4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      charArray0[8] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '=');
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', '!'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'N', (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', '!'}, charArray0);
      assertEquals(0, int1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      int int0 = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1, 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Double double0 = new Double(13);
      assertNotNull(double0);
      assertEquals(13.0, (double)double0, 0.01);
      
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      int int1 = ArrayUtils.indexOf(charArray0, '/');
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'/', '/', '/', '/'}, charArray0);
      assertEquals(0, int1);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '/';
      doubleArray0[2] = (double) '/';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) '/';
      doubleArray0[5] = (double) '/';
      doubleArray0[6] = (double) '/';
      double[] doubleArray1 = ArrayUtils.insert(int0, doubleArray0, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 5.007002625289575);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007002625289575}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      Float float0 = new Float((-1382.1047F));
      assertNotNull(float0);
      assertEquals((-1382.1047F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-649.0F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1382.1047F), (-1382.1047F), (-1382.1047F), (-1382.1047F), (-1382.1047F), (-1382.1047F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long long0 = Long.getLong("", 2504L);
      assertNotNull(long0);
      assertEquals(2504L, (long)long0);
      
      Float float0 = new Float((-38.0F));
      assertNotNull(float0);
      assertEquals((-38.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 393.5967F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-38.0F), (-38.0F), (-38.0F), (-38.0F), (-38.0F), (-38.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray0));
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(34, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int[] intArray0 = new int[14];
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      ArrayUtils.shift(intArray0, 0, 673, 0);
      assertEquals(14, intArray0.length);
      
      ArrayUtils.shuffle((Object[]) booleanArray0);
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-2108));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2108), (int)integer1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer2 = new Integer(int0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)77;
      byte[] byteArray1 = ArrayUtils.insert(int0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-105), (byte) (-79), (byte)77, (byte)127, (byte) (-105), (byte) (-79), (byte)77}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-105), (byte) (-79), (byte)77}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, 2145192949, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145192949, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3787.6331571447627);
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (-2086126972), (-297));
      assertArrayEquals(new double[] {(-3787.6331571447627)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, (-4579), 2, (-87));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1158.0F;
      floatArray0[1] = (float) 'E';
      floatArray0[2] = (float) '/';
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) 'E';
      floatArray0[5] = (float) '/';
      floatArray0[6] = (float) '/';
      floatArray0[7] = (float) 'W';
      floatArray0[8] = (float) '/';
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {1158.0F, 69.0F, 47.0F, Float.NaN, 69.0F, 47.0F, 47.0F, 87.0F, 47.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1158.0F, 69.0F, 47.0F, Float.NaN, 69.0F, 47.0F, 47.0F, 87.0F, 47.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, intArray0.length);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1440.64061);
      doubleArray0[1] = 1399.0;
      doubleArray0[2] = 39.8105627091;
      doubleArray0[3] = (-2765.0);
      doubleArray0[4] = 924.5;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2765.0);
      doubleArray1[2] = 39.8105627091;
      doubleArray1[3] = 39.8105627091;
      doubleArray1[4] = 924.5;
      doubleArray1[5] = 924.5;
      doubleArray1[6] = (-1440.64061);
      doubleArray1[7] = 39.8105627091;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1440.64061), 1399.0, 39.8105627091, (-2765.0), 924.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2765.0), 0.0, 39.8105627091, 39.8105627091, 924.5, 924.5, (-1440.64061), 39.8105627091}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1399.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-39);
      shortArray0[2] = (short) (-39);
      shortArray0[3] = (short) (-39);
      shortArray0[4] = (short) (-39);
      shortArray0[5] = (short) (-39);
      shortArray0[0] = (short) (-39);
      shortArray0[7] = (short) (-39);
      Integer integer0 = new Integer((short) (-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-39);
      longArray0[1] = (long) (short) (-39);
      ArrayUtils.swap(longArray0, (int) (short) (-39), (int) (short) (-39), (int) (short) (-39));
      assertArrayEquals(new long[] {(-39L), (-39L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-837), (int)  (-39));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)37;
      ArrayUtils.swap(byteArray0, (-837), 5, (-3812));
      assertArrayEquals(new byte[] {(byte)107, (byte)36, (byte) (-61), (byte)85, (byte)37}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'e';
      charArray0[2] = 'n';
      charArray0[3] = '%';
      charArray0[4] = 'g';
      charArray0[5] = '^';
      charArray0[6] = 'j';
      charArray0[7] = '-';
      charArray0[8] = 'c';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3741), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', 'e', 'n', '%', 'g', '^', 'j', '-', 'c'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-38);
      longArray0[3] = (long) (byte) (-38);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2599), 4);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-38L), (-38L)}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray2, (-5497L), 3304);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-38L), (-38L)}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray2, (Random) mockRandom0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, (-38L), (-38L)}, longArray1);
      assertArrayEquals(new long[] {(-38L), (-38L), 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)0, (double) (byte)0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 305, 960);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.swap(shortArray1, (int) (short)0, (int) (short)0, (-1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-902.48);
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 753.0704444059;
      doubleArray1[5] = (double) (byte)0;
      doubleArray1[6] = (double) (short)0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-902.48), 0.0, (-1.0), (-1.0), 753.0704444059, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-902.48), 0.0, (-1.0), (-1.0), 753.0704444059, 0.0, 0.0, 0.0, 30.67132906322425}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (-902.48);
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '4';
      ArrayUtils.swap(intArray0, (-1385), Integer.MAX_VALUE, (-1385));
      assertArrayEquals(new int[] {52, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) Integer.MAX_VALUE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)8;
      ArrayUtils.swap(byteArray0, (-1385), (-1073741823), (-1073741823));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-53), (byte)37, (byte)2, (byte) (-91), (byte) (-63), (byte)8}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Short short0 = new Short((short)89);
      assertNotNull(short0);
      assertEquals((short)89, (short)short0);
      
      Short short1 = new Short((byte)2);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      
      ArrayUtils.shift((char[]) null, 768);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (-1863.1334F));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-39);
      floatArray0[1] = (float) (-39);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-39.0F));
      assertArrayEquals(new float[] {(-39.0F), (-39.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-39), byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'C';
      charArray0[2] = '3';
      charArray0[3] = 'm';
      charArray0[4] = 'G';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'6', 'C', '3', 'm', 'G'}, charArray0);
      assertArrayEquals(new char[] {'6', 'C', 'm', 'G'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '^');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) '^';
      intArray0[2] = (int) '^';
      intArray0[3] = (int) '^';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {94, 94, 94, 94}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 94;
      objectArray0[2] = (Object) 94;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {94, 94, 94, 94}, intArray0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (-868), 94);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'O';
      charArray2[1] = '^';
      charArray2[2] = '^';
      charArray2[3] = '^';
      charArray2[4] = '0';
      charArray2[5] = '^';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray2, '0', 94);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'O', '^', '^', '^', '0', '^'}, charArray2);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, charArray2.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNull(object0);
      assertArrayEquals(new char[] {'O', '^', '^', '^', '0', '^'}, charArray2);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, charArray2.length);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      char[] charArray0 = new char[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 26;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 26);
      assertArrayEquals(new float[] {26.0F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-144.6230199531286), 26);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '%');
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, false, 132);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(2);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 26);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals(0, int2);
      assertEquals(2, doubleArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {26.0, 959.952880859375, 26.0, 959.952880859375}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1228L);
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2623));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-1162), 17, 1608);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2141227176);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-2141227176);
      longArray0[3] = (long) (-2141227176);
      longArray0[4] = (-1L);
      longArray0[5] = (long) 1169;
      longArray0[6] = (long) 1169;
      longArray0[7] = (-141L);
      longArray0[8] = (long) (-2141227176);
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-2141227176L), (-2141227176L), (-1L), 1169L, 1169L, (-141L), (-2141227176L)}, longArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {(-2141227176L), 0L, (-2141227176L), (-2141227176L), (-1L), 1169L, 1169L, (-141L), (-2141227176L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(9, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "4[Ooj$0W5W");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(6, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 2901);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = '9';
      Float float0 = new Float((float) (byte) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-297));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (float)floatArray0[1];
      doubleArray0[1] = (double) '/';
      doubleArray0[2] = (double) '9';
      doubleArray0[3] = (double) '9';
      doubleArray0[4] = (double) '/';
      doubleArray0[5] = (double) '9';
      doubleArray0[6] = (double) (float)floatArray0[1];
      doubleArray0[7] = (double) 'E';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 47.0, 57.0, 57.0, 47.0, 57.0, (-1.0), 69.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 47.0, 57.0, 57.0, 47.0, 57.0, (-1.0), 69.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 3604L;
      longArray0[4] = 3604L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 3604L, 0L, 3604L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '`';
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) 3604L;
      objectArray0[3] = (Object) 3604L;
      objectArray0[4] = (Object) 3604L;
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-371));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 4);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, 108, (-2994));
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)114);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)114}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)0;
      ArrayUtils.swap(objectArray0, 0, (int) (byte)0, 1425);
      assertEquals(1, objectArray0.length);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte0;
      intArray0[1] = 0;
      intArray0[2] = (-5408);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, (-5408)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 1, 110);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer integer0 = new Integer(110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(498L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-942), 0, 6);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1041));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1), (-1041), (-1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2920);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-847);
      shortArray0[3] = (short) (-217);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)565;
      ArrayUtils.shift(shortArray0, 100, (int) (short)2, (int) (short)565);
      assertArrayEquals(new short[] {(short) (-2920), (short)2, (short) (-847), (short) (-217), (short) (-1), (short)565}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short) (-847);
      objectArray0[5] = (Object) (short)565;
      objectArray0[6] = (Object) (short) (-847);
      objectArray0[7] = (Object) (short) (-847);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)22);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      
      Integer integer0 = new Integer((byte)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2274);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2274, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, (int) (byte)2, (int) (byte)2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1891L);
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 94L;
      longArray0[4] = 2430L;
      longArray0[5] = (-2101L);
      longArray0[6] = (-1564L);
      int int0 = ArrayUtils.indexOf(longArray0, (-1891L));
      assertArrayEquals(new long[] {(-1891L), (-1L), 1L, 94L, 2430L, (-2101L), (-1564L)}, longArray0);
      assertEquals(0, int0);
      assertEquals(7, longArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-2101L);
      objectArray0[1] = (Object) (-1564L);
      objectArray0[2] = (Object) (-2101L);
      objectArray0[3] = (Object) 2430L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1564L);
      ArrayUtils.shift(objectArray0, 0, 0, 7);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[8];
      ArrayUtils.shift((Object[]) characterArray0, (-1554), 133, (-2141227176));
      assertEquals(8, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5, (-302.191092));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Integer integer0 = new Integer((-2));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer integer1 = new Integer((-2141227176));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2141227176), (int)integer1);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer1, (-1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift((char[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3010;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 3010.0;
      objectArray0[1] = (Object) Integer.MAX_VALUE;
      objectArray0[2] = (Object) 3010.0;
      objectArray0[3] = (Object) 3010.0;
      objectArray0[4] = (Object) Integer.MAX_VALUE;
      objectArray0[5] = (Object) Integer.MAX_VALUE;
      objectArray0[6] = (Object) Integer.MAX_VALUE;
      ArrayUtils.shift(objectArray0, 2, 34, (-2236));
      assertEquals(7, objectArray0.length);
      
      Float float0 = new Float(12.0F);
      assertNotNull(float0);
      assertEquals(12.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F, 12.0F, 12.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      longArray0[2] = (long) (-472);
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) 2L;
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1042);
      assertNull(intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'J';
      charArray0[2] = '|';
      charArray0[3] = '\"';
      charArray0[4] = '-';
      charArray0[5] = 'h';
      charArray0[6] = '0';
      charArray0[7] = '8';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'd');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'J', '|', '\"', '-', 'h', '0', '8'}, charArray1);
      assertArrayEquals(new char[] {'Y', 'J', '|', '\"', '-', 'h', '0', '8'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1042, 1042);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) '|';
      ArrayUtils.shift(doubleArray0, (int) (short)2, 68, 1042);
      assertArrayEquals(new double[] {45.0, 89.0, 124.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 2, (double) (short) (-12721));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)2111, 0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short) (-12721);
      longArray0[5] = (long) (short) (-12721);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 2L, (-1L), (-12721L), (-12721L), 0L, 0L, (-1L), 1L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 2L, (-1L), (-12721L), (-12721L), 0L, 0L, (-1L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      
      Integer integer0 = new Integer((-2145513478));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2145513478), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-2145513478), object0);
      
      int int2 = ArrayUtils.hashCode(object0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int1));
      assertFalse(object0.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 2294L;
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 2430);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '\\';
      charArray0[2] = ':';
      charArray0[3] = '#';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'j', '\\', ':', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-66));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 720, (-2449));
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray2));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(7, intArray0.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '^');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)115;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-34));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)0, (byte) (-16), (byte)115}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)115}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) 1258;
      ArrayUtils.shift(floatArray0, (int) (byte) (-16), 460, 746);
      assertArrayEquals(new float[] {94.0F, 1258.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte) (-34);
      objectArray0[1] = (Object) 1258.0F;
      objectArray0[2] = (Object) (byte)115;
      objectArray0[3] = (Object) (byte) (-34);
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) 1258.0F;
      objectArray0[6] = (Object) 1258.0F;
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-34), (byte)0, (byte) (-16), (byte)115}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)115}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3010);
      intArray0[1] = 1;
      Boolean boolean0 = new Boolean("KyZLD][h");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-3010);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-3010);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 869.65969);
      assertArrayEquals(new double[] {1.0, 1.0, (-3010.0), 1.0, 1.0, (-3010.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 79;
      longArray0[1] = 49L;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(longArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1639));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short) (-1639));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1639), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[3]);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      assertEquals(7, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-3211));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-3211), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2146478742);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals(2146478742, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1639), (-1), 2, (-1), (-1), (-3211), 2146478742}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1), (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1639), (-1), 2, (-1), (-1), (-3211), 2146478742}, intArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer3, 2146478742);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer6));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)46;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1457);
      longArray0[1] = (long) (byte)46;
      longArray0[2] = (long) (byte)46;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)46;
      ArrayUtils.swap(longArray0, (int) (byte)0, 132, 540);
      assertArrayEquals(new long[] {(-1457L), 46L, 46L, 0L, 46L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1457));
      assertArrayEquals(new long[] {(-1457L), 46L, 46L, 0L, 46L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 540;
      longArray1[1] = (long) 540;
      longArray1[2] = (long) (-1457);
      longArray1[3] = (long) (-1457);
      longArray1[4] = (long) 132;
      longArray1[5] = (long) 540;
      longArray1[6] = (long) 132;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 540;
      longArray2[1] = (long) 132;
      longArray2[2] = (long) (byte)46;
      longArray2[3] = (long) (-1457);
      boolean boolean2 = ArrayUtils.isSameLength(longArray1, longArray2);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {540L, 540L, (-1457L), (-1457L), 132L, 540L, 132L}, longArray1);
      assertArrayEquals(new long[] {540L, 132L, 46L, (-1457L)}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(boolean2);
      assertEquals(7, longArray1.length);
      assertEquals(4, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1405);
      shortArray0[1] = (short)2890;
      shortArray0[3] = (short) (-2257);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2890, (int) (short) (-2257));
      assertArrayEquals(new short[] {(short) (-1405), (short)2890, (short)0, (short) (-2257)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)2890;
      floatArray0[2] = (float) (short) (-1405);
      floatArray0[3] = (float) (short) (-1405);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (short)2890;
      floatArray0[6] = (float) (short) (-2257);
      floatArray0[7] = (float) (short)2890;
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'L';
      charArray0[4] = '5';
      charArray0[5] = '2';
      charArray0[7] = '*';
      charArray0[8] = 'y';
      ArrayUtils.shift(charArray0, (int) (short) (-2257), (int) (short)3179, (-1));
      assertArrayEquals(new char[] {'*', '*', 'L', '5', '2', '\u0000', '*', 'y', '2'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-841L));
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-3241));
      assertNotNull(integer0);
      assertEquals((-3241), (int)integer0);
      
      Integer integer1 = new Integer((-3241));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3241), (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '&';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      int int0 = ArrayUtils.indexOf(charArray0, '/');
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '&', '/', '/', '/'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-2888), (-3241));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)111;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1154);
      shortArray0[3] = (short) (-2063);
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new short[] {(short)111, (short) (-1), (short) (-1154), (short) (-2063)}, shortArray0);
      assertFalse(boolean2);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'T';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[4] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      
      Byte byte0 = new Byte((byte) (-91));
      assertNotNull(byte0);
      assertEquals((byte) (-91), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-12));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-12), (byte)byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)6, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-12));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-12), (byte)byte3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) classArray1, (int) (byte)6, (-153), 1094);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      doubleArray0[0] = (double) '=';
      Character character0 = Character.valueOf('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {61.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2196));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2196), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2196), (int)integer3);
      assertEquals(8, integerArray0.length);
      
      integerArray0[3] = integer3;
      int int1 = 120;
      Integer integer4 = new Integer(120);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(120, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(120);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(120, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(120);
      assertTrue(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(120, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.valueOf((int) integerArray0[0]);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals((-1), (int)integer7);
      assertEquals(8, integerArray0.length);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '=', (-1282));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shift(charArray1, (-2196), 46, int1);
      assertFalse(int1 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 70;
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      ArrayUtils.shift(charArray0, (-2147483645), 128, (-2147483645));
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1620;
      intArray0[1] = 1620;
      intArray0[2] = (-79);
      intArray0[3] = 8;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 1620;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = 43;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1620);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1620, 1620, (-79), 8, 0, 1620, 0, 0, 43}, intArray0);
      assertArrayEquals(new int[] {1620, (-79), 8, 0, 1620, 0, 0, 43}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1620}, intArray2);
      assertArrayEquals(new int[] {1620, 1620, (-79), 8, 0, 1620, 0, 0, 43}, intArray0);
      assertArrayEquals(new int[] {1620, (-79), 8, 0, 1620, 0, 0, 43}, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(1, intArray2.length);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 55;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-305);
      intArray1[6] = 0;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 55}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-305), 0}, intArray1);
      assertArrayEquals(new int[] {55}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'c';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3787.6331571447627);
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) 'c', 1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 560.0597;
      doubleArray0[2] = 3508.999380670314;
      doubleArray0[3] = (-4208.63);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 88.0;
      doubleArray0[6] = (-1241.4697026331);
      doubleArray0[7] = (-930.48);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-4208.63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 560.0597, 3508.999380670314, (-4208.63), 1.0, 88.0, (-1241.4697026331), (-930.48)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 560.0597, 3508.999380670314, (-4208.63), 1.0, 88.0, (-1241.4697026331), (-930.48), (-4208.63)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-39);
      ArrayUtils.swap(byteArray0, (int) (byte) (-79), (int) (byte)64, (int) (byte)64);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)64, (byte) (-79), (byte) (-39)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1538, 1538);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer((-2991));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2991), (int)integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, integerArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1538);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {1538L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1538;
      intArray0[2] = (-2991);
      intArray0[3] = (-2991);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-2991);
      intArray0[7] = (-1);
      intArray0[8] = (-2991);
      int int2 = ArrayUtils.indexOf(intArray0, (-1), (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {(-1), 1538, (-2991), (-2991), (-1), (-1), (-2991), (-1), (-2991)}, intArray0);
      assertEquals(0, int2);
      assertEquals(9, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = ' ';
      charArray0[2] = '5';
      charArray0[3] = 'K';
      charArray0[4] = 'J';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'r', ' ', '5', 'K', 'J'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 15);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean1);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.reverse((boolean[]) null);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, (-1L));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (-2305), 53, 53);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-1), (byte) (-15)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)42, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 'o';
      intArray0[2] = 125;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-281));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {111, 111, 125}, intArray0);
      assertArrayEquals(new int[] {111, 111, 125}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 946.0911F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-2270.02F));
      assertArrayEquals(new float[] {946.0911F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.shift((byte[]) null, 55, (-2426), 2);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 125;
      longArray0[1] = (long) (-2426);
      longArray0[2] = (long) (-2426);
      longArray0[3] = (long) (-281);
      longArray0[4] = (long) 'o';
      longArray0[5] = (long) 55;
      longArray0[6] = (long) 125;
      int int1 = ArrayUtils.indexOf(longArray0, 125L, 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {125L, (-2426L), (-2426L), (-281L), 111L, 55L, 125L}, longArray0);
      assertEquals(0, int1);
      assertEquals(7, longArray0.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1395));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1395)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 779);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte)49);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(83);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2290L;
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, Integer.MAX_VALUE, (-2145631608), (-1462));
      assertArrayEquals(new long[] {2290L, (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3142);
      shortArray0[2] = (short) (-246);
      shortArray0[3] = (short)26214;
      shortArray0[4] = (short)30552;
      shortArray0[5] = (short)3737;
      shortArray0[6] = (short) (-2603);
      shortArray0[7] = (short) (-3048);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2454));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-3142), (short) (-246), (short)26214, (short)30552, (short)3737, (short) (-2603), (short) (-3048)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3142), (short) (-246), (short)26214, (short)30552, (short)3737, (short) (-2603), (short) (-3048)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short) (-3142), (int) (short)26214, 949);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer integer0 = new Integer(54);
      assertNotNull(integer0);
      assertEquals(54, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "java.lang.Short");
      assertNotNull(string0);
      assertEquals("54", string0);
      
      ArrayUtils.swap(shortArray1, (-3655), (-1061), (int) (short)30552);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-3142), (short) (-246), (short)26214, (short)30552, (short)3737, (short) (-2603), (short) (-3048)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3142), (short) (-246), (short)26214, (short)30552, (short)3737, (short) (-2603), (short) (-3048)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Integer integer0 = new Integer((short) (-7));
      assertNotNull(integer0);
      assertEquals((-7), (int)integer0);
      
      Integer integer1 = new Integer(61);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(61, (int)integer1);
      
      Integer integer2 = new Integer((short) (-7));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-7), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)62;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      doubleArray0[2] = 1410.610662434987;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'D';
      charArray0[2] = '{';
      charArray0[3] = '5';
      charArray0[4] = '?';
      charArray0[5] = 'z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', 'D', '{', '5', '?', 'z'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '5';
      intArray0[1] = (int) 'j';
      intArray0[2] = (int) 'j';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 106, 0);
      assertArrayEquals(new int[] {53, 106, 106}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1681.4, 0.0, 1410.610662434987, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap(floatArray1, (-1056), (-1056), (-1056));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3010;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {3010.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '_';
      charArray0[2] = '{';
      charArray0[3] = 'N';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'=', '_', '{', 'N', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Integer integer0 = new Integer((byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 950);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences((int[]) null, 1625);
      assertNull(intArray1);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(1625);
      assertNotNull(long0);
      assertEquals(1625L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-526L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-526L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1625);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1625L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-529L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-529L), (long)long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1625L, 0L, (-526L), 1625L, (-529L)}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)82);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)0, (double) (byte) (-28));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 305, 960);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.swap(shortArray1, (int) (short)0, (int) (short)0, (-1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-902.48);
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 753.0704444059;
      doubleArray1[5] = (double) (byte) (-28);
      doubleArray1[6] = (double) (short)0;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-902.48), 0.0, (-1.0), (-1.0), 753.0704444059, (-28.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-902.48), 0.0, (-1.0), (-1.0), 753.0704444059, (-28.0), 0.0, 0.0, 30.67132906322425}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 2294L;
      longArray0[4] = 2294L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 2294L, 2294L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      longArray0[2] = (long) (short)3937;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(longArray0, (-33), (int) (short)3937, 16);
      assertArrayEquals(new long[] {2294L, 0L, 2294L, 3937L, 2294L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-33);
      doubleArray0[1] = (double) 2294L;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1212);
      shortArray0[1] = (short)2;
      ArrayUtils.swap(shortArray0, 0, (int) (short)2, (int) (short) (-1212));
      assertArrayEquals(new short[] {(short) (-1212), (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 25, 0, 0);
      assertEquals(3, objectArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.subarray((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (-1), 0);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 2.92016001342302;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) (-1472);
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, 2144411425, 2144411425);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 6);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-1472));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)34, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2140;
      doubleArray0[1] = (double) 2140;
      doubleArray0[2] = 917.4;
      doubleArray0[3] = (double) 2140;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, Double.NaN);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2140.0, 2140.0, 917.4, 2140.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2140.0, 2140.0, 917.4, 2140.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)2;
      ArrayUtils.shift(byteArray0, (-4282), (int) (byte)1, 45);
      assertArrayEquals(new byte[] {(byte) (-113), (byte) (-49), (byte)104, (byte)88, (byte)1, (byte) (-81), (byte)2}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)105;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)65);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)105, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)65, (byte)105, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-74), 1, (int) (byte)105);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte)105, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)105);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(105, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)105);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(105, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte) (-74));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-74), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(93);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(93, (int)integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)105);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1), 105, 105, (-74), 93}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '4';
      ArrayUtils.swap(intArray0, (-1385), Integer.MAX_VALUE, (-1385));
      assertArrayEquals(new int[] {52, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) Integer.MAX_VALUE;
      ArrayUtils.shift(floatArray0, 0, 52, 52);
      assertArrayEquals(new float[] {52.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {52.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, Integer.MAX_VALUE);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {52, 0}, intArray0);
      assertArrayEquals(new int[] {52, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-148));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-148)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '}';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '1');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'3', '3', '3', '3', '}'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, charArray0.length);
      
      ArrayUtils.swap(charArray0, 80, 80, 21);
      assertArrayEquals(new char[] {'3', '3', '3', '3', '}'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 921L);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(charArray0, (-1), 127);
      assertArrayEquals(new char[] {'}', '3', '3', '3', '3'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2316L);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-2316L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-2316L)}, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Integer integer0 = new Integer((-2458));
      assertNotNull(integer0);
      assertEquals((-2458), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-2458), object0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2458));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2316L);
      floatArray0[1] = (float) (-2458);
      floatArray0[2] = (float) (-2458);
      floatArray0[3] = (float) (-2458);
      floatArray0[4] = (float) (-2316L);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-2316L);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-98));
      assertNotNull(byte0);
      assertEquals((byte) (-98), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-98));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-98), (byte)byte1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-98));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-98));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      ArrayUtils.shift((float[]) null, (-5114));
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray1);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, floatArray1.length);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean2);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)64;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)64);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)44, (byte) (-1), (byte)19, (byte) (-1), (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)44, (byte) (-1), (byte)19, (byte) (-1), (byte)64}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)64;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1L), 64L}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)44;
      floatArray0[1] = (float) (-1L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)64, 2);
      assertArrayEquals(new float[] {44.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte) (-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(69);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(69, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3377));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-3377), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-3377), (int)integer3);
      assertEquals(4, integerArray0.length);
      
      integerArray0[3] = integer3;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (int) 64, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 2430);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-657.0593), (double) (byte)98);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) 2430, (int) (byte)98);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      MutableInt mutableInt0 = new MutableInt((int) (byte)98);
      assertNotNull(mutableInt0);
      assertEquals(98, (int)mutableInt0.getValue());
      assertEquals(98, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(98.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)98, mutableInt0.shortValue());
      assertEquals(98L, mutableInt0.longValue());
      assertEquals(98, mutableInt0.intValue());
      assertEquals("98", mutableInt0.toString());
      assertEquals(98.0, mutableInt0.doubleValue(), 0.01);
      
      Integer integer1 = mutableInt0.getValue();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(98, (int)mutableInt0.getValue());
      assertEquals(98, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(98.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)98, mutableInt0.shortValue());
      assertEquals(98L, mutableInt0.longValue());
      assertEquals(98, mutableInt0.intValue());
      assertEquals("98", mutableInt0.toString());
      assertEquals(98.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(98, (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertEquals(98, (int)mutableInt0.getValue());
      assertEquals(98, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(98.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)98, mutableInt0.shortValue());
      assertEquals(98L, mutableInt0.longValue());
      assertEquals(98, mutableInt0.intValue());
      assertEquals("98", mutableInt0.toString());
      assertEquals(98.0, mutableInt0.doubleValue(), 0.01);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Integer integer3 = new Integer(3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer1);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertEquals(98, (int)mutableInt0.getValue());
      assertEquals(98, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(98.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)98, mutableInt0.shortValue());
      assertEquals(98L, mutableInt0.longValue());
      assertEquals(98, mutableInt0.intValue());
      assertEquals("98", mutableInt0.toString());
      assertEquals(98.0, mutableInt0.doubleValue(), 0.01);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, 2, 4);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) (-2530);
      shortArray0[3] = (short) (-649);
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2530), (short) (-649)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2530), (short) (-649), (short)0, (short)0, (short) (-2530), (short) (-649)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2530);
      doubleArray0[1] = (double) (byte) (-38);
      doubleArray0[2] = (double) (short) (-472);
      doubleArray0[3] = (double) (byte)1;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2530.0), (-38.0), (-472.0), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-3178));
      assertNotNull(integer0);
      assertEquals((-3178), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int)  (-38), 1624);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)510;
      shortArray0[4] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (-2394));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)510, (short)1}, shortArray0);
      assertEquals(0, int0);
      assertEquals(5, shortArray0.length);
      
      Integer integer0 = new Integer((-750));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-750), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      MutableInt mutableInt0 = new MutableInt(Integer.MAX_VALUE);
      assertNotNull(mutableInt0);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      
      Integer integer1 = mutableInt0.getValue();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer((-1423));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1423), (int)integer2);
      
      Integer integer3 = new Integer((short)1);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      
      Integer integer4 = new Integer(1136);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1136, (int)integer4);
      
      Integer integer5 = new Integer(1);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals(2147483647L, mutableInt0.longValue());
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, (-1), (int) 510);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 2294L;
      longArray0[4] = 2294L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 2294L, 2294L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      longArray0[2] = (long) (short)3937;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(longArray0, (-33), (int) (short)3937, (-2896));
      assertArrayEquals(new long[] {2294L, 3937L, 2294L, 2294L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-33);
      doubleArray0[1] = (double) 2294L;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3937L;
      floatArray0[1] = (float) (short)3937;
      floatArray0[2] = (float) (-33);
      floatArray0[3] = (float) 2294L;
      floatArray0[4] = (float) (short)3937;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 2294L, (-2896));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3937.0F, 3937.0F, (-33.0F), 2294.0F, 3937.0F}, floatArray0, 0.01F);
      assertEquals("{3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-29);
      intArray0[1] = (int) (short)3937;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-29));
      assertArrayEquals(new int[] {(-29), 3937}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 1362, 16);
      assertNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 8L);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.reverse((long[]) null, 2433, 16);
      byte[] byteArray0 = ArrayUtils.insert(2146089178, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 9, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(830, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int[] intArray0 = new int[14];
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[1] = boolean0;
      ArrayUtils.shift(intArray0, 0, 673, 0);
      assertEquals(14, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-44), (-2108));
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle((Object[]) booleanArray0);
      assertEquals(5, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      charArray0[2] = '9';
      charArray0[3] = 'A';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 82);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L', 'A', '9', 'A'}, charArray0);
      assertArrayEquals(new char[] {'L', 'A', '9', 'A'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNotNull(object2);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = object2;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 2523.03;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (-2720.33213);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1582.2560482), 3626, (double) 1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {1.0, 1.0, 2523.03, 1.0, (-2720.33213)}, doubleArray0, 0.01);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1586.776810476334);
      doubleArray0[3] = (-123.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 1003.56180667177;
      doubleArray0[6] = (-1275.63);
      doubleArray0[7] = 279.9186541;
      doubleArray0[8] = 2789.016984629391;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1586.776810476334), (-123.0), Double.NaN, 1003.56180667177, (-1275.63), 279.9186541, 2789.016984629391}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2942L;
      longArray0[1] = 1741L;
      longArray0[2] = (-49L);
      longArray0[3] = 2654L;
      longArray0[4] = (-671L);
      longArray0[5] = (-34L);
      longArray0[6] = (-2261L);
      longArray0[7] = 629L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-49L), (-2260));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2942L, 1741L, (-49L), 2654L, (-671L), (-34L), (-2261L), 629L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2111, 2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      ArrayUtils.swap(intArray0, 0, 880, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-102);
      ArrayUtils.shift(floatArray0, (-3291), 0, 1);
      assertArrayEquals(new float[] {(-102.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)949;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)949}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      Byte byte0 = new Byte((byte) (-47));
      assertNotNull(byte0);
      assertEquals((byte) (-47), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-47));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-47), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-47));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-47), (byte)byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-47), (byte) (-47), (byte) (-47)}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)949;
      floatArray0[1] = (float) '{';
      floatArray0[2] = (float) (short)2776;
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (short)949;
      floatArray0[5] = (float) (short)2776;
      floatArray0[6] = (float) (byte) (-47);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 3465);
      assertArrayEquals(new float[] {949.0F, 123.0F, 2776.0F, 123.0F, 949.0F, 2776.0F, (-47.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray2 = ArrayUtils.insert((-1727), doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '5';
      charArray0[5] = '$';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '5', '\u0000', '\u0000', '\u0000', '$'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(byteArray1, 1, (int) (byte)46, 97);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)46, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((byte)46);
      assertNotNull(double0);
      assertEquals(46.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-4658.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4658.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-663.5284954435673));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-663.5284954435673), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(46.0, (double)double3, 0.01);
      assertEquals(8, doubleArray0.length);
      
      doubleArray0[3] = double3;
      try { 
        Double.valueOf("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 7);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Long long0 = new Long(49);
      assertNotNull(long0);
      assertEquals(49L, (long)long0);
      
      Long long1 = new Long((-423L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-423L), (long)long1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer((-1433));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1433), (int)integer1);
      
      Integer integer2 = ArrayUtils.get((Integer[]) null, 2359, integer0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(7, (int)integer2);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) floatArray1, (Object) integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, '4');
      assertNull(charArray1);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0, (double) (byte)0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 1672);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, object0, 0);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[3] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[4] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-1), 1362);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) classArray0, "XK9'w%Bn#pj");
      assertNotNull(stringArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Integer integer0 = new Integer((-5539));
      assertNotNull(integer0);
      assertEquals((-5539), (int)integer0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) 'o');
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {111}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean3);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-5539);
      longArray0[1] = (long) 'o';
      longArray0[2] = (-1278L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'o';
      longArray0[5] = (long) 'o';
      ArrayUtils.shift(longArray0, (-5539), 4, 4);
      assertArrayEquals(new long[] {(-5539L), 111L, (-1278L), (-1L), 111L, 111L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)15;
      Byte byte1 = new Byte((byte)15);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)15, (byte)byte1);
      
      int int0 = (-2887);
      ArrayUtils.shift((Object[]) byteArray0, (-2887), 99, 99);
      assertEquals(8, byteArray0.length);
      
      int int1 = 3;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2887), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2887, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = Integer.getInteger("[wW%1|7R.sESG56Q;", (-45));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-45), (int)integer1);
      
      Integer integer2 = new Integer(2555);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2555, (int)integer2);
      
      Integer integer3 = new Integer((-782));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-782), (int)integer3);
      
      Integer integer4 = new Integer(556);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(556, (int)integer4);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2555;
      floatArray0[1] = (float) 2555;
      floatArray0[2] = (float) (-45);
      floatArray0[3] = (float) (-39);
      floatArray0[4] = (float) 2419;
      floatArray0[5] = (float) 921L;
      floatArray0[6] = (float) 2555;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2555.0F, 2555.0F, (-45.0F), (-39.0F), 2419.0F, 921.0F, 2555.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2555.0F, 2555.0F, (-45.0F), (-39.0F), 2419.0F, 921.0F, 2555.0F}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 78, 863, (-1310));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)0, 2, (-1310));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)66;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)66, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, 1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 78;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0, (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 78.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'J';
      charArray0[2] = ':';
      ArrayUtils.shift(charArray0, (-2501), 1073741824, (-3835));
      assertArrayEquals(new char[] {'J', ':', 'c'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Integer integer0 = new Integer((short)8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer(61);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(61, (int)integer1);
      
      Integer integer2 = new Integer((short)8);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(8, (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      boolean[] booleanArray0 = new boolean[2];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1169.3F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1169.3F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)58;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-51), (byte) (-48), (byte)62, (byte)33, (byte)89, (byte) (-1), (byte)58}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 'H';
      charArray0[2] = 'b';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      charArray0[5] = '*';
      charArray0[6] = '2';
      ArrayUtils.shift(charArray0, (int) (byte) (-51), 1839, (int) (byte)62);
      assertArrayEquals(new char[] {'H', 'b', '>', 'y', '*', '2', '+'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4]);
      assertEquals(0, int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-74));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-74), (byte)byte1);
      
      Byte byte2 = new Byte((byte)49);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)49, (byte)byte2);
      
      Byte byte3 = new Byte((byte)52);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)52, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      Byte byte4 = new Byte((byte)52);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)52, (byte)byte4);
      
      byteArray0[1] = byte4;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte)52, (byte) (-74)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0, 2, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3644);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-841), (-3644));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-3644)}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-3644);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      ArrayUtils.swap(byteArray0, (int) (byte) (-31), (int) (byte) (-31), (-3644));
      assertArrayEquals(new byte[] {(byte) (-31)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1169.3F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 1169.3F;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 1169.3F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, (-1874));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {9.0, 1169.300048828125, 9.0, 1169.300048828125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)49;
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), (-641), 1109);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte) (-52), (byte)117, (byte) (-1), (byte)49}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-112));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-112), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)2030);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)2030, (short)short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      short[] shortArray0 = new short[4];
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      char[] charArray1 = ArrayUtils.insert((int) (byte)0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$'}, charArray0);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$', '$', '$', '$'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)1, 4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)12);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)12, (int) (short)12);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0, (-583));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = 'M';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'M');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', 'M'}, charArray0);
      assertArrayEquals(new char[] {'4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      Integer integer0 = new Integer(116);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(116, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '4';
      int int1 = ArrayUtils.indexOf(charArray2, 'M');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'4'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray2.length);
      
      int int2 = ArrayUtils.indexOf(charArray2, '<', (-1539));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'4'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals((-1), int2);
      assertEquals(1, charArray2.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1275.63));
      assertNotNull(double0);
      assertEquals((-1275.63), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.5, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1228L);
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2627));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1228L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1228L), 0L, 0L, (-1228L), 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap((Object[]) null, (-2627), (-2627), 36);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((boolean[]) null, (-1972));
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '@';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1229, (-1972));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', '@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1229);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean2 = Boolean.valueOf("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("java.lang.Integer");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1), (byte) (-35));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = 'Q';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) '-';
      intArray0[4] = (int) (byte)89;
      intArray0[5] = (int) (byte)89;
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) '-';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 5.007003);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007003}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1646), (-1087));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-3017.7));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2387;
      intArray0[1] = 41;
      intArray0[2] = (-357);
      intArray0[3] = (-1082);
      intArray0[4] = 362;
      intArray0[5] = 0;
      intArray0[6] = 127;
      intArray0[7] = (-1591);
      intArray0[8] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2387, 41, (-357), (-1082), 362, 0, 127, (-1591), Integer.MAX_VALUE}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1538, (-443));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer((-443));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-443), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-443);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1538;
      doubleArray0[4] = (double) 1538;
      doubleArray0[5] = (double) 1538;
      doubleArray0[6] = (double) (-443);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-443.0), (-1.0), 1538.0, 1538.0, 1538.0, (-443.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Integer[] integerArray2 = ArrayUtils.subarray(integerArray0, (-443), (-1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray2.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1539L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'M';
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = new Character('}');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      
      ArrayUtils.shift((char[]) null, 2);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, 2, 2);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 5.007002625289575);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007002625289575}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      Float float0 = new Float((-1382.1047F));
      assertNotNull(float0);
      assertEquals((-1382.1047F), (float)float0, 0.01F);
      
      Double[] doubleArray3 = ArrayUtils.toObject(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007002625289575}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(6780);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(6780, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1104);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1104, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[1], (int) integerArray0[1]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[2] = (float) (byte)109;
      floatArray0[3] = (float) (byte)109;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)109;
      floatArray1[1] = (float) (byte)109;
      floatArray1[3] = (float) (byte)109;
      Boolean boolean0 = new Boolean("java.lang.Object");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'f';
      charArray0[2] = 'k';
      charArray0[3] = '\'';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'3', 'f', 'k', '\''}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, booleanArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Integer integer0 = new Integer((byte)109);
      assertNotNull(integer0);
      assertEquals(109, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      Integer integer1 = new Integer((byte)109);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(109, (int)integer1);
      
      Integer integer2 = new Integer((byte)109);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer2);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleImmutableEntryArray0, 47, 2);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 1.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Integer integer0 = new Integer(2144);
      assertNotNull(integer0);
      assertEquals(2144, (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("java.lang.Object", 729);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(729, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf((-1212));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1212), (int)integer2);
      
      Integer integer3 = Integer.getInteger("(3YYu[D$c8`T[\u0000", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1212), (int)integer3);
      
      integerArray0[2] = integer3;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-200));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences((int[]) null, 46);
      assertNull(intArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) integerArray0[5]);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(7, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-510));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3222.816F;
      floatArray0[1] = (-1.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 3222.816F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2411;
      intArray0[1] = 98;
      intArray0[2] = 50;
      intArray0[3] = (-2643);
      intArray0[4] = (-1195);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2411, 98, 50, (-2643), (-1195)}, intArray0);
      assertArrayEquals(new int[] {2411, 98, 50, (-2643), (-1195)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      Integer integer0 = new Integer((-2643));
      assertNotNull(integer0);
      assertEquals((-2643), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 50;
      longArray0[1] = (long) 2411;
      longArray0[2] = (long) 1;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 762L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {762L, 50L, 2411L, 1L}, longArray1);
      assertArrayEquals(new long[] {50L, 2411L, 1L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, (-2643), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2643, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3017.7);
      doubleArray0[1] = (double) (short)908;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '3');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)908;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)908);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {908L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      ArrayUtils.shift((short[]) null, (-2075), (-2075), 89);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 4, (int) '.');
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 4, 4, 116);
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Short short0 = new Short((short)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 959.9529F);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 959.952880859375, (-138.665465237655), 0.0, 959.952880859375}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 959.952880859375, (-138.665465237655), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(5240);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(5240, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      IntStream intStream1 = mockRandom0.ints();
      assertFalse(intStream1.equals((Object)intStream0));
      assertNotNull(intStream1);
      assertNotSame(intStream1, intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1216.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[3] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[4] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2082;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 2082;
      ArrayUtils.shift(intArray0, (int) (byte)0, 122, 0);
      assertArrayEquals(new int[] {2082, 0, 0, 0, 0, (-1), (-1), (-1), 2082}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.shift(byteArray0, 2760, (int) (byte)0, 102);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-2145807558), 298, (-2154));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[3] = 0L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-825L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 3230);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(1, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 3230, 51, 3529.6);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 3529.6);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)59;
      shortArray0[3] = (short) (byte)59;
      shortArray0[4] = (short) (byte)59;
      shortArray0[5] = (short)2582;
      shortArray0[6] = (short)53;
      shortArray0[7] = (short) (byte)59;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1911));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59, (short)2582, (short)53, (short)59}, shortArray0);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)59, (short)59, (short)59, (short)2582, (short)53, (short)59, (short) (-1911)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2204L);
      longArray0[1] = 1L;
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1512;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short)1512;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)39;
      shortArray0[6] = (short)625;
      shortArray0[7] = (short)1381;
      ArrayUtils.shift(shortArray0, (-387), 126, (-387));
      assertArrayEquals(new short[] {(short)1512, (short) (-1), (short)39, (short)625, (short)1381, (short)1512, (short)4, (short)98}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-38);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-38);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-38), (short) (-1), (short)0, (short)0, (short) (-38), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-38), (short)0, (short)0, (short) (-38), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (byte) (-38));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-38), (short) (-1), (short)0, (short)0, (short) (-38), (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, int0);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (byte)1, (-1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-38), (short) (-1), (short)0, (short)0, (short) (-38), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      Character character1 = new Character('[');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('[', (char)character1);
      
      ArrayUtils.shift((char[]) null, 2349);
      ArrayUtils.shift((char[]) null, 626, (-34), (-2263));
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-2147483645), 0, 0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-49);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-49)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-49)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-34);
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-34.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-34.0), 0.0, (-34.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-147);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-147), (int) (short)1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1, (short) (-147)}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      
      Double double0 = new Double((short)1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(373.18673042);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(373.18673042, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short)0;
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'e');
      assertNull(charArray0);
      
      ArrayUtils.shift((char[]) null, 662);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = new int[1];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1763);
      ArrayUtils.shift(shortArray0, (int) (short) (-1763), 3510, (int) (short) (-1763));
      assertArrayEquals(new short[] {(short) (-1763)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-20028);
      shortArray1[1] = (short)17;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-20028), (short)17}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Integer integer0 = new Integer((-4406));
      assertNotNull(integer0);
      assertEquals((-4406), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Long[] longArray0 = new Long[8];
      long long0 = 75L;
      Long long1 = new Long(75L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(75L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(6L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(6L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(75L);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(75L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(2594L);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(2594L, (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long0);
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals(75L, (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long(10L);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals(10L, (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(2594L);
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long6));
      assertNotNull(long7);
      assertEquals(2594L, (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long(908L);
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long2));
      assertNotNull(long8);
      assertEquals(908L, (long)long8);
      
      longArray0[7] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {75L, 6L, 75L, 2594L, 75L, 10L, 2594L, 908L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      Integer integer0 = new Integer(65);
      assertNotNull(integer0);
      assertEquals(65, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1356.74987549);
      assertNotNull(double0);
      assertEquals(1356.74987549, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-247.96128293000285));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-247.96128293000285), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-247.96128293000285), (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(4668.73569);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(4668.73569, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1747.260095));
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals((-1747.260095), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(29.0);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(29.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 659.3481826);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1356.74987549, (-247.96128293000285), (-247.96128293000285), 4668.73569, (-1747.260095), 29.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)27;
      ArrayUtils.swap(byteArray0, 1189, (int) (byte)1, (int) (byte) (-11));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)39, (byte) (-1), (byte) (-84), (byte) (-11), (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byte0;
      Integer integer0 = new Integer((-65));
      assertNotNull(integer0);
      assertEquals((-65), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      ArrayUtils.swap(byteArray1, 0, 264, (int) byte0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)85;
      ArrayUtils.swap(byteArray0, (int) (byte)58, (int) (byte)85, (int) (byte)58);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte)85, (byte)58, (byte)85}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      Integer integer0 = new Integer(3083);
      assertNotNull(integer0);
      assertEquals(3083, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, 2);
      assertArrayEquals(new float[] {(-80.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(4, floatArray0.length);
      
      Double double0 = new Double((byte) (-80));
      assertNotNull(double0);
      assertEquals((-80.0), (double)double0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-80);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-80);
      shortArray0[5] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (int) (byte)0, (int) (byte) (-80), (-5450));
      assertArrayEquals(new short[] {(short)0, (short) (-80), (short)0, (short)0, (short) (-80), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-3117));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-3117)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-657.0593);
      doubleArray0[1] = (-1153.516894);
      doubleArray0[2] = (-657.0593);
      doubleArray0[3] = (-1153.516894);
      doubleArray0[4] = (-657.0593);
      doubleArray0[5] = (-1153.516894);
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {(-657.0593), (-1153.516894), (-657.0593), (-1153.516894), (-657.0593), (-1153.516894)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = Character.toChars(10);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\n'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-547.9F);
      doubleArray2[1] = 1823.26;
      doubleArray2[2] = (-1153.516894);
      doubleArray2[3] = (double) (-547.9F);
      doubleArray2[4] = (-657.0593);
      doubleArray2[5] = Double.NaN;
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-657.0593), (-1153.516894), (-657.0593), (-1153.516894), (-657.0593), (-1153.516894)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-657.0593), (-1153.516894), (-657.0593), (-1153.516894)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-547.9000244140625), 1823.26, (-1153.516894), (-547.9000244140625), (-657.0593), Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = (-3010);
      intArray0[4] = 1;
      intArray0[2] = 1;
      intArray0[2] = 10;
      intArray0[4] = (-1273);
      ArrayUtils.reverse(intArray0, 128, 1);
      assertArrayEquals(new int[] {0, 0, 10, 0, (-1273)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-3010));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer integer0 = new Integer((-2494));
      assertNotNull(integer0);
      assertEquals((-2494), (int)integer0);
      
      Integer integer1 = new Integer((-1215));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1215), (int)integer1);
      
      ArrayUtils.hashCode((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, 17);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-291.062963);
      doubleArray0[3] = (double) (-1273);
      doubleArray0[4] = (double) (-1273);
      doubleArray0[5] = (double) (-1273);
      doubleArray0[6] = (double) (-1273);
      doubleArray0[7] = (double) (-1215);
      doubleArray0[8] = (double) (-1273);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {17.0, 1.0, (-291.062963), (-1273.0), (-1273.0), (-1273.0), (-1273.0), (-1215.0), (-1273.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-49);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-49)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-49), (byte)0, (byte) (-34), (byte) (-49)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '=');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1824);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1824}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, 2, 1824);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      Short short0 = new Short((short) (-698));
      assertNotNull(short0);
      assertEquals((short) (-698), (short)short0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-18214);
      shortArray0[1] = (short) (-698);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2965);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-18214), (short) (-698)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-18214), (short) (-698), (short)2965}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      Integer integer0 = new Integer((short) (-18214));
      assertNotNull(integer0);
      assertEquals((-18214), (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = ArrayUtils.get(integerArray0, 1136);
      assertNull(integer1);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 84);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {84}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2597);
      doubleArray0[1] = (double) '\u0000';
      ArrayUtils.swap(doubleArray0, (-1), (-1), 3593);
      assertArrayEquals(new double[] {(-2597.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, 982, (-1), Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-2597);
      longArray0[2] = (long) (-4579);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2597L), (-4579L)}, longArray1);
      assertArrayEquals(new long[] {2L, (-2597L), (-4579L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (-1928));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'T';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      Byte byte0 = new Byte((byte) (-91));
      assertNotNull(byte0);
      assertEquals((byte) (-91), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-12));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-12), (byte)byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)6, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-12));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-12), (byte)byte3);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'j';
      charArray1[1] = 'j';
      charArray1[2] = 'j';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'j', 'j', 'j'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-91));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-12), (byte) (-12), (byte) (-12), (byte) (-66)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12), (byte) (-12), (byte) (-66)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2013.0;
      doubleArray0[1] = (double) 'j';
      doubleArray0[2] = (double) (byte) (-12);
      doubleArray0[3] = (double) (byte) (-12);
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (byte) (-12);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3103.176839990557, 3056.746207);
      assertArrayEquals(new double[] {2013.0, 106.0, (-12.0), (-12.0), 77.0, Double.NaN, (-12.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      int[] intArray0 = new int[14];
      ArrayUtils.swap(intArray0, (int) '\u001B', (-1385), (-1385));
      assertEquals(14, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 461);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-39), 509);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-39), (byte)7, (byte) (-103), (byte)17, (byte)2, (byte) (-25), (byte)97, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-39), (byte)7, (byte) (-103), (byte)17, (byte)2, (byte) (-25), (byte)97, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)25054);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2507, (-2663));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (short)1, (int) (short)1);
      assertNull(charArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)88, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short)25054;
      shortArray1[1] = (short) (-1336);
      shortArray1[2] = (short) (byte)4;
      ArrayUtils.shift(shortArray1, (int) (short)1, 2507, (int) (short)1);
      assertArrayEquals(new short[] {(short)25054, (short)4, (short) (-1336)}, shortArray1);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = true;
      long[] longArray0 = new long[1];
      longArray0[0] = (-239L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-239L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-249);
      intArray0[2] = (-249);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 2082;
      intArray0[5] = (-249);
      intArray0[6] = (-249);
      ArrayUtils.shift(intArray0, (-249), Integer.MAX_VALUE, (-249));
      assertArrayEquals(new int[] {2082, (-249), (-249), Integer.MAX_VALUE, (-249), (-249), Integer.MAX_VALUE}, intArray0);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1820), 0, 13);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      ArrayUtils.shift((boolean[]) null, 2640, (-1343), (-1));
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 779);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte)49);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2640, 0, (-4));
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)11);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 2640);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)49);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)49);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, (Integer) Integer.MAX_VALUE);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, 2);
      assertArrayEquals(new float[] {(-80.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      assertEquals(4, floatArray0.length);
      
      Double double0 = new Double((byte) (-80));
      assertNotNull(double0);
      assertEquals((-80.0), (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-44));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-44.0), (double)double1, 0.01);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte) (-44));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-80), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-80), (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-958L);
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-44);
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 0L, (-958L), 2L, 0L, (-44L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L, (-958L), 2L, 0L, (-44L), 0L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2204L;
      longArray0[2] = 1958L;
      longArray0[3] = 2204L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2204L, 1958L, 2204L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      ArrayUtils.shift(longArray0, 1054);
      assertArrayEquals(new long[] {2204L, 1958L, 2204L, 1958L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {2204L, 1958L, 2204L, 1958L, 0L}, longArray0);
      assertFalse(boolean1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = '*';
      charArray0[2] = '{';
      charArray0[3] = 'd';
      charArray0[4] = 'D';
      charArray0[5] = '>';
      charArray0[6] = '}';
      charArray0[7] = 'I';
      char[] charArray1 = ArrayUtils.add(charArray0, '{');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'r', '*', '{', 'd', 'D', '>', '}', 'I', '{'}, charArray1);
      assertArrayEquals(new char[] {'r', '*', '{', 'd', 'D', '>', '}', 'I'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-825L), (-17L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-825L), (-825L), (-17L), 0L, 0L, 0L, (-17L), 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      ArrayUtils.shift(longArray1, (-2143874430), 18, 389);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-825L), (-17L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-825L), (-17L), 0L, 0L, 0L, (-17L), 0L, 0L, 0L, (-825L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Double double0 = new Double((short)1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)1;
      doubleArray2[1] = (-407.32);
      doubleArray2[2] = (double) (short)1;
      doubleArray2[3] = (double) (short)1;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double[] doubleArray4 = ArrayUtils.removeElements(doubleArray2, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {1.0, (-407.32), 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, (-407.32), 1.0, 1.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(4, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      
      double[] doubleArray5 = ArrayUtils.removeElement(doubleArray3, 12.0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray5.length);
      
      Integer integer0 = new Integer(98);
      assertNotNull(integer0);
      assertEquals(98, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-844.2752F);
      floatArray0[1] = Float.NaN;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) Float.NaN;
      floatArray1[1] = (Float) (-844.2752F);
      floatArray1[2] = (Float) (-844.2752F);
      floatArray1[3] = (Float) Float.NaN;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      
      ArrayUtils.swap((int[]) null, (-80), 2, (-80));
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) floatArray1[1], 2, Double.NaN);
      assertSame(floatArray1, floatArray2);
      assertEquals((-1), int0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)38;
      Byte byte1 = new Byte((byte)38);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)38, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)38, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)38, (byte)byte3);
      
      byteArray0[2] = byte3;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)38;
      longArray0[1] = (long) byte0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 38L;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) 38L;
      doubleArray0[4] = (double) 38L;
      ArrayUtils.shift(doubleArray0, (int) byte0);
      assertArrayEquals(new double[] {38.0, 38.0, 38.0, 38.0, 38.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte0, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      long[] longArray0 = new long[21];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[3] = 0L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(21, longArray0.length);
      assertEquals(21, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-825L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 3230);
      assertEquals(21, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 2713, (-1226));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1958L;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0L;
      ArrayUtils.swap(floatArray0, (-1), (-1), (-1));
      assertArrayEquals(new float[] {1958.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 100;
      ArrayUtils.shift(floatArray0, (-386), 2985, 2985);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Short short0 = new Short((short)399);
      assertNotNull(short0);
      assertEquals((short)399, (short)short0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-246);
      intArray0[1] = (-443);
      intArray0[2] = (int) '4';
      intArray0[3] = (-443);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-246), (-443), 52, (-443)}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((Object[]) integerArray1, 11, 3387);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-1367), 4);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2057.944F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-1688), 2, (-1688));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      char char0 = '6';
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 0L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-2141227176));
      assertNotNull(integer0);
      assertEquals((-2141227176), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted((Integer[]) null, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      ArrayUtils.swap((Object[]) null, 2, (-1042), (-1042));
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[4] = (float) 'i';
      floatArray0[1] = (float) 'M';
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 105.0F;
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) (short) (-670);
      doubleArray0[3] = (double) 'M';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3915), 1155);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {105.0, 77.0, (-670.0), 77.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {105.0, 77.0, (-670.0), 77.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray0));
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)97;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)97, (int) (short) (-2603));
      assertTrue(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      ArrayUtils.reverse((int[]) null, (-1695), 1651);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, (int) (short)97);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.insert((-1138), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1445, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-3017.7);
      byte byte0 = (byte)78;
      Byte byte1 = new Byte((byte)78);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)78, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3882), (int) byte0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (-3882));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {78.0F, 78.0F, (-3882.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)48);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '6');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)1, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)1, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '^');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-413.8617375763494);
      doubleArray0[2] = (-737.0);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-413.8617375763494));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-413.8617375763494), (-737.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-413.8617375763494), 1.0, (-413.8617375763494), (-737.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)82, (byte)96, (byte)50, (byte) (-1), (byte)6, (byte) (-1), (byte)2, (byte) (-18)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(16, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      long[] longArray0 = new long[4];
      longArray0[0] = (-55L);
      longArray0[1] = (long) 9;
      longArray0[2] = (long) 1376;
      intArray0[2] = 9;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 49L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-55L), 9L, 1376L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-55L), 9L, 1376L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 37, 2, 9);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1376, 104);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {9, 0, 9, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-96L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)2058;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)2058;
      shortArray0[8] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, 2);
      assertArrayEquals(new short[] {(short)0, (short)2058, (short)0, (short)0, (short)0, (short)0, (short)2058, (short)0, (short)0}, shortArray0);
      assertEquals(2, int0);
      assertEquals(9, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, (-731));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2058, (short)0, (short)0, (short)0, (short)0, (short)2058, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      Character character0 = new Character('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      Character character1 = new Character('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      ArrayUtils.shift((char[]) null, 2146874561);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 0.0;
      Object object2 = ArrayUtils.get(objectArray0, 2406, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertEquals(3, objectArray0.length);
      
      Object object3 = ArrayUtils.get(objectArray0, 122);
      assertNull(object3);
      assertEquals(3, objectArray0.length);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '{';
      charArray0[2] = 'l';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'P', '{', 'l'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 3340);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2430, 2430);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'q');
      assertArrayEquals(new char[] {'q', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) 2430;
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) 'q';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-2901.564912763348));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2430.0, 113.0, (-1.0), 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2430.0, 113.0, (-1.0), 113.0, (-2901.564912763348)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer integer0 = new Integer(844);
      assertNotNull(integer0);
      assertEquals(844, (int)integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 319);
      assertNull(intArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (double) 2146725890);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 2430.0, 113.0, (-1.0), 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2430.0, 113.0, (-1.0), 113.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2146158857);
      floatArray0[1] = 562.919F;
      floatArray0[2] = (float) 2430;
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = (float) (-2146158857);
      floatArray0[6] = (float) 319;
      floatArray0[7] = (float) 319;
      floatArray0[8] = (float) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146158857), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146158857, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Integer integer0 = new Integer((-523));
      assertNotNull(integer0);
      assertEquals((-523), (int)integer0);
      
      Integer integer1 = new Integer(2145097956);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2145097956, (int)integer1);
      
      long[] longArray0 = new long[10];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 30L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, 'n');
      assertArrayEquals(new char[] {'n', 'n'}, charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-172);
      shortArray0[1] = (short) (-1629);
      shortArray0[2] = (short)8;
      ArrayUtils.swap(shortArray0, (-1329), 1, (-4566));
      assertArrayEquals(new short[] {(short) (-172), (short) (-1629), (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[3] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[4] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-46));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-46), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-46);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1238);
      intArray0[6] = (int) (byte) (-1);
      ArrayUtils.swap(intArray0, (int) (byte)0, (int) (byte)0, 364);
      assertArrayEquals(new int[] {(-46), 0, 0, 0, 0, (-1238), (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)0, (double) (byte)34);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 311, 947);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)34, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      short[] shortArray0 = new short[8];
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {(-1901L), 0L, 0L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-472);
      intArray0[1] = (-472);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1869L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-472L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Short[] shortArray1 = new Short[7];
      Short short0 = new Short((short)823);
      assertNotNull(short0);
      assertEquals((short)823, (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short) (-1472));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-1472), (short)short3);
      
      shortArray1[3] = short3;
      short short4 = (short)61;
      Short short5 = new Short((short)61);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short)61, (short)short5);
      
      shortArray1[4] = short5;
      Short short6 = new Short(short4);
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      assertEquals((short)61, (short)short6);
      
      shortArray1[5] = short6;
      Short short7 = new Short(short4);
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertNotNull(short7);
      assertEquals((short)61, (short)short7);
      
      shortArray1[6] = short7;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1472));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)823, (short)0, (short)0, (short) (-1472), (short)61, (short)61, (short)61}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (-2530);
      short[] shortArray1 = ArrayUtils.insert((int) (byte)1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3, (short)1, (short) (-2530)}, shortArray0);
      assertArrayEquals(new short[] {(short)3, (short)3, (short)1, (short) (-2530), (short)1, (short) (-2530)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse((boolean[]) null, 521, 10);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 521;
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) '?';
      longArray0[4] = (long) 10;
      longArray0[5] = (long) '?';
      longArray0[6] = (long) '?';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 10, 82);
      assertArrayEquals(new long[] {521L, 63L, 63L, 63L, 10L, 63L, 63L}, longArray0);
      assertEquals(4, int0);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      ArrayUtils.shift(doubleArray0, 1766);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-865), 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Integer integer0 = new Integer((-865));
      assertNotNull(integer0);
      assertEquals((-865), (int)integer0);
      
      Integer integer1 = new Integer(52);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(52, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      try { 
        Integer.valueOf("java.lang.Integer", 1936);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1936 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      Character character0 = new Character('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)3179);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((byte[]) null, (int) (short)3179, (int) (short)3179);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2574);
      shortArray0[1] = (short)3179;
      shortArray0[2] = (short)3179;
      shortArray0[3] = (short)3179;
      shortArray0[4] = (short)3179;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)3179, (short)3179, (short)3179, (short)3179, (short) (-2574)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'K', 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'4', '4', 'd', 'K', '\u0000'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(5, charArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 1L, 128);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 507);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-39);
      shortArray0[1] = (short) (-39);
      shortArray0[2] = (short) (-39);
      shortArray0[3] = (short) (-39);
      shortArray0[4] = (short) (-39);
      shortArray0[5] = (short) (-39);
      shortArray0[0] = (short)1;
      shortArray0[7] = (short)1;
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short) (-39);
      ArrayUtils.swap(longArray0, (int) (short)1, (int) (short)1, (int) (short) (-39));
      assertArrayEquals(new long[] {1L, (-39L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '~';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) '$';
      ArrayUtils.swap(longArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 36L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 265;
      intArray0[5] = (int) (byte)125;
      intArray0[2] = (int) (byte)59;
      intArray0[3] = (int) (byte)33;
      intArray0[4] = (int) (byte)33;
      intArray0[5] = (int) (byte)33;
      intArray0[6] = (int) (byte) (-55);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {265, 0, 59, 33, 33, 33, (-55)}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)33);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float(3303.604F);
      assertNotNull(float0);
      assertEquals(3303.604F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Integer integer0 = new Integer((-297));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-297), (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer((-297));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-297), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-297), (int)integer2);
      assertEquals(2, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = new short[0];
      short[] shortArray2 = ArrayUtils.addAll((short[]) null, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.swap(doubleArray0, (int) integerArray0[0], (-1), (-297));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(floatArray1, (-1));
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer integer3 = new Integer((-1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-297);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-297), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 5.007002625289575);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      longArray0[6] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1955L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1428), (-1425), integerArray0[1]).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, 'n');
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-172);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-1629);
      ArrayUtils.swap(shortArray0, (-45), (int) (short) (-1629), (-1275));
      assertArrayEquals(new short[] {(short) (-172), (short)2, (short)8, (short) (-1629)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      char[] charArray0 = new char[2];
      Short[] shortArray0 = new Short[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(shortArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)70;
      ArrayUtils.swap(shortArray1, (-3262), (-3262), (-3262));
      assertArrayEquals(new short[] {(short)70}, shortArray1);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)70;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {70}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, (long) 0, (-1370));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      int[] intArray0 = new int[7];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      Integer integer3 = new Integer(1072);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1072, (int)integer3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer3, (int) (short)0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-1), int0);
      
      Float float0 = new Float(821.6225F);
      assertNotNull(float0);
      assertEquals(821.6225F, (float)float0, 0.01F);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(4473.488);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4473.488, (double)double1, 0.01);
      
      Double double2 = new Double(4473.488);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4473.488, (double)double2, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 821.6225F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1072;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 921L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 921L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {821.6225F, (-1.0F), 1072.0F, (-1.0F), 921.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {821.6225F, (-1.0F), 1072.0F, (-1.0F), 921.0F, 921.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1811.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(847, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer integer0 = new Integer(847);
      assertNotNull(integer0);
      assertEquals(847, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.insert(0, floatArray1, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(370);
      assertNotNull(integer0);
      assertEquals(370, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 83;
      Integer integer1 = new Integer(83);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(14980);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(14980, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (-1570.3099);
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 29.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 370.0, (-1570.3099), 83.0, 0.0, 0.0, 0.0, 29.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 370.0, (-1570.3099), 83.0, 0.0, 0.0, 0.0, 29.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1192.1826F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1192.1826F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1192.1826F), (-1192.1826F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'V';
      ArrayUtils.shift(charArray0, 970, (-639), 2);
      assertArrayEquals(new char[] {'x', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1291);
      shortArray0[1] = (short)13107;
      shortArray0[2] = (short)1877;
      shortArray0[3] = (short)488;
      shortArray0[4] = (short)13107;
      shortArray0[5] = (short)10095;
      shortArray0[6] = (short)905;
      shortArray0[7] = (short)1136;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1791);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1291), (short)13107, (short)1877, (short)488, (short)13107, (short)10095, (short)905, (short)1136}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1291), (short)13107, (short)1877, (short)488, (short)13107, (short)10095, (short)905, (short)1136}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2019;
      floatArray0[1] = (float) 2019;
      floatArray0[2] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2019.0F, 2019.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 0, (-1.0F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2019.0F, 2019.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2019.0F, 2019.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1524L);
      longArray0[1] = (-1524L);
      longArray0[2] = 1L;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)11;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short)11;
      shortArray0[4] = (short)11;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1071);
      assertArrayEquals(new short[] {(short)11, (short)0, (short)11, (short)11, (short)11}, shortArray0);
      assertEquals(1, int0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)11;
      doubleArray0[1] = (double) (-1524L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1071;
      doubleArray0[4] = (double) (short)11;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-1524L);
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, (double) 1L);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {11.0, (-1524.0), 1.0, 1071.0, 11.0, 1.0, (-1524.0)}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1524L), (-1524L), 1L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 13);
      assertNull(integer1);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer2 = new Integer(109);
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (int) 34, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(109, (int)integer3);
      assertEquals(2, integerArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertSame(object2, object1);
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)43);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)43, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1524L);
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      short[] shortArray0 = new short[5];
      shortArray0[2] = (short)11;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', 'M', '%'}, charArray0);
      assertArrayEquals(new char[] {'M', 'M', '%'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ArrayUtils.shift(byteArray0, (-472), (int) (byte) (-108), (int) (byte) (-90));
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      longArray0[6] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1955L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-54), 0, integerArray0[7]).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, 'n');
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'n');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-170);
      shortArray0[1] = (short) (-2995);
      shortArray0[2] = (short) (-1341);
      shortArray0[3] = (short)100;
      shortArray0[4] = (short)626;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2995));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-170), (short) (-2995), (short) (-1341), (short)100, (short)626}, shortArray0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)1, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1901L), 1L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-472);
      intArray0[1] = (-472);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences((long[]) null, 447L);
      assertNull(longArray2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)88;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)88);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)88}, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)88}, byteArray0);
      assertTrue(boolean2);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)76);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-472), (int) (byte)88);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1643), (int) (byte)76);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-471), (int) (short)1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertArrayEquals(new int[] {(-472)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1901L);
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte)76;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (-80.0F);
      floatArray0[5] = (float) (byte)76;
      floatArray0[6] = (float) (-472);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-472));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1901.0F), 76.0F, 76.0F, 1.0F, (-80.0F), 76.0F, (-472.0F), (-472.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1901.0F), 76.0F, 76.0F, 1.0F, (-80.0F), 76.0F, (-472.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '^');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '^';
      intArray0[1] = (int) '^';
      intArray0[2] = (int) '^';
      intArray0[3] = (int) '^';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {94, 94, 94, 94}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 94;
      objectArray0[1] = (Object) 94;
      objectArray0[2] = (Object) 94;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-76);
      ArrayUtils.shift(byteArray0, (int) (byte)14, (int) (byte) (-49), (int) (byte)14);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-49), (byte)88, (byte)29, (byte)0, (byte)14, (byte)93, (byte) (-76)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1, '_');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3208), 'G');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3208, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-251);
      shortArray0[7] = (short)512;
      Long long0 = new Long(1169);
      assertNotNull(long0);
      assertEquals(1169L, (long)long0);
      
      Long long1 = new Long((-1095L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1095L), (long)long1);
      
      Long long2 = new Long((-1095L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1095L), (long)long2);
      
      Long long3 = new Long((-2804L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-2804L), (long)long3);
      
      Long long4 = new Long((-1095L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-1095L), (long)long4);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2804L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1275.63));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      
      Integer integer0 = new Integer(1169);
      assertNotNull(integer0);
      assertEquals(1169, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) integer0, 535);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)3353;
      shortArray1[1] = (short)3353;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short)2790, (-3018));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)3353, (short)3353}, shortArray1);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-33);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-35), (byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-35), (byte) (-33)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)127;
      doubleArray0[1] = (-2.141227176E9);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {127.0, (-2.141227176E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {127.0, (-2.141227176E9), 127.0, (-2.141227176E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 33L, 0);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'N');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) 0;
      Integer[] integerArray0 = new Integer[2];
      int int0 = 92;
      Integer integer0 = new Integer(92);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(92, (int)integer1);
      
      integerArray0[1] = integer1;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      short short0 = (short) (-1);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)440;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2449);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, int0, 0, (int) (short)440);
      assertArrayEquals(new short[] {(short) (-1), (short)440, (short) (-1), (short) (-2449), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) 46;
      doubleArray0[3] = (double) (short)440;
      doubleArray0[4] = (double) 46;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "bHuCS{>VdCQ2jMgTU8");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)110, (byte)102, (byte) (-76), (byte) (-6), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)102, (byte) (-76), (byte) (-6), (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      int[] intArray0 = new int[1];
      char[] charArray0 = null;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 0, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertNotSame(object0, object1);
      assertSame(object0, object2);
      assertNotSame(object2, object1);
      assertSame(object2, object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, (-2488));
      assertNull(object3);
      assertEquals(3, objectArray0.length);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      ArrayUtils.shift(objectArray0, 0, 98, (int) (short)1);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (int) (short)1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-659), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)109;
      intArray0[1] = (int) (byte)109;
      intArray0[2] = (int) (byte)109;
      intArray0[3] = (int) (byte)109;
      int int0 = ArrayUtils.indexOf(intArray0, 109);
      assertArrayEquals(new int[] {109, 109, 109, 109}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      Integer integer0 = new Integer(109);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(109, (int)integer0);
      
      Integer integer1 = new Integer((byte)109);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(109, (int)integer1);
      
      Integer integer2 = new Integer((-1212));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1212), (int)integer2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1751, (boolean[]) null, booleanArray0);
      assertNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '\"');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2690.960052076;
      doubleArray0[1] = (-11.0);
      doubleArray0[2] = 302.306843173669;
      doubleArray0[3] = (-2836.2984955);
      doubleArray0[4] = 7.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2690.960052076, (-11.0), 302.306843173669, (-2836.2984955), 7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2690.960052076, (-11.0), 302.306843173669, (-2836.2984955), 7.0, 2690.960052076, (-11.0), 302.306843173669, (-2836.2984955), 7.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2574L);
      longArray0[1] = (-1822L);
      longArray0[2] = 908L;
      longArray0[3] = (-2574L);
      longArray0[4] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 1L, (-729));
      assertArrayEquals(new long[] {(-2574L), (-1822L), 908L, (-2574L), (-1L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte byte0 = (byte) (-108);
      Byte byte1 = new Byte((byte) (-108));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-108), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-108));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-108), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      byte byte4 = (byte)0;
      Byte byte5 = new Byte((byte) (-63));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte) (-63), (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte) (-1), (byte)byte6);
      
      byte byte7 = (byte) (-1);
      Byte byte8 = new Byte((byte) (-1));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertNotNull(byte8);
      assertEquals((byte) (-1), (byte)byte8);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)55, (int) (byte)55);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-851), (int) (byte)55);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 7);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Long long0 = new Long(49);
      assertNotNull(long0);
      assertEquals(49L, (long)long0);
      
      Long long1 = new Long((-423L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-423L), (long)long1);
      
      Long long2 = new Long(2430L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(2430L, (long)long2);
      
      Long long3 = new Long(2430L);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(2430L, (long)long3);
      
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray1, 942, 7, 91);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-3890);
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-1548);
      shortArray0[3] = (short) (-849);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-2593);
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-1247), (int) (short) (-2593));
      assertNull(charArray1);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3890), (short)10, (short) (-1548), (short) (-849), (short)1, (short) (-2593)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-3890), (short)10, (short) (-1548), (short) (-849), (short)1, (short) (-2593)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)3, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (-433L);
      longArray0[2] = (-1005L);
      longArray0[3] = (-1019L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-433L), (-1005L), (-1019L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-862.1327F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[0] = (short)1;
      shortArray0[7] = (short)1;
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      Integer integer3 = new Integer(7);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(7, (int)integer3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 327);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.804F);
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short)1;
      floatArray0[7] = (float) (short)1;
      floatArray0[8] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1580.804F), 1.0F, 1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1580.804F), 1.0F, 1.0F, 0.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 441.15F);
      assertNotNull(float0);
      assertEquals(441.15F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {441.15F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {441.15F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {441.15F}, floatArray2, 0.01F);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '3');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '3';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-4176L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {51L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, 'n');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '3';
      intArray0[1] = 7;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 659, 528);
      assertArrayEquals(new int[] {51, 7}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(longArray0, (long) 528, (-78));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {51L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = (-485.4120673981944);
      doubleArray0[4] = 519.4120885778565;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'e');
      assertNull(charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1235L;
      longArray0[1] = 2400L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 638, (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1235L, 2400L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      ArrayUtils.reverse(intArray0, 17, 467);
      assertArrayEquals(new int[] {17, 17, (-1), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {(-485.4120673981944), 519.4120885778565, 2321.882099, (-485.4120673981944), 519.4120885778565, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 519.4120885778565;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 1235L);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {519.4120885778565}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)7, (byte)0, (byte)13, (byte) (-80), (byte)5, (byte)12, (byte) (-96), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)7, (byte)0, (byte)13, (byte) (-80), (byte)5, (byte)12, (byte) (-96), (byte)2}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 959.9529F, 959.9529F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, int0);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      charArray0[2] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '1', 3);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'.', '@', 'L'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-28);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)117;
      shortArray0[3] = (short)2046;
      shortArray0[4] = (short) (-1157);
      shortArray0[5] = (short)935;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3, (int) (short) (-1157));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-28), (short) (-1), (short)117, (short)2046, (short) (-1157), (short)935}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      Character character1 = new Character('~');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('~', (char)character1);
      
      ArrayUtils.shift(charArray0, (-1554));
      assertArrayEquals(new char[] {'.', '@', 'L'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)97;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      Boolean boolean1 = new Boolean("java.lang.Float");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      ArrayUtils.shift(shortArray1, (-745), 0, (-2850));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'i';
      charArray0[2] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray0);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'M';
      longArray0[1] = (-1L);
      longArray0[2] = (long) '%';
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 824);
      assertArrayEquals(new long[] {77L, (-1L), 37L, 0L}, longArray0);
      assertEquals(3, int0);
      assertEquals(4, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'M');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[4] = 2204L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-17L), 2204L, 0L, 2204L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-839L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) longArray1, 575, (-2086126972), (-2086126972));
      assertArrayEquals(new long[] {0L, (-17L), 2204L, 0L, 2204L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-17L), 2204L, 0L, 2204L}, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      
      ArrayUtils.reverse((double[]) null, (int) (short)3, 575);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L, (-17L), 2204L, 0L, 2204L}, longArray0);
      assertNotSame(longArray1, longArray2);
      assertSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray2);
      assertSame(longArray3, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray3.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-579), (-1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '9';
      charArray0[2] = 'O';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'O');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'x', '9', 'O'}, charArray0);
      assertEquals(2, int2);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      ArrayUtils.shift(shortArray0, (-595));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1380;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 469);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1380;
      longArray0[1] = (long) 1380;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 97;
      longArray0[4] = (long) 97;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-38L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1380L, 1380L, (-1L), 97L, 97L}, longArray0);
      assertArrayEquals(new long[] {1380L, 1380L, (-1L), 97L, 97L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '5';
      charArray0[2] = 'n';
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n', '5', 'n', 'n'}, charArray1);
      assertArrayEquals(new char[] {'n', '5', 'n'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-77));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (-1122);
      shortArray0[3] = (short) (byte) (-77);
      shortArray0[4] = (short) (byte) (-77);
      shortArray0[5] = (short) (byte) (-77);
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, 7, (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-1122), (short) (-77), (short) (-77), (short) (-77), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      long[] longArray0 = new long[10];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'M');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-3374L));
      assertNull(longArray0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'i';
      charArray1[1] = 'n';
      charArray1[2] = 'n';
      charArray1[3] = 'A';
      charArray1[4] = '3';
      charArray1[5] = 'n';
      charArray1[6] = '3';
      char[] charArray2 = ArrayUtils.add(charArray1, 'n');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'i', 'n', 'n', 'A', '3', 'n', '3'}, charArray1);
      assertArrayEquals(new char[] {'i', 'n', 'n', 'A', '3', 'n', '3', 'n'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray2.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2512);
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 51, (-2512));
      assertArrayEquals(new int[] {(-2512), 51, 51}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 'A';
      longArray1[1] = (long) 'n';
      longArray1[2] = (long) 'M';
      longArray1[3] = (long) '3';
      longArray1[4] = (-3374L);
      longArray1[5] = (long) Integer.MAX_VALUE;
      longArray1[6] = (long) 'A';
      longArray1[7] = (long) (-2512);
      int int1 = ArrayUtils.indexOf(longArray1, 2147483647L, 51);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {65L, 110L, 77L, 51L, (-3374L), 2147483647L, 65L, (-2512L)}, longArray1);
      assertEquals((-1), int1);
      assertEquals(8, longArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) (-2512);
      floatArray0[2] = (float) 110L;
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) (-2512);
      floatArray0[5] = (float) 110L;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-981.856F);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1524L);
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = (-1008L);
      ArrayUtils.swap(longArray0, (-1444), (-3395));
      assertArrayEquals(new long[] {(-1524L), 1L, 1L, (-1008L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1444);
      intArray0[1] = (-1444);
      intArray0[2] = (-3395);
      intArray0[3] = (-3395);
      intArray0[4] = (-3395);
      intArray0[5] = (-1444);
      intArray0[6] = (-1535);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1444), (-1444), (-3395), (-3395), (-3395), (-1444), (-1535)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1380;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 469);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short) (byte) (-108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-77), (short) (-108)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-108));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertArrayEquals(new int[] {1380, 2089}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (int) (short) (-77), 42);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertArrayEquals(new int[] {1380, 2089}, intArray1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      Integer integer1 = new Integer(2430);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2430, (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)1173;
      shortArray0[2] = (short) (-21219);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short) (-21219), 1429, 65);
      assertArrayEquals(new short[] {(short)0, (short)1173, (short) (-21219), (short)15, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, (-964), (-964), (int) (short)15);
      assertArrayEquals(new short[] {(short)0, (short)1173, (short) (-21219), (short)15, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1173;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer2;
      Integer integer3 = Integer.getInteger("w?7x==jh96@8", (int) (short) (-21219));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-21219), (int)integer3);
      
      Integer integer4 = ArrayUtils.get(integerArray0, (-1), integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-21219), (int)integer4);
      assertEquals(8, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer4, (int) integerArray0[1]);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[2] = (float) (byte)109;
      floatArray0[3] = (float) (byte)109;
      Byte byte0 = new Byte((byte)109);
      assertNotNull(byte0);
      assertEquals((byte)109, (byte)byte0);
      
      short[] shortArray0 = ArrayUtils.insert((-2141227176), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2141227176);
      longArray0[1] = (long) (-2141227176);
      longArray0[2] = (long) (-2141227176);
      longArray0[3] = (long) (byte)109;
      longArray0[4] = (long) 3010;
      longArray0[5] = (long) (byte)109;
      longArray0[6] = (long) (byte)109;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-2141227176L), (-2141227176L), (-2141227176L), 109L, 3010L, 109L, 109L}, longArray0);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = 3604L;
      longArray1[2] = 3604L;
      longArray1[3] = 3604L;
      longArray1[4] = 3604L;
      longArray1[6] = 4L;
      longArray1[7] = 4L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 3604L, 3604L, 3604L, 3604L, 0L, 4L, 4L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertEquals(8, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)12);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)12, (int) (short)12);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '?';
      charArray0[2] = '&';
      char[] charArray1 = ArrayUtils.add(charArray0, '?');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'&', '?', '&'}, charArray0);
      assertArrayEquals(new char[] {'&', '?', '&', '?'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray0 = ArrayUtils.insert(9, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'b';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {98}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) 9;
      longArray0[3] = (long) '&';
      longArray0[4] = (long) 1155;
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {98L, 98L, 9L, 38L, 1155L}, longArray0);
      assertFalse(boolean1);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      short short0 = (short)949;
      shortArray0[1] = (short)949;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)949}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)2776;
      int int0 = ArrayUtils.indexOf(intArray0, 2);
      assertArrayEquals(new int[] {2, 2776}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2776, 10);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2776, (short)949}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-12721);
      doubleArray0[1] = (double) 2019;
      doubleArray0[2] = Double.NaN;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 2019, 3242.96612139);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-12721.0), 2019.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2776, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse((Object[]) null, 15, 15);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      longArray0[6] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1955L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(24).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, 'n');
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (-1153.0F);
      floatArray0[3] = (float) byte0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-5.0F), (-5.0F), (-1153.0F), (-5.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = '\"';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, '\"');
      assertArrayEquals(new char[] {'n', '\"', 'n', 'n', 'n', 'n'}, charArray0);
      assertEquals(1, int0);
      assertEquals(6, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\"', 64);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'n', '\"', 'n', 'n', 'n', 'n'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      short[] shortArray0 = new short[8];
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {(-1901L), 0L, 0L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-472);
      intArray0[1] = (-472);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.swap(longArray0, 3091, (-3696), 49);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, (-472L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, longArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1869L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, (-472L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean3 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean3);
      assertEquals(8, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long long0 = Long.getLong("", 2504L);
      assertNotNull(long0);
      assertEquals(2504L, (long)long0);
      
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1629);
      shortArray0[1] = (short) (-1629);
      ArrayUtils.swap(shortArray0, (-266), (int) (short) (-1629), 1);
      assertArrayEquals(new short[] {(short) (-1629), (short) (-1629)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-266);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2037, (int) (short) (-1629));
      assertArrayEquals(new int[] {(-266)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (-2099761775));
      assertArrayEquals(new char[] {'L', 'G'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.shift(charArray0, 1);
      assertArrayEquals(new char[] {'G', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Integer integer1 = new Integer(2569);
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2569, (int)integer1);
      
      Integer integer2 = new Integer((-516));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-516), (int)integer2);
      
      Integer integer3 = new Integer((byte) (-1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      Integer integer4 = new Integer(55);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(55, (int)integer4);
      
      Integer integer5 = Integer.getInteger((String) null, (-2099761775));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-2099761775), (int)integer5);
      
      MutableInt mutableInt0 = new MutableInt(1);
      assertNotNull(mutableInt0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      
      Integer integer6 = mutableInt0.toInteger();
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)integer6);
      
      Integer integer7 = new Integer(2569);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(2569, (int)integer7);
      
      Integer integer8 = new Integer(64);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      assertEquals(64, (int)integer8);
      
      Integer integer9 = new Integer((-208));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer1));
      assertNotNull(integer9);
      assertEquals((-208), (int)integer9);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer9);
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true, true, false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Integer[]) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2009);
      assertNotNull(integer0);
      assertEquals(2009, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-433));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-433), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(44);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(44, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-433), (int)integer3);
      assertEquals(8, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3459);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(3459, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("java.lang.Integer");
      assertNull(integer5);
      
      integerArray0[5] = null;
      Integer integer6 = new Integer((int) integerArray0[4]);
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(3459, (int)integer6);
      assertEquals(8, integerArray0.length);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertNotNull(integer7);
      assertEquals((-1), (int)integer7);
      
      integerArray0[7] = integer7;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 1477);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1477, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, 0, 0, 3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 305;
      Integer[] integerArray0 = new Integer[5];
      try { 
        Integer.decode("<|;hz9_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<|;hz9_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-20);
      ArrayUtils.shift(byteArray0, (int) (short) (-26));
      assertArrayEquals(new byte[] {(byte) (-20), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)97;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)97, (int) (short) (-2603));
      assertTrue(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)97, (short)0, (short) (-2603), (short)0, (short)0, (short)97, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      ArrayUtils.reverse((int[]) null, (-1695), 1651);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 2430, 2430);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2430;
      longArray0[1] = (long) 2430;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {2430L, 2430L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[3] = 0L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-825L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 3230);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)98);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse((Object[]) longArray1, (-179), 1043);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-32.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer integer0 = new Integer((-1168));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1168), (int)integer0);
      
      Integer integer1 = new Integer((-1168));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1168), (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.reverse((Object[]) integerArray0, (-1168), (-1));
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 2430);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      
      Integer integer0 = new Integer((byte)98);
      assertNotNull(integer0);
      assertEquals(98, (int)integer0);
      
      Integer integer1 = new Integer((byte)98);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(98, (int)integer1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)98;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      boolean boolean2 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(6, objectArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '!');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-95);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)98, (byte) (-24), (byte) (-95)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      
      Integer integer0 = new Integer((-2654));
      assertNotNull(integer0);
      assertEquals((-2654), (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      boolean boolean2 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(6, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, '!');
      assertNull(charArray1);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1524L);
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)11;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short)11;
      shortArray0[4] = (short)11;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1071);
      assertArrayEquals(new short[] {(short)11, (short)0, (short)11, (short)11, (short)11}, shortArray0);
      assertEquals(1, int0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'G';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'W';
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[2] = (float) (byte)109;
      floatArray0[3] = (float) (byte)109;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (byte)109;
      floatArray2[1] = (float) (byte)109;
      floatArray2[2] = (float) (byte)109;
      floatArray2[3] = (float) (byte)109;
      Boolean boolean0 = new Boolean("java.lang.Object");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 2146751717);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      ArrayUtils.swap(intArray0, 9, 8);
      assertArrayEquals(new int[] {8}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)29;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)47, (byte)102, (byte)4, (byte) (-94), (byte)125, (byte)29}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)29;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (byte)125;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-507.891650497), (int) (byte)4);
      assertArrayEquals(new double[] {29.0, 9.0, 4.0, 125.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '^';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'e');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^', '^'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '^';
      longArray0[2] = (long) 0;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-44);
      ArrayUtils.shift(byteArray0, 2081);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-44), (byte)0, (byte)14, (byte) (-26), (byte)118, (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-44);
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-44.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)14;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (byte)101;
      floatArray0[3] = (float) (byte)14;
      floatArray0[4] = (float) 'e';
      floatArray0[5] = (float) 94L;
      ArrayUtils.shift(floatArray0, (-2292), (-2574), 2019);
      assertArrayEquals(new float[] {14.0F, 0.0F, 101.0F, 14.0F, 101.0F, 94.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'o';
      ArrayUtils.swap((byte[]) null, 46, 46);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2574);
      shortArray0[2] = (short) (-2574);
      shortArray0[3] = (short) (-2574);
      shortArray0[4] = (short) (-2574);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-2574), (short) (-2574), (short) (-2574), (short)0, (short) (-2574)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'o', 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (short) (-2574), (int) (short) (-2574));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {111L}, longArray0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, longArray0.length);
      
      boolean boolean5 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 111L;
      Long long0 = new Long('o');
      assertNotNull(long0);
      assertEquals(111L, (long)long0);
      
      longArray1[1] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) '4';
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) (short)3179;
      intArray0[4] = (int) '4';
      intArray0[5] = (int) 'K';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.swap((Object[]) longArray1, 99, 462, 462);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1078);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {3179, 52, 75, 3179, 52, 75}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'U');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(0, charArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1078;
      ArrayUtils.shift(floatArray0, 462, 43, (-2770));
      assertArrayEquals(new float[] {1078.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.shift(byteArray1, 75, 213, 99);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2694L);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.insert((-2142794818), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-1314));
      assertNotNull(integer0);
      assertEquals((-1314), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer(1672);
      assertNotNull(integer0);
      assertEquals(1672, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Integer integer1 = new Integer((-26));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-26), (int)integer1);
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray2.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, '4');
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '4', '4', '4'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray1, '<', 2430);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'4', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      longArray0[6] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1955L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {2436L, 1L, 2147483647L, (-1428L), 2436L, 2436L, 2147483647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      integerArray0[7] = integer0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int0 = ArrayUtils.indexOf(charArray0, 'n');
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)90);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.shift((long[]) null, (int) (short)90, (int) (short)90, (-1259));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      intArray0[1] = (-119);
      intArray0[2] = 1401;
      intArray0[3] = 809;
      intArray0[4] = 36;
      intArray0[5] = 248;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray0);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 248, 1401);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((double[]) null, 809, 809, 809);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[1] = (Integer) 1401;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      Integer integer0 = ArrayUtils.get(integerArray0, 1401);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(integer0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)3);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertEquals(10, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '6';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) '6');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2204L);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2204L), 1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-2204L), 1L, (-1L), (-2204L), 1L, (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-1));
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1), 108, (-1));
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'o';
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 46);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2574);
      shortArray0[2] = (short) (-2574);
      shortArray0[3] = (short) (-2574);
      shortArray0[4] = (short)6;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)6, (short) (-2574), (short) (-2574), (short)0, (short) (-2574)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'o', 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (short) (-2574), (int) (short)6);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {111L}, longArray0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, longArray0.length);
      
      boolean boolean5 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 111L;
      Long long0 = new Long(Integer.MAX_VALUE);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      longArray1[1] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 2146089184);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {2146089184L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 3, 18688, 3);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      longArray0[6] = (long) Integer.MAX_VALUE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)59;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)59}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 91, Integer.MAX_VALUE, (-2611));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      intArray0[1] = (-119);
      intArray0[2] = 1401;
      intArray0[3] = 809;
      intArray0[4] = 36;
      intArray0[5] = 248;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray0);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 248, 1401);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((double[]) null, 809, 809, 809);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 36;
      integerArray0[1] = (Integer) 1401;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      Integer integer0 = ArrayUtils.get(integerArray0, 1401);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(integer0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(36);
      assertNotNull(integer1);
      assertEquals(36, (int)integer1);
      
      Integer[] integerArray2 = ArrayUtils.add(integerArray0, integer1);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray2.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Float float0 = new Float((double) 441.15F);
      assertNotNull(float0);
      assertEquals(441.15F, (float)float0, 0.01F);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-3585));
      assertNotNull(integer0);
      assertEquals((-3585), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1669.1004675);
      doubleArray0[1] = 1936.63991942645;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1119.4), 2616, (double) 2616);
      assertArrayEquals(new double[] {(-1669.1004675), 1936.63991942645}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1669.1004675), 1936.63991942645}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1936.63991942645}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '$';
      charArray0[2] = 'l';
      charArray0[3] = '|';
      charArray0[4] = '[';
      charArray0[5] = '=';
      charArray0[6] = '\"';
      charArray0[7] = '<';
      charArray0[8] = 'n';
      int int1 = ArrayUtils.indexOf(charArray0, '[', (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'2', '$', 'l', '|', '[', '=', '\"', '<', 'n'}, charArray0);
      assertEquals(4, int1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = 1L;
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertEquals((-3), (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, objectArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float(3303.604F);
      assertNotNull(float0);
      assertEquals(3303.604F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Integer integer0 = new Integer((-297));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-297), (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer((-297));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-297), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-297), (int)integer2);
      assertEquals(2, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = new short[0];
      short[] shortArray2 = ArrayUtils.addAll((short[]) null, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.swap(doubleArray0, (int) integerArray0[0], (-1), (-297));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.shift(floatArray1, (-1));
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer integer3 = new Integer((-1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-297);
      intArray0[1] = (int) '4';
      intArray0[2] = (-1);
      intArray0[3] = (int) '4';
      intArray0[4] = (int) '=';
      intArray0[5] = (int) 'X';
      intArray0[6] = (-297);
      intArray0[7] = (int) '4';
      intArray0[8] = 329;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer3, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      Integer integer1 = new Integer(2430);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2430, (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1173;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      ArrayUtils.shift((boolean[]) null, (-356));
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1380;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 469);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte) (-108));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte) (-72));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-72);
      ArrayUtils.swap(longArray0, 469, 2089);
      assertArrayEquals(new long[] {(-72L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[2];
      ArrayUtils.shift(floatArray0, 7);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 7;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 49, 49);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 7L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 2477L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-1L), 7L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 7L, (-1L)}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3647), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.reverse(intArray0, 2430, 64);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 302.306843173669;
      doubleArray0[1] = 2907.0;
      doubleArray0[2] = 302.306843173669;
      doubleArray0[3] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2236.1083, 1169, 959.952880859375);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {302.306843173669, 2907.0, 302.306843173669, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 302.306843173669, 2907.0, 302.306843173669}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)3179;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short)3179;
      floatArray0[3] = 1679.91F;
      floatArray0[4] = (float) (short)3179;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) (short)3179;
      int int0 = ArrayUtils.indexOf(floatArray0, (-44.0F), (-2121));
      assertArrayEquals(new float[] {3179.0F, (-1.0F), 3179.0F, 1679.91F, 3179.0F, (-1.0F), 3179.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray1 = ArrayUtils.add((short[]) null, (short)3179);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-326.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3179.0F, (-1.0F), 3179.0F, 1679.91F, 3179.0F, (-1.0F), 3179.0F, (-326.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3179.0F, (-1.0F), 3179.0F, 1679.91F, 3179.0F, (-1.0F), 3179.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-37);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-44), 2097);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-37), (byte) (-37), (byte) (-37), (byte) (-37)}, byteArray0);
      assertEquals(0, int1);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.reverse(floatArray1, (int) (short)3179, (int) (byte) (-37));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {3179.0F, (-1.0F), 3179.0F, 1679.91F, 3179.0F, (-1.0F), 3179.0F, (-326.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3179.0F, (-1.0F), 3179.0F, 1679.91F, 3179.0F, (-1.0F), 3179.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) false;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(3, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(3, objectArray0.length);
      
      Float[] floatArray1 = new Float[5];
      Float float0 = new Float((float) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float(2224.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2224.0F, (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((double) 2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(2.0F, (float)float2, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = new Float((-749.795663));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-749.79565F), (float)float3, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float((double) 2224.0F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals(2224.0F, (float)float4, 0.01F);
      
      floatArray1[4] = float4;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1.0F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2.0F, 2224.0F, 2.0F, (-749.79565F), 2224.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 78;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 78, 2, 2, 2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 78, 2, 2, 2}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2383L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      doubleArray0[3] = (double) 2383L;
      doubleArray0[4] = (-1623.97);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2383.0, 0.0, 0.0, 2383.0, (-1623.97), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1534.4F;
      floatArray0[1] = (float) 1204L;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)11, 1536);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '6';
      double[] doubleArray0 = new double[7];
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2141227176), (-2141227176));
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 2146725890, 2146725890, (-1484));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'M');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      Short short0 = new Short((short)31282);
      assertNotNull(short0);
      assertEquals((short)31282, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)31282, (short)31282}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-2141227176));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2.141227176E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Integer integer0 = new Integer((short)8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer((short)31282);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(31282, (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-960));
      assertNull(intArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) 116);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2.141227176E9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2.141227176E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)shortArray0[1];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2219.0F));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {31282.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1237.2);
      doubleArray0[1] = (-2668.8984);
      doubleArray0[2] = (-1669.1004675);
      doubleArray0[3] = (-108.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1143.027;
      doubleArray0[6] = (-3412.0);
      doubleArray0[7] = (-865.0009401);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-108.0), (-865.0009401));
      assertArrayEquals(new double[] {(-1237.2), (-2668.8984), (-1669.1004675), (-108.0), 1.0, 1143.027, (-3412.0), (-865.0009401)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 19.0, 2346);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      int[] intArray0 = new int[4];
      intArray0[0] = 1376;
      intArray0[1] = (-1284);
      intArray0[3] = 1376;
      ArrayUtils.shift(intArray0, 0, (-1284), 1376);
      assertArrayEquals(new int[] {1376, (-1284), 0, 1376}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1376, (-1284), 0, 1376}, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 1376;
      Integer integer0 = new Integer((-4407));
      assertNotNull(integer0);
      assertEquals((-4407), (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-1284);
      integerArray0[3] = (Integer) 1376;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-249), (-249));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-239L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-239L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift(booleanArray1, (-3390), Integer.MAX_VALUE, (-1011));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Long[] longArray2 = new Long[4];
      longArray2[0] = (Long) (-239L);
      longArray2[1] = (Long) (-239L);
      longArray2[2] = (Long) (-239L);
      longArray2[3] = (Long) (-239L);
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) Integer.MAX_VALUE);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-239L), (-239L), (-239L), (-239L)}, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (long)longArray2[3];
      doubleArray0[1] = (double) (long)longArray2[2];
      doubleArray0[2] = (double) (long)longArray2[3];
      doubleArray0[3] = (double) (long)longArray2[1];
      doubleArray0[4] = (double) (long)longArray2[3];
      doubleArray0[5] = (double) 1L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-239.0), (-239.0), (-239.0), (-239.0), (-239.0), 1.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1011), 32, (-1128));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray3);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray3.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 't';
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 't';
      objectArray0[1] = (Object) 't';
      objectArray0[2] = (Object) 't';
      ArrayUtils.shift(objectArray0, 98, 98, 2430);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 3, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'q', 't', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2430;
      intArray0[1] = (int) 'q';
      intArray0[2] = 3;
      intArray0[3] = 2430;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), (-461));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      short[] shortArray0 = new short[8];
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1901L), 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-9.546189064041982));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-9.546189F), (float)float1, 0.01F);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      longArray0[1] = (long) '/';
      ArrayUtils.shift(charArray0, 91);
      assertArrayEquals(new char[] {'\u0000', '?'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      int int0 = (-39);
      Integer integer0 = new Integer((-39));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MutableInt mutableInt0 = new MutableInt((-1));
      assertNotNull(mutableInt0);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      
      MutableInt mutableInt1 = new MutableInt((-2146984464));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals("-2146984464", mutableInt1.toString());
      assertEquals((-2146984464), mutableInt1.intValue());
      assertEquals((short) (-25104), mutableInt1.shortValue());
      assertEquals((-2146984464L), mutableInt1.longValue());
      assertEquals((-2.14698445E9F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-2146984464), (int)mutableInt1.getValue());
      assertEquals((-2.146984464E9), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2146984464), (int)mutableInt1.toInteger());
      assertEquals((byte) (-16), mutableInt1.byteValue());
      
      int int1 = mutableInt1.addAndGet(536);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals((-2146983928), (int)mutableInt1.getValue());
      assertEquals((-2146983928), (int)mutableInt1.toInteger());
      assertEquals("-2146983928", mutableInt1.toString());
      assertEquals((-2.14698394E9F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)8, mutableInt1.byteValue());
      assertEquals((-2.146983928E9), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2146983928), mutableInt1.intValue());
      assertEquals((short) (-24568), mutableInt1.shortValue());
      assertEquals((-2146983928L), mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals((-2146983928), int1);
      
      Integer integer3 = mutableInt1.toInteger();
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(integer3);
      assertEquals((-2146983928), (int)mutableInt1.getValue());
      assertEquals((-2146983928), (int)mutableInt1.toInteger());
      assertEquals("-2146983928", mutableInt1.toString());
      assertEquals((-2.14698394E9F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)8, mutableInt1.byteValue());
      assertEquals((-2.146983928E9), mutableInt1.doubleValue(), 0.01);
      assertEquals((-2146983928), mutableInt1.intValue());
      assertEquals((short) (-24568), mutableInt1.shortValue());
      assertEquals((-2146983928L), mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals((-2146983928), (int)integer3);
      
      Integer integer4 = new Integer(2430);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(2430, (int)integer4);
      
      Integer integer5 = new Integer(57);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(57, (int)integer5);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integerArray0[2]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1072;
      doubleArray0[1] = (double) (-2146984464);
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1072.0, (-2.146984464E9), (-39.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-49);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-49)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[7];
      shortArray0[1] = (short)3179;
      doubleArray0[1] = (double) (short)3179;
      doubleArray0[2] = (double) (short)3179;
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(3179.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3179.0F, (float)float1, 0.01F);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short)3179}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '/';
      charArray0[5] = '?';
      charArray0[6] = '/';
      ArrayUtils.shift(charArray0, 2569);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '/', '?', '/'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-3106));
      assertNotNull(integer0);
      assertEquals((-3106), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(99);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1569);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1569, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3447);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(3447, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("java.lang.Object", (-1395));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1395), (int)integer4);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt0 = new MutableInt(1);
      assertNotNull(mutableInt0);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      
      Integer integer5 = mutableInt0.toInteger();
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1395));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-1395), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals(Integer.MAX_VALUE, (int)integer7);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      ArrayUtils.swap(byteArray0, 79, (int) (byte) (-52), (int) (byte) (-52));
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Short short0 = new Short((byte) (-52));
      assertNotNull(short0);
      assertEquals((short) (-52), (short)short0);
      
      ArrayUtils.shift((char[]) null, (int) (byte)0);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(79, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-52);
      shortArray0[1] = (short)91;
      shortArray0[2] = (short) (byte) (-52);
      shortArray0[3] = (short) (byte) (-52);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-52), 1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-52)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-52), (short)91, (short) (-52), (short) (-52)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer(148);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(148, (int)integer2);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      boolean[] booleanArray3 = ArrayUtils.insert(2, booleanArray1, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertEquals(3, booleanArray2.length);
      assertEquals(10, booleanArray3.length);
      assertEquals(7, booleanArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-33);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-33)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1772);
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-1772), (-120));
      assertArrayEquals(new short[] {(short) (-1772), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, 0L}, longArray0);
      assertArrayEquals(new long[] {33L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-96));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2698), (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = new char[5];
      charArray0[0] = (char) character0;
      charArray0[1] = '/';
      charArray0[2] = (char) character1;
      charArray0[3] = '/';
      charArray0[4] = '/';
      ArrayUtils.shift(charArray0, (int) (byte) (-96));
      assertArrayEquals(new char[] {'/', '>', '/', '/', '>'}, charArray0);
      assertEquals(5, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-96));
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)7, (short)968, (short)125, (short)125, (short)0, (short) (-96)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(6, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 46;
      longArray0[1] = (-723L);
      longArray0[2] = (long) 46;
      longArray0[3] = 9L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 9L);
      assertArrayEquals(new long[] {46L, (-723L), 46L, 9L}, longArray0);
      assertEquals(3, int0);
      assertEquals(4, longArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(55);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(55, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2086126972));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-2086126972), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(3, (int)integer4);
      assertEquals(6, integerArray0.length);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt0 = new MutableInt((-723L));
      assertNotNull(mutableInt0);
      assertEquals((-723L), mutableInt0.longValue());
      assertEquals((-723), (int)mutableInt0.toInteger());
      assertEquals("-723", mutableInt0.toString());
      assertEquals((short) (-723), mutableInt0.shortValue());
      assertEquals((-723), mutableInt0.intValue());
      assertEquals((-723.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-723), (int)mutableInt0.getValue());
      assertEquals((-723.0), mutableInt0.doubleValue(), 0.01);
      
      Integer integer5 = mutableInt0.toInteger();
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-723L), mutableInt0.longValue());
      assertEquals((-723), (int)mutableInt0.toInteger());
      assertEquals("-723", mutableInt0.toString());
      assertEquals((short) (-723), mutableInt0.shortValue());
      assertEquals((-723), mutableInt0.intValue());
      assertEquals((-723.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-723), (int)mutableInt0.getValue());
      assertEquals((-723.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-723), (int)integer5);
      
      integerArray0[5] = integer5;
      int int1 = mutableInt0.incrementAndGet();
      assertFalse(int1 == int0);
      assertEquals((-722), (int)mutableInt0.toInteger());
      assertEquals((-722.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-722", mutableInt0.toString());
      assertEquals((short) (-722), mutableInt0.shortValue());
      assertEquals((-722), mutableInt0.intValue());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals((-722), (int)mutableInt0.getValue());
      assertEquals((-722.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-722L), mutableInt0.longValue());
      assertEquals((-722), int1);
      
      Integer integer6 = new Integer(2100);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(2100, (int)integer6);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer6);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((short)908);
      assertNotNull(integer0);
      assertEquals(908, (int)integer0);
      
      Integer integer1 = new Integer((-3390));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3390), (int)integer1);
      
      Integer integer2 = new Integer(16);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(16, (int)integer2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)16, 16);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) (short)908;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) (-3390);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 1431655765;
      floatArray0[6] = (float) 16;
      floatArray0[7] = (float) 16;
      floatArray0[8] = (float) 16;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {908.0F, 16.0F, (-3390.0F), Float.NaN, 1.43165581E9F, 16.0F, 16.0F, 16.0F, 16.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Integer integer3 = new Integer(1431655765);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1431655765, (int)integer3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer2;
      Object object0 = ArrayUtils.get(objectArray0, 108, objectArray0[0]);
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(16, object0);
      assertEquals(1, objectArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, (int) 908);
      assertNull(object1);
      assertEquals(1, objectArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, 0L}, longArray0);
      assertArrayEquals(new long[] {33L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-96));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2698), (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = new char[5];
      charArray0[0] = (char) character0;
      charArray0[1] = '/';
      charArray0[2] = (char) character1;
      charArray0[3] = '/';
      charArray0[4] = '/';
      ArrayUtils.shift(charArray0, (int) (byte) (-96));
      assertArrayEquals(new char[] {'/', '>', '/', '/', '>'}, charArray0);
      assertEquals(5, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {33L, 0L}, longArray0);
      assertArrayEquals(new long[] {33L, 0L}, longArray1);
      assertArrayEquals(new long[] {33L, 0L, 33L, 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray2.length);
      
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = (long) (byte)33;
      longArray3[1] = (long) (short)125;
      longArray3[2] = (long) (short)968;
      long[] longArray4 = ArrayUtils.removeElements(longArray3, longArray1);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray3));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {33L, 0L}, longArray0);
      assertArrayEquals(new long[] {33L, 0L}, longArray1);
      assertArrayEquals(new long[] {33L, 125L, 968L}, longArray3);
      assertArrayEquals(new long[] {125L, 968L}, longArray4);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray4);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray3.length);
      assertEquals(2, longArray4.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1596L;
      longArray0[1] = 1596L;
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1596L;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1596L, 1596L}, longArray0);
      assertArrayEquals(new long[] {1596L}, longArray1);
      assertArrayEquals(new long[] {1596L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      
      Integer integer0 = Integer.getInteger("java.lang.Integer");
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1592;
      shortArray0[2] = (short) (-1);
      long[] longArray0 = new long[8];
      floatArray0[1] = (float) 2522L;
      longArray0[1] = 1972L;
      longArray0[2] = (long) 4237;
      longArray0[3] = 0L;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (short)1, (int) (short) (-1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 229.4;
      ArrayUtils.shift(doubleArray0, 83);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 229.4, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2337));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-17L);
      longArray0[4] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-17L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-839L), (double) 0L);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-17L), 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray2.length);
      
      ArrayUtils.reverse((double[]) null, (int) (short)3, 575);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-75));
      assertNotNull(byte0);
      assertEquals((byte) (-75), (byte)byte0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'a';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = ']';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'a', 'o', 'o', 'o', 'o', ']'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-75);
      shortArray0[1] = (short) (byte) (-75);
      shortArray0[1] = (short) (byte) (-75);
      shortArray0[3] = (short) (byte) (-75);
      shortArray0[4] = (short) (byte) (-75);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-75));
      assertArrayEquals(new short[] {(short) (-75), (short) (-75), (short)0, (short) (-75), (short) (-75)}, shortArray0);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'o', 'o', 'a', 'o', 'o', 'o', 'o', ']'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf("@;|-$MYH,y");
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean("@;|-$MYH,y");
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[3] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift((short[]) null, (-3382), (-3382), 90);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift((short[]) null, 798, 798, 2139);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-1335));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(2, int1);
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2095);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2095;
      intArray0[1] = (-3395);
      intArray0[2] = (-1335);
      intArray0[3] = (-1335);
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = (int) (short)2095;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {2095, (-3395), (-1335), (-1335), 0, 2, 2, 0, 2095}, intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 7);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Long long0 = new Long(49);
      assertNotNull(long0);
      assertEquals(49L, (long)long0);
      
      Long long1 = new Long((-423L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-423L), (long)long1);
      
      Long long2 = new Long(2430L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(2430L, (long)long2);
      
      Long long3 = new Long(2430L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(2430L, (long)long3);
      
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray1, 942, 7, 91);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-3890);
      shortArray0[1] = (short)10;
      shortArray0[2] = (short) (-1548);
      shortArray0[3] = (short) (-849);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-2593);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-3890), (-1628));
      assertArrayEquals(new short[] {(short) (-3890), (short)10, (short) (-1548), (short) (-849), (short)1, (short) (-2593)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (int) (short) (-3890));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3890), (short)10, (short) (-1548), (short) (-849), (short)1, (short) (-2593)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'o');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'o';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) 'o';
      floatArray0[4] = (float) 'o';
      floatArray0[5] = (float) 'o';
      floatArray0[6] = (-213.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {111.0F, 111.0F, 111.0F, 111.0F, 111.0F, 111.0F, (-213.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 111.0F;
      doubleArray0[1] = (-3405.8968457349315);
      doubleArray0[2] = 1112.6622723814944;
      doubleArray0[3] = 1112.6622723814944;
      doubleArray0[4] = (double) 'o';
      doubleArray0[5] = 3179.0;
      doubleArray0[6] = (double) 111.0F;
      doubleArray0[7] = (double) 111.0F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {111.0, (-3405.8968457349315), 1112.6622723814944, 1112.6622723814944, 111.0, 3179.0, 111.0, 111.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {111.0, (-3405.8968457349315), 1112.6622723814944, 1112.6622723814944, 111.0, 3179.0, 111.0, 111.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 'o';
      intArray0[2] = (int) 'o';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1331), 1565);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {111, 111, 111}, intArray0);
      assertArrayEquals(new int[] {111, 111, 111}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)911);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer(944);
      assertNotNull(integer0);
      assertEquals(944, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-70);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 5);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-70)}, intArray0);
      assertArrayEquals(new int[] {(-70)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Integer integer0 = new Integer(2430);
      assertNotNull(integer0);
      assertEquals(2430, (int)integer0);
      
      Integer integer1 = new Integer(2430);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2430, (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1173;
      ArrayUtils.swap((double[]) null, 1072, 9, 334);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1193.0F;
      floatArray0[1] = (float) 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-10), 9);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1193.0F, 9.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet1;
      objectArray0[2] = (Object) (short)1173;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) 9.0F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)47;
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)11, (byte)12, (byte)13, (byte)18, (byte) (-43), (byte)64, (byte) (-90), (byte)47}, byteArray0);
      assertFalse(bitSet2.isEmpty());
      assertEquals(128, bitSet2.size());
      assertEquals(70, bitSet2.length());
      assertEquals(30, bitSet2.cardinality());
      assertEquals("{0, 1, 2, 6, 7, 8, 9, 11, 18, 19, 24, 26, 27, 33, 36, 40, 42, 44, 46, 47, 54, 57, 58, 61, 63, 64, 65, 66, 67, 69}", bitSet2.toString());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(9, byteArray0.length);
      
      Integer integer3 = new Integer(43);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(43, (int)integer3);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer3, (-1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(20, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-246));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean2);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)26, (byte) (-92), (byte) (-63), (byte)3, (byte)1, (byte) (-125), (byte)96, (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'K';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3179;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 3179;
      integerArray0[1] = (Integer) 3179;
      integerArray0[2] = (Integer) 3179;
      integerArray0[3] = (Integer) 3179;
      integerArray0[4] = (Integer) 3179;
      integerArray0[5] = (Integer) 3179;
      integerArray0[6] = (Integer) 3179;
      Integer integer0 = ArrayUtils.get(integerArray0, 116);
      assertNull(integer0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[6];
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (double) (int)integerArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 7);
      assertArrayEquals(new double[] {3179.0, 100.0, 3179.0, 3179.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ArrayUtils.shift(shortArray0, 398);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[3] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[4] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-46));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-46), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      Byte[] byteArray1 = new Byte[4];
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, 82);
      assertEquals(3, int0);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.reverse((Object[]) characterArray0, (int) (byte)0, (int) (byte) (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1678.828963504449, (-99));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'K';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3179;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'K';
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 3179, 3206.611344230507);
      assertEquals((-1), int0);
      
      objectArray0[1] = (Object) 'd';
      objectArray0[2] = (Object) 'd';
      ArrayUtils.swap(objectArray0, 1431, 575, 4076);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-18);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-18), (short)0}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 946, 575);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {3179}, intArray0);
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      
      int int2 = ArrayUtils.indexOf(longArray0, 0L, 79);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int2);
      assertEquals(0, longArray0.length);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(100);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(100, (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4'}, charArray1);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4', '4'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      
      Integer integer3 = new Integer(100);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(100, (int)integer3);
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray2, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray2.length);
      
      int int1 = ArrayUtils.indexOf(charArray1, '\'');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4'}, charArray1);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4', '4'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals((-1), int1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      
      int int2 = ArrayUtils.indexOf(charArray1, 'u', 2146383303);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4'}, charArray1);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4', '4', '4', '4'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals((-1), int2);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '4';
      intArray0[2] = int0;
      intArray0[3] = 2146383303;
      intArray0[4] = 100;
      intArray0[5] = (int) '4';
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[0];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]", longBuffer0.toString());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertFalse(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.limit());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.capacity());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 2146015798;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 2146015798}, intArray1);
      assertArrayEquals(new int[] {(-1), 2, 2146015798}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1380;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 469);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short) (byte) (-108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-77), (short) (-108)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-108));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1380, 2089}, intArray0);
      assertArrayEquals(new int[] {1380, 2089}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte) (-1));
      assertNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-2831));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      Character character1 = new Character('>');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer((byte) (-1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray2 = ArrayUtils.toObject(intArray0);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray2.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'>'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 959.9529F;
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 4, (int) '.');
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 4, 4, 116);
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Short short0 = new Short((short)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 959.9529F);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {959.952880859375, 959.952880859375, (-138.665465237655), 0.0, 959.952880859375}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {959.952880859375, 959.952880859375, (-138.665465237655), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(5240);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(5240, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-960));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-960), (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 68);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {5240, (-960)}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, (double) 5240);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {959.952880859375, 959.952880859375, (-138.665465237655), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {959.952880859375, 959.952880859375, (-138.665465237655), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) '.';
      floatArray1[1] = (float) '@';
      floatArray1[2] = (float) '.';
      floatArray1[3] = 959.9529F;
      floatArray1[4] = (float) 68;
      floatArray1[5] = (-2494.0F);
      boolean boolean1 = ArrayUtils.contains(floatArray1, 2910.6F);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {46.0F, 64.0F, 46.0F, 959.9529F, 68.0F, (-2494.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Float[] floatArray0 = new Float[8];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1517, (-443));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)1, 1290);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Integer integer0 = new Integer((-148));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-148), (int)integer0);
      
      Integer integer1 = new Integer((-2991));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2991), (int)integer1);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, integerArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1517);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1517L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = ArrayUtils.insert(26, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short)3179;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short)3179}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)3179;
      floatArray0[1] = (float) (short)3179;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (short)3179;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)3179);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 3179L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)3179;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {3179, 1, 3179}, intArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(3, intArray0.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertTrue(boolean1);
      assertEquals(9, longArray2.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-122));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short)3179}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-122)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-213.0F);
      floatArray1[1] = (float) (short)1;
      floatArray1[2] = (float) 3179L;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray1, 3179.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {(-213.0F), 1.0F, 3179.0F}, floatArray1, 0.01F);
      assertEquals(3, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(stringArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      int int0 = 46;
      Integer integer0 = new Integer(46);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2804);
      ArrayUtils.shift(longArray0, 9);
      assertArrayEquals(new long[] {(-2804L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2804L)}, longArray0);
      assertArrayEquals(new long[] {(-2804L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int int1 = 1072;
      Integer integer1 = new Integer(1072);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(1072, (int)integer1);
      
      Integer integer2 = new Integer(468);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(468, (int)integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      try { 
        Integer.valueOf("", (int) integerArray0[1]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 468 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '@');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray2);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(1, intArray0.length);
      assertEquals(3, charArray2.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      ArrayUtils.shift(floatArray0, 1970, 43, (int) (short)3);
      assertEquals(12, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2245.76);
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = (double) '@';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {(-2245.76), 52.0, 64.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse((short[]) null);
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom((byte)27);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (byte)27;
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-26);
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-26);
      shortArray0[6] = (short) (byte)27;
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)27;
      intArray0[1] = (int) (byte)69;
      intArray0[2] = (int) (byte) (-26);
      intArray0[3] = (int) (byte) (-26);
      intArray0[4] = (int) (short)27;
      intArray0[5] = (int) (byte) (-80);
      intArray0[6] = 1101;
      intArray0[7] = (int) (short) (-26);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1101, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2965;
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-10324);
      shortArray0[7] = (short)512;
      shortArray0[6] = (short)2915;
      shortArray0[7] = (short)512;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(3, integerArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-285.5), (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, integerArray0.length);
      
      Integer integer1 = new Integer((short)2965);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(2965, (int)integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, Integer.MAX_VALUE, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(2965, (int)integer2);
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-32.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1168);
      intArray0[1] = (-1168);
      intArray0[2] = (-1168);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertArrayEquals(new int[] {(-1168), (-1168), (-1168)}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'Z';
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 46);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2574);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2574);
      shortArray0[3] = (short) (-2574);
      shortArray0[4] = (short)6;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)6, (short) (-2574), (short) (-2574), (short)0, (short) (-2574)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'Z', 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (short) (-2574);
      boolean boolean5 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertArrayEquals(new int[] {111, (-2574)}, intArray0);
      assertFalse(boolean5);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)79;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)79, (byte)79, (byte)79}, byteArray0);
      assertEquals(2, int0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)79;
      longArray0[1] = (long) (-2597);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (byte)79;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)79, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(13, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(13, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      Character character1 = new Character('d');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      ArrayUtils.shift(charArray0, (-60));
      assertArrayEquals(new char[] {'/'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)79;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)79);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)79, (byte)79}, byteArray1);
      assertArrayEquals(new byte[] {(byte)79, (byte)79, (byte)79}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)908;
      shortArray0[1] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)908, (short)908}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)908;
      shortArray1[1] = (short)908;
      shortArray1[2] = (short)908;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)908);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)908, (short)908, (short)908}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, int0);
      assertEquals(3, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift((double[]) null, 2132218741);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)908;
      longArray0[1] = (long) (short)908;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2499), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2499, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (int) (short) (-990));
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "java.lang.Short");
      assertNotNull(stringArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      ArrayUtils.shift(booleanArray1, (-848), (-848), (-848));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 5001L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 0, 2146199424);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1134);
      longArray0[1] = (long) 2146199424;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray2 = new boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      ArrayUtils.shift(booleanArray2, (-1134), (-4406), Integer.MAX_VALUE);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray2.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null, 1824L);
      assertNull(longArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) 2146199424);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ArrayUtils.shift(byteArray0, 52);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)1);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1021.41781082;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 117.962261601921;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (-1566), 868, 868);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 868);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-1566));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 868;
      intArray0[1] = 4;
      intArray0[2] = (-1);
      ArrayUtils.shift(intArray0, (-580), (-1741), 4);
      assertArrayEquals(new int[] {868, 4, (-1)}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-38));
      assertNull(byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1566);
      longArray0[1] = (long) 4;
      longArray0[2] = (long) (-580);
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {(-1566L), 4L, (-580L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 868, (int) (byte) (-38));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1566L), 4L, (-580L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 4549);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int int0 = 49;
      Integer integer0 = new Integer(49);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 13);
      assertNull(integer1);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer2 = new Integer(109);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (int) 34, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(109, (int)integer3);
      assertEquals(2, integerArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertSame(object2, object1);
      
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(49, (int)integer4);
      
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)43);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)43, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, int0);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(4, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)43;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)43, (byte)34, (byte)34}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      floatArray0[4] = (float) '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '\u0000', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '\u0000';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray0));
      assertEquals(1, int0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)908;
      shortArray0[1] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)908, (short)908}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 921.0, (double) (short)908);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 6.0, (-1496), Double.NaN);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0.0F, (double) 0.0F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)2, (long) (short)2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Float float0 = new Float((float) (short)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, (short)2);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.valueOf(boolean1);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean1 == boolean0);
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 2);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 2, 2);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      byte byte4 = (byte)1;
      Byte byte5 = new Byte((byte)1);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals((byte)1, (byte)byte5);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1122.2801, 0, 674.4387);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer(byte0);
      assertFalse(byte0 == byte4);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      try { 
        Integer.valueOf((String) null, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'B';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) '\"';
      longArray0[4] = (long) '\"';
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'N';
      longArray0[7] = (long) 'N';
      longArray0[8] = (long) 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2325));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2146244475), 14);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'M';
      characterArray0[1] = (Character) 'M';
      characterArray0[2] = (Character) 'B';
      characterArray0[3] = (Character) '\"';
      characterArray0[4] = (Character) 'M';
      characterArray0[5] = (Character) '\"';
      Character character0 = new Character((char) characterArray0[5]);
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      assertEquals(9, characterArray0.length);
      
      characterArray0[6] = character0;
      characterArray0[7] = (Character) 'j';
      characterArray0[8] = (Character) '\"';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1561);
      shortArray0[1] = (short)1678;
      shortArray0[2] = (short) (-2193);
      shortArray0[3] = (short)3419;
      shortArray0[4] = (short)7973;
      ArrayUtils.swap(shortArray0, 48, (int) (short) (-2193), 2586);
      assertArrayEquals(new short[] {(short) (-1561), (short)1678, (short) (-2193), (short)3419, (short)7973}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[4];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      byte byte0 = (byte) (-18);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)79);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-44), (byte) (-44), (byte)0, (byte) (-18), (byte)0, (byte) (-44), (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-10), (byte) (-44), (byte) (-44), (byte)0, (byte) (-18), (byte)0, (byte) (-44), (byte) (-44)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-18), (int) (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-44), (byte) (-44), (byte)0, (byte) (-18), (byte)0, (byte) (-44), (byte) (-44)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-10);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-44), (short)0, (short) (-44), (short)0, (short) (-10)}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short) (-10));
      assertNotNull(integer0);
      assertEquals((-10), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(46);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte) (-10));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-10), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-10), (int)integer3);
      assertEquals(7, integerArray0.length);
      
      integerArray0[3] = integer3;
      try { 
        Integer.valueOf("The Array must not be null", 2749);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2749 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1155;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte) (-45);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'o';
      doubleArray0[5] = (double) (-2597);
      doubleArray0[6] = (double) 'o';
      doubleArray0[7] = (double) (-2597);
      ArrayUtils.shift(doubleArray0, 372);
      assertArrayEquals(new double[] {111.0, (-2597.0), 111.0, (-2597.0), 1155.0, (-1.0), (-45.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1), longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (int)'4';
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-267));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {52}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1538);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 38);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {38}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1437.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1437.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)109;
      intArray0[1] = (int) (byte)109;
      intArray0[2] = (int) (byte)109;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {109, 109, 109}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 109;
      objectArray0[2] = (Object) 109;
      objectArray0[3] = (Object) 109;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[12];
      integerArray0[0] = (Integer) 109;
      integerArray0[1] = (Integer) 109;
      objectArray0[3] = (Object) 109;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)109);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(12, integerArray0.length);
      assertEquals(12, intArray1.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(12, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)47);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2141227176), (-2141227176));
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[1] = shortArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, (-2472));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3017.7);
      doubleArray0[1] = (double) (short)908;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '3');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)908;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)908);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {908L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'n');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'n'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '5';
      intArray0[1] = (-2512);
      intArray0[2] = (int) '3';
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, (-2512));
      assertArrayEquals(new int[] {53, (-2512), 51}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(longArray1, (long) 1913, (-1));
      assertTrue(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {908L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(longArray0, (int) (byte) (-100), (int) (byte) (-100), (-1134));
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (byte) (-100);
      shortArray0[2] = (short) (byte) (-100);
      shortArray0[3] = (short) (byte) (-100);
      shortArray0[4] = (short)6;
      shortArray0[5] = (short) (byte) (-100);
      shortArray0[6] = (short)6;
      shortArray0[7] = (short)6;
      shortArray0[8] = (short)6;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6, (short) (-100), (short)6, (short) (-100), (short) (-100), (short) (-100), (short)6}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '(', 1182);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'w', 'Y', 'Y'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, charArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '$';
      charArray0[8] = '!';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'r');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$', '$', '!'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, 2147067103, (int) (short)15, (-2125570549));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'k', (-472));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = Double.valueOf(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1334.23628);
      doubleArray0[1] = (-1334.23628);
      doubleArray0[2] = 4143.15194092584;
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 295.2730613738513);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-208.21256395517));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-208.21256395517)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = (-485.4120673981944);
      doubleArray0[4] = 519.4120885778565;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'e');
      assertNull(charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1235L;
      longArray0[1] = 2400L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 638, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1235L, 2400L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 2;
      intArray0[3] = 2;
      ArrayUtils.reverse(intArray0, 2, 467);
      assertArrayEquals(new int[] {17, 17, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {(-485.4120673981944), 519.4120885778565, 2321.882099, (-485.4120673981944), 519.4120885778565, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 519.4120885778565;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 1235L);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {519.4120885778565, 1235.0, 1235.0, 1235.0, 1235.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'j');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = (-485.4120673981944);
      doubleArray0[4] = 519.4120885778565;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'e');
      assertNull(charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1235L;
      longArray0[1] = 2400L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 638, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1235L, 2400L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 2;
      intArray0[3] = 2;
      ArrayUtils.reverse(intArray0, 2, 467);
      assertArrayEquals(new int[] {17, 17, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {(-485.4120673981944), 519.4120885778565, 2321.882099, (-485.4120673981944), 519.4120885778565, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 519.4120885778565;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 1235L);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {519.4120885778565}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Integer integer0 = new Integer(48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 48, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)102;
      shortArray0[4] = (short)62;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)102, (short)62}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)102, (short)62, (short) (-2603), (short)0, (short)0, (short)102, (short)62}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals("{2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)102;
      floatArray0[1] = (float) (short)62;
      floatArray0[2] = (float) (short) (-2603);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {102.0F, 62.0F, (-2603.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short)102);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift((Object[]) byteArray1, (int) (short) (-2603));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '_';
      charArray0[2] = '>';
      charArray0[3] = '/';
      charArray0[4] = '-';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = 'P';
      charArray0[8] = 'c';
      int int1 = ArrayUtils.indexOf(charArray0, 'T', Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'E', '_', '>', '/', '-', '\'', '\'', 'P', 'c'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-3787.6331571447627);
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (-2086126972), (-297));
      assertEquals(17, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, (-4579), 2, (-87));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (-2086126972);
      longArray0[5] = (long) 'W';
      longArray0[6] = (long) 'R';
      longArray0[7] = (long) (-4579);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 87L, (-1L), (-2086126972L), 87L, 82L, (-4579L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 87L, 2L, (-1L), (-2086126972L), 87L, 82L, (-4579L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 1791);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, intArray0.length);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.insert(11, (float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int[] intArray0 = new int[8];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(8, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1662;
      ArrayUtils.shift(shortArray0, (-2878), (-2878), 65);
      assertArrayEquals(new short[] {(short)1662}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-2086126971), 34, 0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 230.656F;
      floatArray0[1] = 2498.9414F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-2707.0F);
      floatArray0[4] = 1019.0F;
      floatArray0[5] = 2498.9414F;
      floatArray0[6] = (-2219.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-712.8457F));
      assertArrayEquals(new float[] {230.656F, 2498.9414F, Float.NaN, (-2707.0F), 1019.0F, 2498.9414F, (-2219.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'I';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'|', 'I'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '~';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2693.0511426099315), (double) (-712.8457F));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {126.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.546189064041982);
      doubleArray0[1] = (-2126.65507);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2304.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      ArrayUtils.swap(doubleArray0, 68, 68, (-837));
      assertArrayEquals(new double[] {(-9.546189064041982), (-2126.65507), (-1.0), 1.0, 2304.0, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 68;
      intArray0[1] = (-837);
      intArray0[2] = 68;
      intArray0[3] = (-837);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {68, (-837), 68, (-837)}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 551, (-837));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2812;
      shortArray0[1] = (short)90;
      shortArray0[2] = (short)8053;
      shortArray0[3] = (short)512;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, 2, (short)512);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2812, (short)90, (short)8053, (short)512, (short)100, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)2812, (short)90, (short)512, (short)8053, (short)512, (short)100, (short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2965;
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-10324);
      shortArray0[7] = (short)512;
      shortArray0[6] = (short)2915;
      shortArray0[7] = (short)512;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(3, integerArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-285.5), (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (int) (short)2965);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.swap(intArray0, (int) (short)512, 2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2472.6765F;
      floatArray0[1] = 2472.6765F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3.0F);
      assertArrayEquals(new float[] {2472.6765F, 2472.6765F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'u', 3479);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap(floatArray0, 2, 2, (int) (byte) (-87));
      assertArrayEquals(new float[] {2472.6765F, 2472.6765F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3.0F;
      doubleArray0[1] = (double) 2828;
      doubleArray0[2] = (double) '@';
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) '.';
      doubleArray0[5] = (double) 3479;
      doubleArray0[6] = (double) 2472.6765F;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) '.';
      ArrayUtils.swap(doubleArray0, 631, (int) (byte) (-87), 54);
      assertArrayEquals(new double[] {3.0, 2828.0, 64.0, 2.0, 46.0, 3479.0, 2472.676513671875, 2.0, 46.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5761.147);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-647.00190295);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, (double) 0);
      assertArrayEquals(new double[] {(-5761.147), 0.0, 0.0, 0.0, 0.0, (-647.00190295)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'l';
      charArray0[2] = '>';
      ArrayUtils.swap(charArray0, 0, 3564);
      assertArrayEquals(new char[] {'\u0000', 'l', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '>';
      charArray1[3] = 'l';
      charArray1[4] = '>';
      charArray1[5] = '>';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'\u0000', 'l', '>'}, charArray0);
      assertArrayEquals(new char[] {'l', 'l', '>', 'l', '>', '>', '\u0000'}, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(3, charArray0.length);
      assertEquals(7, charArray1.length);
      
      char[] charArray3 = ArrayUtils.removeElement(charArray1, 'n');
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'l', 'l', '>', 'l', '>', '>', '\u0000'}, charArray3);
      assertArrayEquals(new char[] {'l', 'l', '>', 'l', '>', '>', '\u0000'}, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertEquals(7, charArray3.length);
      assertEquals(7, charArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2770.0F);
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) '>';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2770.0F), 62.0F, 108.0F, 62.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2770.0F), 62.0F, 108.0F, 62.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      ArrayUtils.reverse(longArray0, 0, 272);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)34, (double) (byte)34);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 305, 960);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)34, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertEquals(1, booleanArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)34;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1777;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-974));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -974, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = 0;
      int int1 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int int2 = 49;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      try { 
        Integer.valueOf("Don't clear/set the same environment variable more than once.", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = (-1L);
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-3));
      assertNotNull(integer0);
      assertEquals((-3), (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) Float.NaN;
      boolean boolean2 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-723);
      floatArray0[2] = (float) (-723);
      floatArray0[3] = (float) (-723);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-723);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-723);
      longArray0[1] = (long) 0;
      longArray0[2] = 49L;
      longArray0[3] = (-1674L);
      longArray0[4] = (long) 0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1136);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 1;
      longArray1[1] = 1L;
      longArray1[2] = 49L;
      longArray1[3] = (-1L);
      longArray1[4] = (-1L);
      longArray1[5] = (long) (-723);
      longArray1[6] = (-1674L);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1L, 1L, 49L, (-1L), (-1L), (-723L), (-1674L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 8;
      intArray0[0] = 8;
      ArrayUtils.swap(intArray0, 9, 8);
      assertArrayEquals(new int[] {8}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)4;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 8;
      integerArray0[1] = (Integer) 8;
      integerArray0[2] = (Integer) 8;
      integerArray0[3] = (Integer) 8;
      integerArray0[4] = (Integer) 8;
      Integer integer0 = ArrayUtils.get(integerArray0, int0);
      assertNull(integer0);
      assertEquals(5, integerArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)47;
      doubleArray0[1] = (double) (short) (-10324);
      doubleArray0[2] = (double) (short)2304;
      doubleArray0[3] = (double) (byte)102;
      doubleArray0[4] = (double) int0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)47, 471);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {47.0, (-10324.0), 2304.0, 102.0, 8.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)34;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 2146015798;
      doubleArray0[6] = 1.5;
      doubleArray0[4] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2.146015798E9, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 2146015798;
      ArrayUtils.shift(longArray0, 1280);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 2146015798L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int1 = (-2146997539);
      Object object0 = ArrayUtils.get((Object[]) null, (-2146997539));
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)1008;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1008, (int) (short)1008);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      
      Object object0 = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2094);
      intArray0[1] = (-2094);
      intArray0[2] = (-162);
      intArray0[3] = (-2094);
      intArray0[4] = (-2094);
      intArray0[5] = (-2094);
      intArray0[6] = (-2094);
      intArray0[7] = (-2094);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-2094), (-2094), (-162), (-2094), (-2094), (-2094), (-2094), (-2094)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2094), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2094, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = 1462L;
      longArray0[2] = 225L;
      longArray0[3] = 3793L;
      longArray0[4] = 0L;
      longArray0[5] = 1085L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), 1462L, 225L, 3793L, 0L, 1085L}, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2713);
      intArray0[1] = (-1921);
      intArray0[2] = 46;
      intArray0[3] = 1;
      intArray0[4] = 100;
      intArray0[5] = (-256);
      intArray0[6] = (-3480);
      ArrayUtils.reverse(intArray0, 59, (-14));
      assertArrayEquals(new int[] {(-2713), (-1921), 46, 1, 100, (-256), (-3480)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1462L, 225L, 3793L, 0L, 1085L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-3601));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 100;
      integerArray0[1] = (Integer) (-1921);
      integerArray0[2] = (Integer) 100;
      integerArray0[3] = (Integer) (-256);
      integerArray0[4] = (Integer) (-1921);
      integerArray0[5] = (Integer) 100;
      integerArray0[6] = (Integer) 100;
      integerArray0[7] = (Integer) (-256);
      integerArray0[8] = (Integer) (-2713);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2713), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2713, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Integer integer0 = new Integer(48);
      assertNotNull(integer0);
      assertEquals(48, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 48, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-732);
      shortArray0[3] = (short)102;
      shortArray0[4] = (short)62;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)102, (short)62}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)102, (short)62, (short) (-2603), (short)0, (short) (-732), (short)102, (short)62}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 4, 5}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)102;
      floatArray0[1] = (float) (short)62;
      floatArray0[2] = (float) (short) (-2603);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {102.0F, 62.0F, (-2603.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short)102);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift((Object[]) byteArray1, (int) (short) (-2603));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.shift(booleanArray0, 1755);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short)3179;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short)3179}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)3179;
      floatArray0[1] = (float) (short)3179;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (short)3179;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)3179);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 3179L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)3179;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {3179, 1, 3179}, intArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(3, intArray0.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertTrue(boolean1);
      assertEquals(9, longArray2.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3179);
      assertNotNull(integer0);
      assertEquals(3179, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean2 = ArrayUtils.isArrayIndexValid(integerArray0, 119);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '\u0000', '/'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '/'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Integer integer0 = new Integer((-923));
      assertNotNull(integer0);
      assertEquals((-923), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-44), (int) (byte)0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray2 = new char[8];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '/';
      charArray2[1] = '/';
      charArray2[2] = '/';
      charArray2[3] = '/';
      charArray2[4] = '/';
      charArray2[5] = '/';
      charArray2[6] = '/';
      charArray2[7] = '/';
      char[] charArray3 = ArrayUtils.add(charArray2, 'n');
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '/', '/', '/', 'n'}, charArray3);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '/', '/', '/'}, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertEquals(9, charArray3.length);
      assertEquals(8, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      ArrayUtils.shift(booleanArray0, 47);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[3] = 0L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-825L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) longArray1, 575, (-2086126972), (-2086126972));
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int0 = (-39);
      Integer integer0 = new Integer((-39));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.shift((Object[]) integerArray0, (int) (short)0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray1, 52, 2430, 8);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = ';';
      ArrayUtils.reverse(charArray0, (-1647), int0);
      assertArrayEquals(new char[] {'T', ';'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, '\"', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) (-1134);
      longArray0[3] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {73L, 73L, (-1134L), 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[2] = (double) '\u0000';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)15;
      ArrayUtils.shift(shortArray0, 65, (int) (short)0, 2147067103);
      assertArrayEquals(new short[] {(short)15}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(4, objectArray1.length);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'y', (-472));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean[] booleanArray1 = new Boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = boolean1;
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(stringArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) 1L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1L, (-1951), 1.5);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, (String) null);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      long[] longArray0 = new long[9];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '$';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '5', '>', '>', '>', '$'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) '5';
      objectArray1[1] = (Object) '>';
      ArrayUtils.shuffle(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ", '");
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(stringArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "#7sF!D\"yOq");
      assertNotNull(stringArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2891L;
      longArray0[1] = 4335L;
      longArray0[2] = (-5063L);
      ArrayUtils.shift(longArray0, 1, 1, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {2891L, 4335L, (-5063L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 2294L;
      longArray0[3] = 1958L;
      longArray0[4] = 1958L;
      ArrayUtils.shift(longArray0, 1067);
      assertArrayEquals(new long[] {1958L, 1958L, 0L, 2294L, 2294L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 2294L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 2294L;
      objectArray0[3] = (Object) 1958L;
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '|';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'t', '|', 't', 't', 't', 't'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2689L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1958L, 1958L, 0L, 2294L, 2294L}, longArray0);
      assertArrayEquals(new long[] {1958L, 1958L, 0L, 2294L, 2294L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'w');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'t', '|', 't', 't', 't', 't', 'w'}, charArray1);
      assertArrayEquals(new char[] {'t', '|', 't', 't', 't', 't'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 't';
      intArray0[2] = (int) 't';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 49, 90);
      assertArrayEquals(new int[] {124, 116, 116}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ", '");
      assertNotNull(stringArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      ArrayUtils.shift(longArray0, (int) (byte)125);
      assertArrayEquals(new long[] {0L, 33L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'W');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte)33);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 33L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '5');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)79;
      intArray0[2] = (-2512);
      intArray0[3] = 1067;
      intArray0[4] = 90;
      intArray0[5] = (int) 'w';
      intArray0[6] = (int) '|';
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2713, 79);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), 79, (-2512), 1067, 90, 119, 124}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      
      int int2 = ArrayUtils.indexOf(longArray1, 1L, 1913);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 33L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int2);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (byte) (-55);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, (-55L)}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-96));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2698), (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = new char[5];
      charArray0[0] = (char) character0;
      charArray0[1] = '/';
      charArray0[2] = (char) character1;
      charArray0[3] = '/';
      charArray0[4] = '/';
      ArrayUtils.shift(charArray0, (int) (byte) (-96));
      assertArrayEquals(new char[] {'/', '>', '/', '/', '>'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)1, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1901L), 1L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-472);
      intArray0[1] = (-472);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences((long[]) null, 447L);
      assertNull(longArray2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)88;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)88);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)88}, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)88}, byteArray0);
      assertTrue(boolean2);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)76);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2019, (int) (short)1);
      assertArrayEquals(new int[] {(-472), (-472)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)76);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2019, (int) (short)1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1753));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3191);
      shortArray0[2] = (short) (-3191);
      shortArray0[3] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 1793);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3191), (short)0, (short) (-3191), (short)2111}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3191), (short)0, (short) (-3191), (short)2111}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-80);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-44), 2);
      assertArrayEquals(new float[] {(-80.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-44), (short)0, (short)0, (short) (-44)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-44), (short)0, (short)0, (short) (-44)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray2 = ArrayUtils.remove(doubleArray0, 1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2430;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {2430.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float(3303.604F);
      assertNotNull(float0);
      assertEquals(3303.604F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'=', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Integer integer0 = new Integer((-297));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-297), (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer1 = new Integer((-297));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-297), (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-297), (int)integer2);
      assertEquals(2, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray0.length);
      
      Integer integer3 = new Integer(2930);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2930, (int)integer3);
      
      Integer[] integerArray2 = ArrayUtils.removeAllOccurences(integerArray0, integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      assertSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1708.9874F);
      floatArray0[1] = (float) 1134;
      floatArray0[2] = (float) 2294L;
      floatArray0[4] = (float) 1;
      ArrayUtils.swap(floatArray0, (-464), (-2370), (-1064));
      assertArrayEquals(new float[] {(-1708.9874F), 1134.0F, 2294.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 284.402;
      doubleArray0[3] = (double) 1271;
      doubleArray0[4] = (double) 1134;
      doubleArray0[5] = (double) (-515);
      ArrayUtils.swap(doubleArray0, 1134, (-464), (-297));
      assertArrayEquals(new double[] {0.0, 0.0, 284.402, 1271.0, 1134.0, (-515.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-297);
      intArray0[1] = (-1064);
      intArray0[2] = (-297);
      ArrayUtils.shift(intArray0, (-297), 2, 1271);
      assertArrayEquals(new int[] {(-1064), (-297), (-297)}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1271);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1271, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int0 = (-39);
      Integer integer0 = new Integer((-39));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) (-464);
      floatArray0[2] = 325.5F;
      floatArray0[3] = (float) 921L;
      floatArray0[4] = (float) 1072;
      ArrayUtils.swap(floatArray0, 2, 2430, 0);
      assertArrayEquals(new float[] {(-39.0F), (-464.0F), 325.5F, 921.0F, 1072.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-464.0F);
      ArrayUtils.swap(doubleArray0, (-2370), 2146713575, 2146713575);
      assertArrayEquals(new double[] {2.0, (-464.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, 2430, 2146713575, (-464));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      String string0 = ArrayUtils.toString((Object) int0, "void");
      assertNotNull(string0);
      assertEquals("-39", string0);
      
      int int1 = ArrayUtils.indexOf(longArray1, (long) 0, 2430);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1708.9874F);
      floatArray0[1] = (float) 1134;
      floatArray0[2] = (float) 2294L;
      floatArray0[4] = (float) 1;
      ArrayUtils.swap(floatArray0, (-464), (-2370), (-1064));
      assertArrayEquals(new float[] {(-1708.9874F), 1134.0F, 2294.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 284.402;
      doubleArray0[3] = (double) 1271;
      doubleArray0[4] = (double) 1134;
      doubleArray0[5] = (double) (-515);
      ArrayUtils.swap(doubleArray0, 1134, (-464), (-297));
      assertArrayEquals(new double[] {0.0, 0.0, 284.402, 1271.0, 1134.0, (-515.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-297);
      intArray0[1] = (-1064);
      intArray0[2] = (-297);
      ArrayUtils.shift(intArray0, (-297), 2, 1271);
      assertArrayEquals(new int[] {(-1064), (-297), (-297)}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2027);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-2027)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, (-1), 2, 2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 672L;
      longArray0[4] = 672L;
      Integer integer0 = Integer.getInteger("Array element ");
      assertNull(integer0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1054);
      intArray0[1] = (-1054);
      intArray0[2] = (-1054);
      intArray0[3] = (-1054);
      intArray0[4] = (-1054);
      intArray0[5] = (-1054);
      intArray0[6] = (-1054);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1054, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3820L);
      floatArray0[1] = (float) (-3820L);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1125);
      intArray0[1] = 2767;
      intArray0[2] = 2767;
      intArray0[3] = 2767;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1125), 2767, 2767, 2767}, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 2767);
      assertNull(longArray1);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)76);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)76);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1125), 2767);
      assertArrayEquals(new int[] {(-1125), 2767, 2767, 2767}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1567.61655), (-1567.61655));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', (-2099761788));
      assertArrayEquals(new char[] {'L', 'B'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'B';
      ArrayUtils.shift(intArray0, (-2099761788), (-2594), (-2672));
      assertArrayEquals(new int[] {66}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)124;
      ArrayUtils.shift(byteArray0, (-2797), (-2554), 801);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte)0, (byte)124}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'B';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (-1246.4356));
      assertArrayEquals(new double[] {(-1.0), 66.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k) pNcF";
      stringArray0[1] = "Cannot store ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "The type must not be null";
      stringArray0[2] = "u'X.IM6^";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = 949.388F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte) (-90);
      floatArray0[4] = (float) (byte) (-90);
      floatArray0[5] = (float) (byte) (-90);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1289.5F), 57);
      assertArrayEquals(new float[] {0.0F, 949.388F, 0.0F, (-90.0F), (-90.0F), (-90.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-90));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-90.0), (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3975);
      intArray0[1] = (-1);
      ArrayUtils.shift(intArray0, 1, 0, 498);
      assertArrayEquals(new int[] {(-3975), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-57);
      ArrayUtils.shift(byteArray0, 364, (int) (byte) (-43), 275);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)102, (byte) (-57), (byte) (-43), (byte) (-57)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1534.4F;
      floatArray0[1] = (float) 1204L;
      floatArray0[2] = (float) 2383L;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1534.4F, 1204.0F, 2383.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1534.4F, 1204.0F, 2383.0F, 1534.4F, 1204.0F, 2383.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, 128);
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) '@';
      objectArray0[2] = (Object) 'o';
      objectArray0[3] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ' ';
      objectArray0[6] = (Object) 'o';
      objectArray0[7] = (Object) '@';
      ArrayUtils.shift(objectArray0, (-1554), 128, 98);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-241), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -241, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      doubleArray0[1] = 869.65969;
      doubleArray0[2] = 85.0;
      doubleArray0[3] = (-913.441067);
      doubleArray0[5] = (-3511.632080416078);
      doubleArray0[6] = 2247.11;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 302.306843173669, 0, 311.853032237711);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1681.4, 869.65969, 85.0, (-913.441067), 0.0, (-3511.632080416078), 2247.11}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2247.11, (-3511.632080416078), 0.0, (-913.441067), 85.0, 869.65969, 1681.4}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2276);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-902);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2294.0F;
      floatArray0[1] = 694.62415F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {2294.0F, 694.62415F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = new Integer((short) (-2276));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2276), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-3511.632080416078));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {2247.11, (-3511.632080416078), 0.0, (-913.441067), 85.0, 869.65969, 1681.4}, doubleArray0, 0.01);
      assertEquals(1, bitSet1.cardinality());
      assertEquals(2, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{1}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      classArray0[3] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[3] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[4] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[5] = class4;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-491));
      assertNotNull(integer0);
      assertEquals((-491), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-491), (int)integer1);
      assertEquals(9, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-491), (int)integer2);
      assertEquals(9, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-491), (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-491), (int)integer4);
      assertEquals(9, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-491), (int)integer5);
      assertEquals(9, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(18688);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(18688, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals((-491), (int)integer7);
      assertEquals(9, integerArray0.length);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(3866);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertNotNull(integer8);
      assertEquals(3866, (int)integer8);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 18688, 74);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'D';
      charArray0[2] = 'E';
      charArray0[3] = '=';
      charArray0[4] = 'n';
      charArray0[5] = '2';
      charArray0[6] = 'E';
      charArray0[7] = '\'';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'N', 'D', 'E', '=', 'n', '2', 'E', '\''}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '=';
      charArray1[1] = 'E';
      charArray1[2] = '\'';
      charArray1[3] = 'D';
      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'N', 'D', 'E', '=', 'n', '2', 'E', '\''}, charArray0);
      assertArrayEquals(new char[] {'=', 'E', '\'', 'D'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertEquals(4, charArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'E';
      longArray0[1] = (long) '=';
      longArray0[2] = 2838L;
      longArray0[3] = (long) '=';
      ArrayUtils.shift(longArray0, (-2896), (-2896), (-2896));
      assertArrayEquals(new long[] {69L, 61L, 2838L, 61L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) 'n';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {68.0, 110.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.0, 110.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\"', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-87);
      floatArray1[1] = (-783.227F);
      floatArray1[2] = (float) (-491);
      floatArray1[3] = (float) (byte) (-115);
      floatArray1[4] = (float) (byte) (-115);
      floatArray1[5] = (float) (-1);
      floatArray1[6] = 2052.0F;
      floatArray1[7] = (float) (-1);
      ArrayUtils.swap(floatArray1, 3, (int) (byte) (-115), 5);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-115.0F), (-115.0F), (-1.0F), 2052.0F, (-1.0F), (-491.0F), (-87.0F), (-783.227F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) '1';
      doubleArray0[2] = (double) (-115.0F);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2052.0F;
      ArrayUtils.swap(doubleArray0, 334, (int) (byte) (-115), (-1));
      assertArrayEquals(new double[] {(-1.0), 49.0, (-115.0), (-1.0), 2052.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-87.0F), (-10));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-491));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1);
      objectArray0[3] = (Object) (-783.227F);
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 2052.0F;
      objectArray0[6] = (Object) (-783.227F);
      int int2 = ArrayUtils.indexOf(objectArray0, objectArray0[4], (-738));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = (-3010);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 10;
      intArray0[4] = (-1273);
      ArrayUtils.reverse(intArray0, 128, 1);
      assertArrayEquals(new int[] {0, 1, 1, 10, (-1273)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-3010));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer integer0 = new Integer((-2494));
      assertNotNull(integer0);
      assertEquals((-2494), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1273);
      floatArray0[1] = (float) (-2494);
      floatArray0[2] = (float) (-2494);
      floatArray0[3] = (float) 10;
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short)43;
      shortArray0[2] = (short)2246;
      shortArray0[3] = (short)1531;
      ArrayUtils.shift(shortArray0, (int) (short)2246);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)43, (short)43, (short)2246, (short)1531}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)57);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)43, (short)43, (short)2246, (short)1531}, shortArray0);
      assertArrayEquals(new short[] {(short)43, (short)43, (short)2246, (short)1531}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'p');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-342.24203F);
      doubleArray0[2] = (double) 'p';
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {(-342.2420349121094), 112.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-1), longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2147483617;
      ArrayUtils.shift(doubleArray0, (int) (short) (-12));
      assertArrayEquals(new double[] {0.0, 2.147483617E9}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-2777), 110, 110);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2147483617);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1539L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'M';
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = new Character('}');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      
      ArrayUtils.shift(charArray0, 2);
      assertArrayEquals(new char[] {'j', 'M'}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) 1539L;
      floatArray0[3] = (float) 'k';
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 'M';
      ArrayUtils.shift(floatArray0, (-2571), 2, 0);
      assertArrayEquals(new float[] {77.0F, 77.0F, 1539.0F, 107.0F, 0.0F, 77.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {77.0F, 77.0F, 1539.0F, 107.0F, 0.0F, 77.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F, 1539.0F, 107.0F, 0.0F, 77.0F}, floatArray0, 0.01F);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'j';
      intArray0[1] = (int) 'j';
      intArray0[2] = (int) 'M';
      intArray0[3] = (int) 'j';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 98);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {106, 106, 77, 106}, intArray0);
      assertArrayEquals(new int[] {106, 106, 77, 106}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2294.0F;
      floatArray0[1] = 455.7F;
      ArrayUtils.shift(floatArray0, (-2146817554));
      assertArrayEquals(new float[] {2294.0F, 455.7F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'J';
      charArray0[2] = ';';
      charArray0[3] = ')';
      charArray0[4] = 'I';
      charArray0[5] = '(';
      charArray0[6] = 'T';
      charArray0[7] = '\"';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '(');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'~', 'J', ';', ')', 'I', '(', 'T', '\"'}, charArray0);
      assertArrayEquals(new char[] {'~', 'J', ';', ')', 'I', 'T', '\"'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'T';
      objectArray0[1] = (Object) 455.7F;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-3390));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (double) 2294.0F;
      doubleArray0[3] = 3900.753479117;
      doubleArray0[4] = (double) (-3390);
      doubleArray0[5] = (double) 455.7F;
      doubleArray0[6] = (double) '\"';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 455.70001220703125, 2486.5);
      assertArrayEquals(new double[] {73.0, 41.0, 2294.0, 3900.753479117, (-3390.0), 455.70001220703125, 34.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(charArray0, (-1), 3181, 0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean boolean3 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      boolean boolean4 = ArrayUtils.contains(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean4);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-17L);
      longArray0[4] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-17L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-839L), (double) 0L);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2976);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2976, (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (-2099761775));
      assertArrayEquals(new char[] {'L', 'G'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1391));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals((-1), int1);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L', 'G'}, charArray0);
      assertArrayEquals(new char[] {'G', 'L', 'G'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      int int2 = ArrayUtils.indexOf(floatArray0, 1077.9316F, (-2099761775));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int2);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 1362, 16);
      assertNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 16, 1362);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1362, 0);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-1), 1, 342);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'N', 4379);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) '\"';
      longArray0[4] = (long) '\"';
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'N';
      longArray0[7] = (long) 'N';
      longArray0[8] = (long) 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2325));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2146244475), 14);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short) (-2325));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = (float) (-2L);
      long[] longArray0 = new long[5];
      longArray0[0] = 672L;
      longArray0[1] = (-2L);
      longArray0[3] = (-2L);
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {672L, (-2L), 0L, (-2L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)2);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2L);
      ArrayUtils.reverse(doubleArray0, 88, (int) (short)2);
      assertArrayEquals(new double[] {(-2.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-1431655765), (-1431655765), (-1431655765));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2430;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {2430.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float(3303.604F);
      assertNotNull(float0);
      assertEquals(3303.604F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3303.604F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(2430);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(2430, (int)integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((-95));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-95), (int)integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(351);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(351, (int)integer4);
      
      integerArray0[5] = integer4;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'C';
      charArray0[2] = 'A';
      charArray0[3] = '(';
      charArray0[4] = '\\';
      charArray0[5] = 'F';
      charArray0[6] = 'J';
      charArray0[7] = '_';
      charArray0[8] = 'i';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'v', 'C', 'A', '(', '\\', 'F', 'J', '_', 'i'}, charArray1);
      assertArrayEquals(new char[] {'v', 'C', 'A', '(', '\\', 'F', 'J', '_', 'i'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      ArrayUtils.shift((Object[]) characterArray0, 7);
      assertEquals(2, characterArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (-1391.3);
      ArrayUtils.swap(doubleArray0, 1, 2146162949, (-2145834196));
      assertArrayEquals(new double[] {7.0, (-1391.3)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(longArray0, (int) (byte) (-100), (int) (byte) (-100), (-1134));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 2383L);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (-577.0963F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2383.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)6);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) 'j';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 84.0, 106.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 84.0, 106.0, (-1.0), (-1.0), 84.0, 106.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) 'T';
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 'M';
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 3377);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {84L, 84L, 106L, 77L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(4, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'W');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', '\"', 'j', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 2, 2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 84.0, 106.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      short[] shortArray0 = new short[9];
      ArrayUtils.shift(shortArray0, 435);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      short[] shortArray0 = new short[4];
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-723);
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1, (-723));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      Float float0 = new Float(2371.0767F);
      assertNotNull(float0);
      assertEquals(2371.0767F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      floatArray0[4] = (float) (byte)102;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)102;
      ArrayUtils.shift(byteArray0, (int) (byte)102, (int) (byte)102, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)6, (byte)102}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) float1;
      objectArray1[1] = (Object) 0.0F;
      objectArray1[2] = (Object) integer1;
      objectArray1[3] = (Object) 102.0F;
      objectArray1[4] = (Object) float0;
      objectArray1[5] = (Object) (byte)102;
      objectArray1[6] = (Object) (byte)102;
      objectArray1[7] = (Object) (byte)102;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
      assertEquals(8, objectArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray1, objectArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertTrue(boolean1);
      assertEquals(8, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1376;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 2089);
      assertArrayEquals(new int[] {1376, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap(intArray0, (int) (byte) (-57), (int) (byte)0, 2);
      assertArrayEquals(new int[] {1376, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 1376;
      doubleArray0[2] = (double) 97;
      doubleArray0[3] = (double) (byte) (-57);
      doubleArray0[4] = (double) 2089;
      doubleArray0[5] = (double) 2089;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1376.0, 97.0, (-57.0), 2089.0, 2089.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) (-1134);
      longArray0[3] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {73L, 73L, (-1134L), 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[2] = (double) '\u0000';
      objectArray0[1] = (Object) 53.0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 73L;
      ArrayUtils.shift(objectArray0, (-1134));
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, (-1134), (-1134), 0);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      ArrayUtils.reverse(charArray0, (-1134), (-5127));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      ArrayUtils.shift((float[]) null, (-224));
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-423L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-423L), (long)long1);
      
      ArrayUtils.reverse((char[]) null, 218, 261);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(641);
      assertNotNull(integer0);
      assertEquals(641, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(641);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(641, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger((String) null, 2652);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2652, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2652, (int)integer3);
      assertEquals(7, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(641);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(641, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(2652, (int)integer5);
      assertEquals(7, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3911);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(3911, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = ArrayUtils.get(integerArray0, (-2146686808), integerArray0[4]);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(641, (int)integer7);
      assertEquals(7, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer5));
      assertFalse(object0.equals((Object)integer6));
      assertTrue(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer2));
      assertNotNull(object0);
      assertEquals(641, object0);
      assertEquals(7, integerArray0.length);
      
      objectArray0[0] = object0;
      Integer integer8 = new Integer(925);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)object0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      assertEquals(925, (int)integer8);
      
      short short0 = (short)51;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)51, (-144));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer8, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'i';
      charArray0[2] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray0);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'i';
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) '%';
      floatArray0[5] = (float) '%';
      floatArray0[6] = (float) '%';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {105.0F, 77.0F, 77.0F, 77.0F, 37.0F, 37.0F, 37.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) 2383L;
      doubleArray0[4] = (-1623.97);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2383.0, (-1.0), 0.0, 2383.0, (-1623.97), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = (long) (-1);
      longArray3[1] = (-1L);
      longArray3[2] = (long) (-1);
      longArray3[3] = (long) (-1);
      longArray3[4] = 1204L;
      ArrayUtils.swap(longArray0, 4484, 4484, (-578));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertEquals(1, longArray0.length);
      
      Integer integer0 = new Integer(4484);
      assertNotNull(integer0);
      assertEquals(4484, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Integer integer0 = new Integer(97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      Integer integer1 = new Integer(2436);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2436, (int)integer1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[2] = (long) 97;
      longArray0[7] = (long) 2436;
      longArray0[8] = (long) (-1428);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 97L, 0L, 0L, 0L, 0L, 2436L, (-1428L)}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 97L, 0L, 0L, 0L, 0L, 2436L, (-1428L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-515);
      floatArray0[1] = (float) (-1428L);
      floatArray0[2] = (float) 2436;
      floatArray0[3] = (float) 97;
      floatArray0[4] = (float) (-1428L);
      floatArray0[5] = (float) 97;
      floatArray0[6] = (float) (-515);
      floatArray0[7] = (float) (-1064);
      floatArray0[8] = (float) 2436;
      ArrayUtils.swap(floatArray0, 1, 1271, 1134);
      assertArrayEquals(new float[] {(-515.0F), (-1428.0F), 2436.0F, 97.0F, (-1428.0F), 97.0F, (-515.0F), (-1064.0F), 2436.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 97;
      doubleArray0[1] = (double) (-1064.0F);
      doubleArray0[2] = (double) (-1428);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-1064.0F);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      ArrayUtils.swap(doubleArray0, (-1428), (-515), 1920);
      assertArrayEquals(new double[] {97.0, (-1064.0), (-1428.0), 1.0, (-1064.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) Float.NaN);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 1L, 1909L, (-1L)}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)12);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)12, (int) (short)12);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0, (-583));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, (-1), (-1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 2119951796);
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2053;
      intArray0[1] = (int) (short)12;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2053);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2053, 12}, intArray0);
      assertArrayEquals(new int[] {2053, 2053, 12}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-2222));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "(T0^");
      assertNotNull(string0);
      assertEquals("(T0^", string0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      charArray0[4] = 'o';
      charArray0[5] = 'Z';
      charArray0[6] = ',';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {',', 'Z', 'o', '@', ' ', '%', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2093);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1253);
      shortArray0[1] = (short) (-670);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1253)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1253), (short) (-670)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) (-2093));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-2093.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse(floatArray0, 398, (-353));
      assertArrayEquals(new float[] {(-2093.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-2093);
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-1253);
      shortArray2[1] = (short) (-670);
      shortArray2[2] = (short) (-670);
      shortArray2[3] = (short) (-1253);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray1, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short) (-1253)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1253), (short) (-670), (short) (-670), (short) (-1253)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1253), (short) (-670)}, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(boolean1);
      assertEquals(1, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      Integer[] integerArray0 = null;
      Integer integer0 = ArrayUtils.get((Integer[]) null, 0);
      assertNull(integer0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'@', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) '4';
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(3, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(16, integerArray1.length);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1485;
      intArray0[1] = 6;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 6;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-46));
      assertNotNull(byte0);
      assertEquals((byte) (-46), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)77);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)77, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)77);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)77, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-46));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-46), (byte)byte3);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)10;
      Byte byte5 = new Byte((byte)10);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)10, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      assertEquals((byte)2, (byte)byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)77, (byte)77, (byte) (-46), (byte)10, (byte)2}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-46), 36);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1485, 6, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-46);
      shortArray0[1] = (short) byte4;
      shortArray0[2] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (-105), 2, 111);
      assertArrayEquals(new short[] {(short)10, (short) (-46), (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2497);
      intArray0[1] = (-2146685325);
      intArray0[2] = 72;
      intArray0[3] = 484;
      intArray0[4] = 272;
      intArray0[5] = 1;
      intArray0[6] = 56;
      intArray0[7] = (-1700);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-2497), (-2146685325), 72, 484, 272, 1, 56, (-1700)}, intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)2246;
      shortArray0[2] = (short)2306;
      shortArray0[3] = (short)116;
      shortArray0[4] = (short)43;
      shortArray0[5] = (short)284;
      ArrayUtils.shift(shortArray0, 3);
      assertArrayEquals(new short[] {(short)116, (short)43, (short)284, (short)3, (short)2246, (short)2306}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, 3527);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3527, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3527, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift((float[]) null, (-1), 1, (int) (byte) (-45));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'o';
      longArray0[1] = (long) 1;
      boolean boolean2 = ArrayUtils.contains(longArray0, 225L);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {111L, 1L}, longArray0);
      assertFalse(boolean2);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 1262, 1262, 1262);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      int[] intArray0 = new int[14];
      char[] charArray0 = new char[3];
      charArray0[1] = '\u001B';
      ArrayUtils.swap(intArray0, (int) '\u001B', (-1385), (-1385));
      assertEquals(14, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u001B';
      ArrayUtils.shift(floatArray0, (-102), 1469, (-1114));
      assertArrayEquals(new float[] {27.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1824.66132);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer integer0 = new Integer(1362);
      assertNotNull(integer0);
      assertEquals(1362, (int)integer0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4160;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1675;
      shortArray0[3] = (short)250;
      shortArray0[4] = (short)26460;
      shortArray0[5] = (short) (-1875);
      shortArray0[6] = (short)48;
      shortArray0[7] = (short)1283;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4160, (short) (-1), (short)1675, (short)250, (short)26460, (short) (-1875), (short)48, (short)1283}, shortArray0);
      assertArrayEquals(new short[] {(short)4160, (short) (-1), (short)1675, (short)250, (short)26460, (short) (-1875), (short)48, (short)1283}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, 124, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-570L), 2430);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-902.48), (int) (short)34, (double) (byte)34);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, 305, 960);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)34;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)34, (byte)0, (byte)34, (byte)0, (byte)34}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.359F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2019);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 30.67132906322425;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 30.67132906322425);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[1] = (short) (byte)34;
      shortArray1[2] = (short) (byte)0;
      shortArray1[3] = (short) (byte)34;
      shortArray1[4] = (short) (byte)34;
      shortArray1[5] = (short) (byte)34;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short)34);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)34;
      floatArray0[2] = (float) 2146015798;
      int int1 = ArrayUtils.indexOf(floatArray0, 2498.9414F);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 34.0F, 2.14601574E9F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2347);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)34, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)34, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)34, (int) (short)0, (double) (short)0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {0.0, 30.67132906322425}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-3282), 128, 2146015798);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-876.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65, floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      int int0 = 64;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 64;
      floatArray0[1] = (float) 64;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(64, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-4487);
      floatArray0[1] = (float) (-4487);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4487), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4487, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1618.2666F);
      floatArray0[2] = 455.7F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-1618.2666F), 455.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1618.2666F), 455.7F, 1.0F, (-1618.2666F), 455.7F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2644L;
      longArray0[1] = 876L;
      longArray0[2] = (-1L);
      longArray0[3] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {2644L, 876L, (-1L), 1L}, longArray0);
      assertEquals(2, int0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1.0F, (-1618.2666F), 455.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1618.2666F), 455.7F, 1.0F, (-1618.2666F), 455.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1618.2666F), 1.0F, (-1618.2666F), 455.7F, 1.0F, (-1618.2666F), 455.7F, 455.7F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(9, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray0 = new double[6];
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 2383L;
      objectArray0[1] = (Object) 2383L;
      objectArray0[2] = (Object) 2383L;
      objectArray0[3] = (Object) 2383L;
      objectArray0[4] = (Object) 2383L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 1204L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2383L;
      floatArray0[2] = (float) 2383L;
      floatArray0[3] = (float) 2383L;
      floatArray0[4] = (float) 2383L;
      floatArray0[5] = (float) 2383L;
      floatArray0[6] = (float) 1204L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1266), 2398);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = '{';
      charArray0[2] = ' ';
      charArray0[3] = 'A';
      charArray0[4] = 'v';
      int int0 = ArrayUtils.indexOf(charArray0, 'A');
      assertArrayEquals(new char[] {'H', '{', ' ', 'A', 'v'}, charArray0);
      assertEquals(3, int0);
      assertEquals(5, charArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1289));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1289), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1450L));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)71;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)123, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-20), (byte)87, (byte) (-29), (byte)123, (byte) (-40), (byte)71}, byteArray0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1219));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[6];
      intArray0[0] = 2368;
      intArray0[1] = (int) (short)3179;
      intArray0[2] = (-26);
      intArray0[3] = (int) (short) (-1219);
      intArray0[4] = (-26);
      intArray0[5] = (int) (short)54;
      ArrayUtils.shift(intArray0, (-1530), 1151, (-2443));
      assertArrayEquals(new int[] {3179, (-26), (-1219), (-26), 54, 2368}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-2443));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2443.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      ArrayUtils.shift(intArray0, (-26));
      assertArrayEquals(new int[] {(-1219), (-26), 54, 2368, 3179, (-26)}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short) (-1198));
      assertNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      int int1 = (-1428);
      int int2 = 2436;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 2436, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2436, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      Integer integer1 = new Integer(9);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(9, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 9, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1376;
      intArray0[1] = 2089;
      ArrayUtils.shift(intArray0, 97, 97, 469);
      assertArrayEquals(new int[] {1376, 2089}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte) (-108);
      ArrayUtils.shift(byteArray0, (-2073837995), 1587, (int) (byte)102);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte)0, (byte) (-57), (byte)0, (byte)0, (byte) (-77), (byte)102}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 'I');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1L));
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-97));
      assertArrayEquals(new byte[] {(byte) (-97)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-97)}, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      
      Short short0 = new Short((short) (-30451));
      assertNotNull(short0);
      assertEquals((short) (-30451), (short)short0);
      
      Short short1 = new Short((short) (-30451));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-30451), (short)short1);
      
      Short short2 = new Short((short) (-30451));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-30451), (short)short2);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-97));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-30451)}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      ArrayUtils.shift(charArray0, 1317, 1, (int) (short) (-30451));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1151, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1151, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\"';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {34}, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'T';
      objectArray0[1] = (Object) 'M';
      ArrayUtils.swap(objectArray0, 11, 76);
      assertEquals(2, objectArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'K');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', '\"', 'j', 'M', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, charArray0.length);
      
      ArrayUtils.shift(objectArray0, 6);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 2806, (short) (-162));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2806, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[3] = (float) (byte)109;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {109.0F, 109.0F, 0.0F, 109.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {109.0F, 109.0F, 0.0F, 109.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (byte)109;
      floatArray2[1] = (float) (byte)109;
      floatArray2[2] = (float) (byte)109;
      floatArray2[3] = (float) (byte)109;
      floatArray2[4] = (float) (byte)109;
      floatArray2[5] = (float) (byte)109;
      floatArray2[6] = (float) (byte)109;
      floatArray2[7] = (float) (byte)109;
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, (int) (byte)109, 0);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray3.length);
      assertEquals(8, floatArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '.';
      charArray0[2] = 'E';
      int[] intArray0 = new int[1];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', '.', 'E'}, charArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'.', 'E'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, charArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'E');
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'W', '.', 'E'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte)109;
      shortArray0[2] = (short)54;
      shortArray0[3] = (short) (byte)109;
      shortArray0[4] = (short) (byte)109;
      shortArray0[5] = (short) (byte)109;
      shortArray0[6] = (short) (byte)109;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)109, (short)109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 109, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = ArrayUtils.contains(charArray0, '}');
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, 84);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 11, (-3763), (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 2294L;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '|');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2689L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2294L, 2294L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 2294L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '%');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '%';
      intArray0[1] = (int) 't';
      intArray0[2] = (int) '%';
      intArray0[3] = 90;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 37, 206);
      assertArrayEquals(new int[] {37, 116, 37, 90}, intArray0);
      assertEquals(2, int0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 90;
      floatArray0[1] = (float) '%';
      floatArray0[2] = (float) 206;
      floatArray0[3] = (float) (-2689L);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-44.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-3357.8564F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {90.0F, 37.0F, 206.0F, (-2689.0F), (-1.0F), (-44.0F), (-3357.8564F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {90.0F, 37.0F, 206.0F, (-2689.0F), (-1.0F), (-44.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o', (int) (byte)127);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertEquals(3, int0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ',');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Integer integer0 = new Integer((-1168));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1168), (int)integer0);
      
      Integer integer1 = new Integer((-1424));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1424), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-2597);
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-2597);
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'/', '/', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = (int) '/';
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) '/';
      intArray0[4] = 2454;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {32, 47, 0, 47, 2454}, intArray0);
      assertFalse(boolean2);
      assertEquals(5, intArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'/', '/', '\u0000'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {32, 47, 0, 47, 2454}, intArray0);
      assertArrayEquals(new int[] {32, 47, 0, 47, 2454, 32, 47, 0, 47, 2454}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)9, (int) (short) (-116));
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1419);
      shortArray0[1] = (short)2890;
      shortArray0[2] = (short)3179;
      shortArray0[3] = (short) (-2257);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, (int) (short) (-2257));
      assertArrayEquals(new short[] {(short) (-1419), (short)2890, (short)3179, (short) (-2257)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)2890;
      floatArray0[1] = (float) (short) (-1419);
      floatArray0[2] = (float) (short) (-1419);
      floatArray0[3] = (float) (short) (-1419);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (short) (-2257);
      floatArray0[7] = (float) (short)2890;
      floatArray0[8] = (float) (short) (-1419);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2890.0F, (-1419.0F), (-1419.0F), (-1419.0F), (-1.0F), 1.0F, (-2257.0F), 2890.0F, (-1419.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'K';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (short)3179, 2530.98);
      assertArrayEquals(new double[] {75.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = 'K';
      charArray0[3] = '>';
      charArray0[4] = 'K';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      ArrayUtils.swap(charArray0, 0, 3564);
      assertArrayEquals(new char[] {'K', '>', 'K', '>', 'K', 'd', 'd'}, charArray0);
      assertEquals(7, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 507.9124F);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'd';
      intArray0[3] = 2965;
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(225, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 225, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2145319181));
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.insert((-2145319181), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = (-1);
      intArray0[2] = (-167);
      intArray0[3] = (-2643);
      intArray0[4] = (int) byte0;
      intArray0[5] = (-167);
      ArrayUtils.shift(intArray0, 0, (int) byte0, (int) (byte)1);
      assertArrayEquals(new int[] {0, (-1), (-167), (-2643), 0, (-167)}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte) (-41);
      byteArray1[3] = byte0;
      byteArray1[4] = (byte) (-103);
      byteArray1[5] = byte0;
      byteArray1[6] = (byte)16;
      byteArray1[7] = (byte) (-12);
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 0, (int) byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-41), (byte)0, (byte) (-103), (byte)0, (byte)16, (byte) (-12)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, (-1), 1, (-990));
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1708.9874F);
      floatArray0[1] = (float) 1134;
      floatArray0[2] = (float) 2294L;
      floatArray0[3] = (float) 1235L;
      floatArray0[4] = (float) 1;
      ArrayUtils.swap(floatArray0, (-464), (-2370), (-1064));
      assertArrayEquals(new float[] {(-1708.9874F), 1134.0F, 2294.0F, 1235.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 284.402;
      doubleArray0[3] = (double) 1271;
      doubleArray0[4] = (double) 1134;
      doubleArray0[5] = (double) (-515);
      ArrayUtils.swap(doubleArray0, 1134, (-464), (-297));
      assertArrayEquals(new double[] {0.0, 0.0, 284.402, 1271.0, 1134.0, (-515.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-297);
      intArray0[1] = (-1064);
      intArray0[2] = (-297);
      ArrayUtils.shift(intArray0, (-297), 2, 1271);
      assertArrayEquals(new int[] {(-1064), (-297), (-297)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\"';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {34}, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-1125));
      assertNull(longArray0);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte) (-97));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      boolean boolean3 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-97), (byte) (-97)}, byteArray0);
      assertFalse(boolean3);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte) (-97));
      assertNotNull(short0);
      assertEquals((short) (-97), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-97));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-97), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-97));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-97), (short)short2);
      
      Float float0 = new Float((float) (-1125));
      assertNotNull(float0);
      assertEquals((-1125.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 34);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(34.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 34;
      integerArray0[1] = (Integer) 34;
      integerArray0[2] = (Integer) 34;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'T';
      intArray1[1] = 3805;
      intArray1[2] = (int) 'j';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3805, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2146015798;
      intArray0[1] = 3179;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1;
      intArray0[4] = 9;
      intArray0[5] = (int) (byte)34;
      intArray0[6] = (int) (byte)0;
      ArrayUtils.shift(intArray0, (int) (byte)34, (-2421), 14);
      assertArrayEquals(new int[] {2146015798, 3179, 0, 1, 9, 34, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)34, 1946, 2089);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.shift((byte[]) null, (int) (short) (-990), (int) (short) (-990), (int) (short) (-990));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)2965;
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-10324);
      shortArray0[5] = (short)512;
      shortArray0[6] = (short)2915;
      shortArray0[7] = (short)512;
      shortArray0[8] = (short)2304;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-4930));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)512, (short)2915, (short)512, (short)2304, (short) (-4930)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)512, (short)2915, (short)512, (short)2304}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(3, integerArray0.length);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, (int) (short)512);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {512, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Short short0 = new Short((short) (-49));
      assertNotNull(short0);
      assertEquals((short) (-49), (short)short0);
      
      short[] shortArray1 = ArrayUtils.add((short[]) null, (short)4045);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4045}, shortArray1);
      assertEquals(1, shortArray1.length);
      
      Integer integer0 = new Integer(967);
      assertNotNull(integer0);
      assertEquals(967, (int)integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, (int) integerArray0[3]);
      assertNull(integer1);
      assertEquals(6, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1565));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1565)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'o';
      ArrayUtils.swap(objectArray0, (int) (byte) (-45), (-1), (-2597));
      assertEquals(1, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-2597));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-446.45);
      doubleArray0[1] = 30552.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {(-446.45), 30552.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'K';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3179;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'K';
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 3179, 3206.611344230507);
      assertEquals((-1), int0);
      
      objectArray0[1] = (Object) 'd';
      objectArray0[2] = (Object) 'd';
      ArrayUtils.swap(objectArray0, 1431, 575, 4076);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-18);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-18), (short)0}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 2202);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 2294L;
      longArray0[3] = 1235L;
      longArray0[4] = 1235L;
      ArrayUtils.shift(longArray0, 1067);
      assertArrayEquals(new long[] {1235L, 1235L, 0L, 2294L, 2294L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1235L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 2294L;
      objectArray0[3] = (Object) 1235L;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2294L;
      doubleArray0[1] = (double) 2294L;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1067;
      doubleArray0[5] = (double) 2294L;
      doubleArray0[6] = (double) 1235L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2294.0, 1);
      assertArrayEquals(new double[] {2294.0, 2294.0, (-1.0), 0.0, 1067.0, 2294.0, 1235.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-251);
      shortArray0[7] = (short)512;
      shortArray0[6] = (short)2915;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals(3, integerArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-285.5), (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 33, 33);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      doubleArray0[1] = (double) 33;
      doubleArray0[3] = (double) 2383L;
      doubleArray0[4] = (-1623.97);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2383.0, 33.0, 0.0, 2383.0, (-1623.97), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      long[] longArray4 = ArrayUtils.insert(58, longArray3, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {}, longArray4);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray4);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertEquals(0, longArray4.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 876L;
      longArray0[3] = 876L;
      longArray0[4] = 876L;
      longArray0[5] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 876L);
      assertArrayEquals(new long[] {(-1L), (-1L), 876L, 876L, 876L, (-1L)}, longArray0);
      assertEquals(4, int0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 876L;
      floatArray2[1] = (float) 876L;
      floatArray2[2] = (float) 876L;
      floatArray2[3] = (float) 876L;
      float[] floatArray3 = ArrayUtils.insert(4, floatArray2, floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {876.0F, 876.0F, 876.0F, 876.0F, 876.0F, 876.0F, 876.0F, 876.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {876.0F, 876.0F, 876.0F, 876.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertEquals(8, floatArray3.length);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '/', (int) (byte)0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Integer integer0 = new Integer((byte)0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((byte)0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer((byte)0);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (int)integerArray0[8];
      floatArray0[3] = (float) (int)integerArray0[1];
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(12, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(2, int0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray1, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(12, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(12, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(762, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 762, Length: 12
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2780), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2780, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2924), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2924, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 3, 3);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1788.0F);
      floatArray0[1] = (float) 3564;
      floatArray0[2] = (float) 3564;
      floatArray0[3] = (float) 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1788.0F), 3564.0F, 3564.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3564;
      intArray0[3] = 3564;
      intArray0[4] = 3564;
      intArray0[5] = 3564;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3564, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3564, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1801L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(83, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = (-491);
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-491);
      doubleArray0[1] = (double) (-491);
      doubleArray0[2] = (double) (-491);
      doubleArray0[3] = (double) (-491);
      doubleArray0[4] = (double) (-491);
      doubleArray0[5] = (double) (-491);
      doubleArray0[6] = (double) (-491);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-491), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -491, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '6';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 54.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {54.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {54.0F, 54.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(1073741824);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1073741824, (int)integer2);
      
      Integer integer3 = new Integer(9);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(9, (int)integer3);
      
      Integer integer4 = new Integer(2);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer(2183);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(2183, (int)integer6);
      
      Integer integer7 = new Integer(0);
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals(0, (int)integer7);
      
      Integer integer8 = new Integer(18688);
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertNotNull(integer8);
      assertEquals(18688, (int)integer8);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer5;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      integerArray0[3] = integer7;
      Integer integer9 = ArrayUtils.get(integerArray0, 2430);
      assertNull(integer9);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer7, 1073741824);
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer8));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 921L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer(1172);
      assertNotNull(integer0);
      assertEquals(1172, (int)integer0);
      
      Integer integer1 = new Integer(46);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(46, (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0, (-39), (-3202));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = 'A';
      charArray0[5] = ':';
      charArray0[6] = ':';
      charArray0[7] = 'A';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '/', 14);
      assertArrayEquals(new char[] {':', ':', ':', ':', 'A', ':', ':', 'A'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-1)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '6';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) '6');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '6';
      intArray0[1] = (int) '6';
      intArray0[3] = 1;
      intArray0[4] = (int) '6';
      intArray0[5] = (-198);
      intArray0[6] = (int) '6';
      int int1 = ArrayUtils.lastIndexOf(intArray0, 3179, 2146796673);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {54, 54, 0, 1, 54, (-198), 54}, intArray0);
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3179);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {54, 54, 0, 1, 54, (-198), 54}, intArray0);
      assertArrayEquals(new int[] {54, 54, 0, 1, 54, (-198), 54}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)30552;
      shortArray0[1] = (short)13;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2145465336, 2145465336);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1554);
      doubleArray0[1] = (double) (short)13;
      doubleArray0[2] = (double) (short)13;
      doubleArray0[4] = (double) (short)30552;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1338.736448080451);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1554.0), 13.0, 13.0, 0.0, 30552.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 68);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'Z';
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 46);
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 90L);
      assertNull(floatArray0);
      
      boolean boolean5 = ArrayUtils.contains((float[]) null, (float) Integer.MAX_VALUE);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2924, 78);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 1441, (-2145750667), (-1019));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)35;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)69, (byte)109, (byte) (-1), (byte)35}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)69, (byte)109, (byte) (-1), (byte)35}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Integer integer0 = new Integer((-134));
      assertNotNull(integer0);
      assertEquals((-134), (int)integer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'V';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'V');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'t', 'V'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-30);
      floatArray0[1] = (-80.0F);
      floatArray0[2] = (float) 't';
      floatArray0[3] = (float) 'J';
      floatArray0[4] = (float) 't';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-30.0F), (-80.0F), 116.0F, 74.0F, 116.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1019);
      doubleArray0[1] = (double) (byte)69;
      doubleArray0[2] = (double) (byte)69;
      doubleArray0[3] = (-1161.1565365);
      doubleArray0[4] = (double) (-80.0F);
      doubleArray0[5] = (double) (byte) (-30);
      doubleArray0[6] = (double) (-134);
      doubleArray0[7] = (double) (byte)69;
      int int0 = ArrayUtils.indexOf(doubleArray0, 73.0, (-1676), (double) (byte) (-1));
      assertArrayEquals(new double[] {(-1019.0), 69.0, 69.0, (-1161.1565365), (-80.0), (-30.0), (-134.0), 69.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = (float) (-2L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2767, 2767);
      assertArrayEquals(new float[] {(-2.0F), (-2.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2767;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1103L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2767L}, longArray0);
      assertArrayEquals(new long[] {2767L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '+';
      charArray0[2] = 'S';
      charArray0[3] = 'T';
      charArray0[4] = '*';
      ArrayUtils.swap(charArray0, 0, 0, 2767);
      assertArrayEquals(new char[] {'m', '+', 'S', 'T', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'U');
      assertArrayEquals(new char[] {'m', '+', 'S', 'T', '*'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      Short short0 = new Short((short)1216);
      assertNotNull(short0);
      assertEquals((short)1216, (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1216, (short)1216, (short)1216, (short)1216, (short)1216, (short)1216}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      ArrayUtils.shift(byteArray0, (int) (byte) (-36), (-1174), (int) (byte) (-36));
      assertArrayEquals(new byte[] {(byte) (-36)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1644));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-1644)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-5693.133));
      assertNotNull(double0);
      assertEquals((-5693.133), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1530.80374));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1530.80374), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5693.133), (-1530.80374)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(integerArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray1, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1530.80374), (-5693.133)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-4), (long) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-5693.133));
      assertNotNull(double0);
      assertEquals((-5693.133), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1530.80374));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1530.80374), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5693.133), (-1530.80374)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-115));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      
      Integer[] integerArray0 = new Integer[0];
      boolean boolean3 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray1, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1530.80374), (-5693.133)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-4), (long) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 16.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 16.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, 6, 6, (-1132));
      assertArrayEquals(new double[] {0.0, 0.0, 16.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 46;
      floatArray0[2] = (float) 46;
      floatArray0[3] = (-1560.1F);
      floatArray0[4] = (float) 46;
      floatArray0[5] = (float) 46;
      floatArray0[6] = (float) 46;
      floatArray0[7] = (float) 46;
      floatArray0[8] = (float) 46;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 46.0F);
      assertArrayEquals(new float[] {46.0F, 46.0F, 46.0F, (-1560.1F), 46.0F, 46.0F, 46.0F, 46.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(8, int0);
      assertEquals(9, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-275.80953146), (-196));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-196), 46);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      Integer integer1 = new Integer((-2017));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2017), (int)integer1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 46;
      floatArray0[0] = (float) (-1);
      intArray0[2] = 8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-705));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -705, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-2112846813));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2112846813, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-885);
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      ArrayUtils.shift(intArray0, 55, (-19), (-1));
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, (-885), (-167), (-19)}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-649);
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      Integer integer1 = new Integer((-885));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-885), (int)integer1);
      
      Integer integer2 = new Integer(3823);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3823, (int)integer2);
      
      Integer integer3 = new Integer(18688);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(18688, (int)integer3);
      
      Integer integer4 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(Integer.MAX_VALUE, (int)integer4);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer3;
      integerArray0[2] = (Integer) (-167);
      Integer integer5 = ArrayUtils.get(integerArray0, (-1226));
      assertNull(integer5);
      assertEquals(3, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) null, (-1226));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, (-885), (-167), (-19)}, intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      int[] intArray0 = new int[14];
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '\u001B';
      ArrayUtils.swap(intArray0, 1620, (-1385), (-1385));
      assertEquals(14, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1620);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 71.0F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 101, 1620, (-321));
      assertEquals(14, intArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1088L));
      assertFalse(boolean0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[14];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(14, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(charArray0, (-1), 3181, 0);
      assertEquals(14, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2597));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf((float[]) null, (float) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(intArray0, (-1), (-1434), (-2370));
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1550);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1550}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1550;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1550L}, longArray0);
      assertArrayEquals(new long[] {1550L, 1550L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1550, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, (-2145807558), 1036, 1036);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift(intArray0, 1, 2368, (-34));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 1686.428229267713);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1686.428229267713, (-1.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      ArrayUtils.shift(intArray0, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift((int[]) null, 3839, 2368, 1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3839;
      doubleArray0[1] = 1686.428229267713;
      doubleArray0[2] = (double) (short) (-1783);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 3839;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 3839.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3839.0, 1686.428229267713, (-1783.0), 1.0, 3839.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3839.0, 3839.0, 1686.428229267713, (-1783.0), 1.0, 3839.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      ArrayUtils.shift((int[]) null, 2767);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      char char0 = 't';
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-45);
      shortArray0[1] = (short) (-1786);
      shortArray0[2] = (short)904;
      shortArray0[3] = (short)2640;
      shortArray0[4] = (short) (-1);
      shortArray0[6] = (short)3240;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-45), (short) (-1786), (short)904, (short)2640, (short) (-1), (short)0, (short)3240}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-45), (short) (-1786), (short)904, (short)2640, (short) (-1), (short)0, (short)3240}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1095.08561228);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1095.08561228}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      charArray0[1] = 't';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 5.007003);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.007003}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 5.007003);
      assertTrue(boolean0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, 1, 2368, (-34));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.shift(intArray0, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[4] = (-1042);
      ArrayUtils.shift(intArray0, 0, 873, 873);
      assertArrayEquals(new int[] {0, (-1042), 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '6';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) '6');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '6';
      intArray0[1] = (int) '6';
      intArray0[3] = 1;
      intArray0[4] = (int) '6';
      intArray0[5] = (-198);
      intArray0[6] = (int) '6';
      ArrayUtils.shift(intArray0, (-422), 0, (-1));
      assertArrayEquals(new int[] {54, 54, 0, 1, 54, (-198), 54}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      ArrayUtils.shift(intArray0, (-2370));
      assertArrayEquals(new int[] {54, (-198), 54, 54, 54, 0, 1}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-422);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-2145914744));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, (-1L));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray2.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1623.97);
      doubleArray0[2] = 1045.0372489;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1623.97), 1045.0372489, 0.0, 0.0, (-1623.97), 1045.0372489, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1623.97), 1045.0372489, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int int0 = (-1740);
      Integer integer0 = new Integer((-1740));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1740), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1590.7567F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, 2, (-2915), 98);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = '6';
      double[] doubleArray0 = new double[7];
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2141227176), (-2141227176));
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 2146725890, 2146725890, (-1484));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '6');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      Short short0 = new Short((short)31282);
      assertNotNull(short0);
      assertEquals((short)31282, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)31282, (short)31282}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (-2141227176));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2.141227176E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Integer integer0 = new Integer((short)8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer((short)31282);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(31282, (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2141227176));
      assertNull(intArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (-1484), Integer.MAX_VALUE);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '6'}, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(4, charArray2.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 2145463495);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      ArrayUtils.shift(charArray1, 2145463495);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'a', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'a', '\u0000', 'a', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      String string0 = ArrayUtils.toString((Object) '\u0000');
      assertNotNull(string0);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      Byte byte0 = new Byte((byte)113);
      assertNotNull(byte0);
      assertEquals((byte)113, (byte)byte0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) '\u0000';
      characterArray0[2] = (Character) '\u0000';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse((double[]) null, (int) characterArray0[0], 12);
      assertEquals(8, characterArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0);
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.insert(427, charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)1, 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '|';
      charArray0[2] = 'q';
      charArray0[3] = 'Z';
      charArray0[4] = 'H';
      charArray0[5] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 324, 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '|', 'q', 'Z', 'H', 'w'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1485;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[4] = 6;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 6;
      objectArray0[1] = (Object) 6;
      objectArray0[2] = (Object) 0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 6);
      assertEquals((-1), int0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'o';
      charArray0[2] = '`';
      charArray0[3] = 'L';
      charArray0[4] = 'o';
      charArray0[5] = 'p';
      ArrayUtils.swap(charArray0, 6, 6, 2220);
      assertArrayEquals(new char[] {'L', 'o', '`', 'L', 'o', 'p'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = ArrayUtils.get(integerArray0, (-371));
      assertNull(integer0);
      assertEquals(1, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 1);
      assertEquals(0, int0);
      assertEquals(1, integerArray0.length);
      
      ArrayUtils.swap(charArray0, (-371), 2147483601, 2147483601);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)29;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)47, (byte)102, (byte)4, (byte) (-94), (byte)125, (byte)29}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)29;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (byte)125;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {29.0, 0.0, 4.0, 125.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)47;
      longArray0[1] = (long) (byte)125;
      longArray0[2] = (-1956L);
      longArray0[3] = (long) (byte)102;
      longArray0[4] = (long) (byte)125;
      longArray0[5] = (long) (byte)47;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {125L, (-1956L), 102L, 125L, 47L, 47L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = ArrayUtils.get(integerArray0, (int) 102);
      assertNull(integer0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      ArrayUtils.swap(intArray0, 9, 8);
      assertArrayEquals(new int[] {8}, intArray0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)29;
      ArrayUtils.shift(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)47, (byte)102, (byte)4, (byte) (-94), (byte)125, (byte)29}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)29;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (byte)125;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {29.0, 9.0, 4.0, 125.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)47;
      longArray0[1] = (long) (byte)125;
      longArray0[2] = (-1956L);
      longArray0[3] = (long) (byte)102;
      longArray0[4] = (long) (byte)125;
      longArray0[5] = (long) (byte)47;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {125L, (-1956L), 102L, 125L, 47L, 47L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)102;
      objectArray0[1] = (Object) 125.0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 8;
      integerArray0[1] = (Integer) 8;
      integerArray0[2] = (Integer) 8;
      Integer integer0 = ArrayUtils.get(integerArray0, (int) 102);
      assertNull(integer0);
      assertEquals(3, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) 0;
      floatArray0[1] = (float) (-723);
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1, (-723));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      Float float0 = new Float(2371.0767F);
      assertNotNull(float0);
      assertEquals(2371.0767F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      short short0 = (short)52;
      ArrayUtils.swap((int[]) null, (-723), 2, (int) (short)52);
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-1));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-723);
      intArray0[1] = 373;
      intArray0[2] = 52;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) (short)52, (int) (short)52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 0, 0);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, true}, booleanArray0));
      assertEquals(7, int0);
      assertEquals(8, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)1);
      assertNull(shortArray1);
      
      short[] shortArray2 = new short[4];
      shortArray2[0] = (short) (-426);
      shortArray2[1] = (short) (byte)2;
      shortArray2[2] = (short)1;
      shortArray2[3] = (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray2);
      assertArrayEquals(new short[] {(short) (-426), (short)2, (short)1, (short)1}, shortArray2);
      assertFalse(boolean0);
      assertEquals(4, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 4234, 0);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) byte0);
      assertNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byte2;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte2;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean("zJTdzWQ<3QBytIh07h");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = (char) characterArray0[2];
      Character[] characterArray1 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {'o'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, characterArray1.length);
      
      int[] intArray1 = ArrayUtils.insert(5, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)127;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertArrayEquals(new short[] {(short)127}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Integer integer0 = new Integer((short)1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, (Integer) (-2597));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      boolean boolean3 = ArrayUtils.isArrayIndexValid(abstractMap_SimpleImmutableEntryArray0, (-1308));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-138.665465237655), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 959.952880859375, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(2, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1264.1858F, 12);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(0, int1);
      assertEquals(2, floatArray0.length);
      
      Double double0 = new Double((-229.217802860703));
      assertNotNull(double0);
      assertEquals((-229.217802860703), (double)double0, 0.01);
      
      Double double1 = new Double((-105.2107));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-105.2107), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char[] charArray0 = new char[16];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(16, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, 0, (short)275);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)275}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(16, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '/', (int) (byte)0);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 36);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (int) (byte)0, (-897L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-897L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'Q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', (-1017));
      assertArrayEquals(new char[] {'|', '|', '?', '?', '?', 'Q', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(7, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', '|', '?', '?', '?', 'Q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '|', '|', '?', '?', '?', 'Q', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int2 = ArrayUtils.indexOf(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), int2);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(charArray0, (-1), 3181, 0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 3181);
      assertTrue(int1 == int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals((-1), int1);
      assertEquals(5, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'o');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'o'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 46, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2603), 1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(69.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(69.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {69.0, 69.0, 69.0, 0.0, 0.0, 69.0, 69.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-115));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean1 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray0, (long) (short) (-1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) (short) (-1);
      objectArray0[6] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, (int) (short) (-1), (-963), (-737));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1134);
      assertNotNull(integer0);
      assertEquals(1134, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1134;
      floatArray0[1] = (float) 1134;
      floatArray0[2] = (float) 1134;
      floatArray0[3] = (float) 1134;
      floatArray0[4] = (float) 1134;
      floatArray0[5] = (float) 1134;
      floatArray0[6] = (float) 1134;
      floatArray0[7] = (float) 1134;
      floatArray0[8] = (float) 1134;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {1134.0F, 1134.0F, 1134.0F, 1134.0F, 1134.0F, 1134.0F, 1134.0F, 1134.0F, 1134.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)3179;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3179.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3179.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)3179;
      floatArray0[1] = (float) (short)3179;
      floatArray0[2] = (float) (short)3179;
      floatArray0[3] = (float) (byte) (-80);
      floatArray0[4] = (float) (short)3179;
      floatArray0[5] = (float) (byte) (-80);
      floatArray0[6] = (float) (byte) (-80);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1679.91F, (int) (byte)0);
      assertArrayEquals(new float[] {3179.0F, 3179.0F, 3179.0F, (-80.0F), 3179.0F, (-80.0F), (-80.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      
      Double double0 = new Double((byte) (-80));
      assertNotNull(double0);
      assertEquals((-80.0), (double)double0, 0.01);
      
      Double double1 = new Double((-3210.8));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-3210.8), (double)double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-80);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (short)3179;
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3179, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)949;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)949}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer integer0 = new Integer((short)2776);
      assertNotNull(integer0);
      assertEquals(2776, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[9] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(13, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE, (-1), 167);
      ArrayUtils.shift((long[]) null, (-167));
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-2770L));
      assertNull(longArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 154.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-2770L);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (-167);
      ArrayUtils.swap(floatArray0, (-1), 167, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {2.14748365E9F, 154.0F, (-1.0F), (-2770.0F), 2.14748365E9F, (-167.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = ' ';
      charArray0[2] = '_';
      charArray0[3] = 'C';
      charArray0[4] = 'L';
      charArray0[5] = '9';
      charArray0[6] = 'a';
      charArray0[7] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', ' ', '_', 'C', 'L', '9', 'a', '2'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[9] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(13, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE, 3, 167);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 154.0F;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-2770L);
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (-167);
      ArrayUtils.swap(floatArray0, 3, 167, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {2.14748365E9F, 154.0F, 3.0F, (-2770.0F), 2.14748365E9F, (-167.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = ' ';
      charArray0[2] = '_';
      charArray0[4] = 'L';
      charArray0[5] = '9';
      charArray0[6] = 'a';
      charArray0[7] = '2';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', ' ', '_', '\u0000', 'L', '9', 'a', '2'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('t');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('W');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('W', (char)character2);
      
      characterArray0[2] = character2;
      char char0 = 'j';
      Character character3 = Character.valueOf('j');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('j', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('P');
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('P', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('j');
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('j', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character5);
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertNotNull(character6);
      assertEquals('j', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('j');
      assertTrue(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character6));
      assertNotNull(character7);
      assertEquals('j', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character(char0);
      assertTrue(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)character3));
      assertTrue(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character4));
      assertNotNull(character8);
      assertEquals('j', (char)character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 't', 'W', 'j', 'P', 'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'t', 't', 'W', 'j', 'P', 'j', 'j', 'j', 'j'}, charArray0);
      assertArrayEquals(new char[] {'t', 't', 'W', 'j', 'P', 'j', 'j', 'j', 'j'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'D';
      charArray0[2] = 'E';
      charArray0[3] = '=';
      charArray0[4] = 'n';
      charArray0[5] = '2';
      charArray0[6] = 'E';
      charArray0[7] = '\'';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'N', 'D', 'E', '=', 'n', '2', 'E', '\''}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'N', 'D', 'E', '=', 'n', '2', 'E', '\''}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0, 125);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 125;
      intArray0[1] = 2132973623;
      intArray0[2] = (-1);
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) 'E';
      intArray0[5] = (int) 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2132973623, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1782, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1782, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertFalse(byte0 == byte5);
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte3));
      assertNotNull(byte8);
      assertEquals((byte)0, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte5);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte5 == byte0);
      assertNotNull(byte9);
      assertEquals((byte)1, (byte)byte9);
      
      byteArray0[7] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) byte0);
      assertFalse(byte0 == byte5);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (int) byte0, (int) byte0);
      assertFalse(byte0 == byte5);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4423, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4423, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[3] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 'I');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[3] = (long) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {73L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (-1134);
      intArray0[4] = (int) 'I';
      intArray0[5] = (int) '5';
      intArray0[6] = (int) 'I';
      intArray0[7] = (-1);
      intArray0[8] = (int) '5';
      ArrayUtils.swap(intArray0, (-268), (-88));
      assertArrayEquals(new int[] {73, 73, 73, (-1134), 73, 53, 73, (-1), 53}, intArray0);
      assertEquals(9, intArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1134);
      integerArray0[1] = (Integer) 53;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) 73;
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, integerArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1422), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1422, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      long[] longArray0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-121);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1840), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1840, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)33);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (byte) (-55);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, (-55L)}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-96));
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2698), (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'>', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1113);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1113, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)7;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (short)968;
      intArray0[3] = (int) (byte)125;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 9;
      intArray0[6] = 1113;
      intArray0[7] = (-1);
      intArray0[8] = (int) (short)125;
      ArrayUtils.swap(intArray0, 9, 11);
      assertArrayEquals(new int[] {7, 62, 968, 125, 1, 9, 1113, (-1), 125}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-897L);
      longArray0[2] = (long) (byte)127;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (char)characterArray0[0];
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 'o';
      longArray0[7] = (long) 'o';
      long[] longArray1 = ArrayUtils.remove(longArray0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-897L), 127L, (-1L), 111L, (-1L), 111L, 111L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-897L), (-1L), 111L, (-1L), 111L, 111L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      char[] charArray0 = new char[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-138.665465237655), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 959.952880859375, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '/', 0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals((-1), int2);
      assertEquals(6, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 36, 293L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 2146438135, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146438135, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2767, 2767);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1592;
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1592, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1592, (short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[7];
      floatArray0[1] = (float) 2522L;
      longArray0[1] = 1961L;
      longArray0[2] = (long) 4237;
      longArray0[3] = 0L;
      longArray0[4] = (long) 4237;
      ArrayUtils.swap(longArray0, (-1), (int) (short)1, 6179);
      assertArrayEquals(new long[] {1961L, 4237L, 0L, 4237L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)7;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)7, (short)7}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)7, (short)7}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer(2146383303);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2146383303, (int)integer2);
      
      Integer integer3 = new Integer((-2146686808));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-2146686808), (int)integer3);
      
      Integer integer4 = new Integer(2146383303);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(2146383303, (int)integer4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short) (-21219);
      ArrayUtils.shift(shortArray0, (int) (short) (-21219), 108, 65);
      assertArrayEquals(new short[] {(short)15, (short) (-21219), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3845);
      shortArray0[1] = (short) (-2401);
      shortArray0[2] = (short)443;
      ArrayUtils.shift(shortArray0, (int) (short) (-3845), 1759, (-1936));
      assertArrayEquals(new short[] {(short) (-2401), (short)443, (short) (-3845)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[8];
      ArrayUtils.shift((Object[]) characterArray0, (-1554), 133, (-2141227176));
      assertEquals(8, characterArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1554), 52, 52);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1173;
      shortArray0[2] = (short) (-21219);
      shortArray0[3] = (short)15;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short) (-21219), 1432, 65);
      assertArrayEquals(new short[] {(short)0, (short)1173, (short) (-21219), (short)15, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(objectArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 127);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 959.9529F;
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 4);
      assertNull(longArray0);
      
      ArrayUtils.swap(charArray0, 4, 4, 116);
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertArrayEquals(new char[] {'.', '@', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      Short short0 = new Short((short)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) '\"';
      longArray0[4] = (long) '\"';
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'N';
      longArray0[7] = (long) 'N';
      longArray0[8] = (long) 'B';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 34L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {66L, 77L, 66L, 77L, 78L, 78L, 66L}, longArray1);
      assertArrayEquals(new long[] {66L, 77L, 66L, 34L, 34L, 77L, 78L, 78L, 66L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(9, longArray0.length);
      
      ArrayUtils.swap(charArray0, (-79), 0, 0);
      assertArrayEquals(new char[] {'T', '\"', 'j', 'M', 'N', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'd');
      assertArrayEquals(new char[] {'T', '\"', 'j', 'M', 'N', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-38), byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (byte) (-38));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(2, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'Z';
      ArrayUtils.reverse(longArray0, (-1), (-1011));
      assertArrayEquals(new long[] {90L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert((-1011), (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 1136, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.shift(objectArray0, 1437);
      assertEquals(5, objectArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift((Object[]) null, 1437, (-3327), (-2041));
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(charArray0, (-1), 3181, 0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Integer integer0 = new Integer(3181);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3181, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)908;
      shortArray0[1] = (short)908;
      shortArray0[2] = (short)908;
      shortArray0[3] = (short)908;
      shortArray0[4] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)908, (short)908, (short)908, (short)908, (short)908}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)908;
      doubleArray0[1] = (double) 1264.1858F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1264.1858F, 97.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {908.0, 1264.185791015625}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 908.0;
      doubleArray1[1] = (Double) 1264.185791015625;
      doubleArray1[2] = (Double) 1264.185791015625;
      doubleArray1[3] = (Double) 1264.185791015625;
      doubleArray1[4] = (Double) 1264.185791015625;
      doubleArray1[5] = (Double) 908.0;
      doubleArray1[6] = (Double) 908.0;
      doubleArray1[7] = (Double) 908.0;
      doubleArray1[8] = (Double) 1264.185791015625;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      
      Double double0 = new Double((-3771.78775594));
      assertNotNull(double0);
      assertEquals((-3771.78775594), (double)double0, 0.01);
      
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray3);
      assertSame(doubleArray3, doubleArray1);
      assertSame(doubleArray3, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray3);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {908.0, 1264.185791015625}, doubleArray0, 0.01);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 2, 310.853032237711);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'd';
      charArray0[2] = '>';
      charArray0[3] = '(';
      charArray0[4] = '9';
      charArray0[5] = '`';
      ArrayUtils.swap(charArray0, 1, 502);
      assertArrayEquals(new char[] {'D', 'd', '>', '(', '9', '`'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2118.38856476;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {2118.38856476, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-723);
      floatArray0[2] = (float) (-723);
      floatArray0[3] = (float) (-723);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-723);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-723);
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (-1674L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-723);
      ArrayUtils.shift(longArray0, (-613), 0, 8);
      assertArrayEquals(new long[] {(-723L), 0L, 0L, (-1674L), 0L, (-723L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 3171L;
      doubleArray0[4] = (double) (-723L);
      doubleArray0[5] = (double) (-723L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3171.0, (-723.0), (-723.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3171.0, (-723.0), (-723.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-613);
      intArray0[1] = (-613);
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = (-723);
      intArray0[7] = (-723);
      ArrayUtils.swap(intArray0, (-723), (-613), (-2145186758));
      assertArrayEquals(new int[] {(-613), (-613), 8, 0, 8, 8, (-723), (-723)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-79);
      longArray0[2] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-79L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-79L), 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int int0 = 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 3805;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1, (int) (byte)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 0, (-79), 0, 3805, 1, 0, 0}, intArray1);
      assertArrayEquals(new int[] {1, (-79), 0, 3805, 1, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(7, intArray0.length);
      
      Integer integer0 = new Integer(4588);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4588, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) 3805);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-79);
      floatArray0[2] = (float) (byte) (-90);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) 1;
      ArrayUtils.swap(floatArray0, (int) (byte) (-90), 68, 82);
      assertArrayEquals(new float[] {0.0F, (-79.0F), (-90.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-79);
      Integer integer1 = new Integer((byte) (-79));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-79), (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 1;
      integerArray0[5] = (Integer) 1;
      integerArray0[6] = (Integer) (-79);
      integerArray0[7] = (Integer) 1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, int0);
      assertTrue(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray1);
      assertNotNull(map0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.swap(booleanArray0, (-2230), (-2230), (-417));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      ArrayUtils.swap((byte[]) null, 46, 46);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-2574);
      shortArray0[2] = (short)1;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-2574), (short)6}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', 98);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)6, 46, (int) (short)1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 1441, (-2145750667), (-1019));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-500);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 3805, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3805, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      int[] intArray0 = new int[7];
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 4234, 0);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) byte0);
      assertNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 506L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 506L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {506L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = 49;
      Integer integer0 = new Integer(49);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(49, object1);
      
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) object1;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(1195);
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1195, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) int0;
      longArray0[2] = 4609L;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 49L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {49L, 4609L, 49L, 49L}, longArray1);
      assertArrayEquals(new long[] {49L, 49L, 4609L, 49L, 49L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-4));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5761.147);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-647.00190295);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, (double) 0);
      assertArrayEquals(new double[] {(-5761.147), 0.0, 0.0, 0.0, 0.0, (-647.00190295)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'l';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 748, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, intArray0.length);
      
      int int1 = (-543);
      Integer integer0 = new Integer((-543));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-543), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      char[] charArray0 = new char[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 26);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-138.665465237655), 26);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '%');
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, true, 132);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(2);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 26);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals(0, int2);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1824.66132);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer integer1 = new Integer(1362);
      assertNotNull(integer1);
      assertEquals(1362, (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-547.41981189);
      doubleArray0[1] = 1236.458757787738;
      doubleArray0[2] = 1891.69732674;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {1891.69732674, 1236.458757787738, (-547.41981189)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2603);
      intArray0[1] = 1984;
      intArray0[2] = (-493);
      intArray0[3] = (-198);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2146796673, (-198));
      assertArrayEquals(new int[] {(-2603), 1984, (-493), (-198)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '|';
      charArray0[2] = '@';
      charArray0[3] = ',';
      charArray0[4] = 'i';
      charArray0[5] = '{';
      charArray0[6] = '%';
      charArray0[7] = 'i';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', '@', ',', 'i', '{', '%', 'i'}, charArray1);
      assertArrayEquals(new char[] {'$', '|', '@', ',', 'i', '{', '%', 'i'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) (-198);
      integerArray0[1] = (Integer) (-198);
      integerArray0[2] = (Integer) (-198);
      integerArray0[3] = (Integer) (-2603);
      Integer integer0 = new Integer((-1777));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1777), (int)integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-493);
      integerArray0[6] = (Integer) (-493);
      integerArray0[7] = (Integer) (-2603);
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)46;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)46;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {46}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 1L);
      assertNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)46);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4150, 2019);
      assertArrayEquals(new int[] {46}, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-77), (int) (byte) (-77));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-77);
      shortArray0[3] = (short)34;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1760));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray2 = ArrayUtils.subarray((byte[]) null, (int) (short)1, (int) (short)34);
      assertNull(byteArray2);
      
      long[] longArray0 = new long[0];
      boolean boolean2 = ArrayUtils.contains(longArray0, (long) (short)34);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean2);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1905);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-677.07F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, (-677.07F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 1L, 1909L, (-1L)}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (-401), (-314));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      Short short0 = new Short((short) (-698));
      assertNotNull(short0);
      assertEquals((short) (-698), (short)short0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-698);
      shortArray0[1] = (short) (-698);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-698));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-698), (short) (-698)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-698), (short) (-698), (short) (-698)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = 'n';
      charArray0[3] = '?';
      charArray0[5] = '?';
      charArray0[6] = '?';
      charArray0[7] = '?';
      charArray0[8] = '?';
      ArrayUtils.shift(charArray0, (int) (short) (-698));
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?', '?', 'n', '?', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '?';
      intArray0[1] = 3937;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {63, 3937}, intArray0);
      assertTrue(boolean1);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse((long[]) null, (int) (short) (-698), (int) (short) (-698));
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      short[] shortArray0 = new short[8];
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1901L), 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-9.546189064041982));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-9.546189F), (float)float1, 0.01F);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils.reverse(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(1, longArray2.length);
      
      ArrayUtils.shift(charArray0, (-15), (-15), 1);
      assertArrayEquals(new char[] {'?', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap((boolean[]) null, (-2397), (-55), 1136);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[6] = character0;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean3 = ArrayUtils.contains(intArray0, (int) character0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean3);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2597);
      longArray0[1] = (long) (-2597);
      longArray0[2] = (long) (-2597);
      longArray0[3] = (long) 1920;
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) 'o';
      longArray0[6] = (long) (char)characterArray0[0];
      longArray0[7] = (long) (char)character0;
      longArray0[8] = (long) (char)characterArray0[3];
      ArrayUtils.reverse(longArray0, (int) (byte) (-45), 135);
      assertArrayEquals(new long[] {111L, 90L, 0L, 111L, 90L, 1920L, (-2597L), (-2597L), (-2597L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-5);
      byteArray1[1] = (byte)29;
      byteArray1[2] = byte0;
      ArrayUtils.shuffle(byteArray1);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-5), (byte) (-5)}, byteArray1);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.reverse((float[]) null, 69, (int) (byte)29);
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)29;
      byteArray2[1] = (byte) (-5);
      byteArray2[2] = byte0;
      byteArray2[3] = (byte)29;
      byteArray2[4] = (byte) (-3);
      byteArray2[5] = byte0;
      byteArray2[6] = (byte)29;
      byteArray2[7] = byte0;
      byteArray2[8] = byte0;
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (-1554), 2145465336);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-5), (byte) (-5), (byte)29, (byte) (-3), (byte) (-5), (byte)29, (byte) (-5), (byte) (-5)}, byteArray3);
      assertArrayEquals(new byte[] {(byte)29, (byte) (-5), (byte) (-5), (byte)29, (byte) (-3), (byte) (-5), (byte)29, (byte) (-5), (byte) (-5)}, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(9, byteArray3.length);
      assertEquals(9, byteArray2.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 838.762825508;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-5));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {838.762825508}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = 49;
      Integer integer0 = new Integer(49);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(49, object1);
      
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) object1;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(1195);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1195, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer2 = ArrayUtils.get(integerArray0, 1, (Integer) null);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals(49, (int)integer2);
      assertEquals(7, integerArray0.length);
      
      Object object2 = ArrayUtils.toPrimitive((Object) integer2);
      assertTrue(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer1));
      assertTrue(object2.equals((Object)object1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals(49, object2);
      assertEquals(7, integerArray0.length);
      
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)object2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(49, (int)integer3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)32;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {32.0, 49.0, 49.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Object object3 = ArrayUtils.get((Object[]) integerArray0, 134, object2);
      assertTrue(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer1));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)integer3));
      assertTrue(object3.equals((Object)integer0));
      assertTrue(object3.equals((Object)integer3));
      assertTrue(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)object1));
      assertNotNull(object3);
      assertEquals(49, object3);
      assertEquals(7, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short)4;
      shortArray0[3] = (short) (-649);
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte5;
      shortArray0[6] = (short) byte5;
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) byte0, shortArray0, shortArray0);
      assertFalse(byte0 == byte5);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)4, (short)0, (short) (-649), (short)0, (short)1, (short)1, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (-2125344640);
      intArray0[2] = (int) (short) (-649);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-649), (-2125344640), 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2436;
      longArray0[1] = 1L;
      longArray0[3] = (long) (-1428);
      longArray0[4] = (long) 2436;
      longArray0[5] = (long) 2436;
      Short short0 = new Short((short)1033);
      assertNotNull(short0);
      assertEquals((short)1033, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-15));
      assertNull(shortArray0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 2436L, 2436L, (-1428L), 0L, 1L, 2436L}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      ArrayUtils.shift(charArray0, 0, (-1428), 9);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-15);
      doubleArray0[1] = (double) 2436L;
      doubleArray0[2] = (double) (byte) (-15);
      doubleArray0[3] = (double) (byte) (-15);
      doubleArray0[4] = (double) 'y';
      doubleArray0[5] = (double) (byte) (-15);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (-1428);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1033, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[6] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\u0000';
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-1125));
      assertNull(longArray0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte) (-97));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte) (-97));
      assertNotNull(short0);
      assertEquals((short) (-97), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-97));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-97), (short)short1);
      
      Short short2 = new Short((byte) (-97));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-97), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-5052));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-97), (short) (-5052), (short) (-97)}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)118;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte)99, (byte)118}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte) (-17);
      byteArray1[2] = (byte) (-17);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)99, (byte)118}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Short short0 = new Short((byte) (-17));
      assertNotNull(short0);
      assertEquals((short) (-17), (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)99);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\"';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {34}, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-1125));
      assertNull(longArray0);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte) (-97));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      boolean boolean3 = ArrayUtils.isSameLength((byte[]) null, byteArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-97), (byte) (-97)}, byteArray0);
      assertFalse(boolean3);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte) (-97));
      assertNotNull(short0);
      assertEquals((short) (-97), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-97));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-97), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-97));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-97), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-5052));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-97), (short) (-97), (short) (-97)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 2146015798;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (int) (byte)0, (double) (byte)0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 34.0, 2.146015798E9, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 4;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 2146015798;
      ArrayUtils.shift(longArray0, (-811));
      assertArrayEquals(new long[] {2146015798L, 0L, 4L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int1 = (-2146997539);
      Object object0 = ArrayUtils.get((Object[]) null, (-2146997539));
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      ArrayUtils.shift((boolean[]) null, (-1), (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.insert(795, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'R';
      charArray1[1] = 'A';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'R', 'A'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      ArrayUtils.swap((char[]) null, (-1970), 2610, 2146725890);
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'R');
      assertFalse(boolean0);
      
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2146725890;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (byte)5;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.14672589E9, 2.0, 2.0, 5.0, 0.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.14672589E9, 2.0, 2.0, 5.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      Integer integer0 = new Integer(973);
      assertNotNull(integer0);
      assertEquals(973, (int)integer0);
      
      Integer integer1 = new Integer(973);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(973, (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (int) (byte)5);
      assertNull(intArray0);
      
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      char[] charArray2 = ArrayUtils.subarray((char[]) null, 50, (-1627));
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5761.147);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-647.00190295);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, (double) 0);
      assertArrayEquals(new double[] {(-5761.147), 0.0, 0.0, 0.0, 0.0, (-647.00190295)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'l';
      charArray0[2] = '>';
      ArrayUtils.swap(charArray0, 0, 3564);
      assertArrayEquals(new char[] {'\u0000', 'l', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 3564);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, floatArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-647.00190295);
      objectArray0[3] = (Object) (-5761.147);
      objectArray0[4] = (Object) '>';
      objectArray0[5] = (Object) 'l';
      ArrayUtils.shift(objectArray0, (-1), 0, 3564);
      assertEquals(6, objectArray0.length);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = 'l';
      charArray1[2] = '>';
      charArray1[3] = 'l';
      charArray1[4] = '>';
      charArray1[5] = '>';
      charArray1[6] = '>';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertArrayEquals(new char[] {'l', 'l', '>', 'l', '>', '>', '>'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'l', '>'}, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertEquals(1, charArray2.length);
      assertEquals(7, charArray1.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = (-1284);
      long[] longArray0 = new long[3];
      longArray0[0] = 57L;
      longArray0[1] = (long) 9;
      longArray0[2] = (long) (-1284);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {57L, 9L, (-1284L)}, longArray0);
      assertArrayEquals(new long[] {57L, 9L, (-1284L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 9);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {9, (-1284), 0, 0}, intArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {57L, 9L, (-1284L)}, longArray0);
      assertArrayEquals(new long[] {57L, 9L, (-1284L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-83);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-83)}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)57);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)57}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (short)3179;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 3179L}, longArray0);
      assertArrayEquals(new long[] {0L, 3179L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)3179;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)1);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 1, 3179}, intArray0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, intArray0.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (short) (-1);
      longArray2[1] = (long) (-1);
      longArray2[2] = (long) (short)3179;
      longArray2[3] = 0L;
      longArray2[4] = (long) 3179;
      longArray2[5] = (long) 1;
      longArray2[6] = (long) (short)1;
      longArray2[7] = 1L;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L), (-1L), 3179L, 0L, 3179L, 1L, 1L, 1L, 0L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertTrue(boolean1);
      assertEquals(9, longArray2.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      int[] intArray0 = new int[1];
      short short0 = (short)908;
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3017.7);
      doubleArray0[1] = (double) (short)908;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)908;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 908.0, (-491.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3017.7), 908.0, 0.0, 908.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (int) (short)908, 1.0);
      assertArrayEquals(new double[] {(-3017.7), 908.0, 0.0, 908.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 879L;
      longArray0[1] = (-4117L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {879L, (-4117L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-4117L);
      longArray1[1] = 879L;
      int int0 = ArrayUtils.indexOf(longArray1, 1942L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4117L), 879L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int0);
      assertEquals(2, longArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)112);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)112, (byte) (-115), (byte)0}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-115);
      intArray0[2] = (int) (byte) (-115);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)112;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (byte) (-1), Integer.MAX_VALUE);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), (-115), (-115), (-1), 112}, intArray0);
      assertEquals((-1), int1);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1103);
      floatArray0[1] = (float) (-1103);
      ArrayUtils.shift(floatArray0, (-1103), 2, (-1103));
      assertArrayEquals(new float[] {(-1103.0F), (-1103.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 70;
      ArrayUtils.shift(byteArray0, (int) (byte)101);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)101;
      doubleArray1[1] = (double) (byte)101;
      doubleArray1[2] = (double) 70;
      doubleArray1[3] = (double) 70;
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {101.0, 101.0, 70.0, 70.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)101;
      floatArray0[1] = (float) (byte)101;
      floatArray0[2] = (float) 70;
      floatArray0[3] = (float) (byte)101;
      floatArray0[4] = (float) (-2292);
      ArrayUtils.shift(floatArray0, (-1114), 116, (-2292));
      assertArrayEquals(new float[] {70.0F, 101.0F, (-2292.0F), 101.0F, 101.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 100, 100);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.shift(floatArray0, (-1495), 0, (-1495));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 959.9529F;
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 4);
      assertNull(longArray0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift((Object[]) null, 551, (-1317), 7);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 5.007002625289575;
      doubleArray0[1] = 5.007002625289575;
      doubleArray0[2] = 5.007002625289575;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.007002625289575);
      assertArrayEquals(new double[] {5.007002625289575, 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float((float) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Integer integer0 = new Integer(50);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      Integer integer1 = new Integer(49);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(49, (int)integer1);
      
      Integer integer2 = new Integer(1241);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1241, (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray1, (Object) integer1);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {5.007002625289575, 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((float[]) null, 50);
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 2, 2, 2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (int) (byte) (-20));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1617;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-3025L));
      assertNotNull(long0);
      assertEquals((-3025L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 7);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Long long0 = new Long(49);
      assertNotNull(long0);
      assertEquals(49L, (long)long0);
      
      Long long1 = new Long((-423L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-423L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3010);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 10;
      intArray0[4] = (-1273);
      ArrayUtils.reverse(intArray0, 128, 1);
      assertArrayEquals(new int[] {(-3010), 1, 1, 10, (-1273)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-3010));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer integer0 = new Integer((-2494));
      assertNotNull(integer0);
      assertEquals((-2494), (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1273);
      floatArray0[1] = (float) (-2494);
      floatArray0[2] = (float) (-2494);
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) (-3010);
      floatArray0[5] = (float) (-2494);
      ArrayUtils.shift(floatArray0, (-3010));
      assertArrayEquals(new float[] {(-3010.0F), (-2494.0F), (-1273.0F), (-2494.0F), (-2494.0F), 10.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3010.0F), (-2494.0F), (-1273.0F), (-2494.0F), (-2494.0F), 10.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(128);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(128L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1273));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1273L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1613L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1613L, (long)long3);
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2666), (-2666));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1580);
      intArray0[1] = 2;
      intArray0[2] = (-2145017146);
      intArray0[3] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1580));
      assertArrayEquals(new int[] {(-1580), 2, (-2145017146), (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-547.41981189);
      doubleArray0[1] = 1236.458757787738;
      doubleArray0[2] = 1891.69732674;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {1891.69732674, 1236.458757787738, (-547.41981189)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2603);
      intArray0[1] = 1984;
      intArray0[2] = (-493);
      intArray0[3] = (-198);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2146796673, (-198));
      assertArrayEquals(new int[] {(-2603), 1984, (-493), (-198)}, intArray0);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '|';
      charArray0[2] = '@';
      charArray0[3] = ',';
      charArray0[4] = 'i';
      charArray0[5] = '{';
      charArray0[6] = '%';
      charArray0[7] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', '@', ',', 'i', '{', '%', 'q'}, charArray1);
      assertArrayEquals(new char[] {'$', '|', '@', ',', 'i', '{', '%', 'q'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.shift((Object[]) floatArray0, (-625), 91, 91);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) '^', intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5761.147);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-647.00190295);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 0, (double) 0);
      assertArrayEquals(new double[] {(-5761.147), 0.0, 0.0, 0.0, 0.0, (-647.00190295)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'l';
      charArray0[2] = '>';
      ArrayUtils.swap(charArray0, 0, 3564);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 3564);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, floatArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '>'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1385), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1385, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2784;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2784}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 2784;
      doubleArray0[2] = (double) 2784;
      doubleArray0[3] = (double) 2784;
      doubleArray0[4] = (double) 2784;
      doubleArray0[5] = (double) 2784;
      doubleArray0[6] = (double) 2784;
      doubleArray0[7] = (double) 2784;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2784.0);
      assertArrayEquals(new double[] {0.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2965;
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-10324);
      shortArray0[6] = (short)2915;
      shortArray0[7] = (short)512;
      shortArray0[8] = (short)2304;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-4930));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)0, (short)2915, (short)512, (short)2304, (short) (-4930)}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)0, (short)2915, (short)512, (short)2304}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 2784;
      integerArray0[1] = (Integer) 2784;
      integerArray0[2] = (Integer) 2784;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2784, (int)integer0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-252);
      intArray0[2] = 2145898940;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-252), 0, 2145898940, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-136), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -136, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '9';
      charArray0[2] = 'z';
      ArrayUtils.swap(charArray0, (-1083), 1, 98);
      assertArrayEquals(new char[] {'9', 'z', 'J'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2427L));
      assertNotNull(long0);
      assertEquals((-2427L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2427L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2427L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1212), 0);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((double[]) null, 0, 0, 1902);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray1, 1007);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 1625);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2567L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2567L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1219));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)54;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)3179);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {54.0, (-1.0), 77.0, 77.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((boolean[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short)54;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (byte)77;
      longArray0[4] = 2189L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (short)54;
      longArray0[8] = (long) (short)3179;
      ArrayUtils.shift(longArray0, (-2896), (-1), (int) (short)54);
      assertArrayEquals(new long[] {(-1L), 54L, (-1L), 77L, 2189L, (-1L), (-1L), 54L, 3179L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 54L);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-1L), 54L, (-1L), 77L, 2189L, (-1L), (-1L), 54L, 3179L}, longArray0);
      assertTrue(boolean2);
      assertEquals(9, longArray0.length);
      
      Long[] longArray1 = new Long[7];
      longArray1[0] = (Long) 54L;
      longArray1[1] = (Long) (-1L);
      Long long0 = new Long((short)3179);
      assertNotNull(long0);
      assertEquals(3179L, (long)long0);
      
      longArray1[2] = long0;
      longArray1[3] = (Long) 54L;
      longArray1[4] = (Long) 77L;
      longArray1[5] = (Long) (-1L);
      longArray1[6] = (Long) (-1L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {54L, (-1L), 3179L, 54L, 77L, (-1L), (-1L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '/', '/'}, charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Integer integer0 = new Integer((-923));
      assertNotNull(integer0);
      assertEquals((-923), (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-3663L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3663L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((byte)0);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-3663L), 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (long) (byte)0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-3663L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, (-3663L), 0L, 0L, 0L}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2543L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2442));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(10, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-38));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-38), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-38));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-38), (byte)byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-472);
      shortArray0[2] = (short) (-2530);
      shortArray0[1] = (short) (-649);
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-2530), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-2530), (short)0, (short)0, (short) (-649), (short) (-2530), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray2 = ArrayUtils.insert(4, shortArray0, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-2530), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-649), (short) (-2530), (short)0, (short)0, (short) (-649), (short) (-2530), (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (-649);
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte5;
      shortArray0[6] = (short) byte5;
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) byte0, shortArray0, shortArray0);
      assertFalse(byte0 == byte5);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)4, (short)0, (short) (-649), (short)0, (short)1, (short)1, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (-2125344640);
      intArray0[2] = (int) (short) (-649);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-649), (-2125344640), 1}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)1, (byte)byte5);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3171L;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) byte0;
      longArray0[7] = 3171L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (-137));
      assertArrayEquals(new long[] {3171L, 0L, 0L, 0L, 0L, 0L, 0L, 3171L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)0, (-1186));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer integer0 = new Integer(1431655765);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1431655765, (int)integer0);
      
      Integer integer1 = new Integer((byte)1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      int int1 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1538, (-443));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 46, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-732);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)62;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62, (short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)97;
      floatArray0[1] = (float) (short)62;
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {97.0F, 62.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-885);
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      ArrayUtils.shift(intArray0, 55, (-19), (-1));
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, (-885), (-167), (-19)}, intArray0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-167));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, (-885), (-167), (-19)}, intArray0);
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, (-885), (-167), (-19), (-167)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)244);
      assertNotNull(short0);
      assertEquals((short)244, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)244, (short)short1);
      assertEquals(2, shortArray0.length);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)3211);
      assertNotNull(short0);
      assertEquals((short)3211, (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = 0;
      int int1 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      int int2 = 49;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3076), (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      try { 
        Integer.valueOf("Don't clear/set the same environment variable more than once.", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 0}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3191);
      shortArray0[1] = (short) (-12721);
      shortArray0[2] = (short) (-3191);
      shortArray0[3] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 1793);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3191), (short) (-12721), (short) (-3191), (short)2111}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3191), (short) (-12721), (short) (-3191), (short)2111}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2146075680;
      floatArray0[2] = (float) (short) (-12721);
      Double double0 = new Double((-5761.147));
      assertNotNull(double0);
      assertEquals((-5761.147), (double)double0, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[5] = 2146075680;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 2146075680}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2019;
      floatArray0[1] = (float) 2146075680;
      floatArray0[2] = (float) 2019;
      floatArray0[3] = (float) 2;
      floatArray0[4] = 71.0F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 2146075680;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2.14607565E9F, 676);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {2019.0F, 2.14607565E9F, 2019.0F, 2.0F, 71.0F, 0.0F, 2.14607565E9F}, floatArray0, 0.01F);
      assertEquals(6, int1);
      assertEquals(7, floatArray0.length);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(2019);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2019.0, (double)double1, 0.01);
      
      Double double2 = new Double(2146075680);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2.14607568E9, (double)double2, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3820L);
      floatArray0[1] = (float) (-3820L);
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1125);
      intArray0[1] = 2767;
      intArray0[2] = 2767;
      intArray0[3] = 2767;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-1125), 2767, 2767, 2767}, intArray0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 2767);
      assertNull(longArray1);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte)76);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)76);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'J');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', '('}, charArray0);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1021.41781082;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 117.962261601921;
      doubleArray0[3] = (-15.689188967081577);
      doubleArray0[5] = 680.156395043;
      doubleArray0[6] = 1021.41781082;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1021.41781082, (-1.0), 117.962261601921, (-15.689188967081577), 0.0, 680.156395043, 1021.41781082}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'g';
      charArray0[2] = 'l';
      charArray0[3] = '';
      charArray0[4] = 'e';
      charArray0[5] = 'V';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'V');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'2', 'g', 'l', '', 'e', 'V'}, charArray0);
      assertArrayEquals(new char[] {'2', 'g', 'l', '', 'e'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 83);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1169.3F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 1169.3F;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 1169.3F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, (-1874));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {9.0, 1169.300048828125, 9.0, 1169.300048828125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray(objectArray0, "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      long[] longArray0 = new long[10];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)30552;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)68;
      short short0 = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)158;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (int) (short)2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)30552, (short)13, (short)2, (short)68, (short)2, (short)158}, shortArray0);
      assertArrayEquals(new short[] {(short)30552, (short)13}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (short)2, 2123, (-3975));
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertNotSame(characterArray0, characterArray1);
      assertEquals(0, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, (int) (short)158);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 158, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 0L, 1L, 1L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '=';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '='}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '=';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {61.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)65);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)65}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 0);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      ArrayUtils.shift((boolean[]) null, 868, 4, (-1566));
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 1431);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 6);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, (-1385), 0, 12);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-38));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-124));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2920);
      Integer integer0 = new Integer((-15));
      assertNotNull(integer0);
      assertEquals((-15), (int)integer0);
      
      ArrayUtils.shift(booleanArray0, (-1386));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)82;
      ArrayUtils.swap(byteArray0, (-15), (int) (byte)0, (-2709));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)82}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      byteArray0[3] = (Byte) byte0;
      byte byte4 = (byte)1;
      Byte byte5 = new Byte((byte)1);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)0);
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertFalse(byte0 == byte4);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      
      Byte byte8 = new Byte(byte4);
      assertFalse(byte4 == byte0);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      assertEquals((byte)1, (byte)byte8);
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) byte0);
      assertFalse(byte0 == byte4);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, longArray0.length);
      
      ArrayUtils.reverse(longArray0, (int) byte0, (int) byte0);
      assertFalse(byte0 == byte4);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4423, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4423, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertFalse(byte0 == byte5);
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      assertEquals((byte)0, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte5);
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte5 == byte0);
      assertNotNull(byte9);
      assertEquals((byte)1, (byte)byte9);
      
      byteArray0[7] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) byte0);
      assertFalse(byte0 == byte5);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, longArray0.length);
      
      ArrayUtils.swap(byteArray1, (-1), (int) byte0);
      assertFalse(byte0 == byte5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-2574);
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte5;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) byte5;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0, (short)1, (short)0, (short) (-2574), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-336);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, (int) (short) (-2761), (-869));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 51;
      Integer integer0 = new Integer(51);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(51, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 915;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {915L}, longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '0';
      charArray0[2] = '7';
      charArray0[3] = '4';
      charArray0[4] = '&';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'r', '0', '7', '4', '&'}, charArray0);
      assertTrue(boolean1);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(longArray0, 121, (-895), 1431);
      assertArrayEquals(new long[] {915L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '&';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 55.0, 38.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 55.0, 38.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Integer integer0 = new Integer(915);
      assertNotNull(integer0);
      assertEquals(915, (int)integer0);
      
      Integer integer1 = new Integer((-2554));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2554), (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer((-69));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-69), (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Integer integer3 = new Integer(1591);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(1591, (int)integer3);
      
      Integer integer4 = new Integer((-1073741824));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-1073741824), (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Integer integer5 = new Integer(1591);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(1591, (int)integer5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer5));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Integer integer6 = new Integer((-2641));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals((-2641), (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer6, (Integer) null);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer5, integer4);
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer6));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '$';
      longArray0[2] = (long) '$';
      longArray0[3] = (long) (-1);
      longArray0[4] = (-161L);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 'o';
      longArray0[7] = (long) 2232;
      int int1 = 531;
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, 34, 531);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[0] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)510;
      shortArray0[4] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (-2394));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)1, (short)510, (short)1}, shortArray0);
      assertEquals(0, int0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-2394), 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)510;
      intArray0[2] = 1950;
      intArray0[3] = 453;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {510, 0, 1950, 453, 1, 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 0, 2146199424);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1134);
      longArray0[1] = (long) 2146199424;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 2146199424L, (-1));
      assertEquals((-1), int0);
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Double double2 = new Double(2.92016001342302);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(2.92016001342302, (double)double2, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      ArrayUtils.swap(doubleArray0, 1215, (-5032), 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap(longArray0, (-1), (-3975));
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-6));
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = (char) characterArray0[2];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1930.086F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) (byte)127;
      floatArray0[4] = (float) 'o';
      floatArray0[5] = (float) 'o';
      int int1 = ArrayUtils.indexOf(floatArray0, 111.0F);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1930.086F), (-1.0F), 111.0F, 127.0F, 111.0F, 111.0F}, floatArray0, 0.01F);
      assertEquals(2, int1);
      assertEquals(6, floatArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((long) characterArray0[1]);
      assertNotNull(mockRandom0);
      assertEquals(8, characterArray0.length);
      
      ArrayUtils.shift((Object[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Integer integer0 = new Integer(453);
      assertNotNull(integer0);
      assertEquals(453, (int)integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 412);
      assertNull(intArray0);
      
      Integer integer1 = Integer.getInteger("b7d", 121);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
      
      ArrayUtils.reverse((short[]) null, 6, 1);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, 46);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'o';
      short[] shortArray0 = new short[5];
      shortArray0[4] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'o', 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      
      boolean boolean5 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)631;
      shortArray0[1] = (short)1957;
      shortArray0[2] = (short) (-119);
      shortArray0[3] = (short) (-1363);
      shortArray0[4] = (short)88;
      ArrayUtils.reverse(shortArray0, 0, 1);
      assertArrayEquals(new short[] {(short)631, (short)1957, (short) (-119), (short) (-1363), (short)88}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(20, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[10];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(10, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert((-2144), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'a';
      charArray0[7] = 'G';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'E', 'W', '/', '9', 'R', 'R', 'a', 'G'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'G';
      charArray1[1] = 'G';
      charArray1[2] = 'G';
      charArray1[3] = 'E';
      charArray1[4] = 'W';
      charArray1[5] = 'E';
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', 'W', '/', '9', 'R', 'R', 'a', 'G'}, charArray0);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'E', 'W', 'E'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertEquals(6, charArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3806;
      shortArray0[1] = (short)321;
      shortArray0[2] = (short)965;
      shortArray0[3] = (short) (-1054);
      shortArray0[4] = (short) (-28225);
      shortArray0[5] = (short) (-3268);
      shortArray0[6] = (short)65;
      ArrayUtils.reverse(shortArray0, 5, (int) (short) (-3268));
      assertArrayEquals(new short[] {(short)3806, (short)321, (short)965, (short) (-1054), (short) (-28225), (short) (-3268), (short)65}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      short short0 = (short)7;
      Short short1 = new Short((short)7);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)7, (short)short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(shortArray1, (int) (short)7, (int) (short)7, (int) (short)7);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Integer integer0 = new Integer((short)7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-679.4F);
      floatArray0[2] = (-679.4F);
      floatArray0[3] = 1.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-679.4F), (-679.4F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-679.4F), (-679.4F), 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)3836);
      assertNotNull(short0);
      assertEquals((short)3836, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)3836, (short)short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3836);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)3836, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)3836, (short)short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)3836);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)3836, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[3]);
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short)3836, (short)short5);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)91);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3836, (short)3836, (short)3836, (short)3836, (short)3836, (short)91}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)3836, (-2145324528));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 3179);
      assertNull(longArray0);
      
      boolean boolean3 = ArrayUtils.contains((byte[]) null, (byte) (-117));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      Short[] shortArray2 = new Short[2];
      shortArray2[0] = (Short) (short) (-1);
      shortArray2[1] = (Short) (short) (-1);
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)3179);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-455));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-455);
      floatArray0[1] = (float) (short) (-455);
      ArrayUtils.swap(floatArray0, (int) (short) (-455), 43, (-1303));
      assertArrayEquals(new float[] {(-455.0F), (-455.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1591;
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-99);
      ArrayUtils.reverse(byteArray0, (-49), (int) (byte)37);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-1), (byte) (-39), (byte)37, (byte) (-84)}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 76);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 6);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(charArray0, 76);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4433;
      shortArray0[1] = (short) (-4421);
      shortArray0[2] = (short)2098;
      shortArray0[3] = (short)30552;
      shortArray0[4] = (short) (-1319);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)30552;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)4433, (short) (-4421), (short)2098, (short)30552, (short) (-1319)}, shortArray0);
      assertArrayEquals(new short[] {(short)30552}, shortArray1);
      assertArrayEquals(new short[] {(short)4433, (short) (-4421), (short)2098, (short)30552, (short) (-1319), (short)30552}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(6, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1524L);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (byte) (-80);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1524L);
      floatArray0[5] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4903.3F), (int) (byte)0);
      assertArrayEquals(new float[] {2.0F, (-80.0F), 0.0F, 0.0F, (-1524.0F), 2.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      
      Double double0 = new Double(83.0);
      assertNotNull(double0);
      assertEquals(83.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1524L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1524.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      doubleArray0[2] = doubleArray0[1];
      double double2 = 1.5;
      Double double3 = new Double(1.5);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1.5, (double)double3, 0.01);
      
      doubleArray0[3] = doubleArray0[2];
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-741));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -741, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (byte)127, 3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)125;
      doubleArray0[1] = (double) (byte)127;
      doubleArray0[2] = (double) (byte)125;
      doubleArray0[3] = (double) (byte)102;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {125.0, 127.0, 125.0, 102.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short) (-3567);
      shortArray0[3] = (short) (-1070);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-3567));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)52, (short) (-3567), (short) (-1070)}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)52, (short) (-3567), (short) (-1070), (short) (-3567)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = Integer.getInteger("java.lang.Short", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      ArrayUtils.swap(intArray0, 9, 8);
      assertArrayEquals(new int[] {8}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (byte) (-55);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, (-55L)}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-96));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2698), (int) (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'>', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(1113);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1113, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)7;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (int) (short)968;
      intArray0[3] = (int) (byte)125;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 9;
      intArray0[6] = 1113;
      intArray0[7] = (-1);
      intArray0[8] = (int) (short)125;
      ArrayUtils.swap(intArray0, 9, 11);
      assertArrayEquals(new int[] {7, 62, 968, 125, 1, 9, 1113, (-1), 125}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      ArrayUtils.swap(doubleArray0, 1779, (-704));
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)52;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)77;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)26, (byte)82, (byte)26, (byte)4}, byteArray2);
      assertArrayEquals(new byte[] {(byte)26, (byte)82, (byte)4, (byte)26, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte)85, (byte)77, (byte)4, (byte)0, (byte)52, (byte)0, (byte)77}, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 779);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte)49);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2640, 0, (-4));
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)11);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 2640);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)49);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)49);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, (Integer) Integer.MAX_VALUE);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {55, Integer.MAX_VALUE, 0, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      byte[] byteArray3 = new byte[1];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)49;
      byte[] byteArray4 = ArrayUtils.removeElements(byteArray3, byteArray1);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)49}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)49}, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertEquals(1, byteArray4.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, ':');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = 4609L;
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), 4609L, (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-1488), (-1488), (-1488));
      assertArrayEquals(new char[] {'d', 'v', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (-2084);
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (int) 'a';
      ArrayUtils.swap(intArray0, 81, 51, 1643);
      assertArrayEquals(new int[] {100, 100, 81, (-2084), 100, 81, 97}, intArray0);
      assertEquals(7, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4609L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {838L, (-435L), 4609L, (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, longArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Q';
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, ',');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Q'}, charArray1);
      assertArrayEquals(new char[] {'Q'}, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {100, 100, 81, (-2084), 100, 81, 97}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3412;
      shortArray0[1] = (short)529;
      shortArray0[2] = (short)1582;
      shortArray0[3] = (short)1668;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1582);
      assertArrayEquals(new short[] {(short)3412, (short)529, (short)1582, (short)1668}, shortArray0);
      assertEquals(2, int0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 959.9529F;
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      doubleArray0[3] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 959.952880859375, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {959.952880859375, 959.952880859375, (-138.665465237655), 959.952880859375}, doubleArray0, 0.01);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 3116);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1575);
      intArray0[1] = (-1078);
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 3116;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3116, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      short short0 = (short)3179;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'q';
      charArray0[2] = 'd';
      charArray0[3] = 'K';
      charArray0[4] = 'q';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3179;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3179, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) 48;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 54.0F, 48.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 4843, (-38));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1;
      shortArray2[1] = (short)1;
      shortArray2[2] = (short)1;
      shortArray2[3] = (short)1;
      shortArray2[4] = (short)1;
      shortArray2[5] = (short) (-1411);
      shortArray2[6] = (short)1;
      shortArray2[7] = (short)1;
      shortArray2[8] = (short)1;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short) (-1411), (short)1, (short)1, (short)1}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertEquals(9, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      int int0 = 4234;
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 4234, (int) byte0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte0, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) '\u0000';
      characterArray0[2] = (Character) '\u0000';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, true, true}, booleanArray0));
      assertTrue(boolean2);
      assertEquals(9, booleanArray0.length);
      
      Integer integer0 = new Integer(4562);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4562, (int)integer0);
      
      boolean boolean3 = ArrayUtils.contains((Object[]) characterArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-342.24203F), 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'p');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = (-435L);
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), (-435L), (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-1488), (-1488), (-1488));
      assertArrayEquals(new char[] {'d', 'v', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 100}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertEquals(9, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      char[] charArray0 = new char[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 905L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      ArrayUtils.shift(longArray0, 4);
      assertArrayEquals(new long[] {0L, 905L, 0L, 0L, (-1L), (-1L), 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1732L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 905L, 0L, 0L, (-1L), (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 905L, 0L, 0L, (-1L), (-1L), 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      ArrayUtils.swap(charArray0, 13, 2145043325, 2315);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)88;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)5013, 2144924072);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)88}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-3617), 1492);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)88}, shortArray0);
      assertArrayEquals(new short[] {(short)88}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-2099761788));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2099761788), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 11, 11, 11);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2596;
      longArray0[1] = (long) 2596;
      longArray0[2] = (-4199L);
      longArray0[3] = (long) (-2656);
      longArray0[4] = (long) (-2656);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 33L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2596L, 2596L, (-4199L), (-2656L), (-2656L)}, longArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)4;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 4}, intArray0);
      assertArrayEquals(new int[] {0, 4, 0, 4}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)8, 2726);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2726;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (-1L);
      longArray0[4] = (long) (byte)4;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-476L));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L, 2726L, 0L, (-1L), 4L}, longArray0);
      assertEquals((-1), int1);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1036;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1036, 0}, intArray0);
      assertArrayEquals(new int[] {1036, 1036, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      Character character0 = new Character(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      Integer integer0 = new Integer((short)1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer(61);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(61, (int)integer1);
      
      Integer integer2 = new Integer((short)1);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((int) (short)1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 61);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1169.3F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1169.3F, 61.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = (char) characterArray0[2];
      Character[] characterArray1 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {'o'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, characterArray1.length);
      
      int[] intArray1 = ArrayUtils.insert(5, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[5] = 2146075680;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {0, 0, 0, 2, 0, 2146075680}, intArray0);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3191);
      shortArray0[1] = (short) (-12721);
      shortArray0[2] = (short) (-3191);
      shortArray0[3] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2146075680, 1793);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3191), (short) (-12721), (short) (-3191), (short)2111}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2146075680;
      floatArray0[2] = (float) (short) (-12721);
      floatArray0[3] = (float) (short)2111;
      floatArray0[4] = (float) (-1160);
      floatArray0[5] = (float) 1793;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 2.14607565E9F, (-12721.0F), 2111.0F, (-1160.0F), 1793.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14607565E9F, (-12721.0F), 2111.0F, (-1160.0F), 1793.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-77), (int) (byte) (-77));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[5] = (short)1;
      shortArray0[2] = (short) (byte) (-77);
      shortArray0[3] = (short)34;
      shortArray0[4] = (short) (byte) (-77);
      shortArray0[5] = (short) (byte) (-77);
      shortArray0[6] = (short) (byte) (-77);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte) (-77));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-77), (short)0, (short) (-77), (short)34, (short) (-77), (short) (-77), (short) (-77)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)34}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (short) (-77), (int) (short)1);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(729);
      assertNotNull(integer0);
      assertEquals(729, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 1);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) (short) (-77);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-678L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), (-77L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-77L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-2534L);
      longArray0[2] = (-1L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {(-2534L), (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2430;
      longArray0[1] = (long) 2430;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {2430L, 2430L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-825L);
      longArray0[1] = (-17L);
      longArray0[2] = 2204L;
      longArray0[3] = 0L;
      longArray0[4] = 1958L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-825L), (double) 0L);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 3230);
      assertArrayEquals(new long[] {(-825L), (-17L), 2204L, 0L, 1958L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2129117700, 989);
      assertNull(intArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) 2204L);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {2204.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      int[] intArray0 = new int[17];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, 1169);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.shift((char[]) null, 1169);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2784;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2784}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2784;
      doubleArray0[1] = (double) 2784;
      doubleArray0[2] = (double) 2784;
      doubleArray0[3] = (double) 2784;
      doubleArray0[4] = (double) 2784;
      doubleArray0[5] = (double) 2784;
      doubleArray0[6] = (double) 2784;
      doubleArray0[7] = (double) 2784;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2784.0);
      assertArrayEquals(new double[] {2784.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0, 2784.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2965;
      shortArray0[2] = (short) (-251);
      shortArray0[3] = (short)3353;
      shortArray0[4] = (short) (-10324);
      shortArray0[5] = (short)512;
      shortArray0[6] = (short)2915;
      shortArray0[7] = (short)512;
      shortArray0[8] = (short)2304;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-4930));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)512, (short)2915, (short)512, (short)2304, (short) (-4930)}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)2965, (short) (-251), (short)3353, (short) (-10324), (short)512, (short)2915, (short)512, (short)2304}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 2784;
      integerArray0[1] = (Integer) 2784;
      integerArray0[2] = (Integer) 2784;
      Integer integer0 = ArrayUtils.get(integerArray0, 2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2784, (int)integer0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short)3179;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)3179;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)3179;
      shortArray0[7] = (short) (-2257);
      shortArray0[8] = (short) (-59);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4634), (int) (short)3179);
      assertArrayEquals(new short[] {(short)3179, (short)3179, (short)1, (short)1, (short)3179, (short)1, (short)3179, (short) (-2257), (short) (-59)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-108));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-108), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2656);
      ArrayUtils.shift(intArray0, 2047, (-2656), 0);
      assertArrayEquals(new int[] {(-2656)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap(shortArray0, (-62), Integer.MAX_VALUE, 100);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)6520;
      shortArray0[2] = (short) (-958);
      shortArray0[3] = (short) (-2119);
      shortArray0[4] = (short) (-22);
      shortArray0[5] = (short) (-4930);
      shortArray0[6] = (short) (-4126);
      shortArray0[7] = (short)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)6520, (short) (-958), (short) (-2119), (short) (-22), (short) (-4930), (short) (-4126), (short)1}, shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1440);
      assertNotNull(integer0);
      assertEquals(1440, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)5);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, integerArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-4930), 16, (int) (short)1);
      assertArrayEquals(new short[] {(short)5, (short)6520, (short) (-958), (short) (-2119), (short) (-22), (short) (-4930), (short) (-4126), (short)1}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-4126), 45);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)5, (short)6520, (short) (-958), (short) (-2119), (short) (-22), (short) (-4930), (short) (-4126), (short)1}, shortArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean3);
      assertFalse(boolean3.equals((Object)boolean5));
      assertTrue(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray0[5] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      longArray0[7] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3017.7);
      doubleArray0[1] = 908.0;
      doubleArray0[2] = 1243.118;
      doubleArray0[3] = (-2929.4153);
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 1779);
      assertArrayEquals(new double[] {(-3017.7), 908.0, 1243.118, (-2929.4153)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)77;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-26), (byte)85, (byte)26, (byte)82, (byte)124, (byte)0, (byte)0, (byte)77}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = (-435L);
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), (-435L), (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-1488), (-1488), (-1488));
      assertArrayEquals(new char[] {'d', 'v', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-76));
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray1);
      assertNotNull(objectArray0);
      assertArrayEquals(new long[] {838L, (-435L), (-435L), (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertSame(longArray1, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 68.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 221, (-359));
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)32;
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)30;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte) (-1);
      Object object0 = ArrayUtils.get(objectArray0, (int) 30, objectArray0[1]);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 1235L;
      longArray0[4] = 1235L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 1235L, 1235L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3937;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)3937;
      intArray0[1] = (int) (short)3937;
      intArray0[2] = (-22);
      ArrayUtils.shift(longArray0, (-22), (int) (short)3937, (-2896));
      assertArrayEquals(new long[] {2294L, 1818L, 1235L, 1235L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-22);
      doubleArray0[1] = (double) 1235L;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-22.0), 1235.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-22.0), 1235.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean2 = new Boolean(true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0, (Random) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(booleanArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 46, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-732);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)62;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62, (short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)97;
      floatArray0[1] = (float) (short)62;
      floatArray0[2] = (float) (short) (-2603);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {97.0F, 62.0F, (-2603.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, (-2562));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 'I');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[3] = (long) 'I';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {73L, 0L, 0L, 73L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift((Object[]) doubleArray1, (-1134));
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 2.92016001342302;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 2146015798;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (int) (byte)0, 2.92016001342302);
      assertArrayEquals(new double[] {0.0, 2.92016001342302, 0.0, 0.0, 34.0, 2.146015798E9, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 4, 2144411425, 2144411425);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 6);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 3179.0F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = (-1284);
      ArrayUtils.shift(intArray0, 0, (-1284), 2089);
      assertArrayEquals(new int[] {9, (-1284), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (-96), 2089, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-90), (byte) (-57), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-112);
      ArrayUtils.shift(byteArray0, (int) (byte) (-112), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)87}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((byte) (-112));
      assertNotNull(integer0);
      assertEquals((-112), (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, (int) 87, integer0);
      assertNotNull(integer1);
      assertEquals((-112), (int)integer1);
      assertEquals(0, integerArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)3179, (int) (short) (-1), 8);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ArrayUtils.shift(byteArray0, (int) (byte) (-57), (-884), (int) (byte) (-108));
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = (-1284);
      intArray0[2] = 835;
      intArray0[3] = 1376;
      ArrayUtils.shift(intArray0, 835, (-1284), 2089);
      assertArrayEquals(new int[] {9, (-1284), 835, 1376}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (-884), 6512, 1376);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-77), (byte) (-57), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)53);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-4152), 14);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 46, (-84));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-138.665465237655), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 959.952880859375, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3116, (-251));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-148), (-148));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 0, 2146199424);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1134);
      longArray0[1] = (long) 2146199424;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'o';
      charArray0[2] = '$';
      intArray0[10] = (int) '$';
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, 0, 2232);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap((int[]) null, 321, 1517, (-80));
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0, (double) (byte)0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 1672);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Integer integer0 = new Integer(97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 97;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {97.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2140597443);
      intArray0[1] = (-2733);
      intArray0[2] = 97;
      intArray0[3] = 2140597443;
      intArray0[4] = 97;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2140597443));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2140597443), (-2733), 97, 2140597443, 97}, intArray0);
      assertArrayEquals(new int[] {(-2140597443), (-2733), 97, 2140597443, 97, (-2140597443)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(683L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)46, (byte)6, (byte)46, (byte)46, (byte)46, (byte)46, (byte)6}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)6, (byte)46, (byte)46, (byte)46, (byte)46, (byte)6}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (byte)69;
      shortArray0[2] = (short) (byte)6;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1253));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)69, (short)69, (short)6}, shortArray0);
      assertArrayEquals(new short[] {(short)69, (short)69, (short)6}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-3266.3F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-3266.3F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, (-1284));
      assertArrayEquals(new byte[] {(byte)46, (byte)6, (byte)46, (byte)46, (byte)46, (byte)46, (byte)6}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (short)69, (int) (byte)6);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1253);
      longArray0[1] = (long) (short)6;
      longArray0[2] = (long) (short)69;
      longArray0[3] = (long) (byte)6;
      longArray0[4] = (long) (-1284);
      longArray0[5] = (long) (short) (-1253);
      longArray0[6] = (long) (byte)6;
      longArray0[7] = (long) (byte)46;
      longArray0[8] = (long) (byte)6;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1253L), 6L, 69L, 6L, (-1284L), (-1253L), 6L, 46L, 6L}, longArray0);
      assertFalse(boolean1);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[4] = (float) 'i';
      floatArray0[1] = (float) 'M';
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (float) '\u0018';
      float[] floatArray2 = ArrayUtils.add(floatArray1, (-1273.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 24.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 24.0F, (-1273.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-44), (-2756));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse(floatArray2, 3, 9);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 24.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 24.0F, (-1273.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(3, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      Integer integer0 = new Integer((byte)47);
      assertNotNull(integer0);
      assertEquals(47, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("47", string0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) "(T0^");
      assertNotNull(string0);
      assertEquals("(T0^", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      charArray0[4] = 'o';
      charArray0[5] = 'Z';
      charArray0[6] = ',';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {',', 'Z', 'o', '@', ' ', '%', 'o'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2089);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2089)}, intArray0);
      assertArrayEquals(new int[] {(-2089)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {',', 'Z', 'o', '@', ' ', '%', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-152.0);
      doubleArray0[1] = (-1.0);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-152.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-246);
      ArrayUtils.shift(shortArray0, (int) (short) (-246));
      assertArrayEquals(new short[] {(short) (-246)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 3796);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 68.0F);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 68.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 221, (-359));
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)32;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-103), (byte) (-125), (byte)3, (byte)30, (byte) (-1), (byte)32}, byteArray0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)30;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte) (-1);
      Object object0 = ArrayUtils.get(objectArray0, (int) 30, objectArray0[1]);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '^';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'e');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^', '^'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) '^';
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 17, (int) characterArray0[1]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {94L, 94L, 0L, 0L, 94L, 94L, 101L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(2, characterArray0.length);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.reverse(intArray0, 0, (int) character0);
      assertEquals(14, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1822.479);
      assertNotNull(float0);
      assertEquals(1822.479F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1822.479F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[0] = true;
      booleanArray0[5] = true;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2603);
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short) (-2603);
      longArray0[3] = (long) (short) (-2603);
      longArray0[4] = 1295L;
      longArray0[5] = (long) 46;
      longArray0[6] = (long) 46;
      longArray0[7] = (long) (short) (-2603);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2603L), 46L, (-2603L), (-2603L), 1295L, 46L, 46L, (-2603L)}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 2013.0, 3056.746207);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (int) (short) (-2603));
      assertArrayEquals(new long[] {(-2603L), 1295L, 46L, 46L, (-2603L), (-2603L), 46L, (-2603L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-936.48));
      assertNotNull(float0);
      assertEquals((-936.48F), (float)float0, 0.01F);
      
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 46);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {46.0F, (-936.48F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2.92016001342302;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 2.92016001342302);
      assertArrayEquals(new double[] {0.0, 2.92016001342302}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte)34;
      shortArray1[2] = (short) (byte)0;
      shortArray1[3] = (short) (byte)34;
      shortArray1[4] = (short) (byte)34;
      shortArray1[5] = (short) (byte)34;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short)34);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)34;
      floatArray0[2] = (float) 2146015798;
      int int1 = ArrayUtils.indexOf(floatArray0, 2498.9414F);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 34.0F, 2.14601574E9F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[1] = (byte)34;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)0, (byte)34, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 34.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (byte)34);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {34.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray1, (-2353));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 1625);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1307.131929155631);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3892.58411196;
      doubleArray0[4] = 521.56927;
      doubleArray0[5] = (-1448.36964169);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 3892.58411196);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1307.131929155631), (-1.0), 3892.58411196, 521.56927, (-1448.36964169)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1307.131929155631), (-1.0), 521.56927, (-1448.36964169)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-3704), 53, (-1027));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1027);
      intArray0[1] = (-3704);
      intArray0[2] = 53;
      intArray0[3] = (-1027);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-363));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1027), (-3704), 53, (-1027)}, intArray1);
      assertArrayEquals(new int[] {(-1027), (-3704), 53, (-1027)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-751.0), Double.NaN);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, (int) (byte) (-124), (int) (byte) (-124));
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[19];
      longArray0[0] = (long) 1591;
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) (-2597);
      longArray0[3] = (long) (-2597);
      longArray0[4] = (long) (-2597);
      ArrayUtils.shift(longArray0, (-1385));
      assertEquals(19, longArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-2597);
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 'o';
      objectArray0[3] = (Object) (-2597);
      Object object0 = ArrayUtils.get(objectArray0, 88);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 1, (int) (byte) (-124));
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 88, (-2597));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1591L;
      longArray0[1] = (long) 178;
      longArray0[2] = 1591L;
      longArray0[3] = (long) (-4176);
      longArray0[4] = (long) (-4176);
      longArray0[5] = (-897L);
      longArray0[6] = (-897L);
      longArray0[7] = (long) 46;
      longArray0[8] = (long) (-4176);
      ArrayUtils.swap(longArray0, (-2770), 178, (-2770));
      assertArrayEquals(new long[] {1591L, 178L, 1591L, (-4176L), (-4176L), (-897L), (-897L), 46L, (-4176L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-2770));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0, (byte)2, (byte)2, (byte)0, (byte)2, (byte) (-111)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 2846);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (-1253);
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-26);
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-26);
      shortArray0[6] = (short) (byte)27;
      shortArray0[7] = (short) (byte)6;
      shortArray0[8] = (short) (byte)27;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 563.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {563.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(1, int0);
      assertEquals(7, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (byte) (-80));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, (-462.715F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-462.715F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte)4;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 4}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) (byte)4;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3164), (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)4, (short)4, (short)0, (short)4}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, shortArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(3517.42292703);
      assertNotNull(double0);
      assertEquals(3517.42292703, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(722.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(722.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3517.42292703, 722.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-115));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte)4;
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)4}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)4}, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)79);
      assertArrayEquals(new byte[] {(byte)33}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)33;
      longArray0[1] = (long) (byte) (-55);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-55));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L, (-55L)}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short)968;
      shortArray0[3] = (short) (byte)125;
      shortArray0[4] = (short) (byte)125;
      shortArray0[5] = (short) (byte)79;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)33, 1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)7, (short) (-96), (short)968, (short)125, (short)125, (short)79}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-55L);
      doubleArray0[1] = (double) (-55L);
      doubleArray0[2] = (double) (byte) (-55);
      doubleArray0[3] = (double) 33L;
      doubleArray0[4] = (double) (short)125;
      doubleArray0[5] = (double) (short)968;
      doubleArray0[6] = (double) (short)125;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-55.0), (-55.0), (-55.0), 33.0, 125.0, 968.0, 125.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-55.0), (-55.0), (-55.0), 33.0, 125.0, 968.0, 125.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, intArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, integerArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      Integer integer0 = new Integer((byte)125);
      assertNotNull(integer0);
      assertEquals(125, (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte)33;
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte)59;
      shortArray0[4] = (short) (byte)125;
      ArrayUtils.swap(shortArray0, (int) (short)33, (int) (byte) (-55), (int) (byte)33);
      assertArrayEquals(new short[] {(short) (-1), (short)33, (short) (-55), (short)59, (short)125}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-55));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)33, (short) (-55), (short)59, (short)125}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)33, (short)59, (short)125}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte)59;
      shortArray2[1] = (short)59;
      shortArray2[2] = (short) (byte)33;
      shortArray2[3] = (short) (byte)125;
      shortArray2[4] = (short) (byte) (-55);
      shortArray2[5] = (short) (byte) (-55);
      shortArray2[6] = (short) (-974);
      shortArray2[7] = (short) (byte)125;
      shortArray2[8] = (short) (byte)33;
      short[] shortArray3 = ArrayUtils.clone(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)33, (short)125, (short) (-55), (short) (-55), (short) (-974), (short)125, (short)33}, shortArray3);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)33, (short)125, (short) (-55), (short) (-55), (short) (-974), (short)125, (short)33}, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(9, shortArray3.length);
      assertEquals(9, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)3179;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 3179L}, longArray0);
      assertArrayEquals(new long[] {1L, 3179L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, 14, 836);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(7, int0);
      assertEquals(8, booleanArray0.length);
      
      short[] shortArray3 = ArrayUtils.removeElement(shortArray0, (short) (-1486));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray3.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1486);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short)3179;
      intArray0[5] = (int) (short) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {3179, (-1), (-1486), (-1), 3179, (-1)}, intArray0);
      assertTrue(boolean1);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 3179;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 3179, 1, 1, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '2', 3179);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean3 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 'I');
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[3] = (long) 'I';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {73L, 73L, 0L, 73L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'I';
      objectArray0[1] = (Object) 53.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'I';
      intArray0[3] = (-904);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), 73, 73, (-904)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, false, 73);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'I'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      int[] intArray0 = new int[7];
      boolean boolean0 = ArrayUtils.contains(intArray0, 84);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-365.6813);
      doubleArray0[1] = 2073.1;
      doubleArray0[2] = (double) 1415;
      doubleArray0[3] = (double) 1415;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) 1415;
      doubleArray0[6] = (double) Float.NaN;
      ArrayUtils.shift(doubleArray0, 1415);
      assertArrayEquals(new double[] {Double.NaN, (-365.6813), 2073.1, 1415.0, 1415.0, Double.NaN, 1415.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 492, 1415);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      int int0 = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '+';
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = (-1257);
      intArray0[4] = (-1257);
      intArray0[5] = 0;
      intArray0[6] = 1591;
      intArray0[7] = (int) '+';
      intArray0[8] = 2;
      ArrayUtils.swap(intArray0, 0, 0, 1591);
      assertArrayEquals(new int[] {43, 0, 0, 0, (-1257), 0, 1591, 43, 2}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.shift((long[]) null, (-1257));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1591, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1538, (-443));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      
      Integer integer0 = new Integer((-2991));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2991), (int)integer0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'N';
      charArray0[2] = '2';
      charArray0[3] = '@';
      charArray0[4] = 'R';
      charArray0[5] = '*';
      charArray0[6] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'y', 'N', '2', '@', 'R', '*', 't'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-3820L);
      longArray0[4] = 0L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-3820L);
      floatArray0[2] = (float) (-3820L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0L, 2292);
      assertArrayEquals(new float[] {0.0F, (-3820.0F), (-3820.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 2767;
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('h');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('h', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '!');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'R', 'h'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (int) character1, 2495);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2767L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(6, longArray1.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-3820.0F), (-3820.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = 4609L;
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), 4609L, (-776L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-1));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, 122);
      assertArrayEquals(new char[] {'d', 'v', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-107));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-776L);
      doubleArray0[1] = (double) (-776L);
      doubleArray0[2] = (-1134.0278);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-1134.0278), (-776.0), (-776.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'W';
      charArray0[2] = '/';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'a';
      charArray0[7] = 'G';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'E', 'W', '/', '9', 'R', 'R', 'a', 'G'}, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-2597);
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[4] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      char char0 = 'Z';
      Character character0 = new Character('Z');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[6] = character0;
      characterArray0[7] = (Character) 'o';
      Integer integer0 = new Integer((int) characterArray0[5]);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(111, (int)integer0);
      assertEquals(8, characterArray0.length);
      
      Integer integer1 = new Integer(3945);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(3945, (int)integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) (-2597);
      integerArray0[3] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2597, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1115);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1115, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2145034976));
      assertNotNull(integer0);
      assertEquals((-2145034976), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2147483645));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2147483645), (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(34, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-58);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-58));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-58), (byte) (-1), (byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-80), (byte) (-58), (byte) (-1), (byte) (-58)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      ArrayUtils.reverse(byteArray0, 127, (int) (byte) (-80));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-58), (byte) (-1), (byte) (-58)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (byte) (-58);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-58);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte) (-58);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(13, shortArray1.length);
      assertEquals(13, shortArray0.length);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((short) (-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.insert((int)  (-58), (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-18));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-44), (byte)0, (byte)0, (byte) (-18), (byte) (-80), (byte) (-80)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte) (-44), (byte)0, (byte)0, (byte) (-18), (byte) (-80), (byte) (-80)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      ArrayUtils.reverse(byteArray1, (int) (byte)0, 108);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-44), (byte)0, (byte)0, (byte) (-18), (byte) (-80), (byte) (-80)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-18), (byte)0, (byte)0, (byte) (-44), (byte) (-18), (byte) (-18)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte) (-44);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-44), (short) (-18), (short) (-44)}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(180);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(180, (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(108, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-670);
      shortArray0[1] = (short) (-670);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2904);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-670), (short) (-670)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-670), (short) (-670)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (int) (short) (-670));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-670), (short) (-670)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-2145246575), (-872));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-670), (short) (-670)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-670), (short) (-670)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      Character character1 = new Character('w');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('w', (char)character1);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, 124, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(2897);
      assertNotNull(integer0);
      assertEquals(2897, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2121);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2121, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-5352));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-5352), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger((String) null);
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = Integer.valueOf(2);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(2, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(768);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals(768, (int)integer6);
      
      integerArray0[6] = integer0;
      Integer integer7 = new Integer(2121);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      assertEquals(2121, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = new Integer[2];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer3;
      integerArray1[1] = integer6;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(7, integerArray2.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray3 = ArrayUtils.removeElement(integerArray2, (Object) integerArray0[7]);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray1));
      assertFalse(integerArray3.equals((Object)integerArray0));
      assertFalse(integerArray3.equals((Object)integerArray2));
      assertNotNull(integerArray3);
      assertNotSame(integerArray0, integerArray3);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray3);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray3);
      assertNotSame(integerArray3, integerArray1);
      assertNotSame(integerArray3, integerArray0);
      assertNotSame(integerArray3, integerArray2);
      assertEquals(8, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(7, integerArray2.length);
      assertEquals(6, integerArray3.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)4380);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short)4380);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)4380);
      assertNotNull(integer0);
      assertEquals(4380, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = ';';
      charArray0[2] = 'O';
      charArray0[3] = 'S';
      charArray0[4] = 'T';
      charArray0[5] = '|';
      charArray0[6] = 'p';
      charArray0[7] = 'x';
      charArray0[8] = '_';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (short)4380);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4380, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addAll((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = 2626L;
      longArray0[3] = 0L;
      longArray0[4] = 251L;
      longArray0[5] = (-1L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 2626L, 0L, 251L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, 2626L, 0L, 251L, (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = 1817.0F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 1817.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4583);
      shortArray0[1] = (short)311;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)22;
      shortArray0[4] = (short)390;
      shortArray0[5] = (short) (-1694);
      ArrayUtils.swap(shortArray0, 3294, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-4583), (short)311, (short) (-1), (short)22, (short)390, (short) (-1694)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'u');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      Float float2 = new Float((-1.0F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = new Float((double) (-1.0F));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 859);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 1681.4;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (-679.4F);
      doubleArray0[8] = 810.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.0, 0.0, 1681.4, 0.0, 1.0, (-1.0), 0.0, (-679.4000244140625), 810.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 0.0, 1681.4, 0.0, 1.0, (-1.0), 0.0, (-679.4000244140625), 810.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '0';
      charArray0[2] = 'Q';
      charArray0[3] = 'i';
      charArray0[4] = '1';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', '0', 'Q', 'i', '1'}, charArray0);
      assertArrayEquals(new char[] {'Y', '0', 'Q', 'i', '1', 'Y'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '+';
      int int0 = (-1385);
      ArrayUtils.swap(intArray0, 1591, (-1385), (-1385));
      assertEquals(14, intArray0.length);
      
      ArrayUtils.shift((long[]) null, 0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)33);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte) (-78);
      longArray0[2] = (long) 1431;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2689L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-78L), 1431L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-78L), 1431L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)125;
      shortArray0[1] = (short) (byte)125;
      shortArray0[2] = (short) (byte)33;
      shortArray0[3] = (short) (byte) (-78);
      shortArray0[4] = (short) (byte) (-78);
      shortArray0[5] = (short) (byte)33;
      shortArray0[6] = (short) (byte)125;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 99, 78);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)125, (short)125, (short)33, (short) (-78), (short) (-78), (short)33, (short)125}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, ',');
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 1235L;
      longArray0[4] = 1235L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 1818L, 1235L, 1235L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3937;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(longArray0, (-22), (int) (short)3937, (-2896));
      assertArrayEquals(new long[] {2294L, 1818L, 1235L, 1235L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-22);
      doubleArray0[1] = (double) 1235L;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-22.0), 1235.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-22.0), 1235.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(3297);
      assertNotNull(integer0);
      assertEquals(3297, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      int int0 = ArrayUtils.lastIndexOf(charArray1, ',');
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {','}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      classArray0[3] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[3] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[4] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[5] = class4;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-491));
      assertNotNull(integer0);
      assertEquals((-491), (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((int) integerArray0[1]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-491), (int)integer1);
      assertEquals(9, integerArray0.length);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integerArray0[0];
      Integer integer2 = new Integer((int) integerArray0[2]);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-491), (int)integer2);
      assertEquals(9, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) integerArray0[0]);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(9, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) integer0, 2);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals((-1), int0);
      assertEquals(6, classArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 46);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[3] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[4] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      
      Byte byte0 = new Byte((byte)6);
      assertNotNull(byte0);
      assertEquals((byte)6, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-46));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-46), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      Byte[] byteArray1 = new Byte[4];
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, 82);
      assertEquals(3, int0);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (int) (byte)0, 463);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(49, object1);
      
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(49);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object1));
      assertNotNull(integer1);
      assertEquals(49, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(1195);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals(1195, (int)integer2);
      
      Integer integer3 = new Integer((-678));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-678), (int)integer3);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) 49, 49);
      assertEquals(1, int0);
      assertEquals(6, objectArray0.length);
      
      Float float0 = new Float(1354.0F);
      assertNotNull(float0);
      assertEquals(1354.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      Float float1 = new Float((-2845.427F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2845.427F), (float)float1, 0.01F);
      
      floatArray0[0] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      objectArray0[0] = (Object) (short)52;
      shortArray0[1] = (short)52;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap((int[]) null, 881, 607, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '49', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.007002625289575;
      doubleArray0[1] = (-657.0593);
      doubleArray0[2] = 5.007002625289575;
      doubleArray0[3] = 305.1471287212163;
      doubleArray0[4] = 5.007002625289575;
      doubleArray0[5] = 5.007002625289575;
      doubleArray0[6] = (-1153.516894);
      doubleArray0[7] = 5.007002625289575;
      doubleArray0[8] = 5.007002625289575;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1153.516894));
      assertArrayEquals(new double[] {5.007002625289575, (-657.0593), 5.007002625289575, 305.1471287212163, 5.007002625289575, 5.007002625289575, (-1153.516894), 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertEquals(6, int0);
      assertEquals(9, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Float float0 = new Float((-547.9F));
      assertNotNull(float0);
      assertEquals((-547.9F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character character0 = Character.valueOf('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '('}, charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {5.007002625289575, (-657.0593), 5.007002625289575, 305.1471287212163, 5.007002625289575, 5.007002625289575, (-1153.516894), 5.007002625289575, 5.007002625289575}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      
      byte byte3 = (byte)1;
      Byte byte4 = new Byte((byte)9);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)9, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      Byte byte5 = new Byte((byte)1);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[2] = byte5;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((float) 1818L);
      assertNotNull(float0);
      assertEquals(1818.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(69.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(69.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-37.46));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-37.46F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals(8, floatArray0.length);
      
      floatArray0[4] = float4;
      Float float5 = new Float(108.0F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals(108.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) byte3);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      assertEquals(1.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(108.0F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals(108.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1818.0F, 0.0F, 69.0F, (-37.46F), 0.0F, 108.0F, 1.0F, 108.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) null, 59);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(250, stringArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-491));
      assertNotNull(integer0);
      assertEquals((-491), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-491), (int)integer1);
      assertEquals(9, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-491), (int)integer2);
      assertEquals(9, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-491), (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-491), (int)integer4);
      assertEquals(9, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals((-491), (int)integer5);
      assertEquals(9, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(18688);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(18688, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[2]);
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      assertEquals((-491), (int)integer7);
      assertEquals(9, integerArray0.length);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(3889);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertNotNull(integer8);
      assertEquals(3889, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer integer9 = ArrayUtils.get(integerArray0, (int) integerArray0[8]);
      assertNull(integer9);
      assertEquals(9, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) classArray0, (Object) null, (-491));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      doubleArray0[1] = 869.65969;
      doubleArray0[2] = 85.0;
      doubleArray0[4] = 85.0;
      doubleArray0[5] = (-3511.632080416078);
      doubleArray0[6] = 2247.11;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 302.306843173669, 0, 311.853032237711);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1681.4, 869.65969, 85.0, 0.0, 85.0, (-3511.632080416078), 2247.11}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2247.11, (-3511.632080416078), 85.0, 0.0, 85.0, 869.65969, 1681.4}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2276);
      shortArray0[1] = (short)14;
      shortArray0[3] = (short) (-18);
      shortArray0[4] = (short)3806;
      shortArray0[5] = (short)859;
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)1505;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-18));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short) (-2276), (short)14, (short)0, (short) (-18), (short)3806, (short)859, (short)91, (short)1505}, shortArray0);
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{3}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(4, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)124, (byte)58, (byte)24, (byte) (-1), (byte) (-1), (byte)54, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(49, object1);
      
      objectArray0[1] = object1;
      Integer integer1 = new Integer(49);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object1));
      assertNotNull(integer1);
      assertEquals(49, (int)integer1);
      
      Integer integer2 = new Integer(1195);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals(1195, (int)integer2);
      
      Integer integer3 = new Integer((-678));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object1));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-678), (int)integer3);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 49);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(1, int0);
      assertEquals(6, objectArray0.length);
      
      Float float0 = new Float(1354.0F);
      assertNotNull(float0);
      assertEquals(1354.0F, (float)float0, 0.01F);
      
      Double double0 = new Double((-678));
      assertNotNull(double0);
      assertEquals((-678.0), (double)double0, 0.01);
      
      Double double1 = new Double((double) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(49.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)46;
      objectArray0[1] = (Object) (byte)46;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte)46);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 2.92016001342302;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 2146015798;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte)0;
      Integer integer0 = new Integer(2146015798);
      assertNotNull(integer0);
      assertEquals(2146015798, (int)integer0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 2.92016001342302;
      objectArray0[2] = (Object) integer0;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 669, integer0);
      assertNotNull(integer1);
      assertEquals(2146015798, (int)integer1);
      assertEquals(1, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1);
      assertEquals(2, int0);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)91;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)97);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)91}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0, 2, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(946);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(946, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      boolean[] booleanArray0 = new boolean[5];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(946, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 946, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      short[] shortArray0 = ArrayUtils.insert(3010, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, Integer.MAX_VALUE, 55}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      Float float2 = new Float((-1.0F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = new Float((double) (-1.0F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((long[]) null, 0, 2019, (int) (byte)0);
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[13];
      charArray0[0] = 'A';
      charArray0[1] = '#';
      charArray0[2] = 'A';
      charArray0[3] = '#';
      charArray0[4] = 'L';
      ArrayUtils.swap(charArray0, (-2020), 8);
      assertEquals(13, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 2019, 1522);
      int[] intArray0 = new int[8];
      intArray0[0] = 2019;
      intArray0[1] = 1431655765;
      intArray0[2] = 8;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '8';
      intArray0[5] = (int) 'L';
      intArray0[6] = (int) 'L';
      intArray0[7] = (int) '#';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {1431655765, 8, 35, 56, 76, 76, 35, 2019}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'T';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[2] = 'W';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-103), (int) 'N');
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte) (-12), (byte) (-103), (byte)70, (byte) (-111), (byte)0, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte) (-12), (byte) (-103), (byte)70, (byte) (-111), (byte)0, (byte)2}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 68.0F);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 68.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 221, (-359));
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)32;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-1), (byte) (-103), (byte) (-125), (byte)3, (byte)30, (byte) (-1), (byte)32}, byteArray0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-246));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-510));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-510), (int)integer1);
      
      integerArray0[1] = integer1;
      int int1 = 43;
      Integer integer2 = new Integer(43);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(43, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(65);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(65, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-510), 43, 65}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, integerArray0.length);
      
      ArrayUtils.swap((short[]) null, 15, 65, 65);
      int int2 = ArrayUtils.indexOf((byte[]) null, (byte) (-76));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integerArray0[0];
      objectArray0[1] = (Object) int1;
      objectArray0[2] = (Object) int1;
      objectArray0[3] = (Object) integer3;
      objectArray0[4] = (Object) integer0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1160);
      intArray0[1] = 0;
      intArray0[2] = 2019;
      intArray0[3] = 2;
      intArray0[4] = (-1);
      intArray0[5] = 2146075680;
      int int0 = ArrayUtils.indexOf(intArray0, 2019);
      assertArrayEquals(new int[] {(-1160), 0, 2019, 2, (-1), 2146075680}, intArray0);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3191);
      shortArray0[1] = (short) (-12721);
      shortArray0[2] = (short) (-646);
      shortArray0[3] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2146075680, 1793);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-3191), (short) (-12721), (short) (-646), (short)2111}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2146075680;
      floatArray0[2] = (float) (short) (-12721);
      floatArray0[3] = (float) (short)2111;
      floatArray0[4] = (float) (-1160);
      floatArray0[5] = (float) 1793;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 2.14607565E9F, (-12721.0F), 2111.0F, (-1160.0F), 1793.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14607565E9F, (-12721.0F), 2111.0F, (-1160.0F), 1793.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int0 = (-39);
      Integer integer0 = new Integer((-39));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short)0, Integer.MAX_VALUE);
      assertNull(byteArray0);
      
      boolean boolean4 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      float[] floatArray0 = ArrayUtils.insert(int0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-743);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      ArrayUtils.shift(shortArray0, (-34), (int) (short)0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-743), (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int int0 = 49;
      Integer integer0 = new Integer(49);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 13);
      assertNull(integer1);
      assertEquals(2, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer2 = new Integer(109);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(109, (int)integer2);
      
      Integer integer3 = ArrayUtils.get(integerArray0, (int) 34, integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(109, (int)integer3);
      assertEquals(2, integerArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertSame(object2, object1);
      
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(49, (int)integer4);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)32;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 109;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[7] = (double) 109;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {32.0, 34.0, 0.0, 109.0, 0.0, 0.0, 34.0, 109.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      Object object3 = ArrayUtils.get((Object[]) integerArray0, (int) 32, (Object) null);
      assertNull(object3);
      assertEquals(2, integerArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)12, (int) (short)12);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '?';
      charArray0[2] = '&';
      char[] charArray1 = ArrayUtils.add(charArray0, '?');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'&', '?', '&'}, charArray0);
      assertArrayEquals(new char[] {'&', '?', '&', '?'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) '&';
      doubleArray0[2] = (double) 12.0F;
      doubleArray0[3] = (double) '&';
      doubleArray0[4] = 54.0;
      doubleArray0[5] = (double) '?';
      ArrayUtils.shift(doubleArray0, 1155);
      assertArrayEquals(new double[] {63.0, 38.0, 12.0, 38.0, 54.0, 63.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      ArrayUtils.shift((short[]) null, 48);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 3);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 3L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      long[] longArray0 = new long[9];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = '>';
      charArray0[4] = '>';
      charArray0[5] = '$';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '5', '>', '\u0000', '>', '$'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) '5';
      objectArray1[1] = (Object) '>';
      ArrayUtils.shuffle(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', (int) 'H');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 5);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(5, int1);
      
      Integer integer0 = new Integer(5);
      assertTrue(integer0.equals((Object)int1));
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Integer integer0 = new Integer(1506);
      assertNotNull(integer0);
      assertEquals(1506, (int)integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-702);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-702)}, intArray0);
      assertArrayEquals(new int[] {(-702)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null, "(T0^");
      assertNotNull(string0);
      assertEquals("(T0^", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      charArray0[4] = 'o';
      charArray0[5] = 'Z';
      charArray0[6] = ',';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {',', 'Z', 'o', '@', ' ', '%', 'o'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2093);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2093)}, intArray0);
      assertArrayEquals(new int[] {(-2093)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {',', 'Z', 'o', '@', ' ', '%', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-152.0);
      doubleArray0[1] = (-1.0);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-152.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-246);
      ArrayUtils.shift(shortArray0, (int) (short) (-246));
      assertArrayEquals(new short[] {(short) (-246)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 3796);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 21;
      Integer integer0 = new Integer(21);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(21, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {21}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-92.224391);
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (-869.23);
      doubleArray0[4] = (double) 21;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[7] = (double) int0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-92.224391), 21.0, 21.0, (-869.23), 21.0, 21.0, 21.0, 21.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-92.224391), 21.0, 21.0, (-869.23), 21.0, 21.0, 21.0, 21.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MutableInt mutableInt0 = new MutableInt(21.0);
      assertNotNull(mutableInt0);
      assertEquals(21, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(21, (int)mutableInt0.toInteger());
      assertEquals("21", mutableInt0.toString());
      assertEquals((short)21, mutableInt0.shortValue());
      assertEquals(21.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(21L, mutableInt0.longValue());
      assertEquals(21, mutableInt0.intValue());
      assertEquals(21.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer1 = mutableInt0.getValue();
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(21, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(21, (int)mutableInt0.toInteger());
      assertEquals("21", mutableInt0.toString());
      assertEquals((short)21, mutableInt0.shortValue());
      assertEquals(21.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(21L, mutableInt0.longValue());
      assertEquals(21, mutableInt0.intValue());
      assertEquals(21.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(21, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 828, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 828, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2221L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-844.2752F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 2704.0F;
      floatArray0[3] = 2498.9414F;
      floatArray0[4] = 230.656F;
      floatArray0[5] = (-2924.0854F);
      floatArray0[6] = (-2707.0F);
      floatArray0[7] = (-2219.0F);
      floatArray0[8] = 1019.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 230.656F);
      assertArrayEquals(new float[] {(-844.2752F), Float.NaN, 2704.0F, 2498.9414F, 230.656F, (-2924.0854F), (-2707.0F), (-2219.0F), 1019.0F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = 'C';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'|', '~', 'C'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 73.0, (double) 1019.0F);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (byte)124);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {124}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2140597443;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2140597443));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2140597443, 0}, intArray0);
      assertArrayEquals(new int[] {2140597443, 0, (-2140597443)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap(floatArray0, 2140597443, (-1436));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-117));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte) (-117);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2851);
      assertArrayEquals(new short[] {(short)0, (short)34, (short) (-117)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean2);
      assertEquals(2, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)2851;
      intArray0[3] = (-1);
      boolean boolean3 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new int[] {34, 0, 2851, (-1)}, intArray0);
      assertFalse(boolean3);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-1);
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 34;
      integerArray0[3] = (Integer) 34;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 0, 34, 34}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, 54, (byte)58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (-2265L);
      longArray0[5] = (long) (-2770);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-2770);
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 879L);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2770);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-2770), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1522, (byte) (-11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1522, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), 0L, (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-1488), (-1488), (-1488));
      assertArrayEquals(new char[] {'d', 'v', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (-2084);
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (int) 'a';
      ArrayUtils.swap(intArray0, 81, 51, 1643);
      assertArrayEquals(new int[] {100, 100, 81, (-2084), 100, 81, 97}, intArray0);
      assertEquals(7, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4609L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {838L, (-435L), 0L, (-776L), 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, longArray0.length);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 81;
      integerArray0[1] = (Integer) (-2084);
      integerArray0[2] = (Integer) 97;
      integerArray0[3] = (Integer) (-2084);
      integerArray0[4] = (Integer) 100;
      integerArray0[5] = (Integer) 97;
      Integer integer0 = new Integer(2346);
      assertNotNull(integer0);
      assertEquals(2346, (int)integer0);
      
      integerArray0[6] = integer0;
      Integer integer1 = new Integer(3263);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3263, (int)integer1);
      
      integerArray0[7] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (int) integerArray0[6]);
      assertNull(integer2);
      assertEquals(8, integerArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-6));
      assertNotNull(byte0);
      assertEquals((byte) (-6), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2383L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2383L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2383L;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2383L;
      doubleArray0[3] = (double) 2383L;
      doubleArray0[4] = (-1623.97);
      doubleArray0[5] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2383.0, (-1.0), 2383.0, 2383.0, (-1623.97), (-1.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 187.267878;
      doubleArray0[7] = (-865.0009401);
      doubleArray0[8] = (-1081.70989006);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2787.67839225, 0);
      assertArrayEquals(new double[] {(-485.4120673981944), 519.4120885778565, 2321.882099, 0.0, 0.0, 0.0, 187.267878, (-865.0009401), (-1081.70989006)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-124);
      Byte byte1 = new Byte((byte) (-124));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-124), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-124), (byte)byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)4;
      Byte byte4 = new Byte((byte)4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)4, (byte)byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = Byte.valueOf((byte) (-124));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte) (-124), (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-40));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      assertEquals((byte) (-40), (byte)byte6);
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124), (byte)4, (byte) (-124), (byte) (-40)}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) byte3;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (byte) (-40);
      shortArray0[7] = (short) byte3;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-124), (short) (-124), (short)4, (short)4, (short) (-124), (short) (-124), (short) (-40), (short)4}, shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-26), (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (-1253);
      shortArray0[2] = (short) (byte)6;
      shortArray0[3] = (short) (byte)69;
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte)69;
      shortArray0[6] = (short) (byte)27;
      shortArray0[7] = (short) (byte)6;
      shortArray0[8] = (short) (byte)27;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) (short)6;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) 1L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)69, (-246));
      assertArrayEquals(new double[] {69.0, 6.0, 7.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[1] = 1.0F;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-80.0F), 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 187.267878;
      doubleArray0[7] = (-865.0009401);
      doubleArray0[8] = (-1081.70989006);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-655);
      shortArray0[1] = (short) (-655);
      shortArray0[2] = (short) (-655);
      shortArray0[3] = (short) (-655);
      shortArray0[4] = (short) (-655);
      shortArray0[5] = (short) (-655);
      shortArray0[6] = (short) (-655);
      shortArray0[7] = (short) (-655);
      shortArray0[8] = (short) (-655);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-655));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-655), (short) (-655), (short) (-655), (short) (-655), (short) (-655), (short) (-655), (short) (-655), (short) (-655), (short) (-655)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      Object object0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Integer integer0 = new Integer(512);
      assertNotNull(integer0);
      assertEquals(512, (int)integer0);
      
      Integer integer1 = Integer.getInteger("aeA Dk@6aT=%PmTZ", integer0);
      assertNotNull(integer1);
      assertEquals(512, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom((byte)27);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (byte)27;
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-26);
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-26);
      shortArray0[6] = (short) (byte)27;
      shortArray0[7] = (short) (byte)6;
      shortArray0[8] = (short) (byte)27;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)69, (short)27, (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short)27, (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 563.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {563.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(1, int0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)27, (-2008));
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)12);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)12, (int) (short)12);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {12.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '?';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.add(charArray0, '?');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'&', '?', 'b'}, charArray0);
      assertArrayEquals(new char[] {'&', '?', 'b', '?'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 12.0F;
      doubleArray0[3] = (double) 12.0F;
      doubleArray0[4] = 54.0;
      doubleArray0[5] = (double) '?';
      doubleArray0[6] = (double) '&';
      ArrayUtils.shift(doubleArray0, 1155);
      assertArrayEquals(new double[] {63.0, 98.0, 12.0, 12.0, 54.0, 63.0, 38.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 1155;
      longArray0[2] = (long) '&';
      longArray0[3] = (long) 1155;
      longArray0[4] = (long) '&';
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 'b';
      longArray0[7] = (-2689L);
      longArray0[8] = (long) '?';
      long[] longArray1 = ArrayUtils.insert(3, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3L, 1155L, 38L, 1155L, 38L, 3L, 98L, (-2689L), 63L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      long[] longArray0 = new long[11];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1634L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(11, longArray0.length);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Integer integer0 = new Integer(1249);
      assertNotNull(integer0);
      assertEquals(1249, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) integer0);
      assertEquals((-1), int0);
      assertEquals(1, characterArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer1 = new Integer(536);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(536, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (-2265L);
      longArray0[5] = (long) (-2770);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-2770);
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 879L);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2770);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-2770), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2265L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-2770L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (-2770L);
      floatArray0[7] = (float) (-1L);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-2265.0F), 0.0F, (-2770.0F), 0.0F, 0.0F, 0.0F, (-2770.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) '\"';
      longArray0[4] = (long) '\"';
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'N';
      longArray0[7] = (long) 'N';
      longArray0[8] = (long) 'B';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 34L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {66L, 77L, 66L, 77L, 78L, 78L, 66L}, longArray1);
      assertArrayEquals(new long[] {66L, 77L, 66L, 34L, 34L, 77L, 78L, 78L, 66L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(9, longArray0.length);
      
      ArrayUtils.swap(charArray0, (-79), 0, 0);
      assertArrayEquals(new char[] {'T', '\"', 'j', 'M', 'N', 'B', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1824.66132);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1824.66132), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, 0, (-2020.1450990739));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1824.66132), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2020.1450990739), (-1824.66132), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 0, 0, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-246));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-510));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-510), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(43);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(43, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(65);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(65, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-510), 43, 65}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray1.length);
      
      ArrayUtils.swap((short[]) null, 15, 65, 65);
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte) (-76));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 251L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {251L}, longArray0);
      assertArrayEquals(new long[] {251L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-136);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-136)}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1817.0F;
      floatArray0[1] = 1817.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-136);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 2626L;
      floatArray0[7] = (float) 2626L;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {1817.0F, 0.0F, 0.0F, (-136.0F), 0.0F, 2626.0F, 2626.0F, 1817.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (int) (short)22, (-2362));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1936L);
      longArray0[1] = 1365L;
      longArray0[2] = 803L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1936L), 1365L, 803L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, 2267, 2267, 1696);
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, (Integer[]) null);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-285));
      assertNotNull(integer0);
      assertEquals((-285), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2221));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2221), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2929));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2929), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-285), (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-277));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals((-277), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-80));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-80), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.valueOf((-548));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      assertEquals((-548), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(9);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals(9, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.valueOf(3210);
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertNotNull(integer8);
      assertEquals(3210, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(18, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ArrayUtils.shift(byteArray0, 52);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1591;
      longArray0[4] = (long) 915;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {(-1385L), 0L, 0L, 1591L, 915L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 915;
      Object object0 = ArrayUtils.get(objectArray0, (-1385));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1591L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 't');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1385));
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 695);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1567.61655), (-1567.61655));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-246));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2138635342));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short) (-246);
      longArray0[3] = (long) (short) (-246);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-2138635342);
      longArray0[6] = 2112L;
      longArray0[7] = (long) (short)1;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, (-246L), (-246L), 0L, (-2138635342L), 2112L, 1L}, longArray0);
      assertTrue(boolean2);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)1);
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (short)1, (int) (short)1, 1261.953261351635);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      intArray0[1] = (-1522);
      intArray0[2] = (-2804);
      intArray0[3] = (-453);
      intArray0[4] = (-2662);
      intArray0[3] = 1360;
      intArray0[6] = 2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2597), (-1522), (-2804), 1360, (-2662), 0, 2}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(boolean1);
      assertEquals(8, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom(1360);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '/';
      charArray0[2] = '^';
      charArray0[3] = ';';
      charArray0[4] = 'd';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'/', '^', ';', 'd', '8'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      char[] charArray0 = new char[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 26);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-138.665465237655), 26);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {26.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '%');
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, true, 132);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(6, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt(2);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)1;
      shortArray0[1] = (short) (-336);
      short short1 = (short) (-2761);
      int int0 = (-472);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {(-1901L), 1L, 0L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2147.975, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[22];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte) (-44);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-18));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, int0);
      assertEquals(22, byteArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)34;
      doubleArray0[1] = 2.92016001342302;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 2.92016001342302);
      assertArrayEquals(new double[] {34.0, 2.92016001342302}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 2146015798, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) (byte)34;
      shortArray1[2] = (short) (byte)0;
      shortArray1[3] = (short) (byte)34;
      shortArray1[4] = (short) (byte)34;
      shortArray1[5] = (short) (byte)34;
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)34, (short)34, (short)34}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short)34);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)34;
      floatArray0[2] = (float) 2146015798;
      int int1 = ArrayUtils.indexOf(floatArray0, 2498.9414F);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 34.0F, 2.14601574E9F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)34;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)34, (byte)0, (byte)0, (byte)34}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 519.4120885778565;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-485.4120673981944), 519.4120885778565);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 519.4120885778565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)52);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2294L;
      doubleArray0[4] = (double) 2294L;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 740.60688;
      doubleArray0[8] = (double) 2294L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte)36, (double) (byte)36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-649);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-885);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-10));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-10));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 1235L;
      longArray0[4] = 1235L;
      ArrayUtils.shift(longArray0, 1067);
      assertArrayEquals(new long[] {1235L, 1235L, 0L, 2294L, 1818L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1235L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 2294L;
      objectArray0[3] = (Object) 1235L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)87, 591);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, byteArray0.length);
      
      Integer integer0 = new Integer((byte)87);
      assertNotNull(integer0);
      assertEquals(87, (int)integer0);
      
      Integer integer1 = new Integer((byte)87);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(87, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(87, object0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 4693);
      assertNull(integer2);
      assertEquals(4, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(4, int0);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) integerArray0[0], longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2146744919);
      longArray0[1] = (long) (-2146744919);
      longArray0[2] = (long) (-2146744919);
      longArray0[3] = (long) (-2146744919);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146744919), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146744919, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = 'i';
      charArray0[2] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray0);
      assertArrayEquals(new char[] {'M', 'i', '%'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'i';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'M';
      ArrayUtils.shift(doubleArray0, 1155);
      assertArrayEquals(new double[] {77.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.insert(1155, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1634L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1634L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(1966, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[5] = (int) byte0;
      intArray0[1] = (int) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, byte0, (-5));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(byteArray1, byteArray2);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Integer integer1 = new Integer((-5));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-5), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(object0.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-5), object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, object0);
      assertFalse(object0.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-5);
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) (byte) (-5);
      longArray0[4] = (long) 5;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (-5);
      longArray0[7] = 1440L;
      longArray0[8] = (long) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte0, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-701.8F);
      floatArray0[1] = 0.0F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-701.8F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-230));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1306));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1591;
      longArray0[4] = (long) 915;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {(-1385L), 0L, 0L, 1591L, 915L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 915;
      Object object0 = ArrayUtils.get(objectArray0, (-1385));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1591L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, Integer.MAX_VALUE, 1591);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1591;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) 1591L;
      ArrayUtils.reverse(floatArray0, 1431, (-662));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1591.0F, Float.NaN, 1591.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2108.3984745171306);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 2108.3984745171306, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byteArray0[2] = byte3;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-5);
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) byte0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-5L), (-5L), (-5L), (-5L), (-5L), (-5L), (-5L)}, longArray0);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-5L), (-5L), (-5L), (-5L), (-5L), (-5L), (-5L)}, longArray0);
      assertTrue(boolean1);
      assertEquals(7, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1818L;
      longArray0[1] = 1235L;
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-83));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-83);
      intArray0[1] = 6;
      intArray0[2] = (int) (byte) (-83);
      intArray0[3] = 1073741824;
      intArray0[1] = (int) (byte) (-83);
      intArray0[5] = (int) (byte) (-83);
      ArrayUtils.swap(intArray0, 2, 1073741824, 6);
      assertArrayEquals(new int[] {(-83), (-83), (-83), 1073741824, 0, (-83)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.14016919F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.14016919F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-46.997932F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-46.997932F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1064.1343F;
      floatArray0[1] = (-342.24203F);
      floatArray0[2] = 2153.325F;
      floatArray0[3] = 84.0F;
      floatArray0[4] = 99.0F;
      floatArray0[5] = (-4571.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1393.161F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1064.1343F, (-342.24203F), 2153.325F, 84.0F, 99.0F, (-4571.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1393.161F), 1064.1343F, (-342.24203F), 2153.325F, 84.0F, 99.0F, (-4571.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-491);
      doubleArray0[1] = (double) (-491);
      doubleArray0[2] = (double) (-491);
      doubleArray0[3] = (double) (-491);
      doubleArray0[4] = (double) (-491);
      doubleArray0[5] = (double) (-491);
      doubleArray0[6] = (double) (-491);
      doubleArray0[7] = (double) (-491);
      doubleArray0[8] = (double) (-491);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-491.0));
      assertArrayEquals(new double[] {(-491.0), (-491.0), (-491.0), (-491.0), (-491.0), (-491.0), (-491.0), (-491.0), (-491.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-88));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117), (byte) (-117)}, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1264.1858F);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 959.9529F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 959.9529F, 398);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 959.952880859375}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[8] = '+';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 't', (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '+'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'g');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '+'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '+'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = 'Q';
      charArray0[6] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', (-1017));
      assertArrayEquals(new char[] {'|', '|', '?', '?', '?', 'Q', '|'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertEquals(7, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '_');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', '|', '?', '?', '?', 'Q', '|'}, charArray0);
      assertArrayEquals(new char[] {'_', '|', '|', '?', '?', '?', 'Q', '|'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-703.34F);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)11;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-72), (byte)64, (byte) (-72), (byte) (-115), (byte) (-72), (byte)11}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(2, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 0, (-2770));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-2770);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-3968.249F);
      floatArray0[8] = 2867.6682F;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-2770));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-2770.0F), 0.0F, 0.0F, (-3968.249F), 2867.6682F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2L);
      floatArray0[1] = (float) (-2L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2767, 2767);
      assertArrayEquals(new float[] {(-2.0F), (-2.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 672L;
      longArray0[1] = (-2L);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-2L);
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {672L, (-2L), (-1L), (-2L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)2);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)34;
      doubleArray0[1] = 2.92016001342302;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, 2146015798, 2.92016001342302);
      assertArrayEquals(new double[] {34.0, 2.92016001342302}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '`');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-4019));
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer(17);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(17, object1);
      
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '9';
      ArrayUtils.shift((Object[]) null, (-39), 2656, 128);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2567L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray0, (-102), (-375), (-375));
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      MockRandom mockRandom0 = new MockRandom(3106L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap(doubleArray0, (-75), 0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 46, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-732);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)62;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62, (short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2603), (short)0, (short) (-732), (short)97, (short)62}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-2603));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)97;
      floatArray0[1] = (float) (short)62;
      floatArray0[2] = (float) (short) (-2603);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {97.0F, 62.0F, (-2603.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((short)97);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift((Object[]) byteArray1, (int) (short) (-2603));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      ArrayUtils.shift((Object[]) integerArray0, 3093);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, 0, 2146199424);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1134);
      longArray0[1] = (long) 2146199424;
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1134L), 2146199424L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'o';
      charArray0[2] = '$';
      intArray0[10] = (int) '$';
      charArray0[4] = '$';
      charArray0[5] = '`';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'$', 'o', '$', '\u0000', '$', '`'}, charArray0);
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 2, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(6, charArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) '`';
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) '`';
      charArray0[2] = '$';
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      Object object0 = ArrayUtils.get((Object[]) doubleArray1, 0);
      assertNull(object0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) '$';
      Object object1 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertNotNull(object1);
      assertEquals(0L, object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[8] = object1;
      ArrayUtils.shift(objectArray0, 2146199424);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2146);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      Float float2 = new Float((-1.0F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      Float float3 = new Float((double) (-1.0F));
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 859);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 1681.4;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (-679.4F);
      doubleArray0[8] = 810.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4.0, 0.0, 1681.4, 0.0, 1.0, (-1.0), 0.0, (-679.4000244140625), 810.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 0.0, 1681.4, 0.0, 1.0, (-1.0), 0.0, (-679.4000244140625), 810.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      intArray0[1] = (-1522);
      intArray0[2] = (-2804);
      intArray0[3] = (-453);
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-453));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-2804));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '=';
      charArray0[2] = 'Q';
      charArray0[3] = 'G';
      charArray0[4] = '=';
      charArray0[5] = '=';
      ArrayUtils.swap(charArray0, 2145043325, (-1083), 2);
      assertArrayEquals(new char[] {'[', '=', 'Q', 'G', '=', '='}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 4990L;
      longArray0[1] = 575L;
      longArray0[2] = (-2133L);
      ArrayUtils.shift(longArray0, (-2574), (-2574), (-2574));
      assertArrayEquals(new long[] {4990L, 575L, (-2133L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer integer0 = new Integer((-39));
      assertNotNull(integer0);
      assertEquals((-39), (int)integer0);
      
      Integer integer1 = new Integer((-39));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-39), (int)integer1);
      
      Integer integer2 = new Integer(1072);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1072, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 2.92016001342302;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 2146015798;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)34, (int) (byte)0, 2.92016001342302);
      assertArrayEquals(new double[] {0.0, 2.92016001342302, 0.0, 0.0, 34.0, 2.146015798E9, 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 4, 2144411425, 2144411425);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 6);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, booleanArray0.length);
      
      int int1 = ArrayUtils.indexOf((float[]) null, 3179.0F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (-1253);
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-26);
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-26);
      shortArray0[6] = (short) (byte)27;
      shortArray0[7] = (short) (byte)6;
      shortArray0[8] = (short) (byte)27;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-655));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2150L);
      assertNotNull(long0);
      assertEquals(2150L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2150L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2430;
      floatArray0[1] = (float) 2430;
      floatArray0[2] = (float) 2430;
      floatArray0[3] = (float) 2430;
      floatArray0[4] = (float) 2430;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2603.0F));
      assertArrayEquals(new float[] {2430.0F, 2430.0F, 2430.0F, 2430.0F, 2430.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '1';
      charArray0[2] = '.';
      charArray0[3] = '.';
      charArray0[4] = '@';
      charArray0[5] = '.';
      charArray0[6] = '@';
      charArray0[7] = '1';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'R', (-10));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'L', '1', '.', '.', '@', '.', '@', '1'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.swap(floatArray0, 2701, 2, (-1));
      assertArrayEquals(new float[] {2430.0F, 2430.0F, 2430.0F, 2430.0F, 2430.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-10), 2, (int) (byte) (-115));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2430.0F);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1169.3F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 9;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {9.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 72);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-1185.594136109119));
      assertNotNull(float0);
      assertEquals((-1185.5941F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 72);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(72.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1185.594136109119));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1185.5941F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) 0);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(4L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(4L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1095L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1095L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-1095L), (long)long3);
      assertEquals(7, longArray0.length);
      
      longArray0[3] = long3;
      Long long4 = new Long(4L);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(4L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(1684L);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(1684L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[0]);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      assertEquals(7, longArray0.length);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 4L, (-1095L), (-1095L), 4L, 1684L, 0L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1550);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1550}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1550, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte) (-124));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-25);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-25));
      assertArrayEquals(new int[] {(-25)}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)1, (int) (byte)1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-77), (int) (byte) (-77));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-77);
      shortArray0[3] = (short)34;
      shortArray0[4] = (short) (byte) (-77);
      shortArray0[5] = (short) (byte) (-77);
      shortArray0[6] = (short) (byte) (-77);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte) (-77));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-77), (short)1, (short) (-77), (short)34, (short) (-77), (short) (-77), (short) (-77)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)34}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)34;
      intArray0[1] = 31;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 48;
      intArray0[4] = (int) (short) (-77);
      intArray0[5] = (int) (byte) (-77);
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)1;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertArrayEquals(new int[] {34, 31, 1, 48, (-77), (-77), (-1), 1}, intArray0);
      assertTrue(boolean0);
      assertEquals(8, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (short)34);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 34;
      integerArray0[1] = (Integer) (-77);
      integerArray0[2] = (Integer) 48;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) (-77);
      integerArray0[5] = (Integer) 34;
      Integer integer0 = new Integer((short) (-77));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-77), (int)integer0);
      
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) (-1);
      integerArray0[8] = (Integer) 48;
      Integer integer1 = ArrayUtils.get(integerArray0, 2146445212);
      assertNull(integer1);
      assertEquals(9, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, int0, int0);
      assertNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1.0F, 1902);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.shift(intArray1, 1, 0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)109;
      floatArray0[1] = (float) (byte)109;
      floatArray0[2] = (float) (byte)109;
      floatArray0[3] = (float) (byte)109;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (byte)109;
      floatArray2[1] = (float) (byte)109;
      floatArray2[2] = (float) (byte)109;
      floatArray2[3] = (float) (byte)109;
      floatArray2[4] = (float) (byte)109;
      floatArray2[5] = (float) (byte)109;
      floatArray2[6] = (float) (byte)109;
      floatArray2[7] = (float) (byte)109;
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, (int) (byte)109, 0);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F, 109.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertEquals(0, floatArray3.length);
      assertEquals(8, floatArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '.';
      charArray0[2] = 'E';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (short)16;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)16, (int) (short)16);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 16.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1844.0F;
      floatArray0[1] = (-2924.0854F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 108.0F;
      floatArray0[4] = (-372.93338F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 3179.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 49, 49);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1844.0F, (-2924.0854F), 0.0F, 108.0F, (-372.93338F), (-1.0F), 3179.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[7];
      try { 
        Integer.valueOf("Don't clear/set the same environment variable more than once.", 49);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 49 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertArrayEquals(new float[] {1264.1858F, 959.9529F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-865.0009401);
      doubleArray0[2] = 187.267878;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 187.267878;
      doubleArray0[6] = (double) 959.9529F;
      doubleArray0[7] = (double) (byte)116;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1448.36964169), (-2));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, (-865.0009401), 187.267878, (-1.0), 0.0, 187.267878, 959.952880859375, 116.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1219));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)31;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)3179);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {31.0, (-1.0), 77.0, 77.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse((boolean[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short)31;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (byte)77;
      longArray0[4] = 2179L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (short)31;
      longArray0[8] = (long) (short)3179;
      ArrayUtils.shift(longArray0, (-2896), (-1), (int) (short)31);
      assertArrayEquals(new long[] {(-1L), 31L, (-1L), 77L, 2179L, (-1L), (-1L), 31L, 3179L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {31.0, (-1.0), 77.0, 77.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {31.0, (-1.0), 77.0, 77.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 31L);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-1L), 31L, (-1L), 77L, 2179L, (-1L), (-1L), 31L, 3179L}, longArray0);
      assertTrue(boolean2);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)1019;
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)17, (short)1019, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1019;
      ArrayUtils.swap(longArray0, (int) (short)1, 1938, (-723));
      assertArrayEquals(new long[] {1019L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1019L;
      floatArray0[1] = (float) (short)1019;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-723);
      floatArray0[4] = 1093.24F;
      floatArray0[5] = (float) 1019L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 19.34604F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1019.0F, 1019.0F, 0.0F, (-723.0F), 1093.24F, 1019.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2269), (float) (-2269));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2269, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (-2265L);
      longArray0[5] = (long) (-2770);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-2770);
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 879L);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2770);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-2770), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 99, 217.36351F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      MockRandom mockRandom0 = new MockRandom((-167L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'q';
      charArray0[2] = '[';
      charArray0[3] = 'V';
      charArray0[4] = 'e';
      charArray0[5] = 'A';
      charArray0[6] = 'X';
      charArray0[7] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '[');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'S', 'q', '[', 'V', 'e', 'A', 'X', 'B'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2765;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      int int0 = 1648;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2765;
      short short0 = (short)1043;
      shortArray1[1] = (short)1043;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1648, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1648, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-30));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-30)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 528.4798F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {528.4798F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      long[] longArray0 = new long[9];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-12)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '$';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '5', '>', '>', '>', '$'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) '5';
      objectArray1[1] = (Object) '>';
      ArrayUtils.shuffle(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, 1496, 10);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'>', '5', '>', '>', '>', '$'}, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1840;
      intArray0[1] = 1840;
      intArray0[3] = 477;
      intArray0[4] = 1840;
      intArray0[5] = 1840;
      boolean boolean0 = ArrayUtils.contains(intArray0, 477);
      assertArrayEquals(new int[] {1840, 1840, 0, 477, 1840, 1840}, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift((char[]) null, 1840);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'N');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2765;
      shortArray0[1] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2765, (short)908}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2765;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2765.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2765.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer integer0 = new Integer((short)2765);
      assertNotNull(integer0);
      assertEquals(2765, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)2765;
      floatArray0[1] = (float) (short)908;
      floatArray0[2] = (float) (short)2765;
      floatArray0[3] = (float) (short)2765;
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = '|';
      charArray0[6] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', (int) (short)908);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertEquals(6, booleanArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|'}, charArray0);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', '|', '|', '|'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5761.147);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0.0F;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-869L);
      longArray0[1] = (-2712L);
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-869L), (-2712L), 1L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-869L), (-2712L), 1L, 1L}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)2776;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)2776}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer integer0 = new Integer((short)2776);
      assertNotNull(integer0);
      assertEquals(2776, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) (short)2776;
      floatArray0[1] = (float) (short)908;
      floatArray0[2] = (float) (short)2776;
      floatArray0[3] = (float) (short)2776;
      floatArray0[4] = (float) (short)2776;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(15, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2776;
      longArray0[1] = (long) (short)2776;
      longArray0[2] = (long) (short)2776;
      longArray0[3] = (long) (short)2776;
      longArray0[4] = (long) (short)908;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2776L, 2776L, 2776L, 2776L, 908L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2776L, 2776L, 2776L, 2776L, 908L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray2.length);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2776, (short)2776}, shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)2776, (short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short)3937, (int) (short)3937, (-22));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-138.6229042127282);
      doubleArray0[1] = (double) 1818L;
      doubleArray0[2] = (double) 'a';
      doubleArray0[3] = (double) 2430;
      doubleArray0[4] = (double) 2430;
      doubleArray0[5] = (double) (-2896);
      doubleArray0[6] = (double) 'a';
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-138.6229042127282), 1818.0, 97.0, 2430.0, 2430.0, (-2896.0), 97.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-138.6229042127282), 1818.0, 97.0, 2430.0, 2430.0, (-2896.0), 97.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-246);
      shortArray0[1] = (short)3179;
      shortArray0[2] = (short) (-246);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3156));
      assertArrayEquals(new short[] {(short) (-246), (short)3179, (short) (-246)}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'd';
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 100, (-1)}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 'd';
      longArray2[1] = (long) (short) (-3156);
      longArray2[2] = 1866L;
      longArray2[3] = (long) (short) (-3156);
      longArray2[4] = (long) (short) (-246);
      long[] longArray3 = ArrayUtils.addAll(longArray2, (long[]) null);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {100L, (-3156L), 1866L, (-3156L), (-246L)}, longArray3);
      assertArrayEquals(new long[] {100L, (-3156L), 1866L, (-3156L), (-246L)}, longArray2);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertEquals(5, longArray3.length);
      assertEquals(5, longArray2.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 100;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) 100;
      integerArray0[4] = (Integer) 100;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {100, (-1), (-1), 100, 100}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      ArrayUtils.shift((Object[]) characterArray0, 30);
      assertEquals(2, characterArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 30;
      ArrayUtils.shift(longArray0, (-94), 30, 30);
      assertArrayEquals(new long[] {30L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) '5';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {53L, 53L, 0L}, longArray0);
      assertArrayEquals(new long[] {53L, 53L, 0L, 53L, 53L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 2, 310.853032237711);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-885L);
      longArray0[1] = (-885L);
      longArray0[2] = 1L;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 'D';
      longArray0[6] = (long) 2;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-885L), (-885L), 1L, (-1L), 2L, 68L, 2L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(14, longArray1.length);
      assertEquals(7, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift(longArray0, 2, 2, 2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-885L), (-885L), 1L, (-1L), 2L, 68L, 2L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-124));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte) (-124)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-723);
      floatArray0[2] = (float) (-723);
      floatArray0[3] = (float) (-723);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-723);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-723);
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (-1674L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-723);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3171L, 0);
      assertArrayEquals(new long[] {(-723L), 0L, 0L, (-1674L), 0L, (-723L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-11), 3170);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer(8);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Object[] objectArray0 = new Object[0];
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)82);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-3820L);
      floatArray0[1] = (float) (-3820L);
      floatArray0[2] = (float) (-3820L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0L, 2292);
      assertArrayEquals(new float[] {(-3820.0F), (-3820.0F), (-3820.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 2767;
      longArray1[1] = (long) (-2122069640);
      longArray1[2] = (long) 4237;
      longArray1[3] = (long) 2292;
      longArray1[4] = (-877L);
      longArray1[5] = 0L;
      ArrayUtils.swap(longArray1, (-1), (-3617), 4237);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2767L, (-2122069640L), 4237L, 2292L, (-877L), 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      long[] longArray0 = new long[11];
      ArrayUtils.swap(longArray0, (-2381), (-1), (-1535));
      assertEquals(11, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (-2265L);
      longArray0[5] = (long) (-2770);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-2770);
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, (-2265L), (-2770L), 0L, (-2770L), 0L}, longArray0);
      assertEquals(1, int0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2770);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-2770), 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1L));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', '\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[6] = character0;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean3 = ArrayUtils.contains(intArray0, (int) character0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean3);
      assertEquals(7, intArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, (int) characterArray0[5], 4414);
      assertNull(byteArray1);
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)14;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2125344640), (int) (byte)64);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)9, (byte)0, (byte) (-33), (byte)64, (byte) (-46), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)9, (byte)0, (byte) (-33), (byte)64, (byte) (-46), (byte)14}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      charArray0[2] = 'W';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-103), (-30));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)108, (byte) (-12), (byte) (-103), (byte)70, (byte) (-111), (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3010;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {3010.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-77), (int) (byte) (-77));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-77);
      shortArray0[3] = (short)34;
      shortArray0[4] = (short) (byte) (-77);
      shortArray0[5] = (short) (byte) (-77);
      shortArray0[6] = (short) (byte) (-77);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte) (-77));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-77), (short)1, (short) (-77), (short)34, (short) (-77), (short) (-77), (short) (-77)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)34}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)34;
      intArray0[1] = 31;
      intArray0[2] = (int) (short)1;
      intArray0[3] = 48;
      intArray0[4] = (int) (short) (-77);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)34, 26);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 2, 310.853032237711);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-1), (byte) (-103)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-47);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-47)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(boolean1);
      assertEquals(2, byteArray2.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-703.34F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-703.34F);
      doubleArray0[2] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 614.15987541138, 108, 0.0);
      assertArrayEquals(new double[] {0.0, (-703.3400268554688), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '>';
      charArray0[2] = 'd';
      charArray0[3] = '`';
      ArrayUtils.swap(charArray0, 108, (-12));
      assertArrayEquals(new char[] {'(', '>', 'd', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-9.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 77.3955427000363);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2322.8672840292684, 0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1866.6993981), 2, (-1866.6993981));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Integer integer0 = new Integer(69);
      assertNotNull(integer0);
      assertEquals(69, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-2334));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(2, objectArray0.length);
      
      bitSet0.set(1);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 2785.0, (-259.1291311277512));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, doubleArray0.length);
      
      bitSet0.and(bitSet1);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotSame(bitSet0, bitSet1);
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = (-5079L);
      longArray0[7] = (-1674L);
      longArray0[8] = (-1901L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1901L), 0);
      assertArrayEquals(new long[] {0L, 2522L, (-3820L), 0L, 0L, (-1L), (-5079L), (-1674L), (-1901L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-11), 8);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(502);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(502, (int)integer0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1824.66132);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Integer integer0 = new Integer(1362);
      assertNotNull(integer0);
      assertEquals(1362, (int)integer0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4160;
      shortArray0[1] = (short) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) (short)4160;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 1362;
      floatArray0[5] = (float) 1362;
      floatArray0[6] = (float) (short) (-1);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1362;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (float) (short) (-1);
      floatArray1[4] = 323.76276F;
      floatArray1[5] = (float) (short)4160;
      floatArray1[6] = (float) '4';
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1362.0F, (-1.0F), (-1.0F), (-1.0F), 323.76276F, 4160.0F, 52.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1362.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 52.0F, 4160.0F, (-1.0F), 1362.0F, 1362.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-45));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[4] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      characterArray0[6] = character0;
      characterArray0[7] = (Character) 'o';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'o');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'o', 'o', 'Z', 'o'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, characterArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-124);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2597), 745);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-124L)}, longArray0);
      assertArrayEquals(new long[] {(-124L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (char)characterArray0[3];
      floatArray0[1] = (float) (char)characterArray0[7];
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) (-2597);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {111.0F, 111.0F, 111.0F, (-2597.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = '[';
      charArray0[2] = 'F';
      charArray0[3] = 'A';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'A', 'F', '[', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'i');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'A', 'F', '[', 'f'}, charArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, charArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-708.0F);
      floatArray0[1] = (-623.8F);
      floatArray0[2] = (float) 'F';
      floatArray0[3] = (float) 'F';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-623.8F));
      assertArrayEquals(new float[] {(-708.0F), (-623.8F), 70.0F, 70.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-708.0F), (-623.8F), 70.0F, 70.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-708.0F), (-623.8F), 70.0F, 70.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      int[] intArray0 = new int[14];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertEquals(14, intArray0.length);
      
      ArrayUtils.shuffle((Object[]) booleanArray0);
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(14, intArray0.length);
      assertEquals(13, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'N';
      charArray0[2] = 'W';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)108;
      long[] longArray0 = new long[9];
      longArray0[1] = 316L;
      longArray0[2] = (long) 1;
      longArray0[3] = (-1044L);
      longArray0[4] = (long) (-1388);
      longArray0[5] = (long) '\"';
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 'T';
      longArray0[8] = (long) (-1388);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)99, (-2063));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 316L, 1L, (-1044L), (-1388L), 34L, 1L, 84L, (-1388L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-119));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 36.633606F;
      floatArray0[1] = (-3051.5234F);
      floatArray0[2] = 375.0537F;
      floatArray0[3] = (-3285.0F);
      floatArray0[4] = (-5597.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 4.0F;
      floatArray0[7] = (-2718.3057F);
      floatArray0[8] = (-4177.9F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {36.633606F, (-3051.5234F), 375.0537F, (-3285.0F), (-5597.0F), 1.0F, 4.0F, (-2718.3057F), (-4177.9F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {36.633606F, (-3051.5234F), 375.0537F, (-3285.0F), (-5597.0F), 1.0F, 4.0F, (-2718.3057F), (-4177.9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)126;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)103);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)89, (byte) (-30), (byte)3, (byte)126}, byteArray1);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-1), (byte)89, (byte) (-30), (byte)3, (byte)126}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-30));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 4.0F;
      objectArray0[2] = (Object) (byte)126;
      objectArray0[3] = (Object) (byte)3;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2147037762);
      intArray0[1] = 631;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 631, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2089L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(99, object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 99;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1264.1858F);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 2089L, (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '/';
      charArray0[2] = 'Z';
      charArray0[3] = '/';
      charArray0[4] = 'G';
      charArray0[5] = 'Z';
      charArray0[6] = 'G';
      ArrayUtils.swap(charArray0, 502, 502, 2776);
      assertArrayEquals(new char[] {'`', '/', 'Z', '/', 'G', 'Z', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      Integer integer0 = new Integer(88);
      assertNotNull(integer0);
      assertEquals(88, (int)integer0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-703.34F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) (-703.34F);
      ArrayUtils.reverse((boolean[]) null);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '|', 4);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 4;
      intArray0[3] = (int) '|';
      intArray0[4] = (-1);
      intArray0[5] = (int) '|';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      ArrayUtils.swap(charArray0, 32, 32);
      assertArrayEquals(new char[] {'`', '`', '`', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 496;
      int int0 = ArrayUtils.indexOf(intArray0, 32, 2770);
      assertArrayEquals(new int[] {32, 32, 496}, intArray0);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1929.92F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1929.92F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1929.92F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1846.649115756, (-1340), 2342.49148753629);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1929.9200439453125}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((char[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 2, 310.853032237711);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'd';
      charArray0[2] = '>';
      charArray0[3] = '(';
      charArray0[4] = '9';
      charArray0[5] = '`';
      ArrayUtils.swap(charArray0, 1, 502);
      assertArrayEquals(new char[] {'D', 'd', '>', '(', '9', '`'}, charArray0);
      assertEquals(6, charArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 124, (-1428));
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse((boolean[]) null, 521, 2);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 521;
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) '?';
      longArray0[4] = (long) 2;
      longArray0[5] = (long) '?';
      longArray0[6] = (long) '?';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 2, 82);
      assertArrayEquals(new long[] {521L, 63L, 63L, 63L, 2L, 63L, 63L}, longArray0);
      assertEquals(4, int0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)908}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer integer0 = new Integer((short)2776);
      assertNotNull(integer0);
      assertEquals(2776, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)2776;
      floatArray0[1] = (float) (short)908;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)2776, (int) (short)2776);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[1] = 'T';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'T';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'M';
      longArray0[1] = (-1327L);
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) (short)4166;
      longArray0[5] = (long) 'T';
      longArray0[6] = (long) (short)4166;
      longArray0[7] = (long) 'T';
      longArray0[8] = (long) (short)4166;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {77L, (-1327L), 77L, 4166L, 0L, 84L, 4166L, 84L, 4166L}, longArray1);
      assertArrayEquals(new long[] {77L, (-1327L), 77L, 4166L, 0L, 84L, 4166L, 84L, 4166L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertTrue(boolean1);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-26);
      floatArray0[1] = (-98.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-26.0F), (-98.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 1L, 1909L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-401), (-314));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1306.0F;
      floatArray0[2] = 2371.0767F;
      floatArray0[3] = (-1216.0F);
      floatArray0[4] = (-2924.0854F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1569.411F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1306.0F, 2371.0767F, (-1216.0F), (-2924.0854F), 0.0F, 0.0F, 1569.411F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1306.0F, 2371.0767F, (-1216.0F), (-2924.0854F), 0.0F, 0.0F, 1569.411F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1306.0F, 2371.0767F, (-1216.0F), (-2924.0854F), 0.0F, 1569.411F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1230.976628));
      assertNotNull(double0);
      assertEquals((-1230.976628), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1306.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1306.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2924.0854F));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-2924.08544921875), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      // Undeclared exception!
      try { 
        Double.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1247.0386F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1247.0386F));
      assertArrayEquals(new float[] {(-1247.0386F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)6);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-100);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)48, (byte) (-14), (byte)48, (byte) (-100)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '\"';
      longArray0[1] = (long) (byte)48;
      longArray0[2] = (long) (byte) (-14);
      longArray0[3] = 1072L;
      longArray0[4] = 650L;
      longArray0[5] = (long) 'j';
      longArray0[6] = (long) 'T';
      ArrayUtils.swap(longArray0, (int) (byte)48, (int) (short)4166, (int) (short)4166);
      assertArrayEquals(new long[] {34L, 48L, (-14L), 1072L, 650L, 106L, 84L}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'T';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1072L);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {84.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(floatArray1, 84.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {84.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {84.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 650L;
      doubleArray0[1] = (double) 106L;
      doubleArray0[2] = (double) (byte) (-14);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, (int) (byte)48);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-14.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {650.0, 106.0, (-14.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 97, 97);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 97);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-5), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-5), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-5), (byte)byte3);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-5)}, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      int[] intArray0 = new int[7];
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 4234, 0);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) byte0);
      assertNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)78);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)30;
      longArray0[1] = (long) (byte) (-41);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)78;
      ArrayUtils.swap(doubleArray0, (-1), 122, (int) (byte)125);
      assertArrayEquals(new double[] {78.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 91, (int) (byte) (-96), (int) (byte)125);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '+';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte) (-55);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-96));
      assertArrayEquals(new byte[] {(byte)33, (byte) (-55), (byte) (-78), (byte) (-78), (byte)0, (byte)125, (byte) (-78), (byte)33, (byte) (-55)}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-78);
      longArray0[1] = (long) '+';
      longArray0[2] = (long) (byte)33;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte) (-78));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {43L, 33L}, longArray1);
      assertArrayEquals(new long[] {(-78L), 43L, 33L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)125;
      shortArray0[1] = (short) (byte)125;
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte) (-55);
      shortArray0[4] = (short) (byte) (-78);
      shortArray0[5] = (short) (byte) (-78);
      shortArray0[6] = (short) (byte) (-78);
      shortArray0[7] = (short) (byte) (-78);
      shortArray0[8] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3157, (int) (byte) (-78));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)125, (short)125, (short) (-55), (short) (-55), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-29));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      int[] intArray0 = new int[1];
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (int) (short) (-1783));
      assertEquals((-1), int0);
      
      ArrayUtils.swap((boolean[]) null, (-1), 11, 6902);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      ArrayUtils.shift((Object[]) characterArray0, (-813));
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte)127);
      assertNotNull(byte0);
      assertEquals((byte)127, (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-2597), 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      ArrayUtils.shift((Object[]) characterArray0, (-1554), 128, (-2141227176));
      assertEquals(8, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      char[] charArray0 = new char[18];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(18, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, 'P', 1072);
      ArrayUtils.lastIndexOf((boolean[]) null, false, 1072);
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      short short0 = (short)102;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 8, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(20, booleanArray0.length);
      assertEquals(21, booleanArray1.length);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 3, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)1;
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-336);
      short short1 = (short) (-2761);
      int int0 = (-472);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (-472);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)1, (-1901L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, (-472L)}, longArray0);
      assertArrayEquals(new long[] {1L, (-1901L), 1L, (-472L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 624L;
      longArray0[1] = 1L;
      longArray0[2] = 998L;
      longArray0[3] = 632L;
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {624L, 1L, 998L, 632L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 624L;
      doubleArray0[1] = (-138.665465237655);
      doubleArray0[2] = (double) 998L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1L, 961);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {624.0, (-138.665465237655), 998.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'P';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'D', 68);
      assertArrayEquals(new char[] {'/', 'P', '/', '/', '/', '/'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'P');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/'}, charArray1);
      assertArrayEquals(new char[] {'/', 'P', '/', '/', '/', '/'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)109);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (float) (-723);
      floatArray0[2] = (float) (-723);
      floatArray0[3] = (float) (-723);
      floatArray0[4] = (float) (-723);
      floatArray0[5] = (float) (-723);
      floatArray0[6] = (float) 17;
      floatArray0[7] = (float) 17;
      floatArray0[8] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 2303.72F, 2767);
      assertArrayEquals(new float[] {17.0F, (-723.0F), (-723.0F), (-723.0F), (-723.0F), (-723.0F), 17.0F, 17.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 17;
      longArray0[3] = (long) (-723);
      longArray0[4] = (long) 4237;
      ArrayUtils.swap(longArray0, 17, 4237, (-2122069640));
      assertArrayEquals(new long[] {(-1L), (-1L), 17L, (-723L), 4237L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-723L);
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-723.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-723.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-105));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)9236;
      shortArray0[1] = (short) (-3276);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)9236, (short) (-3276)}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9236, (short) (-3276)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      Integer integer0 = new Integer(1038);
      assertNotNull(integer0);
      assertEquals(1038, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)949;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)949}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)908;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2776, (short)908}, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)2776;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2776.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2776.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Integer integer0 = new Integer((short)2776);
      assertNotNull(integer0);
      assertEquals(2776, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)2776;
      floatArray0[1] = (float) (short)908;
      floatArray0[2] = (float) (short)2776;
      floatArray0[3] = (float) (short)2776;
      floatArray0[4] = (float) (short)908;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2776.0F, 908.0F, 2776.0F, 2776.0F, 908.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(3528.2F);
      assertNotNull(float0);
      assertEquals(3528.2F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 1431, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1591;
      longArray0[4] = (long) 915;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {(-1385L), 0L, 0L, 1591L, 915L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 915);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1385L), 0L, 0L, 1591L, 915L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1385L), 0L, 0L, 1591L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1385), 1431);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1385, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = ' ';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'<', ' '}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'o';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      Integer integer1 = new Integer((-5539));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-5539), (int)integer1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean4 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o'}, charArray0);
      assertTrue(boolean4);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, int0);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[9];
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'W';
      charArray0[8] = 'g';
      ArrayUtils.shift(charArray0, (int) (short)4166, (-1488), (-1488));
      assertArrayEquals(new char[] {'\u0000', '\"', 'j', 'M', 'N', 'B', 'Q', 'W', 'g'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-2084), (-2084), 76);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"', 'j', 'M', 'N', 'B', 'Q', 'W', 'g'}, charArray0);
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1488));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1488, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = null;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-701.8F);
      floatArray0[1] = 0.0F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-701.8F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 56);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 3238, 3238, 3238);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[4] = 55;
      intArray0[3] = Integer.MAX_VALUE;
      Byte byte0 = new Byte((byte)49);
      assertNotNull(byte0);
      assertEquals((byte)49, (byte)byte0);
      
      ArrayUtils.shift((boolean[]) null, 2621, (-1343), (-1));
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte)49);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2621, 0, (-4));
      assertArrayEquals(new int[] {0, 0, 0, Integer.MAX_VALUE, 55}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)11);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 2621);
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)49);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)49;
      shortArray0[1] = (short) (byte)11;
      shortArray0[2] = (short) (byte)49;
      shortArray0[3] = (short) (byte)49;
      shortArray0[4] = (short) (byte)11;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)49, (short)11, (short)49, (short)49, (short)11}, shortArray0);
      assertFalse(boolean1);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.swap((float[]) null, 36, (int) (byte)11, (-1043));
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1785L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-649);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-885);
      longArray0[1] = (long) (-167);
      longArray0[2] = (long) (-167);
      longArray0[3] = (long) (-19);
      longArray0[4] = (long) (-1388);
      longArray0[5] = (long) (short) (-649);
      longArray0[6] = (long) 55;
      longArray0[7] = (long) (short) (-649);
      ArrayUtils.shift(longArray0, (-2297));
      assertArrayEquals(new long[] {(-167L), (-167L), (-19L), (-1388L), (-649L), 55L, (-649L), (-885L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short) (-649));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-167L), (-167L), (-19L), (-1388L), 55L, (-885L)}, longArray1);
      assertArrayEquals(new long[] {(-167L), (-167L), (-19L), (-1388L), (-649L), 55L, (-649L), (-885L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, 679L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-167L), (-167L), (-19L), (-1388L), 55L, (-885L)}, longArray1);
      assertArrayEquals(new long[] {(-167L), (-167L), (-19L), (-1388L), (-649L), 55L, (-649L), (-885L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(boolean0);
      assertEquals(6, longArray1.length);
      assertEquals(8, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-167);
      floatArray0[1] = (float) (-649L);
      floatArray0[2] = (float) (-19);
      floatArray0[3] = (float) (-19L);
      floatArray0[4] = (float) (-19);
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, (-1064), (-515));
      assertArrayEquals(new float[] {(-167.0F), (-649.0F), (-19.0F), (-19.0F), (-19.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)767);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)767;
      ArrayUtils.swap(floatArray0, (int) (short)767, (int) (short)767, (int) (short)767);
      assertArrayEquals(new float[] {767.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = 4609L;
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), 4609L, (-776L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      ArrayUtils.shift(charArray0, (-1488), (-1488), (-1488));
      assertArrayEquals(new char[] {'d', 'v', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'Q';
      intArray0[3] = (-2084);
      intArray0[4] = (int) 'd';
      intArray0[5] = 76;
      intArray0[6] = (int) 'a';
      ArrayUtils.swap(intArray0, 76, 51, 1);
      assertArrayEquals(new int[] {100, 100, 81, (-2084), 100, 76, 97}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      char[] charArray0 = new char[16];
      ArrayUtils.shift(charArray0, (-1), (-1), (-725));
      assertEquals(16, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-725);
      intArray0[2] = (-725);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, Float.NaN);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2013.2598F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1645;
      ArrayUtils.shift(intArray0, 1645, 48, (-509));
      assertArrayEquals(new int[] {1645}, intArray0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1645, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)55, (int) (byte)55);
      assertArrayEquals(new byte[] {(byte)55}, byteArray0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-851), 1124);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertArrayEquals(new char[] {'5', '5'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)69;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)69;
      shortArray0[1] = (short) (-1253);
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short) (byte) (-26);
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) (byte) (-26);
      shortArray0[6] = (short) (byte)27;
      shortArray0[7] = (short) (byte)6;
      shortArray0[8] = (short) (byte)27;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1253), (short) (-80), (short) (-26), (short)69, (short) (-26), (short)27, (short)6, (short)27}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 563.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {563.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte)6, (byte) (-80), (byte)46, (byte)69, (byte) (-26)}, byteArray0);
      assertEquals(1, int0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)27, (-2008));
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)49);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 89.9403934449252;
      doubleArray0[1] = (double) (byte)49;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2321.882099;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-384);
      doubleArray0[6] = 2321.882099;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte)104, 2321.882099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 2321.882099;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-78);
      byteArray0[8] = (byte)113;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)113);
      assertArrayEquals(new byte[] {(byte)32, (byte)30, (byte)104, (byte)113, (byte)36, (byte)0, (byte)36, (byte) (-78), (byte)113}, byteArray0);
      assertEquals(8, int0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-384), 519.4120885778565);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -384, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)55, 1054);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1531));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int int0 = 46;
      Integer integer0 = new Integer(46);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2603);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, int0);
      assertNull(integer1);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 116;
      doubleArray0[1] = (double) 116;
      doubleArray0[2] = (double) 116;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 116.0, 7);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {116.0, 116.0, 116.0}, doubleArray0, 0.01);
      assertEquals(2, int1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      short[] shortArray0 = new short[6];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-3075));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 1, 310.853032237711);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'd';
      charArray0[2] = '>';
      doubleArray0[3] = (double) '(';
      charArray0[4] = '9';
      charArray0[5] = '`';
      ArrayUtils.swap(charArray0, 1, 496);
      assertArrayEquals(new char[] {'D', 'd', '>', '\u0000', '9', '`'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (int) 'd';
      intArray0[3] = 3758;
      intArray0[4] = (int) '`';
      intArray0[5] = 1;
      intArray0[6] = (int) '>';
      intArray0[7] = 2;
      intArray0[8] = 285;
      int int1 = ArrayUtils.indexOf(intArray0, 2, (-5));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1, 1, 100, 3758, 96, 1, 62, 2, 285}, intArray0);
      assertEquals(7, int1);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'F');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 3179;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 3179, 1, 1, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '2', 3179);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) integerArray0[0]);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(5, integerArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1021.41781082;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 117.962261601921;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 3251.6;
      doubleArray0[5] = 680.156395043;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1021.41781082, (-1.0), 117.962261601921, 1.0, 3251.6, 680.156395043, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 117.962261601921;
      doubleArray1[1] = 3251.6;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1021.41781082;
      doubleArray1[4] = 1.0;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-845), 412);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {117.962261601921, 3251.6, 1.0, 1021.41781082, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {117.962261601921, 3251.6, 1.0, 1021.41781082, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray2, 412, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 412, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1491.8472;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2146799452, 1491.8472);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146799452, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-723);
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer1, (-723));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      Float float0 = new Float(2371.0767F);
      assertNotNull(float0);
      assertEquals(2371.0767F, (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, 9, 2, (int) (short)52);
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray1);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.swap(intArray0, (-1385), Integer.MAX_VALUE, (-1385));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) Integer.MAX_VALUE;
      ArrayUtils.shift(floatArray0, 0, 0, 0);
      assertArrayEquals(new float[] {0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = new Integer((-1385));
      assertNotNull(integer0);
      assertEquals((-1385), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2145043896;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 4, (-1385), 1591);
      assertArrayEquals(new int[] {0, 2145043896, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1385);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2145043896;
      objectArray0[1] = (Object) 2145043896;
      Integer integer0 = new Integer((-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (-1385));
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-1385.0F);
      floatArray1[1] = (Float) (-1385.0F);
      Float float0 = new Float((-3285.0F));
      assertNotNull(float0);
      assertEquals((-3285.0F), (float)float0, 0.01F);
      
      floatArray1[2] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)52);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)52}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(intArray0, (-786), 1591, 0);
      assertArrayEquals(new int[] {0, 2145043896, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(floatArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1385.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2684L;
      floatArray0[1] = 46.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 2684L;
      floatArray0[4] = (float) 2684L;
      floatArray0[5] = (-501.13F);
      floatArray0[6] = (float) 2684L;
      floatArray0[7] = (float) 2684L;
      floatArray0[8] = (float) 2684L;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2684L;
      floatArray1[1] = 46.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2684.0F, 46.0F, (-1.0F), 2684.0F, 2684.0F, (-501.13F), 2684.0F, 2684.0F, 2684.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2684.0F, 46.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2684.0F, 2684.0F, (-501.13F), 2684.0F, 2684.0F, 2684.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(7, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-443), 3);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-443));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-443), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 's', 10);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-13144);
      shortArray0[1] = (short) (-13144);
      shortArray0[2] = (short) (-13144);
      shortArray0[3] = (short) (-13144);
      shortArray0[4] = (short) (-13144);
      shortArray0[5] = (short) (-13144);
      shortArray0[6] = (short) (-13144);
      shortArray0[7] = (short) (-13144);
      shortArray0[8] = (short) (-13144);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-13144));
      assertArrayEquals(new short[] {(short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144), (short) (-13144)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)80);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (-2099761788));
      assertArrayEquals(new char[] {'L', 'G'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-87);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-87);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-734), (int) (short) (-734));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-1383), (-1383), (-1383));
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2402);
      intArray0[1] = 100;
      intArray0[2] = (-3529);
      intArray0[3] = (-2133447807);
      ArrayUtils.swap(intArray0, (-2133447807), (-2402), (-1));
      assertArrayEquals(new int[] {(-2402), 100, (-3529), (-2133447807)}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2498), (-2402), (-3529));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1169, 1169);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1169;
      longArray0[1] = (long) '8';
      longArray0[2] = (long) '8';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-488), 742);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1169L, 56L, 56L}, longArray0);
      assertArrayEquals(new long[] {1169L, 56L, 56L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 2654L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1169L, 56L, 56L}, longArray0);
      assertArrayEquals(new long[] {1169L, 56L, 56L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1204L, 43);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1169L, 56L, 56L}, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {56L, 56L, 1169L}, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2089L);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(99, object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 99;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 99, 99);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1932, (-3906));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((long[]) null, (-216), 8, 99);
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-491);
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-491.0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-491.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-491.0), (-491.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      Float float0 = new Float(326.0F);
      assertNotNull(float0);
      assertEquals(326.0F, (float)float0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (float) 449);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-491), (-491));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)1, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 0L;
      longArray0[3] = 1235L;
      longArray0[4] = 1235L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {0L, 2294L, 0L, 1235L, 1235L}, longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)0, (-22));
      assertArrayEquals(new long[] {0L, 2294L, 0L, 1235L, 1235L}, longArray0);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-46), (-1));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer((short)3937);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3937, (int)integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-46);
      doubleArray0[1] = (double) 1235L;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 1235L;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-46.0), 1235.0, (-1.0), (-1.0), 1235.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)4380;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)4380);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)4380}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5.007003;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 5.007003);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {5.007003}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-2558.48490493459));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer((-55));
      assertNotNull(integer0);
      assertEquals((-55), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)33, (double) (short)33);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[4];
      longArray0[0] = 4L;
      longArray0[1] = 1L;
      longArray0[2] = 1909L;
      longArray0[3] = (-1L);
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.reverse(doubleArray0, (-401), (-314));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      doubleArray0[1] = 869.65969;
      doubleArray0[2] = 85.0;
      doubleArray0[3] = (-913.441067);
      doubleArray0[4] = 85.0;
      doubleArray0[5] = (-3511.632080416078);
      doubleArray0[6] = 2247.11;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 302.306843173669, 0, 311.853032237711);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1681.4, 869.65969, 85.0, (-913.441067), 85.0, (-3511.632080416078), 2247.11}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals("{2, 4}", bitSet0.toString());
      assertEquals(7, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {2247.11, (-3511.632080416078), 85.0, (-913.441067), 85.0, 869.65969, 1681.4}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2276);
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-902);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)3806;
      shortArray0[5] = (short)859;
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)1505;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short) (-2276), (short)14, (short) (-902), (short) (-1), (short)3806, (short)859, (short)91, (short)1505}, shortArray0);
      assertEquals("{3}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(4, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      intArray0[1] = (-119);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '}', 1401);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'M';
      doubleArray0[1] = (double) (-119);
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) 'U';
      doubleArray0[4] = (double) (-119);
      doubleArray0[5] = (double) (-119);
      doubleArray0[6] = (double) '}';
      doubleArray0[7] = (double) 1401;
      doubleArray0[8] = (double) (-1385);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 77.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {77.0, (-119.0), 77.0, 85.0, (-119.0), (-119.0), 125.0, 1401.0, (-1385.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-119.0), 85.0, (-119.0), (-119.0), 125.0, 1401.0, (-1385.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1401);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1385), (-119), 0, 0, 0, 0}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'M';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-119);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1385);
      longArray0[5] = (long) (-1385);
      longArray0[6] = (-2651L);
      longArray0[7] = (long) 'U';
      longArray0[8] = (long) (-1385);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {77L, (-1L), (-119L), 0L, (-1385L), (-1385L), (-2651L), 85L, (-1385L)}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)8, 2146847167);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (-1277.0F);
      floatArray0[3] = (float) (-1L);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 4528);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1277.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(Float.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int[] intArray0 = new int[7];
      char[] charArray0 = Character.toChars((int) '4');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '4';
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-147), 946);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      
      Double double0 = new Double(946);
      assertNotNull(double0);
      assertEquals(946.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3164);
      shortArray0[1] = (short) (-3164);
      shortArray0[2] = (short) (-3164);
      shortArray0[3] = (short) (-3164);
      shortArray0[4] = (short) (-3164);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3164), 790);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3164), (short) (-3164), (short) (-3164), (short) (-3164), (short) (-3164)}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      
      Double double0 = new Double(6159.923046990557);
      assertNotNull(double0);
      assertEquals(6159.923046990557, (double)double0, 0.01);
      
      Double double1 = new Double(1926.451);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1926.451, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1306));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Float float0 = new Float((-679.4F));
      assertNotNull(float0);
      assertEquals((-679.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) 1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0, (byte)0, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)4}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)4;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 4}, intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)4;
      shortArray0[3] = (short) (byte)4;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3164), (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)4, (short)4, (short)0, (short)4}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, shortArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(3517.42292703);
      assertNotNull(double0);
      assertEquals(3517.42292703, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(722.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(722.0, (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3517.42292703, 722.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1824);
      assertNotNull(integer0);
      assertEquals(1824, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1824}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '~';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'W');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'$', '~'}, charArray0);
      assertArrayEquals(new char[] {'W', '$', '~'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (byte)0, (-1008));
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = '?';
      Character character0 = Character.valueOf('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '4');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-70);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-70), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -70, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'N');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'N', 'N'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-17L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2102, 2102);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-17L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1204L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-17L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-839L);
      floatArray0[2] = (float) (-839L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(100, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'C');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-124));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte) (-124), (byte)byte4);
      
      byteArray0[3] = byte4;
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) byte0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-124);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-124), (-1), (-1)}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[2] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[4] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      characterArray0[6] = (Character) 'o';
      characterArray0[7] = (Character) 'o';
      characterArray0[8] = (Character) 'o';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)characterArray0[0];
      longArray0[1] = 433L;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) 'o';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, (int) characterArray0[0]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {111L, 433L, 0L, 0L, 111L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(9, characterArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)16;
      floatArray0[1] = (float) (short)16;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)304);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1300));
      assertNull(shortArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)85, 2076);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      Character character0 = new Character('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-124));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-124), (byte)byte1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-124);
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) 'o';
      characterArray0[1] = (Character) 'o';
      characterArray0[3] = (Character) 'o';
      characterArray0[4] = (Character) 'o';
      characterArray0[5] = (Character) 'o';
      characterArray0[6] = (Character) 'o';
      characterArray0[7] = (Character) 'o';
      characterArray0[8] = (Character) 'o';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', 'o', 'x', 'o', 'o', 'o', 'o', 'o', 'o'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, characterArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)characterArray0[0];
      longArray0[1] = 433L;
      longArray0[4] = (long) 'o';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, (int) characterArray0[0]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {111L, 433L, 0L, 0L, 111L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(9, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = Integer.valueOf((int) characterArray0[3]);
      assertNotNull(integer0);
      assertEquals(111, (int)integer0);
      assertEquals(9, characterArray0.length);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) characterArray0[6]);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(111, (int)integer1);
      assertEquals(9, characterArray0.length);
      
      integerArray0[1] = integer1;
      integerArray0[2] = (Integer) (-124);
      integerArray0[3] = (Integer) (-124);
      integerArray0[4] = (Integer) (-124);
      integerArray0[5] = (Integer) (-124);
      integerArray0[6] = (Integer) (-124);
      integerArray0[7] = (Integer) (-124);
      integerArray0[8] = (Integer) (-124);
      Integer integer2 = ArrayUtils.get(integerArray0, (int) integerArray0[4], integerArray0[7]);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-124), (int)integer2);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-124));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte) (-124), (byte)byte4);
      
      byteArray0[3] = byte4;
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) byte0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-124);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {(-124), (-1), (-1)}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '\u0000';
      characterArray0[1] = (Character) '\u0000';
      characterArray0[2] = (Character) '\u0000';
      characterArray0[3] = (Character) '\u0000';
      characterArray0[4] = (Character) '\u0000';
      characterArray0[5] = (Character) '\u0000';
      characterArray0[6] = (Character) '\u0000';
      characterArray0[7] = (Character) '\u0000';
      characterArray0[8] = (Character) '\u0000';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)characterArray0[0];
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) 'o';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, (int) characterArray0[0]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 111L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, characterArray0.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2375L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2375L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int0 = new Integer(5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-990));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2089L);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(99, object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 99;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1264.1858F);
      assertArrayEquals(new float[] {99.0F, 99.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 2089L, (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 99, 99);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int2 = ArrayUtils.indexOf(shortArray0, (short)1932, (-3906));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals((-1), int2);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((long[]) null, (-216), 8, 99);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)31);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-13144);
      doubleArray0[1] = (double) (short) (-13144);
      doubleArray0[2] = (double) (byte)80;
      doubleArray0[3] = 603.0;
      doubleArray0[4] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-13144.0), (-13144.0), 80.0, 603.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, int1);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 's', 10);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      Short short0 = new Short((byte)80);
      assertNotNull(short0);
      assertEquals((short)80, (short)short0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)80);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2354;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)135;
      shortArray0[3] = (short)4528;
      shortArray0[4] = (short) (-13144);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)4528);
      assertArrayEquals(new short[] {(short)2354, (short)0, (short)135, (short)4528, (short) (-13144)}, shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)4;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)80);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-12), (byte)4}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)4528;
      doubleArray0[3] = (double) (byte) (-9);
      doubleArray0[4] = (double) (-2770);
      doubleArray0[5] = (double) (byte) (-12);
      doubleArray0[6] = (double) (short)4528;
      doubleArray0[7] = (double) (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 603.0);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 4528.0, (-9.0), (-2770.0), (-12.0), 4528.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2089L);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(99, object0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 99;
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = '+';
      charArray0[4] = 'f';
      charArray0[5] = '^';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'+', 'f', 'f', '+', 'f', '^', 'f', 'f'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 't');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'x');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2430;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 2430L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-117));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = new Boolean(true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)34;
      intArray0[3] = (int) (byte) (-117);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-117);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {34, 34, 34, (-117), 0, (-117)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)3179;
      longArray0[2] = (long) (short)3179;
      longArray0[3] = (long) (short)3179;
      longArray0[4] = (long) (-723);
      longArray0[5] = (long) (short)3179;
      longArray0[6] = (long) (short)3179;
      ArrayUtils.swap(longArray0, (int) (short) (-1), 4237, (int) (short)3179);
      assertArrayEquals(new long[] {3179L, 0L, 3179L, 3179L, (-723L), 3179L, 3179L}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)3179;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 3179L;
      floatArray0[3] = (float) 3179L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-723L));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {3179.0F, 0.0F, 3179.0F, 3179.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 21.0F;
      floatArray0[1] = 719.9F;
      floatArray0[2] = 1064.1343F;
      floatArray0[3] = (-3285.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3364.0F);
      floatArray0[6] = (-113.78F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-609.052F);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)60;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2112), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2112, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2133;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2133, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2133, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '2';
      charArray0[2] = 'S';
      charArray0[3] = ':';
      charArray0[4] = '3';
      charArray0[5] = '+';
      int int0 = ArrayUtils.indexOf(charArray0, 'S');
      assertArrayEquals(new char[] {':', '2', 'S', ':', '3', '+'}, charArray0);
      assertEquals(2, int0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.insert(2, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 5, '3');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':', '2', 'S', ':', '3', '+'}, charArray0);
      assertArrayEquals(new char[] {':', '2', 'S', ':', '3', '3', '+'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)46, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      int[] intArray0 = new int[4];
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 's', (-2275));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)115);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)115}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((byte[]) null, 108, 52);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2275);
      longArray0[1] = (long) (-1385);
      longArray0[2] = (long) (-1385);
      longArray0[3] = (long) (-1385);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2275L), (-1385L), (-1385L), (-1385L)}, longArray0);
      assertArrayEquals(new long[] {(-2275L), (-1385L), (-1385L), (-1385L), 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-119);
      doubleArray0[1] = (double) (-119);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2787.67839225;
      doubleArray0[5] = (double) (-1385);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 2147.975;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-119.0), (-119.0), (-1.0), (-1.0), 2787.67839225, (-1385.0), (-1.0), 2147.975}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-119.0), (-119.0), (-1.0), (-1.0), 2787.67839225, (-1385.0), (-1.0), 2147.975}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)108);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-80), (byte) (-18), (byte)99, (byte) (-18), (byte) (-44), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-18), (byte)99, (byte) (-18), (byte) (-44), (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)99, 2118);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-18), (byte)99, (byte) (-18), (byte) (-44), (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      assertArrayEquals(new float[] {0.0F, 959.9529F, 959.9529F, 959.9529F, 959.9529F}, floatArray0, 0.01F);
      assertEquals(4, int0);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 4, (-1385), 2776);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(2776);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2776, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 's', 10);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)80);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 55);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, 68, 68, (-546));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 89L);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 2397, (-12));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = 4609L;
      longArray0[3] = (-776L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {838L, (-435L), 4609L, (-776L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      charArray0[3] = 'K';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2397;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2397);
      assertArrayEquals(new short[] {(short)2397}, shortArray0);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-69);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-14), (byte)82, (byte)48, (byte) (-69)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'o';
      ArrayUtils.shift(objectArray0, (-2597));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, (-2597), 899, 1815);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(charArray0, 1815, 2169);
      assertArrayEquals(new char[] {'o', 'o', 'o', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)70;
      byte byte0 = (byte) (-12);
      byteArray0[5] = (byte) (-12);
      byte byte1 = (byte)109;
      byteArray0[6] = (byte)109;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)8, (byte) (-65), (byte)33, (byte)70, (byte) (-12), (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)8, (byte) (-65), (byte)33, (byte)70, (byte) (-12), (byte)109}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)46;
      objectArray0[1] = (Object) (byte)8;
      ArrayUtils.swap(objectArray0, (int) (byte)8, (-2733));
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '5';
      charArray0[2] = '>';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1505, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1505, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, 1550, 1550, 1550);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-1885));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1885, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = (-472);
      long long0 = (-1901L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-472));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -472, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1253;
      intArray0[1] = (-956);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {1253, (-956), 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1605);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1605)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1605);
      floatArray0[1] = (float) (-1605);
      floatArray0[2] = (float) (-1605);
      floatArray0[3] = (float) (-1605);
      floatArray0[4] = (float) (-1605);
      ArrayUtils.swap(floatArray0, (-1605), (-1605), (-1605));
      assertArrayEquals(new float[] {(-1605.0F), (-1605.0F), (-1605.0F), (-1605.0F), (-1605.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      int[] intArray0 = new int[10];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(10, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 100, 100);
      assertEquals(17, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 930;
      intArray0[1] = 7;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {930, 7}, intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 930;
      floatArray0[2] = (float) 930;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 930;
      floatArray0[5] = (float) 7;
      floatArray0[6] = (float) 930;
      floatArray0[7] = (float) 930;
      ArrayUtils.swap(floatArray0, (-2168), 1, 930);
      assertArrayEquals(new float[] {930.0F, 930.0F, 7.0F, 930.0F, 7.0F, 930.0F, 930.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (short) (-990));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'j';
      charArray0[2] = '#';
      charArray0[3] = '%';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'c';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '#');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'C', 'j', '#', '%', 'C', 'C', 'c'}, charArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(7, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-97), 2, 47);
      assertArrayEquals(new char[] {'j', 'C', '#', '%', 'C', 'C', 'c'}, charArray0);
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2127);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      ArrayUtils.swap((Object[]) stringArray0, (-2146643622), (-2146643622), (-2146643622));
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 78;
      longArray0[1] = (long) 78;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 78L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      ArrayUtils.shift((Object[]) characterArray0, 21);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, (int) (byte)46, 59);
      assertEquals(1, objectArray0.length);
      
      Float float0 = new Float((float) (byte)46);
      assertNotNull(float0);
      assertEquals(46.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {46.0F, 46.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      char[] charArray0 = new char[1];
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-371));
      assertNull(integer0);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, (-18));
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 878);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-371), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -371, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      Integer integer0 = new Integer((-1797));
      assertNotNull(integer0);
      assertEquals((-1797), (int)integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, (-1797), integer0);
      assertNotNull(integer1);
      assertEquals((-1797), (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Integer integer0 = new Integer(82);
      assertNotNull(integer0);
      assertEquals(82, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) integer0, 460);
      assertEquals((-1), int0);
      assertEquals(1, characterArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 't';
      charArray0[4] = 't';
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, 2608);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-990));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-990)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-111));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-49);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (byte)1;
      Object object0 = ArrayUtils.get(objectArray0, 968, objectArray0[1]);
      assertNotNull(object0);
      assertEquals((byte)1, object0);
      assertEquals(2, objectArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, (int)  (-49));
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0;
      objectArray1[1] = (Object) 0.0;
      objectArray1[2] = object2;
      Object object3 = ArrayUtils.get(objectArray1, (-46));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object3);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(5, objectArray1.length);
      
      objectArray1[3] = null;
      objectArray1[4] = (Object) 0.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray1, object2, (-78));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals((-1), int0);
      assertEquals(5, objectArray1.length);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)64;
      shortArray0[1] = (short) (byte)64;
      shortArray0[2] = (short) (byte)64;
      shortArray0[3] = (short) (byte)64;
      shortArray0[4] = (short) (byte)1;
      shortArray0[5] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)64, (short)64, (short)64, (short)64, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)64, (short)64, (short)64, (short)64, (short)1, (short)1}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.swap(longArray0, 2140, 2140, (-1347));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2433L;
      longArray0[1] = 3094L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {2433L, 3094L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      assertEquals(9, longArray0.length);
      
      short[] shortArray0 = new short[7];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 2433L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-723));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2433.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap(longArray0, 2145139233, (-1), 2146776866);
      assertArrayEquals(new long[] {2433L, 3094L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      char[] charArray0 = new char[5];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '+';
      charArray0[2] = 'f';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'^', '+', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-1), (int) (byte) (-1), (double) (byte) (-1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      intArray0[1] = (-119);
      intArray0[2] = 1401;
      intArray0[3] = 809;
      intArray0[4] = 36;
      intArray0[5] = 248;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray0);
      assertArrayEquals(new int[] {(-1385), (-119), 1401, 809, 36, 248}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 248, 1401);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((double[]) null, 809, 809, 809);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 36;
      integerArray0[1] = (Integer) 1401;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-101);
      ArrayUtils.shuffle(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-119), 1401, 809, 36, 248, (-1385)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(2, int0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)91, (-1));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)54, (byte)0, (byte)54, (byte)54}, byteArray0);
      assertEquals((-1), int1);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 1487);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)54, (byte)0, (byte)54, (byte)0, (byte)54, (byte)54}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      ArrayUtils.swap(charArray1, 58, 58, 58);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)4166}, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'W';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {78.0F, 78.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2135553182);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2135553182));
      assertArrayEquals(new int[] {(-2135553182)}, intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)7);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-2135553182);
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) (-2135553182);
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, int1);
      assertEquals(3, integerArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)7;
      floatArray0[1] = (float) (int)integerArray0[0];
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)7;
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {7.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {7.0F, (-2.13555315E9F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new int[] {(-2135553182)}, intArray0);
      assertTrue(boolean3);
      assertEquals(1, intArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, 51);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int2);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 2522L;
      longArray0[2] = (-3820L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = (-5079L);
      longArray0[7] = (-1674L);
      longArray0[8] = (-1901L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1901L), 0);
      assertArrayEquals(new long[] {0L, 2522L, (-3820L), 0L, 0L, (-1L), (-5079L), (-1674L), (-1901L)}, longArray0);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)4;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)77, (byte)4}, byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)77, (byte)4}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)46;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-5079L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (-1393.8042F);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (-1674L);
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) (byte)77;
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertArrayEquals(new float[] {46.0F, 0.0F, (-5079.0F), 0.0F, (-1393.8042F), 0.0F, (-1674.0F), (-1.0F), 77.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 310.853032237711, (-472), (double) 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '>';
      charArray0[2] = 'd';
      charArray0[3] = 'D';
      charArray0[4] = '(';
      charArray0[5] = '9';
      charArray0[6] = '(';
      ArrayUtils.swap(charArray0, 1, (-472));
      assertArrayEquals(new char[] {'>', 'l', 'd', 'D', '(', '9', '('}, charArray0);
      assertEquals(7, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2430);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)3179;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {3179, 1, 1}, intArray0);
      assertFalse(boolean2);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 3179);
      assertNull(longArray0);
      
      ArrayUtils.swap((char[]) null, 1, 120, 2146075680);
      int int1 = ArrayUtils.indexOf(shortArray1, (short) (-785), 1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-1), 65);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)3179, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1324L);
      longArray0[2] = (-1324L);
      longArray0[3] = (-1095L);
      longArray0[4] = 3106L;
      longArray0[5] = 1367L;
      ArrayUtils.shift(longArray0, (-1388));
      assertArrayEquals(new long[] {(-1324L), (-1095L), 3106L, 1367L, 0L, (-1324L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1324L), (-1095L), 3106L, 1367L, 0L, (-1324L)}, longArray0);
      assertArrayEquals(new long[] {(-1324L), (-1095L), 3106L, 1367L, 0L, (-1324L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = '`';
      charArray0[2] = 'Z';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = 'G';
      charArray0[6] = '=';
      charArray0[7] = 'Q';
      charArray0[8] = 'x';
      ArrayUtils.swap(charArray0, (-79), (-341), (-341));
      assertArrayEquals(new char[] {'y', '`', 'Z', '/', '/', 'G', '=', 'Q', 'x'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      long[] longArray0 = new long[0];
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      ArrayUtils.swap(charArray0, (-1), (-1), (-1408));
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1), (-90));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 4, (-1385), 1591);
      assertArrayEquals(new int[] {0, 1431, 915, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1385);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1385);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) 1591;
      longArray0[4] = (long) 915;
      longArray0[5] = (long) 0;
      ArrayUtils.shift(longArray0, 4);
      assertArrayEquals(new long[] {4L, 1591L, 915L, 0L, (-1385L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 915);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 1591L, 0L, (-1385L), 0L}, longArray1);
      assertArrayEquals(new long[] {4L, 1591L, 915L, 0L, (-1385L), 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1967);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[3] = 0L;
      longArray0[1] = 2507L;
      longArray0[2] = (-3795L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = (-5079L);
      Float float0 = new Float(3631.9778844176385);
      assertNotNull(float0);
      assertEquals(3631.9778F, (float)float0, 0.01F);
      
      Float float1 = new Float(519.54F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(519.54F, (float)float1, 0.01F);
      
      Float float2 = new Float((float) (-1674L));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1674.0F), (float)float2, 0.01F);
      
      Float float3 = new Float((double) 519.54F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(519.54F, (float)float3, 0.01F);
      
      Float float4 = new Float((float) 2507L);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(2507.0F, (float)float4, 0.01F);
      
      Float float5 = new Float((-485.4120673981944));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals((-485.41208F), (float)float5, 0.01F);
      
      Float float6 = new Float(1243.1F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      assertEquals(1243.1F, (float)float6, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray2 = new float[0];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 3062;
      intArray0[2] = (-3712);
      intArray0[3] = (-514);
      intArray0[4] = (-3735);
      intArray0[5] = (-723);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3062, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      ArrayUtils.shift((Object[]) characterArray0, 7);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      ArrayUtils.swap(doubleArray0, (-705), (-1205), (-1205));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      intArray0[1] = (-1522);
      intArray0[2] = (-2804);
      intArray0[3] = (-453);
      intArray0[4] = (-2662);
      intArray0[5] = 1360;
      intArray0[6] = 2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1360;
      doubleArray0[1] = (double) (-2804);
      doubleArray0[2] = (double) 1360;
      doubleArray0[3] = (double) (-2597);
      ArrayUtils.swap(doubleArray0, 2, (-1111));
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {1360.0, (-2804.0), 1360.0, (-2597.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE, 2, Integer.MAX_VALUE);
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.indexesOf(booleanArray0, true, (int) (short)62);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.ints();
      mockRandom0.nextInt();
      MockRandom mockRandom1 = new MockRandom();
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom1);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1054.19;
      doubleArray0[1] = (-5125.95753223);
      ArrayUtils.indexOf(doubleArray0, 2940.607906265858, 2146015798, 2.92016001342302);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1509, 1591, 1591);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)14958;
      shortArray0[1] = (short)14958;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)14958, (short)14958, (short)14958, (short)14958}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) '5';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 'I';
      doubleArray0[5] = (double) 'I';
      doubleArray0[6] = (double) 'I';
      ArrayUtils.indexOf(doubleArray0, 187.267878, 2146015784, 1.0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1509, (-1), 10);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)14956;
      shortArray0[1] = (short)1279;
      shortArray0[2] = (short)2086;
      shortArray0[3] = (short)1198;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(12, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      ArrayUtils.add(longArray0, (int) (short)1, (-1901L));
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      ArrayUtils.isEmpty(intArray0);
      ArrayUtils.removeAllOccurrences((long[]) null, 447L);
      ArrayUtils.toPrimitive((Short[]) null, (short) (byte)76);
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (byte)88;
      shortArray1[1] = (short) (byte)88;
      shortArray1[2] = (short) (byte)76;
      shortArray1[3] = (short) (byte)88;
      shortArray1[4] = (short) (byte)76;
      shortArray1[5] = (short) (byte)76;
      shortArray1[6] = (short)2;
      shortArray1[7] = (short) (byte)88;
      ArrayUtils.addAll(shortArray1, (short[]) null);
      ArrayUtils.removeAllOccurrences((short[]) null, (short)76);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)88;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) (short)76;
      try { 
        Integer.valueOf("G7,&q|MHC>luWrA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G7,&q|MHC>luWrA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-124));
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)0);
      byteArray0[5] = byte6;
      ArrayUtils.nullToEmpty(byteArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = 'O';
      charArray0[3] = '';
      char[] charArray1 = new char[2];
      charArray1[0] = '';
      charArray1[1] = 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-1103);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1103.0F));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (int) (byte) (-58));
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 2140);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, (int) 'C');
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      ArrayUtils.removeAllOccurrences((long[]) null, (long) (-2141227176));
      ArrayUtils.isNotEmpty((float[]) null);
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1324L);
      longArray0[2] = 2383L;
      longArray0[3] = (-1095L);
      longArray0[4] = 3106L;
      longArray0[5] = 1367L;
      ArrayUtils.shift(longArray0, (-1388));
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2383L, (-1095L), 3106L, 1367L, 0L, (-1324L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)0;
      ArrayUtils.removeElements(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 624L;
      longArray0[1] = 1L;
      longArray0[2] = 998L;
      longArray0[3] = 632L;
      longArray0[4] = 0L;
      ArrayUtils.isEmpty(longArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)56;
      ArrayUtils.removeElements(byteArray0, byteArray0);
      ArrayUtils.isEmpty(byteArray0);
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (byte) (-2));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 298);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '=';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '=';
      longArray0[1] = (long) '=';
      longArray0[2] = (long) '=';
      longArray0[3] = (long) '=';
      longArray0[4] = (long) 'I';
      longArray0[5] = (long) 'o';
      ArrayUtils.swap(longArray0, 2, 37, 20);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (int) (byte) (-119));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 921L);
      ArrayUtils.isEmpty(longArray1);
      ArrayUtils.isSorted(longArray1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.contains(charArray0, 'y');
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.toObject(booleanArray0);
      ArrayUtils.swap(booleanArray0, (-2898), (-2898), (-1673));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.isNotEmpty(charArray0);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      ArrayUtils.isEmpty((byte[]) null);
      ArrayUtils.swap((boolean[]) null, (-904), (-2161));
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, (-25));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1192.2206F;
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-1), (-2376));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.addFirst(booleanArray0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      int int0 = (-1);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-649);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-885);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[4] = (float) 'i';
      floatArray0[1] = (float) 'M';
      short[] shortArray0 = new short[0];
      ArrayUtils.removeAllOccurrences(shortArray0, (short) (-670));
      ArrayUtils.insert((int) (short) (-472), shortArray0, shortArray0);
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)33);
      assertArrayEquals(new short[] {(short)33}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      short[] shortArray1 = ArrayUtils.insert(98, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      byte[] byteArray0 = null;
      ArrayUtils.isNotEmpty((byte[]) null);
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 2294L;
      longArray0[2] = 1818L;
      longArray0[3] = 1235L;
      longArray0[4] = (-742L);
      ArrayUtils.isEmpty(longArray0);
      int int0 = (-22);
      short[] shortArray0 = new short[1];
      short short0 = (short)3937;
      shortArray0[0] = (short)3937;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-22), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -22, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-703.34F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1351.0F;
      floatArray0[5] = 663.2676F;
      floatArray0[6] = (-2442.8F);
      ArrayUtils.reverse(floatArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-1589));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1589, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-5568));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5568, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1.0));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)120);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      ArrayUtils.isSameLength(longArray0, longArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)28;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)90, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146015798, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146015798, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.shift(charArray0, 27);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-114), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -114, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = '5';
      charArray0[2] = 'O';
      charArray0[3] = '';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      ArrayUtils.clone(doubleArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-80);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.indexesOf(booleanArray0, false);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-80);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 0.0F;
      ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-44), 2);
      Double double0 = new Double((byte) (-80));
      Double double1 = new Double((byte) (-44));
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1054.19;
      doubleArray0[1] = (-5125.95753223);
      ArrayUtils.indexOf(doubleArray0, 2978.2885746);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1134);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1134);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      ArrayUtils.isSorted(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1134);
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1L));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.lastIndexOf(floatArray0, 1264.1858F);
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexesOf(doubleArray0, (double) 959.9529F, (-1));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.reverse((boolean[]) null);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = 959.9529F;
      ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '(';
      ArrayUtils.swap(charArray0, 0, 261);
      ArrayUtils.reverse((boolean[]) null, 0, 124);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      ArrayUtils.indexesOf((long[]) null, 2089L);
      Integer integer0 = new Integer(99);
      ArrayUtils.toPrimitive((Object) integer0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 99;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1264.1858F);
      ArrayUtils.indexesOf(doubleArray0, (double) 2089L, (-1));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      charArray0[2] = 'j';
      charArray0[3] = '2';
      charArray0[4] = 'B';
      charArray0[5] = ':';
      charArray0[6] = '>';
      charArray0[7] = 'm';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'e', 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3291);
      integerArray0[0] = integer0;
      int int0 = 4158;
      Integer integer1 = new Integer(4158);
      integerArray0[1] = integer1;
      ArrayUtils.get(integerArray0, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        BitSet.valueOf((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      int int0 = (-3273);
      Integer integer0 = new Integer(2891);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 2891, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2891, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-493);
      Integer integer0 = new Integer((-493));
      integerArray0[0] = integer0;
      int int1 = 97;
      Integer integer1 = new Integer(97);
      integerArray0[1] = integer1;
      int int2 = (-1428);
      int int3 = 2436;
      Integer integer2 = new Integer(2436);
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-1428), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1428, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1874);
      doubleArray0[1] = (double) (-1874);
      ArrayUtils.subarray(doubleArray0, (-7), (-1874));
      ArrayUtils.nullToEmpty(booleanArray0);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 16, 64);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2146015798;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      ArrayUtils.subarray(doubleArray0, (-44), 16);
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1021.41781082;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 117.962261601921;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 3251.6;
      doubleArray0[5] = 680.156395043;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 117.962261601921;
      doubleArray1[1] = 3251.6;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1021.41781082;
      doubleArray1[4] = 1.0;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-845), (-845));
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(49);
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3171L;
      longArray0[1] = (-1674L);
      longArray0[2] = 0L;
      longArray0[3] = (-897L);
      longArray0[4] = 3171L;
      longArray0[5] = (long) 49;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = (long) 49;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 49);
      assertEquals(7, int0);
      
      ArrayUtils.indexesOf((byte[]) null, (byte) (-47), 2337);
      Integer integer1 = new Integer(1166);
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      long[] longArray0 = new long[20];
      ArrayUtils.contains((double[]) null, (-3269.746), (double) (byte)0);
      ArrayUtils.lastIndexOf(longArray0, 1L, (int) (byte)0);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1324L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 672L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = 51;
      intArray0[8] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '3';
      ArrayUtils.contains(longArray0, (-229L));
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 5, 51L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      int[] intArray0 = new int[7];
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (long) 0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 2);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      long[] longArray0 = new long[20];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(20, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.toPrimitive(doubleArray0, 2108.3984745171306);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 838L;
      longArray0[1] = (-435L);
      longArray0[2] = 4609L;
      longArray0[3] = (-776L);
      ArrayUtils.toObject(longArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'v';
      charArray0[2] = 'a';
      charArray0[3] = 'K';
      charArray0[4] = '4';
      charArray0[5] = 'q';
      int[] intArray0 = new int[2];
      intArray0[0] = 1136;
      intArray0[1] = (int) 'K';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      long[] longArray0 = new long[5];
      longArray0[2] = 3604L;
      longArray0[3] = 4L;
      longArray0[4] = 3604L;
      ArrayUtils.isSameLength(longArray0, longArray0);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      int[] intArray0 = new int[5];
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 2112L;
      longArray0[5] = 3604L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      ArrayUtils.subarray((long[]) null, (-2141227176), (-2141227176));
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-2809);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)960;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2809), (int) (short)1);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)2111;
      shortArray0[2] = (short)2111;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 3);
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)0, 3157);
      assertEquals(0, int0);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2433L;
      longArray0[1] = 3094L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1747;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-714);
      shortArray0[5] = (short)430;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(6, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)48;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ArrayUtils.lastIndexOf(shortArray0, (short) (-246));
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      ArrayUtils.shift(shortArray2, 1);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 15L;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      long[] longArray0 = new long[7];
      ArrayUtils.isSorted(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 302.306843173669;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2907.0, (-993), 1.0);
      ArrayUtils.reverse(doubleArray0);
      Integer integer0 = new Integer((-55));
      ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0);
      short[] shortArray0 = new short[1];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)17312);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-233.59170001), (-233.59170001));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)6);
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-124);
      Byte byte5 = new Byte((byte) (-124));
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      byteArray0[5] = byte7;
      ArrayUtils.nullToEmpty(byteArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) byte4;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) byte0;
      ArrayUtils.indexOf(doubleArray0, 0.0, 3020, (-1.0));
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 10, (int) (byte)0, 1509);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-485.4120673981944);
      doubleArray0[1] = 519.4120885778565;
      doubleArray0[2] = 519.4120885778565;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 187.267878;
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = ':';
      charArray0[2] = 'B';
      charArray0[3] = '2';
      charArray0[4] = 'A';
      charArray0[5] = '2';
      charArray0[6] = ':';
      charArray0[7] = '2';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'A', 14);
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-115);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', 529);
      assertEquals(2, int0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'H');
      assertArrayEquals(new char[] {'H', 'H'}, charArray1);
      
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      char[] charArray0 = new char[5];
      ArrayUtils.reverse(charArray0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', 2);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 5);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(5, int1);
      
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1966);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byte[] byteArray1 = new byte[0];
      ArrayUtils.addFirst(byteArray1, byte0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      ArrayUtils.indexesOf(intArray0, (-5));
      ArrayUtils.isNotEmpty(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 810.0;
      doubleArray0[2] = (double) 0L;
      ArrayUtils.nullToEmpty(doubleArray0);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-5), (-5)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byte[] byteArray1 = new byte[0];
      ArrayUtils.addFirst(byteArray1, byte0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      ArrayUtils.indexesOf(intArray0, (-5));
      ArrayUtils.isNotEmpty(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-5));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2094);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2094), (-2094));
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 1298);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Integer integer0 = new Integer((-2219));
      ArrayUtils.toPrimitive((Object) integer0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1264.1858F;
      floatArray0[1] = (float) (-2219);
      floatArray0[2] = 1264.1858F;
      floatArray0[3] = 1264.1858F;
      floatArray0[4] = (-90.0F);
      floatArray0[5] = (float) (-2219);
      floatArray0[6] = (float) (-2219);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2219.0F));
      assertEquals(6, int0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexesOf(doubleArray0, (double) 1264.1858F, 0);
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '|', 4);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = ';';
      charArray0[2] = '$';
      charArray0[3] = 'U';
      charArray0[4] = '}';
      charArray0[5] = 'M';
      ArrayUtils.lastIndexOf(charArray0, 'M', 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2141.686);
      ArrayUtils.removeAllOccurrences(doubleArray0, (-2141.686));
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'M';
      intArray0[1] = (int) '}';
      intArray0[2] = (int) '}';
      intArray0[3] = (int) ';';
      intArray0[4] = 0;
      intArray0[5] = (int) ';';
      intArray0[6] = (int) '}';
      intArray0[7] = (int) 'M';
      intArray0[8] = 4542;
      ArrayUtils.indexesOf(intArray0, (-1));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 77;
      longArray0[1] = (long) '$';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) 125;
      longArray0[4] = (long) 4542;
      longArray0[5] = (long) 77;
      longArray0[6] = 1730L;
      longArray0[7] = (long) 59;
      longArray0[8] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 2430, 2430);
      long[] longArray0 = new long[0];
      int int0 = (-472);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-472), 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -472, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      double[] doubleArray1 = new double[0];
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'W';
      charArray0[8] = 'g';
      ArrayUtils.shift(charArray0, (int) (short)4166, (-1488), (-1488));
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-2084), (-2084), 76);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 3, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.isSorted(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-825), (-76));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -825, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1431;
      intArray0[2] = 915;
      intArray0[3] = 0;
      ArrayUtils.swap(intArray0, 4, (-1385), 1591);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1385);
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1431;
      ArrayUtils.removeAllOccurrences(floatArray0, (-3082.0F));
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1431, (-1637));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1431, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (int) 'I';
      intArray0[4] = (int) 'I';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      ArrayUtils.swap(intArray1, 73, 73, 91);
      assertArrayEquals(new int[] {73, 73}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-7), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -7, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      byte[] byteArray1 = new byte[0];
      ArrayUtils.addFirst(byteArray1, byte0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) (byte) (-5);
      ArrayUtils.swap(intArray0, (-5), (-5), (-5));
      assertArrayEquals(new int[] {(-5), (-5), (-5), (-5), (-5), (-5)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '5';
      ArrayUtils.indexOf(doubleArray0, 1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      ArrayUtils.swap((Object[]) doubleArray1, (-1134), 0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) (-1134);
      longArray0[3] = (long) 'I';
      ArrayUtils.isSorted(longArray0);
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.indexesOf(charArray0, '$');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'I';
      objectArray0[1] = (Object) 53.0;
      objectArray0[2] = (Object) 'I';
      objectArray0[3] = (Object) 73L;
      ArrayUtils.shift(objectArray0, (-1134));
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 959.9529F);
      double[] doubleArray1 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1705);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)653;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)1422;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-1705), (short)0, (short)48, (short)0, (short)653, (short)2, (short)1422, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)49;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((byte)40);
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)40);
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.addFirst(byteArray0, (byte)78);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      ArrayUtils.isNotEmpty(shortArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = '\"';
      charArray0[2] = 'j';
      charArray0[3] = 'M';
      charArray0[4] = 'N';
      charArray0[5] = 'B';
      ArrayUtils.indexOf((byte[]) null, (byte)65);
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.addFirst((byte[]) null, (byte)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '\"';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) '^';
      intArray0[3] = (int) (short)4166;
      intArray0[4] = (int) '^';
      intArray0[5] = (int) 'j';
      intArray0[6] = (int) 'N';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 94);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.addFirst(byteArray0, (byte)78);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1376.3178018011383);
      doubleArray0[1] = 165.6779101199032;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 793.8;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-117));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)50, (byte) (-44), (byte) (-1), (byte)99, (byte)11, (byte) (-83), (byte)0, (byte) (-16), (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-5));
      byteArray0[0] = byte0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-5);
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(2146928798);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)29);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2146928798);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte) (-5));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[0]);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-192));
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'q');
      assertNull(charArray0);
      
      Integer integer7 = new Integer(49);
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(7, integerArray2.length);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Integer integer0 = mutableInt0.toInteger();
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      Integer.getInteger("");
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Integer integer0 = new Integer(8);
      Integer integer1 = new Integer(8);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer2 = new Integer(8);
      Integer integer3 = new Integer(173);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer3);
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer2);
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer0);
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Integer integer4 = new Integer((-5212));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, integer2);
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry6);
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      int[] intArray0 = new int[7];
      intArray0[0] = 173;
      intArray0[1] = 173;
      intArray0[2] = 173;
      intArray0[3] = 8;
      intArray0[4] = 173;
      intArray0[5] = (-5212);
      intArray0[6] = (-5212);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleImmutableEntryArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 173, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.get((Integer[]) null, (-490), (Integer) null);
      Object object0 = ArrayUtils.get(objectArray0, (-490), (Object) null);
      objectArray0[0] = null;
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[1] = null;
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[2] = null;
      Integer integer0 = new Integer((-21));
      Object object1 = ArrayUtils.get((Object[]) null, (-490), (Object) integer0);
      objectArray0[3] = object1;
      ArrayUtils.get(objectArray0, (-496));
      objectArray0[4] = null;
      ArrayUtils.get((Integer[]) null, (-21));
      Integer integer1 = new Integer((-845));
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer1);
      ArrayUtils.removeAll((Object) null, bitSet0);
      objectArray0[5] = null;
      ArrayUtils.removeAll((Object) null, bitSet0);
      objectArray0[6] = null;
      ArrayUtils.get(objectArray0, 76, object0);
      objectArray0[7] = null;
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 32);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      ArrayUtils.get(integerArray0, 5);
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Integer integer0 = new Integer(3010);
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(3010, object0);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.isSorted(intArray0);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(88);
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 0);
      ArrayUtils.hashCode((Object) integer1);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Integer integer0 = new Integer(49);
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      objectArray0[1] = object1;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(49);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer(1186);
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer integer3 = ArrayUtils.get(integerArray0, 1, (Integer) null);
      Object object2 = ArrayUtils.toPrimitive((Object) integer3);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 49, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.addFirst(booleanArray0, false);
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE, (-1), 167);
      ArrayUtils.shift((long[]) null, (-167));
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-2770L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-2145807578), (-2145807578), (-2145807578));
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.addFirst(booleanArray0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 55;
      intArray0[1] = Integer.MAX_VALUE;
      int int0 = (-885);
      intArray0[2] = (-885);
      intArray0[3] = (-167);
      intArray0[4] = (-19);
      ArrayUtils.shift(intArray0, 55, (-19), 1);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-649);
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      short short1 = (short)468;
      shortArray0[2] = (short)468;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1681.4;
      doubleArray0[1] = 869.65969;
      doubleArray0[2] = 1410.610662434987;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1448.36964169));
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-117));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 161.235938);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      MockRandom mockRandom0 = new MockRandom((-167L));
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.get((Integer[]) null, (-490), (Integer) null);
      ArrayUtils.get(objectArray0, (-490), (Object) null);
      objectArray0[0] = null;
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[1] = null;
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[2] = null;
      Integer integer0 = new Integer((-21));
      Object object0 = ArrayUtils.get((Object[]) null, (-490), (Object) integer0);
      objectArray0[3] = object0;
      ArrayUtils.get(objectArray0, (-496));
      objectArray0[4] = null;
      ArrayUtils.addFirst((boolean[]) null, true);
      ArrayUtils.isNotEmpty((boolean[]) null);
      MockRandom mockRandom0 = new MockRandom((-1499L));
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.indexOf(floatArray0, (-330.16F), 0);
      MockRandom mockRandom0 = new MockRandom(0);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2597);
      intArray0[1] = (-1522);
      intArray0[2] = (-2804);
      intArray0[3] = (-453);
      intArray0[4] = (-2662);
      intArray0[5] = 1360;
      intArray0[6] = 2;
      ArrayUtils.isSameLength(intArray0, intArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      ArrayUtils.isNotEmpty(booleanArray1);
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom((-453));
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '>';
      charArray0[2] = '9';
      charArray0[3] = '(';
      ArrayUtils.swap(charArray0, 2041, (int) (byte)1);
      assertArrayEquals(new char[] {'d', '>', '9', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      ArrayUtils.lastIndexOf((char[]) null, 's', 10);
      double[] doubleArray0 = new double[5];
      ArrayUtils.lastIndexOf(doubleArray0, (-2374.189), (-659), (double) (short) (-13144));
      ArrayUtils.swap((char[]) null, 1706, (-1));
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)2776;
      shortArray0[0] = (short)2776;
      shortArray0[1] = (short)2776;
      ArrayUtils.isSorted(shortArray0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.toStringArray(objectArray0);
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (short)908;
      doubleArray0[1] = (double) (short)908;
      doubleArray0[2] = (-3017.7);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)2776;
      doubleArray0[5] = (double) (short)2776;
      ArrayUtils.indexesOf(doubleArray0, 0.0, (-3017.7));
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 18688, (-669.731723204369));
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      ArrayUtils.isNotEmpty(floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      ArrayUtils.swap(charArray0, (-12), (int) '<');
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1.0F, 1, 310.853032237711);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'd';
      charArray0[2] = '>';
      charArray0[3] = '(';
      charArray0[4] = '9';
      charArray0[5] = '`';
      ArrayUtils.swap(charArray0, 1, 496);
      assertArrayEquals(new char[] {'D', 'd', '>', '(', '9', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2094), (-2094));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1498.251819);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      char[] charArray0 = new char[9];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, 0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-166));
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0}, intArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) Integer.MAX_VALUE);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 958);
      assertNotNull(intArray1);
      assertEquals(10, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2423.761308356968);
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.indexesOf(booleanArray0, false);
      ArrayUtils.lastIndexOf(floatArray0, (-1529.8423F), (int) (byte) (-80));
      Double double0 = new Double((-1));
      Double double1 = new Double(1169.3F);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-330.16F), 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(2, bitSet0.cardinality());
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1));
      assertTrue(int1 == int0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(895.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1));
      doubleArray0[1] = double1;
      Double double2 = new Double((-1));
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      Byte byte1 = new Byte((byte)79);
      ArrayUtils.subarray((short[]) null, 1573, (int) (byte)79);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)11;
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (byte)7;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)11}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)79;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)7;
      doubleArray0[3] = (double) (short)11;
      doubleArray0[4] = (double) (byte)79;
      doubleArray0[5] = (double) (byte)79;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 7.0, 11.0, 79.0, 79.0, 79.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3179;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      ArrayUtils.isNotEmpty((char[]) null);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short) (-1);
      ArrayUtils.indexOf(floatArray0, 0.0F, (-723));
      ArrayUtils.removeElements(shortArray1, shortArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)3179;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (short)3179;
      longArray0[3] = (long) (short)3179;
      longArray0[4] = (long) (-723);
      longArray0[5] = (long) (short)3179;
      longArray0[6] = (long) (short)3179;
      ArrayUtils.swap(longArray0, (int) (short) (-1), 4237, (int) (short)3179);
      assertArrayEquals(new long[] {3179L, (-1L), 3179L, 3179L, (-723L), 3179L, 3179L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      ArrayUtils.insert((-659), (boolean[]) null, (boolean[]) null);
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-659));
      ArrayUtils.swap(longArray0, (-659), 3262, 53);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-336);
      shortArray0[2] = (short) (-2761);
      shortArray0[3] = (short)59;
      shortArray0[4] = (short)102;
      shortArray0[5] = (short)53;
      shortArray0[6] = (short) (-799);
      shortArray0[7] = (short) (-1204);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)30);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-91));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'N';
      charArray0[4] = 'p';
      charArray0[5] = 'z';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-40), (-2390));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) (byte) (-40);
      doubleArray0[2] = (double) 'k';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2390));
      assertArrayEquals(new double[] {82.0, (-40.0), 107.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4166;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)4166;
      doubleArray0[1] = (-34.88216690474389);
      doubleArray0[2] = (double) (short)4166;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-34.88216690474389));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)72;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte) (-126));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ArrayUtils.isSorted(byteArray0);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-817));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1021.41781082;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 117.962261601921;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 3251.6;
      doubleArray0[5] = 680.156395043;
      doubleArray0[6] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2772, 2772);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Object object0 = new Object();
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, object0);
      assertNotNull(integerArray1);
      assertEquals(16, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-140), (-3246), (-3246));
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-43));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 959.9529F;
      floatArray0[2] = 959.9529F;
      floatArray0[3] = 959.9529F;
      floatArray0[4] = 959.9529F;
      ArrayUtils.lastIndexOf(floatArray0, 959.9529F);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 959.9529F;
      doubleArray0[1] = (double) 959.9529F;
      doubleArray0[2] = (-138.665465237655);
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '@';
      charArray0[2] = 'L';
      ArrayUtils.lastIndexOf(charArray0, '1', 4);
      ArrayUtils.swap(floatArray0, (int) (byte) (-87), (-11), 2701);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2701;
      doubleArray1[1] = (double) 'L';
      doubleArray1[2] = (double) 'L';
      doubleArray1[3] = (double) 959.9529F;
      ArrayUtils.swap(doubleArray1, (int) (byte) (-87), 2828, (int) (byte) (-115));
      assertArrayEquals(new double[] {2701.0, 76.0, 76.0, 959.952880859375}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 16, 16);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1385);
      intArray0[1] = (-119);
      intArray0[2] = 1401;
      intArray0[3] = 809;
      intArray0[4] = 36;
      intArray0[5] = 248;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(6, intArray1.length);
      
      ArrayUtils.subarray((double[]) null, 248, 1401);
      ArrayUtils.swap((double[]) null, 809, 809, 809);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 36;
      integerArray0[1] = (Integer) 1401;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer((-50));
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer0, (-50));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2147.975;
      long[] longArray0 = new long[4];
      longArray0[0] = (-5079L);
      longArray0[1] = (-1674L);
      longArray0[2] = 0L;
      longArray0[3] = (-1901L);
      ArrayUtils.lastIndexOf(longArray0, (-5079L), Integer.MAX_VALUE);
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.indexesOf(floatArray0, 2781.718F, (-2907));
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2781.718F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)0;
      ArrayUtils.nullToEmpty(byteArray0);
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer((byte)0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-90);
      floatArray0[1] = (float) (byte) (-79);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-79);
      float float0 = 2947.4F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2947.4F, (int) (byte) (-79));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3662.53F));
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 21.0F;
      floatArray0[1] = 719.9F;
      floatArray0[2] = 1064.1343F;
      floatArray0[3] = (-3285.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3364.0F);
      floatArray0[6] = (-113.78F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-609.052F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      float[] floatArray0 = new float[2];
      ArrayUtils.reverse(floatArray0);
      ArrayUtils.reverse(floatArray0, (int) (short) (-230), 484);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      int[] intArray0 = new int[6];
      long long0 = (-776L);
      char[] charArray0 = new char[2];
      char char0 = '6';
      charArray0[0] = '6';
      ArrayUtils.removeAll(charArray0, intArray0);
      int int0 = 128;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(128, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1054.19;
      doubleArray0[1] = (-5125.95753223);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1319.930659160995);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1178.2052411312966);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {(-5125.95753223), (-1.0), (-1319.930659160995), 0.0, (-1178.2052411312966), 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1169.3F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[4];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      Integer integer0 = new Integer((-58));
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-58), (double) (-58));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      ArrayUtils.indexesOf(doubleArray0, (-1.0), 0.0);
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)1, (-2733), 0.0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2140597443;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2140597443, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-703.34F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1351.0F;
      floatArray0[5] = 663.2676F;
      floatArray0[6] = (-2442.8F);
      ArrayUtils.reverse(floatArray0);
      ArrayUtils.lastIndexOf((double[]) null, (double) (-2442.8F), (-2733), (-279.82125804686));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2733);
      intArray0[1] = (-1);
      intArray0[2] = 56;
      intArray0[3] = (-1);
      intArray0[4] = 5018;
      intArray0[5] = (-676);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5018, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      long[] longArray0 = new long[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 3307;
      intArray0[2] = 1;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[2];
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, false, 1636);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[10];
      ArrayUtils.shift(intArray0, (-2145807558), 2376, (-2145807558));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 46;
      longArray0[2] = 1958L;
      int int0 = ArrayUtils.indexOf(longArray0, 1591L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2770);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 46;
      intArray0[5] = (-2770);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-2770);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-2770), (-1), (-1), 46, (-2770), (-1), (-1), (-2770), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      long[] longArray0 = new long[7];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      ArrayUtils.indexOf(longArray0, 0L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 51;
      intArray0[6] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), 51, (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      ArrayUtils.swap(doubleArray0, 2315, 2315, 2315);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[1] = (double) (short) (-18);
      ArrayUtils.shift(doubleArray0, (int) (short) (-18));
      assertEquals(20, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      ArrayUtils.clone(byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)34;
      ArrayUtils.swap(doubleArray0, 1300, 1434);
      assertEquals(9, doubleArray0.length);
  }
}
