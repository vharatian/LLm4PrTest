/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:21:06 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.concurrent.ConstantInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ConstantInitializer_ESTest extends ConstantInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      Object object0 = constantInitializer0.getObject();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      Object object0 = constantInitializer0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-909));
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(integer0);
      ConstantInitializer<ConstantInitializer<Object>> constantInitializer1 = new ConstantInitializer<ConstantInitializer<Object>>(constantInitializer0);
      ConstantInitializer<Object> constantInitializer2 = constantInitializer1.get();
      assertSame(constantInitializer0, constantInitializer2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-909));
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(integer0);
      ConstantInitializer<Object> constantInitializer1 = new ConstantInitializer<Object>((Object) null);
      boolean boolean0 = constantInitializer0.equals(constantInitializer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Object object0 = new Object();
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(object0);
      ConstantInitializer<ConstantInitializer<Object>> constantInitializer1 = new ConstantInitializer<ConstantInitializer<Object>>(constantInitializer0);
      Object object1 = constantInitializer1.getObject();
      boolean boolean0 = constantInitializer0.equals(object1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer((-909));
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(integer0);
      boolean boolean0 = constantInitializer0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-909));
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>(integer0);
      ConstantInitializer<ConstantInitializer<Object>> constantInitializer1 = new ConstantInitializer<ConstantInitializer<Object>>(constantInitializer0);
      constantInitializer1.hashCode();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null);
      String string0 = constantInitializer0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ConstantInitializer<ConstantInitializer<Integer>> constantInitializer0 = new ConstantInitializer<ConstantInitializer<Integer>>((ConstantInitializer<Integer>) null);
      constantInitializer0.hashCode();
  }
}
