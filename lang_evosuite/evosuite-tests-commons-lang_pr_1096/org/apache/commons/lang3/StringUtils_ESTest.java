/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:38:36 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Threshold must not be negative", "!qh>Qabk70Rtri");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("{jK==", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider";
      // Undeclared exception!
      StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", 65536, "{jK==");
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.capitalize("zc`vz$mj");
      assertNotNull(string0);
      assertEquals("Zc`vz$mj", string0);
      
      String string1 = StringUtils.unwrap("Zc`vz$mj", 'Z');
      assertNotNull(string1);
      assertEquals("Zc`vz$mj", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+JXbzZHtr");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "+JXbzZHtr", charArray0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.wrap("U", "Z/MB}SZz;hK_C tS@");
      assertNotNull(string0);
      assertEquals("Z/MB}SZz;hK_C tS@UZ/MB}SZz;hK_C tS@", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Z/MB}SZz;hK_C tS@UZ/MB}SZz;hK_C tS@", "U");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "U", (CharSequence) "U");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBetween("Z/MB}SZz;hK_C tS@UZ/MB}SZz;hK_C tS@", "Z/MB}SZz;hK_C tS@");
      assertNotNull(string1);
      assertEquals("U", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.repeat("RR(qX3|a", "-o54 ?viB;", 76);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) "RR(qX3|a", 1);
      assertEquals(19, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = "RR(qX3|a";
      stringArray0[2] = "RR(qX3|a";
      stringArray0[3] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("RR(qX3|a", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("=");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("=", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.rightPad("=", 5, "=");
      assertNotNull(string1);
      assertEquals("=====", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "N>nl'c+f`I*\"j*b+$U&%&5xIjYW,");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "=====", (CharSequence) "=====");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 5;
      longArray0[5] = (long) 5;
      longArray0[6] = (long) 5;
      String string2 = StringUtils.join(longArray0, '}', 5, 7);
      assertArrayEquals(new long[] {1L, 5L, 5L, 5L, 5L, 5L, 5L}, longArray0);
      assertNotNull(string2);
      assertEquals("5}5", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int int0 = 65536;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = "Iu85$dR:uE2!_Qy";
      String string1 = StringUtils.abbreviateMiddle("IS", "Iu85$dR:uE2!_Qy", 65536);
      assertNotNull(string1);
      assertEquals("IS", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "IS";
      // Undeclared exception!
      StringUtils.leftPad("Strings must not be null", 65536, 'S');
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.stripToNull("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String string1 = StringUtils.trimToNull("maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", 9985, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) string2;
      charSequenceArray0[4] = (CharSequence) string2;
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.join((List<?>) null, '`', (-1403), 9985);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(charSequenceArray0[1]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.unwrap("maxWith cannot be negative", "<");
      assertNotNull(string4);
      assertEquals("maxWith cannot be negative", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.chop("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.chomp("org.easymock.bytebuddy.description.NamedElement#g*WI8aypxxw9YV!");
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.description.NamedElement#g*WI8aypxxw9YV!", string0);
      
      // Undeclared exception!
      StringUtils.leftPad("5-BSzN7EjQ-=$}", 32767, "Z@W;)hb9;nGgI");
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r";
      objectArray0[0] = (Object) "\r";
      String string0 = StringUtils.join(objectArray0, 'i');
      assertNotNull(string0);
      assertEquals("\ri", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("\ri");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("\ri", "\r");
      assertNotNull(string1);
      assertEquals("\ri", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.uncapitalize(" oyA/K|`1%W<g9");
      assertNotNull(string0);
      assertEquals(" oyA/K|`1%W<g9", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) " oyA/K|`1%W<g9", 32, (-1));
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBefore("wC\";RV?Yf4c:_WJf", " ");
      assertNotNull(string1);
      assertEquals("wC\";RV?Yf4c:_WJf", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("tyNaJln/t4H[}9d;V3", (String) null, "\n\n");
      assertNotNull(string0);
      assertEquals("tyNaJln/t4H[}9d;V3", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n\n", "org.easymock.bytebuddy.asm.Advice$AssignReturned$Factory\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("\n\n");
      assertEquals(2, int0);
      
      String string1 = StringUtils.leftPad("", 2, "\n\n");
      assertNotNull(string1);
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("{argument7i");
      assertNotNull(string0);
      assertEquals("{argument7i", string0);
      
      String string1 = StringUtils.leftPad("{argument7i", 3621);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "{argument7i";
      charSequenceArray0[1] = (CharSequence) "{argument7i";
      int int0 = StringUtils.indexOfAny((CharSequence) "{argument7i", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween(string1, " ", "{argument7i");
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rotate("u0iTL[=w", 3621);
      assertNotNull(string3);
      assertEquals("TL[=wu0i", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBeforeLast("TL[=wu0i", "4S*/9XZ,%M7]");
      assertNotNull(string4);
      assertEquals("TL[=wu0i", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)322;
      shortArray0[1] = (short) (-1589);
      shortArray0[2] = (short)12;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)52;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'K', (int) (short) (-1), 1551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 8192, 'E');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.rightPad("", 5304, 'p');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'p';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'2', 'p'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "ReportEntry";
      objectArray0[1] = (Object) "ReportEntry";
      objectArray0[2] = (Object) "ReportEntry";
      String string0 = StringUtils.join(objectArray0, "=");
      assertNotNull(string0);
      assertEquals("ReportEntry=ReportEntry=ReportEntry=", string0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("ReportEntry=ReportEntry=ReportEntry=");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("ReportEntry=ReportEntry=ReportEntry=");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '1';
      charArray0[2] = 'Q';
      charArray0[3] = '=';
      charArray0[4] = 'Z';
      charArray0[5] = '`';
      charArray0[6] = '~';
      String string1 = StringUtils.join(charArray0, '>', 2, 5);
      assertArrayEquals(new char[] {'-', '1', 'Q', '=', 'Z', '`', '~'}, charArray0);
      assertNotNull(string1);
      assertEquals("Q>=>Z", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.wrap("=", '=');
      assertNotNull(string2);
      assertEquals("===", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "l", (CharSequence) "l", 2044);
      assertEquals(0, int0);
      
      String string0 = StringUtils.getDigits("l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = '!';
      charArray0[2] = '3';
      charArray0[3] = 'x';
      charArray0[4] = 'y';
      charArray0[5] = '0';
      charArray0[6] = 'l';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "l", charArray0);
      assertArrayEquals(new char[] {'U', '!', '3', 'x', 'y', '0', 'l'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(P%S";
      stringArray0[1] = "E{I :o5;~93OGx";
      stringArray0[2] = "(P%S";
      stringArray0[3] = "E{I :o5;~93OGx";
      stringArray0[4] = "(P%S";
      stringArray0[5] = "(P%S";
      stringArray0[6] = "(P%S";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "(P%S";
      stringArray1[1] = "?[WZ";
      stringArray1[2] = "(P%S";
      stringArray1[3] = "(P%S";
      stringArray1[4] = "E{I :o5;~93OGx";
      stringArray1[5] = "E{I :o5;~93OGx";
      stringArray1[6] = "E{I :o5;~93OGx";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("(P%S", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String string0 = StringUtils.chop("eXieL");
      assertNotNull(string0);
      assertEquals("eXie", string0);
      
      String string1 = StringUtils.leftPad("eXieL", (-535), "eXieL");
      assertNotNull(string1);
      assertEquals("eXieL", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("PRl", 4, 'P');
      assertNotNull(string2);
      assertEquals("PPRl", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rotate("+?q_9;bV ", (-535));
      assertNotNull(string3);
      assertEquals("9;bV +?q_", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)461;
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)3006;
      shortArray0[5] = (short)90;
      shortArray0[6] = (short)17;
      String string4 = StringUtils.join(shortArray0, 'P', (int) (short)461, Integer.MIN_VALUE);
      assertArrayEquals(new short[] {(short)3, (short)127, (short)461, (short)56, (short)3006, (short)90, (short)17}, shortArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = StringUtils.wrap("e", "Z/MB}SZz;hK_C tS@");
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Z/MB}SZz;hK_C tS@eZ/MB}SZz;hK_C tS@", "e");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      int int0 = 2247;
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2247);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2247, charBuffer0.remaining());
      assertEquals(2247, charBuffer0.capacity());
      assertEquals(2247, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2247, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2247, charBuffer0.capacity());
      assertEquals(2247, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2247, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2247 cap=2471]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2247, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(2247, byteBuffer0.remaining());
      assertEquals(2471, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      
      CharBuffer charBuffer1 = CharBuffer.allocate(2247);
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(2247, charBuffer1.remaining());
      assertEquals(2247, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(2247, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2247, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      String string0 = "2H\"<\n";
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) charBuffer1, "2H\"<\n");
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.chomp("gJH2ZH\"<\n");
      assertNotNull(string0);
      assertEquals("gJH2ZH\"<", string0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.leftPad("U\",E';~3oPuxvU!>'", 8192, '+');
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "U\",E';~3oPuxvU!>'");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string3 = StringUtils.join(booleanArray0, '+', 8192, 8192);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      String string0 = StringUtils.leftPad("voGC2optH%:sxkl", 8192, '\'');
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "voGC2optH%:sxkl", (CharSequence) string0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "voGC2optH%:sxkl";
      stringArray0[1] = "voGC2optH%:sxkl";
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = "voGC2optH%:sxkl";
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, stringArray0[3]);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.substringAfter("t", "o");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, '{', 64, Integer.MIN_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, booleanArray0.length);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.capitalize("maxWith cannot b negative");
      assertNotNull(string0);
      assertEquals("MaxWith cannot b negative", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string1 = StringUtils.join(floatArray0, 'o', Integer.MAX_VALUE, (-3508));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, floatArray0.length);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) "\r";
      String string0 = StringUtils.join(objectArray0, 'i');
      assertNotNull(string0);
      assertEquals("\ri\r", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("\ri\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("\ri\r", "\r");
      assertNotNull(string1);
      assertEquals("i", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = "gJH2ZH\"<\n";
      String string1 = StringUtils.chomp("gJH2ZH\"<\n");
      assertNotNull(string1);
      assertEquals("gJH2ZH\"<", string1);
      assertFalse(string1.equals((Object)string0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string1));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(string1));
      
      boolean boolean0 = stack0.add("gJH2ZH\"<");
      assertTrue(boolean0);
      assertEquals("[gJH2ZH\"<]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("gJH2ZH\"<"));
      assertFalse(stack0.contains(string0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, (String) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = StringUtils.repeat("=GC", 5733);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) stack0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stack0;
      objectArray0[5] = (Object) stack0;
      String string0 = StringUtils.join(objectArray0, "JSvM3");
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "[]JSvM3[]JSvM3[]JSvM3java.lang.Object@30552b14JSvM3[]JSvM3[]", (CharSequence) "JSvM3");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBefore("i", 1360);
      assertNotNull(string1);
      assertEquals("i", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace(string0);
      assertNull(string1);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.replaceEach("1o<kx2!aPUd2(Fj", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("1o<kx2!aPUd2(Fj", string2);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      short[] shortArray0 = new short[11];
      String string3 = StringUtils.capitalize(string0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, byteArray0.length);
      
      String string5 = StringUtils.rotate("1o<kx2!aPUd2(Fj", (-1578));
      assertNotNull(string5);
      assertEquals("kx2!aPUd2(Fj1o<", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("tJ", 6013);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.isAlphanumeric(string0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Object varargs must not be null", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      String string2 = "Um7";
      int int0 = 1114111;
      // Undeclared exception!
      StringUtils.repeat("Object varargs must not be null", "Um7", 1114111);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "k\"i7ri_j[*M!", 26, 26);
      assertNotNull(string0);
      assertEquals("k\"i7ri_j[*M!enk\"i7ri_j[*M!", string0);
      
      String string1 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("k\"i7ri_j[*M!");
      assertNotNull(string2);
      assertEquals("K\"I7RI_J[*m!", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "f", 26, 26);
      assertNotNull(string0);
      assertEquals("fray lengths don't match: ", string0);
      
      String string1 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("f");
      assertNotNull(string2);
      assertEquals("F", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      char char0 = '{';
      String string0 = "A parameter cannot be negative: ";
      // Undeclared exception!
      try { 
        StringUtils.repeat("A parameter cannot be negative: ", "A parameter cannot be negative: ", 2147483612);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.substringBetween("useTypeHashConstant", "useTypeHashConstant");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "useTypeHashConstant", 'o');
      assertEquals(1, int0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(361, 8192);
      assertNotNull(vector0);
      assertEquals(361, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("useTypeHashConstant"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayList0);
      assertNotNull(list0);
      assertEquals(361, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayList0.contains("useTypeHashConstant"));
      assertFalse(list0.contains("useTypeHashConstant"));
      
      // Undeclared exception!
      try { 
        StringUtils.join(list0, '\'', 8192, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(8192) > toIndex(-2147483648)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.rightPad("\n", 2590, "U\"0l,?S>kZ6DntH");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) string1;
      boolean boolean0 = StringUtils.startsWithAny(string1, charSequenceArray0);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'N';
      charArray0[2] = '!';
      charArray0[3] = '&';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = "Minimum abbreviation width with offset is %d";
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "L[FBXqXXt##7>";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "Minimum abbreviation width with offset is %d";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Minimum abbreviation width with offset is %d", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.reverse("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("}@Kcd9yfI3 npO_wU", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "}@Kcd9yfI3 npO_wU", "Uw_Opn 3Ify9dcK@}");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfEmpty("B]\"hK-a", "B]\"hK-a");
      assertNotNull(string1);
      assertEquals("B]\"hK-a", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("B]\"hK-a", "B]\"hK-a");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B]\"hK-a", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Uw_Opn 3Ify9dcK@}"));
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Uw_Opn 3Ify9dcK@}", Integer.MAX_VALUE, (-2402));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "B]\"hK-a", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isWhitespace("B]\"hK-a");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "5am$66Z)|", Integer.MAX_VALUE, 10);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart(",(ha%aua|X}K:fl*(6", "$VMpC}hdo2");
      assertNotNull(string4);
      assertEquals(",(ha%aua|X}K:fl*(6", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 6;
      String string0 = StringUtils.join(floatArray0, '#', 60, 60);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)13;
      String string1 = StringUtils.join(shortArray0, '^');
      assertArrayEquals(new short[] {(short)13, (short)13}, shortArray0);
      assertNotNull(string1);
      assertEquals("13^13", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, shortArray0.length);
      
      String string2 = StringUtils.substringAfterLast("", 129);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("13^13", "^n=Tm]&Ru+WD%K");
      assertNotNull(string3);
      assertEquals("13^13", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = '<';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'<', '^', '<'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("tyNaJln/t4H[}", "R9p4Sk\"/S$8af1xDJ", (short)13);
      assertNotNull(string4);
      assertEquals("tyNaJln/t4H[}", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "tyNaJln/t4H[}");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.leftPad("AO,n3l", (-443), 'Z');
      assertNotNull(string0);
      assertEquals("AO,n3l", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("AO,n3l", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(string0));
      
      String string1 = StringUtils.abbreviateMiddle("AO,n3l", "\n", 3);
      assertNotNull(string1);
      assertEquals("A\nl", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(" X3X1]NM.*5$sL}==", "E{I :o5;~93Gx");
      assertEquals(0.42, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      int int0 = StringUtils.indexOf((CharSequence) "", 91, 57);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart("jXt<6", "Parameter [%s] is not of the correct target type %s");
      assertNotNull(string1);
      assertEquals("jXt<6", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("jXt<6");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "!g5l4-g/MZ^,";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "jXt<6";
      charSequenceArray0[3] = (CharSequence) " vs ";
      String string3 = StringUtils.prependIfMissingIgnoreCase("jXt<6", "", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("jXt<6", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.left("nyILHRKU-e*h", (-1009));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) (-1009);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 'e';
      longArray0[7] = (long) 57;
      String string5 = StringUtils.join(longArray0, 'M', Integer.MAX_VALUE, (-555));
      assertArrayEquals(new long[] {101L, (-1L), 77L, (-1009L), (-1L), (-1L), 101L, 57L}, longArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string6 = StringUtils.join(booleanArray0, 'e', 50, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("-/BCY(9Tu1:J^%");
      assertNotNull(string0);
      assertEquals("-/bcy(9tu1:j^%", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "-/BCY(9Tu1:J^%", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("-/BCY(9Tu1:J^%", "-/bcy(9tu1:j^%", (-19));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\u001B';
      charArray0[1] = '\u001B';
      charArray0[2] = '\u001B';
      charArray0[3] = '\u001B';
      charArray0[4] = '\u001B';
      charArray0[5] = '\u001B';
      String string1 = StringUtils.join(charArray0, '\u001B', Integer.MAX_VALUE, (-19));
      assertArrayEquals(new char[] {'\u001B', '\u001B', '\u001B', '\u001B', '\u001B', '\u001B'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("-/BCY(9Tu1:J^%");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u001B', '\u001B', '\u001B', '\u001B', '\u001B', '\u001B'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.unwrap("...", '.');
      assertNotNull(string0);
      assertEquals(".", string0);
      
      String string1 = StringUtils.uncapitalize(".");
      assertNotNull(string1);
      assertEquals(".", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.repeat("Locale must not be null", 594);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("Locale must not be null");
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.chop("\rCannot apply non-operational plugin");
      assertNotNull(string0);
      assertEquals("\rCannot apply non-operational plugi", string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.repeat("\rCannot apply non-operational plugin", 3113);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "\rCannot apply non-operational plugin";
      charSequenceArray0[2] = (CharSequence) "\rCannot apply non-operational plugin";
      charSequenceArray0[3] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) "\rCannot apply non-operational plugin";
      charSequenceArray0[5] = (CharSequence) "\rCannot apply non-operational plugin";
      charSequenceArray0[6] = (CharSequence) "\rCannot apply non-operational plugin";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(36, int0);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "\rCannot apply non-operational plugin", 3113);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("Strings must not be null", "aBTtn5NNWcX{");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", 104, 104);
      assertEquals(6, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "maxWith cannot be negative";
      stringArray0[7] = "maxWith cannot be negative";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.removeStart("%W`0`5\t9eM~i7^$", "NEVER");
      assertNotNull(string0);
      assertEquals("%W`0`5\t9eM~i7^$", string0);
      
      String string1 = StringUtils.leftPad("%W`0`5\t9eM~i7^$", (-65), 'p');
      assertNotNull(string1);
      assertEquals("%W`0`5\t9eM~i7^$", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny("%W`0`5\t9eM~i7^$", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("%W`0`5\t9eM~i7^$"));
      
      String string2 = StringUtils.abbreviateMiddle("%W`0`5\t9eM~i7^$", "NEVER", 13);
      assertNotNull(string2);
      assertEquals("%W`NEVERi7^$", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("E{I :o5;~93Gx", " X3X1]NM.*5$sL}==");
      assertEquals(0.42, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      
      boolean boolean1 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      
      String string0 = StringUtils.abbreviate(")C>B#i< [%w$.", "8uav", (-1451), 10);
      assertNotNull(string0);
      assertEquals(")C>B#i8uav", string0);
      
      String string1 = StringUtils.trim("8uav");
      assertNotNull(string1);
      assertEquals("8uav", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToEmpty(")C>B#i< [%w$.");
      assertNotNull(string2);
      assertEquals(")C>B#i< [%w$.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1451);
      floatArray0[1] = (float) (-1451);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ']', 51, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.remove("", 'v');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootLowerCase("Hc=$[W>;n?[B");
      assertNotNull(string2);
      assertEquals("hc=$[w>;n?[b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("Ug8A/SRW%~9s>4_", (String) null, "[S\"kX");
      assertNotNull(string3);
      assertEquals("Ug8A/SRW%~9s>4_", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("", 0, 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtension"));
      
      boolean boolean1 = priorityQueue0.add("Threshold must not be negaive");
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtension"));
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtension"));
      
      String string0 = StringUtils.join(iterator0, '9');
      assertNotNull(string0);
      assertEquals("Threshold must not be negaive9org.junitpioneer.jupiter.CartesianProductTestExtension", string0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("Threshold must not be negaive"));
      assertFalse(priorityQueue0.contains(string0));
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[3] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      String string0 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'\u0000', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000NNNNNNNNNN", string0);
      assertEquals(6, charArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)23;
      shortArray0[4] = (short)105;
      String string1 = StringUtils.join(shortArray0, 'W', (int) (short)13, (-1));
      assertArrayEquals(new short[] {(short)13, (short)0, (short)16, (short)23, (short)105}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, shortArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0000NNNNNNNNNN", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.rightPad("\n", 4624, "\n");
      assertNotNull(string0);
      
      String string1 = StringUtils.mid(string0, 4624, (-2));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, "Localemust not be null/^");
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(4624));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.remove("\n", string0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) string0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 4624;
      longArray0[1] = (long) (-2);
      longArray0[2] = (long) (-2);
      longArray0[3] = (long) 4624;
      String string3 = StringUtils.wrap("Strings must not be null", '7');
      assertNotNull(string3);
      assertEquals("7Strings must not be null7", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '+');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.wrapIfMissing("\rij\rij", "\r");
      assertNotNull(string0);
      assertEquals("\rij\rij\r", string0);
      
      String string1 = StringUtils.capitalize("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertNotNull(string1);
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("\rij\rij");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", (-1009), (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("u]Z;)5_`YJ,,zQv", "V");
      assertNotNull(string0);
      assertEquals("u]Z;)5_`YJ,,zQv", string0);
      
      String string1 = StringUtils.substringAfterLast("This class only serves as a marker type and should not be instantiated", "@7]H@*|_");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("@7]H@*|_", "p^f=");
      assertNotNull(string2);
      assertEquals("@7]H@*|_", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("@7]H@*|_", "u]Z;)5_`YJ,,zQv");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "u]Z;)5_`YJ,,zQv";
      charSequenceArray0[1] = (CharSequence) "p^f=";
      boolean boolean0 = StringUtils.startsWithAny("@7]H@*|_", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("V");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("@7]H@*|_", "p^f=", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("p^f=@7]H@*|_", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.left("<}!@^F-8", (-1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'M';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'M';
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) (-1);
      String string6 = StringUtils.join(longArray0, 'M', (-1), (-1009));
      assertArrayEquals(new long[] {77L, (-1L), (-1L), (-1L), 77L, 77L, (-1L)}, longArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'o', (-690), (int) (short)256);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("Q>`t33Hr;q6!6PU", "}}", ">^tG#?k6dLq");
      assertNotNull(string1);
      assertEquals("Q>`t33Hr;q6!6PU", string1);
      
      String[] stringArray0 = StringUtils.split("C#,mFU~_f");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'o', Integer.MAX_VALUE, (-690));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ">aPv");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeEnd("}}", ">aPv");
      assertNotNull(string3);
      assertEquals("}}", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 2047L;
      longArray0[1] = 2047L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.join(longArray0, '6', (-24), (-24));
      assertArrayEquals(new long[] {2047L, 2047L, (-1L), 0L, 105L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(10, longArray0.length);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("", "aI*y}v4r=");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("", "aI*y}v4r=", "r!j>O%$b+(2");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceIgnoreCase("", "", "__Sf{TCl%{k]<Db8C+}", 9972);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "\r", (-1));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '[');
      assertNull(string1);
      
      String string2 = StringUtils.replaceAll("W&XvEM-u.8b)Oa", "p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string2);
      assertEquals("W&XvEM-u.8b)Oa", string2);
      
      String string3 = StringUtils.mid("uj7V", 3690, (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center((String) null, 5, "uj7V");
      assertNull(string4);
      
      String string5 = StringUtils.replaceAll("[", "Strings must not be null@8j[!;", (String) null);
      assertNotNull(string5);
      assertEquals("[", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.compare("\r", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.mid("\n", 50, (-37));
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(50));
      
      String string1 = StringUtils.remove((String) null, "xmbDbZ,8uoXg{_");
      assertNull(string1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 50;
      intArray0[1] = 50;
      intArray0[2] = (-1514);
      intArray0[3] = (-1514);
      intArray0[4] = (-1514);
      intArray0[5] = 7;
      String string2 = StringUtils.join(intArray0, '*', 0, 1);
      assertArrayEquals(new int[] {50, 50, (-1514), (-1514), (-1514), 7}, intArray0);
      assertNotNull(string2);
      assertEquals("50", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, intArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "50", (-4567));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.center("Expected 0 or 1 arguments, but got ", 35, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("Expected 0 or 1 arguments, but got ", string0);
      
      String string1 = StringUtils.mid("cLuKQd&F:2I!!H]B-", 5, 35);
      assertNotNull(string1);
      assertEquals("d&F:2I!!H]B-", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "d&F:2I!!H]B-", "Expected 0 or 1 arguments, but got ");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Expected 0 or 1 arguments, but got "));
      
      String string2 = StringUtils.substringBefore("cLuKQd&F:2I!!H]B-", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("cLuKQd&F:2I!!H]B-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("pMR{8EPLY1?jeV}", '\\');
      assertNotNull(string0);
      assertEquals("\\pMR{8EPLY1?jeV}\\", string0);
      
      int int0 = Integer.MIN_VALUE;
      String string1 = StringUtils.repeat('f', Integer.MIN_VALUE);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("pMR{8EPLY1?jeV}");
      assertNotNull(string2);
      assertEquals("Pmr{8eply1?JEv}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Pmr{8eply1?JEv}");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("Pmr{8eply1?JEv}", 'f');
      assertNotNull(string3);
      assertEquals("Pmr{8eply1?JEv}", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'f';
      charArray0[4] = '(';
      int int1 = StringUtils.indexOfAny((CharSequence) "Pmr{8eply1?JEv}", charArray0);
      assertArrayEquals(new char[] {'f', '\\', '\\', 'f', '('}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Pmr{8eply1?JEv}", charArray0);
      assertArrayEquals(new char[] {'f', '\\', '\\', 'f', '('}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      
      String string4 = StringUtils.trimToEmpty("nk#<gy4YX~C)x");
      assertNotNull(string4);
      assertEquals("nk#<gy4YX~C)x", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.trimToEmpty("nk#<gy4YX~C)x");
      assertNotNull(string5);
      assertEquals("nk#<gy4YX~C)x", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      assertArrayEquals(new char[] {'f', '\\', '\\', 'f', '('}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringBetween((String) null, "\n", "+/VLN_pruhz!<CyN");
      assertNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-119);
      String string1 = StringUtils.join(byteArray0, 'w', 10, Integer.MIN_VALUE);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)82, (byte)4, (byte)14, (byte) (-98), (byte) (-119)}, byteArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '', '');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1600), (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, '$', ';');
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "R", "org.easymock.bytebuddy.createJavaDispatcher", (-1600));
      assertNotNull(string2);
      assertEquals("oorg.easymock.bytebuddy.createJavaDispatcherg.apache.commons.lang3.Storg.easymock.bytebuddy.createJavaDispatcheringUtils", string2);
      
      String string3 = StringUtils.substringBefore("98yje", (-1600));
      assertNotNull(string3);
      assertEquals("98yje", string3);
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "oorg.easymock.bytebuddy.createJavaDispatcherg.apache.commons.lang3.Storg.easymock.bytebuddy.createJavaDispatcheringUtils";
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny("oorg.easymock.bytebuddy.createJavaDispatcherg.apache.commons.lang3.Storg.easymock.bytebuddy.createJavaDispatcheringUtils", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("] does not exist", 4946);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("] does not exist", supplier0);
      assertNotNull(string5);
      assertEquals("] does not exist", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(".Mr>F5*KQks5bD|{u", 1);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "kFGjjKN", "%s: Could not resolve parameter by name (%s).");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace(".Mr>F5*KQks5bD|{u");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("kFGjjKN");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      String string1 = StringUtils.join(floatArray0, 'v', 1, 3);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("1.0v1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("u;-V}9XVvQv;G", "u;-V}9XVvQv;G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("u;-V}9XVvQv;G");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "o", (CharSequence) "");
      assertEquals(1, int0);
      
      String string1 = StringUtils.left("o", 1);
      assertNotNull(string1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.repeat("u", 4097);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "u";
      stringArray0[1] = "u";
      stringArray0[2] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("u", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("`AuEJaHmb[ 7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`AuEJaHmb[ 7";
      stringArray0[1] = "`AuEJaHmb[ 7";
      stringArray0[2] = "`auejahmb[ 7";
      stringArray0[3] = "`auejahmb[ 7";
      stringArray0[4] = "`auejahmb[ 7";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("`", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("`AuEJaHmb[ 7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.uncapitalize("`auejahmb[ 7");
      assertNotNull(string3);
      assertEquals("`auejahmb[ 7", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)30;
      shortArray0[1] = (short) (-2556);
      shortArray0[2] = (short) (-2043);
      shortArray0[3] = (short) (-9568);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1438);
      shortArray0[6] = (short)81;
      shortArray0[7] = (short)64;
      String string4 = StringUtils.rightPad("`", (int) (short)0, '7');
      assertNotNull(string4);
      assertEquals("`", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceIgnoreCase("|KDz\"HtG#]~QP=7ozr", "`AuEJaHmb[ 7", "\"$Ps.T`YAPM", (int) (short) (-1438));
      assertNotNull(string5);
      assertEquals("|KDz\"HtG#]~QP=7ozr", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string4));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(string4));
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, '7');
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stack0.contains(string4));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("bl\"'<0EeAJ!Ip1");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "np<(fas=lH", charSequenceArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("np<(fas=lH"));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "r9 c:V}8U*s?j`&", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("np<(fas=lH"));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'H';
      charArray0[2] = '*';
      int int2 = StringUtils.indexOfAny((CharSequence) "np<(fas=lH", charArray0);
      assertArrayEquals(new char[] {'>', 'H', '*'}, charArray0);
      assertEquals(9, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.substringAfterLast("{OTSJ8u|OcGFP@gh'O", 64);
      assertNotNull(string0);
      assertEquals("gh'O", string0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "%Zl|");
      assertNotNull(string0);
      assertEquals("%Zl|Search and Replace array lengths don't match: %Zl|", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("%Zl|Search and Replace array lengths don't match: %Zl|");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "w", "%Zl|");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("vDrSf.qdc}_0k", 76);
      assertNotNull(string2);
      assertEquals("vDrSf.qdc}_0k                                                               ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = (double) '';
      doubleArray0[2] = (double) 119;
      doubleArray0[3] = (double) 119;
      doubleArray0[4] = (double) '';
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 24;
      doubleArray0[8] = (double) 119;
      String string3 = StringUtils.join(doubleArray0, '', 2, 9);
      assertArrayEquals(new double[] {127.0, 127.0, 119.0, 119.0, 127.0, 9.0, 9.0, 24.0, 119.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      assertEquals("119.0119.0127.09.09.024.0119.0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("present", "present", "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string4 = StringUtils.join(doubleArray0, 'z', 119, 2);
      assertArrayEquals(new double[] {127.0, 127.0, 119.0, 119.0, 127.0, 9.0, 9.0, 24.0, 119.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("R+");
      assertNotNull(string1);
      assertEquals("R+", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize(string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "R+";
      charSequenceArray0[1] = (CharSequence) string2;
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) string0, 65575);
      assertEquals(1156, int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.chop(string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "R+");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.EMPTY;
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean4 = StringUtils.contains(charSequenceArray0[0], 65575);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.unwrap(string3, string2);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.normalizeSpace(string5);
      assertNotNull(string6);
      assertEquals("R", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R";
      stringArray0[1] = "R+";
      stringArray0[2] = "sJj#0F# i'=i";
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string7);
      assertEquals("R", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '*';
      charArray0[2] = 'E';
      charArray0[3] = 'x';
      String string8 = StringUtils.join(charArray0, '2', (-1493), (-1493));
      assertArrayEquals(new char[] {'C', '*', 'E', 'x'}, charArray0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.defaultString("l|", (String) null);
      assertNotNull(string0);
      assertEquals("l|", string0);
      
      String string1 = StringUtils.chop("org.easymock.bytebuddy.generate");
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.generat", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "l|";
      stringArray0[1] = "l|";
      stringArray0[2] = "l|";
      stringArray0[3] = null;
      stringArray0[4] = "=;s2c=E_~";
      stringArray0[5] = "";
      stringArray0[6] = null;
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "l|";
      stringArray1[1] = "";
      stringArray1[2] = null;
      stringArray1[3] = "l|";
      stringArray1[4] = null;
      stringArray1[5] = "org.easymock.bytebuddy.generat";
      stringArray1[6] = "l|";
      String string2 = StringUtils.replaceEachRepeatedly("org.easymock.bytebuddy.generat", stringArray0, stringArray1);
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.generat", string2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("B[H5!TrkG9a>p6", "B[H5!TrkG9a>p6");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // B[H5!TrkG9a>p6
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("7zX$@:");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "eNOCvp\"@2;w`yh5=", 238, 2887);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumeric("eNOCvp\"@2;w`yh5=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '/';
      String string0 = StringUtils.join(doubleArray0, ';');
      assertArrayEquals(new double[] {47.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("47.0", string0);
      assertEquals(1, doubleArray0.length);
      
      String string1 = StringUtils.center("7zX$@:", 14, "47.0");
      assertNotNull(string1);
      assertEquals("47.07zX$@:47.0", string1);
      assertFalse(string1.equals((Object)string0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("47.0"));
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("47.0"));
      
      String string2 = StringUtils.join(iterator0, "7zX$@:");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayDeque0.contains("47.0"));
      
      String string3 = StringUtils.leftPad("7zX$@:", 2887, 'A');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.center("J2,iQ&z Ez9}}|y8:n5GEt^*usb", 35, "_q5'");
      assertNotNull(string0);
      assertEquals("_q5'J2,iQ&z Ez9}}|y8:n5GEt^*usb_q5'", string0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "l", "l");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("N`t^#", "N`t^#");
      assertNotNull(string0);
      assertEquals("N`t^#", string0);
      
      String string1 = StringUtils.remove("N`t^#", '<');
      assertNotNull(string1);
      assertEquals("N`t^#", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("N`t^#");
      assertTrue(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "N`t^#", supplier0);
      assertNotNull(charSequence0);
      assertEquals("N`t^#", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast(",", ",");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(",");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.right("N`t^#", 5);
      assertNotNull(string3);
      assertEquals("N`t^#", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.substringBefore("", "Locale must not be null");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string5 = StringUtils.join((List<?>) linkedList0, "l|*)l:<6_-|GPiI#~Wv", 51, 51);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, linkedList0.size());
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = StringUtils.center("F", 127, 'P');
      assertNotNull(string0);
      assertEquals("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(string0));
      
      String[] stringArray0 = StringUtils.split((String) null, "PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", (-2412));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(46));
      
      boolean boolean0 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      String string0 = StringUtils.right("@])-~k?LRrQ[", 46);
      assertNotNull(string0);
      assertEquals("@])-~k?LRrQ[", string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'i';
      floatArray0[4] = (float) 6;
      floatArray0[5] = (float) 46;
      floatArray0[6] = (float) 46;
      String string1 = StringUtils.join(floatArray0, 'i');
      assertArrayEquals(new float[] {46.0F, 6.0F, 105.0F, 105.0F, 6.0F, 46.0F, 46.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("46.0i6.0i105.0i105.0i6.0i46.0i46.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("o2o/]NI");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "46.0i6.0i105.0i105.0i6.0i46.0i46.0", 46);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("z`L4lG9.\"x", "z`L4lG9.\"x");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("^~<t_C;Y/nC*y", ' ');
      assertNotNull(string0);
      assertEquals("^~<t_C;Y/nC*y", string0);
      
      String string1 = StringUtils.chomp("rror - output of one loop is the input of anotherS\"Nop#54)$E+c");
      assertNotNull(string1);
      assertEquals("rror - output of one loop is the input of anotherS\"Nop#54)$E+c", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("gJH2ZH\"<\n");
      assertNotNull(string2);
      assertEquals("gJH2ZH\"<", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEndIgnoreCase("gJH2ZH\"<", "z`L4lG9.\"x");
      assertNotNull(string3);
      assertEquals("gJH2ZH\"<", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.chop("gJH2ZH\"<\n");
      assertNotNull(string0);
      assertEquals("gJH2ZH\"<", string0);
      
      String string1 = StringUtils.strip("gJH2ZH\"<", "gJH2ZH\"<\n");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '<', (-4582), 217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = StringUtils.center("offset cannot be negative", 3, '9');
      assertNotNull(string0);
      assertEquals("offset cannot be negative", string0);
      
      String string1 = StringUtils.defaultString("h");
      assertNotNull(string1);
      assertEquals("h", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("Cdz=22_e", "offset cannot be negative", "offset cannot be negative");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.substring((String) null, 1);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, 98);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'C', 95, (-1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      
      String string6 = StringUtils.defaultIfEmpty("R<8g%H", "GqjR*/y/");
      assertNotNull(string6);
      assertEquals("R<8g%H", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.remove("R<8g%H", '+');
      assertNotNull(string7);
      assertEquals("R<8g%H", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.repeat('}', (-1));
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.removeStart("|", "|");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("|", "MA .!yU)sijR7g`p");
      assertNotNull(string1);
      assertEquals("|", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring((String) null, 127);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.remove("No arguments sources were found for @CartesianTest", ' ');
      assertNotNull(string0);
      assertEquals("Noargumentssourceswerefoundfor@CartesianTest", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Noargumentssourceswerefoundfor@CartesianTest");
      assertFalse(boolean0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("No arguments sources were found for @CartesianTest"));
      
      boolean boolean1 = priorityQueue0.add("Noargumentssourceswerefoundfor@CartesianTest");
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(priorityQueue0.contains("No arguments sources were found for @CartesianTest"));
      assertTrue(priorityQueue0.contains("Noargumentssourceswerefoundfor@CartesianTest"));
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("No arguments sources were found for @CartesianTest"));
      assertTrue(priorityQueue0.contains("Noargumentssourceswerefoundfor@CartesianTest"));
      
      String string1 = StringUtils.join(iterator0, '!');
      assertNotNull(string1);
      assertEquals("Noargumentssourceswerefoundfor@CartesianTest", string1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(string1.equals((Object)string0));
      assertFalse(priorityQueue0.contains("No arguments sources were found for @CartesianTest"));
      assertTrue(priorityQueue0.contains("Noargumentssourceswerefoundfor@CartesianTest"));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Noargumentssourceswerefoundfor@CartesianTest", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.replaceChars("%s: Could not resolve parameter by name (%s).", '`', '1');
      assertNotNull(string0);
      assertEquals("%s: Could not resolve parameter by name (%s).", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("%s: Could not resolve parameter by name (%s).");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kFGjjKN";
      objectArray0[1] = (Object) "%s: Could not resolve parameter by name (%s).";
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string1);
      assertEquals("kFGjjKN%s: Could not resolve parameter by name (%s).", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "%s: Could not resolve parameter by name (%s).", 100, (-119));
      assertEquals(8, int0);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("kFGjjKN%s: Could not resolve parameter by name (%s).");
      assertNotNull(intArray0);
      assertEquals(52, intArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "kFGjjKN%s: Could not resolve parameter by name (%s).", (-119));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8217, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      StringUtils.center("t^Kb$EQit^Kb$E", 32767, ',');
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("P ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "P ", 32);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.params.DisableIfArgumentExtension";
      int int0 = 1604;
      String string1 = "s\\$]5yBr*%]YI)6";
      String string2 = StringUtils.center("org.junitpioneer.jupiter.params.DisableIfArgumentExtension", 1604, "s$]5yBr*%]YI)6");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string2, (CharSequence) "org.junitpioneer.jupiter.params.DisableIfArgumentExtension");
      assertEquals(773, int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string2, 16);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("`AuEJaHmb[ 7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("`AuEJaHmb[ 7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.leftPad("", (-1390), "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("uYB5N60]kApo$0)}Lnm", (String) null, 5);
      assertNotNull(string1);
      assertEquals("uYB5N60]kApo$0)}Lnm", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("uYB5N60]kApo$0)}Lnm", '!', 'H');
      assertNotNull(string2);
      assertEquals("uYB5N60]kApo$0)}Lnm", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = StringUtils.deleteWhitespace("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string1);
      assertEquals("Uw_Opn3Ify9dcK@}", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("dgJ", "Uw_Opn3Ify9dcK@}");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound", "Arguments cannot both be null");
      assertNotNull(string3);
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chop("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler");
      assertNotNull(string4);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandle", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound", "KS7JPji<,", (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrap((String) null, '0');
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Uw_Opn 3Ify9dcK@}", '}');
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("3cSH-c$X5hS");
      assertNotNull(string0);
      assertEquals("3cSH-c$X5hS", string0);
      
      String string1 = "%Zl|";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("%Zl|", "%Zl|", "3cSH-c$X5hS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.chomp("5siVYb$6/mf");
      assertNotNull(string0);
      assertEquals("5siVYb$6/mf", string0);
      
      String string1 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.s", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.s");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.s");
      assertNotNull(string2);
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHERcOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.S", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("5siVYb$6/mf", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.center((String) null, 263);
      assertNull(string6);
      
      int int1 = StringUtils.compare((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.s", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[0], 65575);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("eYP@/*qpqGnFAD!3", ']');
      assertNotNull(string2);
      assertEquals("]eYP@/*qpqGnFAD!3]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("n8d6x=");
      assertNotNull(string3);
      assertEquals("N8d6x=", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'e');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap(".Xq^'a\"FWy+iwY[", (String) null);
      assertNotNull(string1);
      assertEquals(".Xq^'a\"FWy+iwY[", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace(".Xq^'a\"FWy+iwY[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      assertNotNull(string0);
      assertEquals("m9,?bDln!2cQsI]}?k", string0);
      
      String string1 = StringUtils.chomp("J#*AZIz`U~;b");
      assertNotNull(string1);
      assertEquals("J#*AZIz`U~;b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("an unknown method", "J#*AZIz`U~;b");
      assertNotNull(string2);
      assertEquals("an unknown method", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("J#*AZIz`U~;b"));
      
      boolean boolean0 = linkedList0.add((Object) "J#*AZIz`U~;b");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("an unknown method"));
      assertTrue(linkedList0.contains("J#*AZIz`U~;b"));
      
      String[] stringArray0 = StringUtils.split("an unknown method", "backupArguments");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "an unknown method", (CharSequence[]) stringArray0);
      assertEquals(2, int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", 'e', 'e');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.overlay("", "p{InCombiningDiacriticalMarks}+", (-2207), (-132379129));
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.overlay("maxWith cannot be negative", "", 8192, (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.removeAll((String) null, "&~'I>or/r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.remove("8", "@");
      assertNotNull(string0);
      assertEquals("8", string0);
      
      String string1 = StringUtils.trimToNull("B!.(i");
      assertNotNull(string1);
      assertEquals("B!.(i", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("8", "8");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chop("B!.(i");
      assertNotNull(string2);
      assertEquals("B!.(", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("}$pn", (-950));
      assertNotNull(string3);
      assertEquals("}$pn", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replace("9'wj]s", "", "l;}P]QzQ]<Q\nv", (-950));
      assertNotNull(string4);
      assertEquals("9'wj]s", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("e!Ry^r u'");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean2 = StringUtils.equalsAny("8", stringArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, stringArray0.length);
      
      String string5 = StringUtils.removeEnd((String) null, "B!.(");
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("9'wj]s", "Object varargs must not be null");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.rightPad("@", (-1942), '|');
      assertNotNull(string7);
      assertEquals("@", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "8");
      assertNotNull(charSequence0);
      assertEquals("8", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string7));
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isMixedCase("B!.(i");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("", "a7*f&)O>W!.>Mpw({{%");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\n", (String) null);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.trimToNull("\r");
      assertNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'a';
      charArray0[2] = 'h';
      charArray0[3] = ']';
      charArray0[4] = '~';
      charArray0[5] = 'I';
      charArray0[6] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {' ', 'a', 'h', ']', '~', 'I', 'x'}, charArray0);
      assertEquals(1, int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = "\n";
      String string1 = StringUtils.uncapitalize("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("\n", 1039);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 3473;
      char char0 = '+';
      String string3 = StringUtils.leftPad("8o*", 3473, '+');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string3, "Bt:Z.z");
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", "-1.0]2443.0]0.0");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.leftPad(" ", 5, " ");
      assertNotNull(string1);
      assertEquals("     ", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Integer.MAX_VALUE;
      String string2 = StringUtils.abbreviateMiddle("-1.0]2443.0]0.0", "k/Qe,]H=MeY,", Integer.MAX_VALUE);
      assertNotNull(string2);
      assertEquals("-1.0]2443.0]0.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("k/Qe,]H=MeY,", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.join(longArray0, '6', 0, 0);
      assertArrayEquals(new long[] {2047L, 0L, (-1L), 0L, 105L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(10, longArray0.length);
      
      String string1 = StringUtils.stripEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeEnd("", "zQf.eNp><1Y");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.repeat('6', 1);
      assertNotNull(string5);
      assertEquals("6", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "6");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.compare("A'Q'3l8 [5j^~4", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("6");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6", (CharSequence) "", 16);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      short[] shortArray0 = new short[6];
      String string0 = StringUtils.substringAfterLast("tOT7NHolu0", "tOT7NHolu0");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("tOT7NHolu0", 2864, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("e%`c?vHWv{~$");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) "tOT7NHolu0", string1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tyNaJln/t4H[}9d;V3";
      String string0 = StringUtils.replaceIgnoreCase("tyNaJln/t4H[}9d;V3", "tyNaJln/t4H[}9d;V3", "3\"}ni@f$wGDj");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "3\"}ni@f$wGDj", "tyNaJln/t4H[}9d;V3");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "tyNaJln/t4H[}9d;V3", (CharSequence) "tyNaJln/t4H[}9d;V3");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.wrapIfMissing("F", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negativeFThreshold must not be negative", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negativeFThreshold must not be negative", (CharSequence) "F", 3659);
      assertEquals(30, int0);
      
      String string1 = StringUtils.rotate("Threshold must not be negativeFThreshold must not be negative", 3659);
      assertNotNull(string1);
      assertEquals("hreshold must not be negativeFThreshold must not be negativeT", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Threshold must not be negativeFThreshold must not be negative";
      stringArray0[1] = "Strings must not be nul<&w+86ZDicf/Tx";
      stringArray0[2] = "F";
      stringArray0[3] = "Threshold must not be negativeFThreshold must not be negative";
      stringArray0[4] = "uZS![[@CU>gZTHhg,<";
      stringArray0[5] = "Threshold must not be negativeFThreshold must not be negative";
      stringArray0[6] = "Strings must not be nul<&w+86ZDicf/Tx";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be nul<&w+86ZDicf/Tx", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String string0 = StringUtils.rightPad("N`K^#", 8216, 'n');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, 8216);
      assertNotNull(stringArray0);
      assertEquals(8216, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(8216, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", 'e', 'e');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string2 = StringUtils.joinWith("", stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("maxWith cannot be negative");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray1.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.removeAll("A", "A");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("CartesianProductTest can only take exactly one type of crguments source.", (String) null);
      assertNotNull(string1);
      assertEquals("CartesianProductTest can only take exactly one type of crguments source.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("maxWith cannot be negative", 2615, 2615);
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat("z`L4lG9.\"xz`L4lG9.\"x", 3006);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.containsWhitespace(string3);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      stack0.setSize(177);
      assertFalse(stack0.isEmpty());
      assertEquals(177, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(177, stack0.size());
      
      String string0 = StringUtils.join((List<?>) stack0, '5', 3, 108);
      assertNotNull(string0);
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string0);
      assertFalse(stack0.isEmpty());
      assertEquals(177, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(177, stack0.size());
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add("clone");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("clone"));
      
      boolean boolean1 = linkedHashSet0.add("[");
      assertTrue(boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("clone"));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("clone"));
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, 'K');
      assertNotNull(string0);
      assertEquals("cloneK[", string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("clone"));
      
      String string1 = StringUtils.substringBetween("TxFUKDS?#F_gpsMf..", "...");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isEmpty("...");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.defaultString("[");
      assertNotNull(string2);
      assertEquals("[", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("-B^h+4VEy4Ysu~");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("-B^h+4VEy4Ysu~", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'a');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("J2,iQ&z Ez9}}|y8:n5GEt^*usb", "J2,iQ&z Ez9}}|y8:n5GEt^*usb");
      assertNotNull(string0);
      assertEquals("J2,iQ&z Ez9}}|y8:n5GEt^*usb", string0);
      
      String string1 = StringUtils.mid("dQ[!Sj", 2, 2);
      assertNotNull(string1);
      assertEquals("[!", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("dQ[!Sj", (-2226), "t!`LeeU%8=");
      assertNotNull(string2);
      assertEquals("dQ[!Sj", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("J2,iQ&z Ez9}}|y8:n5GEt^*usb", "J2,iQ&z Ez9}}|y8:n5GEt^*usb", "Cannot resolve to type: ");
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeStart("\n", "dQ[!Sj");
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.leftPad("", 122);
      assertNotNull(string0);
      assertEquals("                                                                                                                          ", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "                                                                                                                          ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("0{$");
      assertNotNull(string2);
      assertEquals("0{$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = 0.42905982905982903;
      doubleArray0[2] = (double) 1296;
      doubleArray0[3] = (double) '%';
      String string3 = StringUtils.join(doubleArray0, '%', 1868, (-1));
      assertArrayEquals(new double[] {37.0, 0.42905982905982903, 1296.0, 37.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, doubleArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("0{$", '%');
      assertNotNull(string4);
      assertEquals("%0{$%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains('%'));
      
      String string5 = StringUtils.substringBetween("0{$", "", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("Locale must not be null", "", (-1), 122);
      assertNotNull(string6);
      assertEquals("Locale must not be null", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string7);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.upperCase("TE-v`UlIBxF:D_r;SB");
      assertNotNull(string0);
      assertEquals("TE-V`ULIBXF:D_R;SB", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "TE-V`ULIBXF:D_R;SB";
      charSequenceArray0[1] = (CharSequence) "TE-v`UlIBxF:D_r;SB";
      boolean boolean0 = StringUtils.endsWithAny("TE-V`ULIBXF:D_R;SB", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("F=4~jkh%w_B5,NXvAmU");
      assertNotNull(string1);
      assertEquals("F=4~jkh%w_B5,NXvAmU", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("TE-v`UlIBxF:D_r;SB", (-1), (-1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "TE-v`UlIBxF:D_r;SB", (CharSequence) "", 1485);
      assertEquals(18, int0);
      
      String string3 = StringUtils.substringBefore("", (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.wrap("}|`mCT*b* \"+T[", 'k');
      assertNotNull(string4);
      assertEquals("k}|`mCT*b* \"+T[k", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrap("", 'b');
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kt00R,<";
      String string6 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.leftPad("kt00R,<", (-1), "");
      assertNotNull(string7);
      assertEquals("kt00R,<", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "}|`mCT*b* \"+T[";
      charSequenceArray1[1] = (CharSequence) "TE-v`UlIBxF:D_r;SB";
      String string8 = StringUtils.appendIfMissingIgnoreCase("", "TE-V`ULIBXF:D_R;SB", charSequenceArray1);
      assertNotNull(string8);
      assertEquals("TE-V`ULIBXF:D_R;SB", string8);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertEquals(2, charSequenceArray1.length);
      
      boolean boolean2 = StringUtils.containsWhitespace("TE-V`ULIBXF:D_R;SB");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.stripEnd("\r", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "5v");
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("Strings must not be nullStrings must not be null", (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("Strings must not be nullStrings must not be null", "5v");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short) (-98);
      shortArray0[2] = (short) (-1740);
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.compare("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(0, int0);
      
      String string0 = StringUtils.capitalize("v");
      assertNotNull(string0);
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.stripStart("tJ", "{I3m>MAd;vyWVk^}");
      assertNotNull(string0);
      assertEquals("tJ", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("{I3m>MAd;vyWVk^}", "{I3m>MAd;vyWVk^}", "tJ");
      assertNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize("tJ");
      assertNotNull(string1);
      assertEquals("tJ", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Odm]_jJ9J!K9", "Odm]_jJ9J!K9", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '';
      charArray0[2] = 's';
      charArray0[3] = 'u';
      charArray0[4] = 'a';
      int int0 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.", charArray0);
      assertArrayEquals(new char[] {'3', '', 's', 'u', 'a'}, charArray0);
      assertEquals(20, int0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("Odm]_jJ9J!K9");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        Charset.forName("|QGmu1dm*(1<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // |QGmu1dm*(1<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "/GEBkc'9J3pE", "9%Wqr2)DTB");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 26, 37);
      assertNull(string0);
      
      String string1 = StringUtils.replaceAll((String) null, " resource", (String) null);
      assertNull(string1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 26;
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) 26;
      floatArray0[3] = (float) 26;
      floatArray0[4] = (float) 26;
      floatArray0[5] = (float) 26;
      String string2 = StringUtils.join(floatArray0, '\\', 26, 26);
      assertArrayEquals(new float[] {26.0F, 37.0F, 26.0F, 26.0F, 26.0F, 26.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " resource";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = " resource";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = " resource";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals(" resource", string4);
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, stringArray0.length);
      
      String string5 = StringUtils.replaceIgnoreCase(" resource", "}|`mCT*b* \"+T[", " resource", 37);
      assertNotNull(string5);
      assertEquals(" resource", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) " resource");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "/7!5Tsp6}Kn>";
      String string0 = StringUtils.lowerCase(stringArray0[0]);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", ";F4QfMX;gsx9%J", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.upperCase("`Y>`^~c%;xZ-FC");
      assertNotNull(string1);
      assertEquals("`Y>`^~C%;XZ-FC", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string2 = StringUtils.substringBetween("", "[2vof");
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Uw_Opn 3Ify9dcK@}";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Uw_Opn 3Ify9dcK@}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[3], charSequenceArray0[1], 1114111);
      assertEquals(18, int0);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "`Y>`^~C%;XZ-FC");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 4311);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "52IoQsn", (CharSequence) "");
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.stripToNull("O@|XW$BNc@I");
      assertNotNull(string1);
      assertEquals("O@|XW$BNc@I", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      double double0 = StringUtils.getJaroWinklerDistance("52IoQsn", "Strings must not be null");
      assertEquals(0.41, double0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "52IoQsn";
      String string3 = StringUtils.join(objectArray0, 'N', 0, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "O@|XW$BNc@I");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "52IoQsn";
      charSequenceArray0[1] = (CharSequence) "O@|XW$BNc@I";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int3 = StringUtils.lastIndexOfAny("Strings must not be null", charSequenceArray0);
      assertEquals(24, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[2], (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.rightPad((String) null, 7);
      assertNull(string4);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'N';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O@|XW$BNc@I", (String) null, 2);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase("Strings must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.rightPad("...", 10, "v1#1dOC:6m9M/nHi");
      assertNotNull(string5);
      assertEquals("...v1#1dOC", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substringBefore("\n", 2);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 2);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) 'y';
      floatArray0[4] = (float) 64;
      String string2 = StringUtils.stripStart("\n", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("Locale must not be nullLocale must not be null", "\n");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny(" vs ", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Locale must not be nullLocale must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("3Tx3FUKDS?#F_gpsMf...", "\n", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("\n3Tx3FUKDS?#F_gpsMf...", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.abbreviateMiddle("\n", " ", (-1));
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "\n", supplier0);
      assertNotNull(charSequence0);
      assertEquals("\n", charSequence0);
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'c';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\n", charArray0);
      assertArrayEquals(new char[] {'y', 'y', 'y', 'c'}, charArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "Strings must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("Strings must not be null");
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEach("1o<kx2!aPUd2(Fj", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("1o<kx2!aPUd2(Fj", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'a', Integer.MAX_VALUE, 12);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      StringUtils.repeat("org.apache.commons.lang3.RegExUtils", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JQr'";
      String string0 = StringUtils.join((int[]) null, '`');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '`', '`', '`'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 110;
      floatArray0[1] = (float) '|';
      floatArray0[2] = (float) 110;
      floatArray0[3] = (float) 110;
      floatArray0[4] = (float) '|';
      String string0 = StringUtils.join(floatArray0, '|', 1953, (-32768));
      assertArrayEquals(new float[] {110.0F, 124.0F, 110.0F, 110.0F, 124.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, floatArray0.length);
      
      String string1 = StringUtils.defaultString("!:+LZVY$t05cx>fStrings must not be null...", "z9}}|y8:n");
      assertNotNull(string1);
      assertEquals("!:+LZVY$t05cx>fStrings must not be null...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("u[E='8bd3OBX", 7, 7);
      assertNotNull(string2);
      assertEquals("...d...", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverseDelimited((String) null, '|');
      assertNull(string3);
      
      String string4 = StringUtils.repeat("8=mgMfhU#]m@F&uY{ ", (-3188));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: ", "!:+LZVY$t05cx>fStrings must not be null...", Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = "\n";
      String string1 = StringUtils.reverse("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = 3613;
      String string2 = StringUtils.rightPad("\n", 3613, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("\n", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) string2;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) "\n";
      // Undeclared exception!
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = (-367L);
      longArray0[3] = (-3864L);
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      longArray0[6] = (-835L);
      longArray0[7] = (-1L);
      String string1 = StringUtils.join(longArray0, '<');
      assertArrayEquals(new long[] {1L, (-1L), (-367L), (-3864L), 1L, 0L, (-835L), (-1L)}, longArray0);
      assertNotNull(string1);
      assertEquals("1<-1<-367<-3864<1<0<-835<-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, longArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "1<-1<-367<-3864<1<0<-835<-1";
      String string2 = StringUtils.substringAfter("1<-1<-367<-3864<1<0<-835<-1", (-2855));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.chomp("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertNotNull(string0);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string0);
      
      charSequenceArray0[0] = (CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'S');
      assertNotNull(string1);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }S", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }S");
      assertNotNull(charSequence0);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.chomp("gJ+H2ZH<\n");
      assertNotNull(string0);
      assertEquals("gJ+H2ZH<", string0);
      
      String string1 = StringUtils.deleteWhitespace("gJ+H2ZH<\n");
      assertNotNull(string1);
      assertEquals("gJ+H2ZH<", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("gJ+H2ZH<", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("gJ+H2ZH<\n", "gJ+H2ZH<");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.center("o", (-4), 'F');
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = StringUtils.substringAfterLast("Object varargs must not be null", "o");
      assertNotNull(string1);
      assertEquals("t be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different scopes");
      assertNotNull(string2);
      assertEquals("Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different scopes", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEnd("=)#|T1lZIOj?", "=)#|T1lZIOj?");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "t be null", (CharSequence) "Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different scopes", (-2740));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("k");
      assertNotNull(string2);
      assertEquals("k", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.center("...", 2366, ">)TAy^");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.truncate(string3, 2366, 2366);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "u|EG+";
      String string1 = StringUtils.removeIgnoreCase((String) null, "u|EG+");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = "52IoQsn";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "52IoQsn", (CharSequence) null, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.remove("8", "l$2#(c=x2L@799u(.");
      assertNotNull(string0);
      assertEquals("8", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) ']';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) ']';
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) ']';
      floatArray0[8] = (float) ']';
      String string1 = StringUtils.join(floatArray0, 'G');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 93.0F, 93.0F, 93.0F, 0.0F, 93.0F, 93.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("0.0G0.0G0.0G93.0G93.0G93.0G0.0G93.0G93.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "8", (CharSequence) "8");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("0.0G0.0G0.0G93.0G93.0G93.0G0.0G93.0G93.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("-", "8");
      assertNotNull(string2);
      assertEquals("-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("8", "LP7 9Z[]E0;&", 48);
      assertNotNull(string3);
      assertEquals("8", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = StringUtils.getFuzzyDistance("", "-", locale0);
      assertEquals(0, int1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("-", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-3935));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("", 50, 10);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      String string2 = StringUtils.upperCase("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both areorg.junitpioneer.jupiter.DisableIfTestFailsExtension", locale0);
      assertNotNull(string2);
      assertEquals("@DISABLEIFDISPLAYNAME REQUIRES THAT EITHER `CONTAINS` OR `MATCHES` IS SPECIFIED, BUT BOTH AREORG.JUNITPIONEER.JUPITER.DISABLEIFTESTFAILSEXTENSION", string2);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "@DISABLEIFDISPLAYNAME REQUIRES THAT EITHER `CONTAINS` OR `MATCHES` IS SPECIFIED, BUT BOTH AREORG.JUNITPIONEER.JUPITER.DISABLEIFTESTFAILSEXTENSION";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "@DISABLEIFDISPLAYNAME REQUIRES THAT EITHER `CONTAINS` OR `MATCHES` IS SPECIFIED, BUT BOTH AREORG.JUNITPIONEER.JUPITER.DISABLEIFTESTFAILSEXTENSION", (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both areorg.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertFalse(boolean0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string3 = StringUtils.join(iterator0, "5J&QZ0,POtN[)orhkqu");
      assertNotNull(string3);
      assertEquals("DISPLAY5J&QZ0,POtN[)orhkquFORMAT", string3);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string4 = StringUtils.substringBeforeLast("", (String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNumeric("Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      char char0 = '/';
      String string2 = StringUtils.join(doubleArray0, '/');
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(string2);
      assertEquals("-1.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNotNull(stringArray0);
      assertEquals(24, stringArray0.length);
      
      boolean boolean2 = StringUtils.startsWithAny("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", stringArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(24, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAllUpperCase("-1.0");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("k");
      assertNotNull(string2);
      assertEquals("k", string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.center("...", 2366, "`x");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.abbreviate(string3, "", (-2183));
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      String string0 = StringUtils.join(objectArray0, "y+yZ9'($9m");
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("java.lang.Object@3daf7219y+yZ9'($9mjava.lang.Object@3f23a625y+yZ9'($9mjava.lang.Object@32de5886y+yZ9'($9mjava.lang.Object@11d44dc5y+yZ9'($9mjava.lang.Object@572dda5cy+yZ9'($9mjava.lang.Object@759d4c12", "y+yZ9'($9m", 21);
      assertEquals((-1), int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("y+yZ9'($9m"));
      
      String string1 = StringUtils.join((List<?>) stack0, '2', (-1), (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.contains("y+yZ9'($9m"));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = 'Q';
      charArray0[4] = '2';
      charArray0[5] = '2';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'Q', 79, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 79
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      assertNotNull(string0);
      assertEquals("m9,?bDln!2cQsI]}?k", string0);
      
      String string1 = StringUtils.chop(" o");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith(" ", "m9,?bDln!2cQsI]}?k");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chop("^y<");
      assertNotNull(string2);
      assertEquals("^y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore("Y*Xn1F", 6);
      assertNotNull(string3);
      assertEquals("Y*Xn1F", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replace("&*+v$@N)~;VUazh<K", " ", "H<kY7,jf;FJ", 6);
      assertNotNull(string4);
      assertEquals("&*+v$@N)~;VUazh<K", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphaSpace("1iS");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("m9,?bDln!2cQsI]}?k");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean2 = StringUtils.equalsAny("&*+v$@N)~;VUazh<K", stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(13, stringArray0.length);
      
      String string5 = StringUtils.removeEnd("m9,?bDln!2cQsI]}?k", "e");
      assertNotNull(string5);
      assertEquals("m9,?bDln!2cQsI]}?k", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfterLast("$?Q2O5:~'\"wW:kl", "Y*Xn1F");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.rightPad("m9,?bDln!2cQsI]}?k", 35, 'J');
      assertNotNull(string7);
      assertEquals("m9,?bDln!2cQsI]}?kJJJJJJJJJJJJJJJJJ", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "m9,?bDln!2cQsI]}?k", (CharSequence) "m9,?bDln!2cQsI]}?k");
      assertNotNull(charSequence0);
      assertEquals("m9,?bDln!2cQsI]}?k", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string6));
      
      boolean boolean3 = StringUtils.isMixedCase(" o");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 4315);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("52IoQsn", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.rotate("ALy''t@0o", 50);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("\n", 50, (-37));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("m9,?bDln!2cQ", "5Y&LfW)kI)");
      assertNotNull(string2);
      assertEquals("5Y&LfW)kI)m9,?bDln!2cQ5Y&LfW)kI)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphaSpace("ALy''t@0o");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap((String) null, "5Y&LfW)kI)");
      assertNull(string3);
      
      String string4 = StringUtils.chop("@10HX[");
      assertNotNull(string4);
      assertEquals("@10HX", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("@10HX", "Y*Xn1FmaxWith cannot be negative", "b4B9");
      assertNull(stringArray0);
      
      String string5 = StringUtils.toRootUpperCase("@10HX[");
      assertNotNull(string5);
      assertEquals("@10HX[", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.containsWhitespace("@10HX[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "tyNaJln/t4H[}d;V3";
      stringArray0[2] = "";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = "tyNaJln/t4H[}d;V3";
      stringArray0[5] = "";
      stringArray0[6] = "tyNaJln/t4H[}d;V3";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("tyNaJln/t4H[}d;V3", string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.substring("Id,GWj-o+|M", (-9), (-9));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "tyNaJln/t4H[}d;V3", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "tyNaJln/t4H[}d;V3");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((float[]) null, 'P', 4, (-861));
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("", (-7));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "tyNaJln/t4H[}d;V3", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "Id,GWj-o+|M");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "tyNaJln/t4H[}d;V3", (char[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string4 = StringUtils.reverse("L~(");
      assertNotNull(string4);
      assertEquals("(~L", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.compare("", "tyNaJln/t4H[}d;V3");
      assertEquals((-17), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.leftPad("58e-av4GRb*K\u0002#/8!", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("58e-av4GRb*K\u0002#/8!");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("{arguments}");
      assertNotNull(string1);
      assertEquals("{arguments}", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("Strings must not be null");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{arguments}");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.leftPad("", 3621);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("W{wvo;>@-z11I");
      assertNotNull(string3);
      assertEquals("W{wvo;>@-z11I", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap("{arguments}", ' ');
      assertNotNull(string4);
      assertEquals(" {arguments} ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("DisabledUntil", string0, stringArray0);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " {arguments} ", (CharSequence) "DisabledUntil", 4048);
      assertEquals(11, int0);
      
      String string6 = StringUtils.rightPad("", (-995));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "W{wvo;>@-z11I", (CharSequence) "Strings must not be null", 11);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = "0EeAJ!Ip1offset cannot be negative";
      String string1 = StringUtils.substringAfter("0EeAJ!Ip1offset cannot be negative", 69);
      assertNotNull(string1);
      assertEquals("eAJ!Ip1offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Charset.forName("eAJ!Ip1offset cannot be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // eAJ!Ip1offset cannot be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.reverse("t|");
      assertNotNull(string0);
      assertEquals("|t", string0);
      
      String string1 = StringUtils.capitalize("[im^wD]44E2s");
      assertNotNull(string1);
      assertEquals("[im^wD]44E2s", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.upperCase("[im^wD]44E2s");
      assertNotNull(string2);
      assertEquals("[IM^WD]44E2S", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.uncapitalize("h");
      assertNotNull(string3);
      assertEquals("h", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 76;
      intArray0[1] = 76;
      intArray0[2] = 76;
      intArray0[3] = 99;
      intArray0[4] = 76;
      intArray0[5] = 76;
      intArray0[6] = 76;
      intArray0[7] = 76;
      String string4 = StringUtils.join(intArray0, '@');
      assertArrayEquals(new int[] {76, 76, 76, 99, 76, 76, 76, 76}, intArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(8, intArray0.length);
      
      String string5 = StringUtils.unwrap("\n", '@');
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", 99);
      assertNotNull(string6);
      assertEquals("h and Replace array lengths don't match: ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.left("\n", 2447);
      assertNotNull(string7);
      assertEquals("\n", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "\n", 57);
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.rotate("ALy''t@0o", 50);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("\n", 50, (-37));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "'t@0oALy'";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "ALy''t@0o";
      String string2 = StringUtils.abbreviate("", 50);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "'t@0oALy'";
      charSequenceArray0[6] = (CharSequence) "ALy''t@0o";
      charSequenceArray0[7] = (CharSequence) "'t@0oALy'";
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = "f";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = 10;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ALy''t@0o", "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", (-336), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 145
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = null;
      String string2 = StringUtils.truncate("f;", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast("", "f;");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "3Tx3FUKDS?#F_gpsMf";
      String string6 = StringUtils.center((String) null, (-1), "3Tx3FUKDS?#F_gpsMf");
      assertNull(string6);
      
      String string7 = StringUtils.abbreviate("ORtD_](8.\"J9-", 2265, 10);
      assertNotNull(string7);
      assertEquals("...(8.\"J9-", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = 3777;
      String string8 = StringUtils.repeat('\\', (-12));
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "3Tx3FUKDS?#F_gpsMf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("PSOJ!F", "");
      assertNotNull(string0);
      assertEquals("PSOJ!F", string0);
      assertFalse(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.replaceChars("cy16V", "JQK-Xu=.L195(;", "-");
      assertNotNull(string1);
      assertEquals("cy6V", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.trimToNull("...");
      assertNotNull(string2);
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverse("cy16V");
      assertNotNull(string3);
      assertEquals("V61yc", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((boolean[]) null, '@', (-1), (-1));
      assertNull(string4);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string5 = StringUtils.join((List<?>) arrayList0, '@', (-1), (-1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.countMatches((CharSequence) "JQK-Xu=.L195(;", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize("f;");
      assertNotNull(string3);
      assertEquals("f;", string3);
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trimToNull("f;");
      assertNotNull(string4);
      assertEquals("f;", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.mid("t3CH|H_<aX", (-1), (-635));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(0));
      
      String string6 = StringUtils.join((List<?>) stack0, '|', (-635), (-809));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(stack0.contains(0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "f;", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.join((Object[]) null, "t3CH|H_<aX");
      assertNull(string7);
      
      String string8 = StringUtils.substringBeforeLast((String) null, "2X12.xPh 2W7-");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringBeforeLast("", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!g5l4-g/MZ^,");
      assertNotNull(string0);
      assertEquals("!g5l4-g/mz^,", string0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", 'M');
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %dM", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %dM");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "!g5l4-g/mz^,";
      objectArray0[1] = (Object) "!g5l4-g/mz^,";
      objectArray0[2] = (Object) "!g5l4-g/mz^,";
      objectArray0[3] = (Object) "!g5l4-g/MZ^,";
      String string2 = StringUtils.join(objectArray0, 'q', 10, (-3058));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      
      String string3 = StringUtils.right("<1]L8,Mp0+;j+Qkh)", 10);
      assertNotNull(string3);
      assertEquals("+;j+Qkh)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("<1]L8,Mp0+;j+Qkh)", "+;j+Qkh)");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.getDigits("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "tf<\"..}W&]!C", (CharSequence) "", (int) (byte)0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "!g5l4-g/MZ^,", (CharSequence) "!g5l4-g/MZ^,");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Executonof '%s' took [%d] ms.", "9gk(lv24k^|G1ux");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("{98N{esT`7g", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{98N{esT`7g", (CharSequence) "{98N{esT`7g");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      
      String string2 = StringUtils.lowerCase("XfPC?E8!.e(", locale0);
      assertNotNull(string2);
      assertEquals("xfpc?e8!.e(", string2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "xfpc?e8!.e(", 0, 6);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.wrapIfMissing("{98N{esT`7g", ";uY'C6$oZ.<*&8$clS");
      assertNotNull(string3);
      assertEquals(";uY'C6$oZ.<*&8$clS{98N{esT`7g;uY'C6$oZ.<*&8$clS", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("{98N{esT`7g");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("{98N{esT`7g");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "}");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((byte[]) null, 'm');
      assertNull(string4);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string5 = StringUtils.join(iterator0, "XfPC?E8!.e(");
      assertNotNull(string5);
      assertEquals("DISPLAY", string5);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 76;
      intArray0[2] = (int) '@';
      String string0 = StringUtils.center("sc`/e7x~+\"vtlUu^", 9984, "C");
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("0~_1L`", "0~_1L`", "4>J.g9!#vTOm=$", (-925));
      assertNotNull(string1);
      assertEquals("4>J.g9!#vTOm=$", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, "C");
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceAll("", "0~_1L`", "sc`/e7x~+\"vtlUu^");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '|', 76, 1959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      assertNotNull(string0);
      assertEquals("m9,?bDln!2cQsI]}?k", string0);
      
      String string1 = StringUtils.chomp("J#*AZIz`U~;b");
      assertNotNull(string1);
      assertEquals("J#*AZIz`U~;b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("an unknown method", "J#*AZIz`U~;b");
      assertNotNull(string2);
      assertEquals("an unknown method", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "J#*AZIz`U~;b";
      charSequenceArray0[1] = (CharSequence) "J#*AZIz`U~;b";
      String string3 = StringUtils.strip("an unknown method");
      assertNotNull(string3);
      assertEquals("an unknown method", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "an unknown method";
      charSequenceArray0[3] = (CharSequence) "m9,?bDln!2cQsI]}?k";
      charSequenceArray0[4] = (CharSequence) "J#*AZIz`U~;b";
      charSequenceArray0[5] = (CharSequence) "J#*AZIz`U~;b";
      charSequenceArray0[6] = (CharSequence) "J#*AZIz`U~;b";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "an unknown method";
      stringArray0[1] = "J#*AZIz`U~;b";
      stringArray0[2] = "m9,?bDln!2cQsI]}?k";
      String string4 = StringUtils.replaceEachRepeatedly("I>LUqg$lA", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("I>LUqg$lA", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.unwrap("o", (String) null);
      assertNotNull(string5);
      assertEquals("o", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "o");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[5]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("J#*AZIz`U~;b", "i0Z0~#", "EW!%L3o");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", "rB2\"4NFs");
      assertEquals((-8), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "rB2\"4NFs");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.deleteWhitespace("QFrUP-^3jT#'3?");
      assertNotNull(string0);
      assertEquals("QFrUP-^3jT#'3?", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "QFrUP-^3jT#'3?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.", 's');
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String string0 = StringUtils.rotate("\n", 50);
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.mid("", (-37), (-37));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '@';
      String string2 = StringUtils.join(intArray0, '@');
      assertArrayEquals(new int[] {64}, intArray0);
      assertNotNull(string2);
      assertEquals("64", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.unwrap("", '@');
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfter("\n", 50);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      boolean boolean0 = priorityQueue0.add("org.junitpioneer.jupiter.CartesianProductTestExtens5on");
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtens5on"));
      
      boolean boolean1 = priorityQueue0.add("org.junitpioneer.jupiter.CartesianProductTestExtens5on");
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtens5on"));
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtens5on"));
      
      boolean boolean2 = priorityQueue0.add("org.junitpioneer.jupiter.CartesianProductTestExtens5on");
      assertTrue(boolean2);
      assertEquals(3, priorityQueue0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(priorityQueue0.contains("org.junitpioneer.jupiter.CartesianProductTestExtens5on"));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '.');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fx*jbXoOAw<50vs=4fx*jbXoOAw<50vs=4", "fx*jbXoOAw<50vs=4fx*jbXoOAw<50vs=4");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("'w/", 47);
      assertNotNull(string1);
      assertEquals("'w", string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = linkedList0.offerFirst(locale_Category0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_Category0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'r');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.upperCase("EZ60cF5.jy,Ik");
      assertNotNull(string0);
      assertEquals("EZ60CF5.JY,IK", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("EZ60cF5.jy,Ik");
      assertNotNull(string1);
      assertEquals("EZ60cF5.jy,Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "EZ60cF5.jy,Ik", "f|=M/p5@p");
      assertEquals(6, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'T';
      charArray0[2] = 'z';
      charArray0[3] = 'I';
      charArray0[4] = 'H';
      int int1 = StringUtils.indexOfAny((CharSequence) "EZ60cF5.jy,Ik", charArray0);
      assertArrayEquals(new char[] {'w', 'T', 'z', 'I', 'H'}, charArray0);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      String string2 = StringUtils.abbreviate("e", 6);
      assertNotNull(string2);
      assertEquals("e", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("PhX9);9L$iL*!l8}Z", 16, 'I');
      assertNotNull(string3);
      assertEquals("PhX9);9L$iL*!l8}Z", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.rotate("ALy''t@0o", 50);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("C", 50, (-37));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 76;
      intArray0[2] = (int) '@';
      boolean boolean0 = StringUtils.isAlphaSpace("sc`/e7x~+\"vtlUu^");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("N&mGFFl,t51GsFRpI@tm,e");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("N&mGFFl,t51GsFRpI@tm,e", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(16, stringArray0.length);
      
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.reverse("Object varargs must not be null");
      assertNotNull(string3);
      assertEquals("llun eb ton tsum sgrarav tcejbO", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.getDigits(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 23);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("o", 0);
      assertNotNull(string1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("o");
      assertNotNull(string2);
      assertEquals("O", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.removeEnd("doesn't contain any substring.", "U0J?l}p_1g&E5>7;cc%");
      assertNotNull(string3);
      assertEquals("doesn't contain any substring.", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString((String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "o", "[eT#UH)O8WNTdD/5K");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Could not provide arguments because of exception.");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Could not provide arguments because of exception.", charSequenceArray0);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("[eT#UH)O8WNTdD/5K", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.leftPad("P", 18);
      assertNotNull(string1);
      assertEquals("                 P", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("                 P");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trimToEmpty("o@EcCV");
      assertNotNull(string2);
      assertEquals("o@EcCV", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("P");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "                 P", (CharSequence) "                 P", 3659);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string4 = StringUtils.join(booleanArray0, 'Y');
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertNotNull(string4);
      assertEquals("trueYtrueYtrueYtrueYtrue", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, booleanArray0.length);
      
      String string5 = StringUtils.unwrap("", "<zOk~q@gb(x) >!]fHK");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("P"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayList0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(arrayList0.contains("P"));
      assertFalse(list0.contains("P"));
      
      String string6 = StringUtils.join(list0, '#', 18, (-196));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(arrayList0.contains("P"));
      assertFalse(list0.contains("P"));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("N`t^@e]yqkk: '('*.^");
      assertNotNull(string0);
      assertEquals("N`t^@e]yqkk: '('*.^", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("N`t^@e]yqkk: '('*.^", "N`t^@e]yqkk: '('*.^", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 4090, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("zQf.eNp><1Y", "G#w;m4} H");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.join((byte[]) null, 'm');
      assertNull(string2);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "zQf.eNp><1Y", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category1));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("zQf.eNp><1Y"));
      
      Iterator<Object> iterator1 = treeSet0.iterator();
      assertNotNull(iterator1);
      assertFalse(treeSet0.contains("zQf.eNp><1Y"));
      
      String string3 = StringUtils.join(iterator1, "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(treeSet0.contains("zQf.eNp><1Y"));
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("N");
      assertNotNull(string0);
      assertEquals("n", string0);
      
      String string1 = StringUtils.defaultString("{}", "N");
      assertNotNull(string1);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.removeStartIgnoreCase("N", "TcP@#");
      assertNotNull(string2);
      assertEquals("N", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "N";
      charSequenceArray0[1] = (CharSequence) "n";
      charSequenceArray0[2] = (CharSequence) "n";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[5] = (CharSequence) "{}";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "N";
      String string3 = StringUtils.wrap("n", (String) null);
      assertNotNull(string3);
      assertEquals("n", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray1[1] = (CharSequence) "n";
      charSequenceArray1[2] = (CharSequence) "N";
      charSequenceArray1[3] = (CharSequence) "{}";
      charSequenceArray1[4] = (CharSequence) "N";
      charSequenceArray1[5] = (CharSequence) "N";
      int int1 = StringUtils.indexOfAny((CharSequence) "N", charSequenceArray1);
      assertEquals(0, int1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertTrue(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(6, charSequenceArray1.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'I', (-439), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -439
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Test '%s' was supposed to run no longer than %d ms.", "Test '%s' was supposed to run no longer than %d ms.", "Test '%s' was supposed to run no longer than %d ms.");
      assertNotNull(string0);
      assertEquals("Test '%s' was supposed to run no longer than %d ms.", string0);
      
      String string1 = StringUtils.wrap("Test '%s' was supposed to run no longer than %d ms.", (String) null);
      assertNotNull(string1);
      assertEquals("Test '%s' was supposed to run no longer than %d ms.", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Test '%s' was supposed to run no longer than %d ms.", (CharSequence) "Test '%s' was supposed to run no longer than %d ms.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.chop("ALy''t@0o");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "Threshold must not be negative", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'E';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ALy''t@0", charArray0);
      assertArrayEquals(new char[] {'{', '{', 'E'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '';
      longArray0[1] = (long) '';
      longArray0[2] = (long) 'E';
      String string1 = StringUtils.stripToNull("kO/^!;P-*FBA(A?");
      assertNotNull(string1);
      assertEquals("kO/^!;P-*FBA(A?", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of anotherCould not provide arguments because of exception.");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Jty", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      long[] longArray0 = new long[1];
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.getDigits(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 23);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("o", 0);
      assertNotNull(string1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("o");
      assertNotNull(string2);
      assertEquals("O", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "o";
      charSequenceArray0[2] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[4] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      String string3 = StringUtils.stripAccents("f");
      assertNotNull(string3);
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "f";
      charSequenceArray0[6] = (CharSequence) "O";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.trim(" ");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.unwrap("tm,e", "");
      assertNotNull(string5);
      assertEquals("tm,e", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.repeat("f", 23);
      assertNotNull(string6);
      assertEquals("fffffffffffffffffffffff", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.mid((String) null, 2997, 2997);
      assertNull(string0);
      
      String string1 = StringUtils.stripToEmpty("{gn}<~gLR31Vf");
      assertNotNull(string1);
      assertEquals("{gn}<~gLR31Vf", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("9SGKdX~xE$NxA", 2997);
      assertNotNull(string2);
      assertEquals("~xE$NxA9SGKdX", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("/D26o7,=+'/QfkA", 2997, (-245));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "{gn}<~gLR31Vf";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string4 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[4] = (CharSequence) "{gn}<~gLR31Vf";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "{gn}<~gLR31Vf";
      charSequenceArray0[7] = (CharSequence) "/D26o7,=+'/QfkA";
      String string5 = "52IoQsn";
      String string6 = StringUtils.rotate("52IoQsn", (-245));
      assertNotNull(string6);
      assertEquals("52IoQsn", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      charSequenceArray0[8] = (CharSequence) "52IoQsn";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string7 = StringUtils.defaultString((String) null);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "{gn}<~gLR31Vf", (CharSequence) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.substringBefore("njw#a8\"n", (String) null);
      assertNotNull(string0);
      assertEquals("njw#a8\"n", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '{';
      charArray0[2] = '\'';
      charArray0[3] = 'm';
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[2], charArray0);
      assertArrayEquals(new char[] {'>', '{', '\'', 'm'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(4, charArray0.length);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = locale0.getDisplayScript(locale1);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.lowerCase("\n", locale1);
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      
      int int1 = StringUtils.compareIgnoreCase("\n", "");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.removeIgnoreCase("\n", "83o");
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringAfterLast("yHDM5`]w RlycC", 8192);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.removeStartIgnoreCase("w>eh--F<&a#dQfC#!5", "Failed to access security manager");
      assertNotNull(string7);
      assertEquals("w>eh--F<&a#dQfC#!5", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("yHDM5`]w RlycC");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.difference("=4DK=/&XBSl^}8f]7", "=4DK=/&XBSl^}8f]7");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "/@w't{bBgAn.WDgyr/", "=4DK=/&XBSl^}8f]7");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      String string0 = StringUtils.rotate("", 51);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("bl\"'<0EeAJ!Ip1", 41, 51);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "checkPermission", (CharSequence) "Strings must not be null");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("checkPermission");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "ad2E1fo", "Strings must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("...", (String) null, "...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Locale must not be null", "7zX$@:");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.ordinalIndexOf("...", "...", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("G,HKD(Gpr<4@LB", "G,HKD(Gpr<4@LB", "vG3o-/G@^{\"{4.o|=U");
      assertNull(stringArray0);
      
      String string0 = StringUtils.left("G,HKD(Gpr<4@LB", 285);
      assertNotNull(string0);
      assertEquals("G,HKD(Gpr<4@LB", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G,HKD(Gpr<4@LB", (CharSequence) "vG3o-/G@^{\"{4.o|=U");
      assertEquals(17, int0);
      
      String string1 = StringUtils.trimToNull("vG3o-/G@^{\"{4.o|=U");
      assertNotNull(string1);
      assertEquals("vG3o-/G@^{\"{4.o|=U", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.compare("vG3o-/G@^{\"{4.o|=U", "vG3o-/G@^{\"{4.o|=U", false);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.normalizeSpace("G,HKD(Gpr<4@LB");
      assertNotNull(string2);
      assertEquals("G,HKD(Gpr<4@LB", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'K';
      charArray0[2] = 'f';
      charArray0[3] = ')';
      charArray0[4] = '%';
      charArray0[5] = '$';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "G,HKD(Gpr<4@LB", charArray0);
      assertArrayEquals(new char[] {'U', 'K', 'f', ')', '%', '$'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      
      int int2 = StringUtils.length("vG3o-/G@^{\"{4.o|=U");
      assertEquals(19, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBetween("Cannot access member field ", "G,HKD(Gpr<4@LB");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric("vG3o-/G@^{\"{4.o|=U");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "vG3o-/G@^{\"{4.o|=U", 0);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string4 = StringUtils.leftPad("=CKXTG]t", 1245, "G,HKD(Gpr<4@LB");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((String[]) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "=CKXTG]t";
      boolean boolean3 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.repeat('|', (int) '|');
      assertNotNull(string0);
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", (CharSequence) "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 1436);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string1);
      assertEquals("DisabledUntil", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("R+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.leftPad("52IoQsn", 108);
      assertNotNull(string2);
      assertEquals("                                                                                                     52IoQsn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("R+");
      assertNotNull(string3);
      assertEquals("R+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap("DisabledUntil", '!');
      assertNotNull(string4);
      assertEquals("!DisabledUntil!", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("                                                                                                     52IoQsn", "DisabledUntil", stringArray0);
      assertNotNull(string5);
      assertEquals("DisabledUntil                                                                                                     52IoQsn", string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "!DisabledUntil!", (CharSequence) "DisabledUntil                                                                                                     52IoQsn", (int) (byte)54);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.rightPad("DisabledUntil", 89);
      assertNotNull(string6);
      assertEquals("DisabledUntil                                                                            ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) "DisabledUntil                                                                                                     52IoQsn", (CharSequence) "                                                                                                     52IoQsn");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.repeat('!', (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.upperCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "\n");
      assertNotNull(string2);
      assertEquals("\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "\n\n";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      
      int int0 = StringUtils.getFuzzyDistance(charSequenceArray0[1], "\n", locale1);
      assertEquals(1, int0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\n\n", (CharSequence) "\n");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "No proxy target ", (CharSequence) "tfwm3P:!U3KHvZERI");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.replacePattern("No proxy target ", "No proxy target ", "No proxy target ");
      assertNotNull(string3);
      assertEquals("No proxy target ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrap("\n", '*');
      assertNotNull(string4);
      assertEquals("*\n*", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.removeEnd("#$4t+s", "u");
      assertNotNull(string0);
      assertEquals("#$4t+s", string0);
      
      String string1 = StringUtils.join((List<?>) null, "#$4t+s", 52, 52);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.swapCase("Could not provide arguments because of exception.");
      assertNotNull(string0);
      assertEquals("cOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.", string0);
      
      String string1 = StringUtils.normalizeSpace("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;");
      assertNotNull(string1);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 76);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) 76;
      floatArray0[2] = (float) 76;
      floatArray0[3] = 0.0F;
      String string2 = StringUtils.rotate("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 76);
      assertNotNull(string2);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 864, 864);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", "...");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(76));
      
      String string4 = StringUtils.join((List<?>) null, (String) null, 278, 76);
      assertNull(string4);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 76.0F;
      objectArray0[1] = (Object) "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;";
      objectArray0[2] = (Object) "cOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.";
      objectArray0[3] = (Object) 76.0F;
      objectArray0[4] = (Object) "Could not provide arguments because of exception.";
      objectArray0[5] = (Object) 76.0F;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) 76.0F;
      String string5 = StringUtils.joinWith("-*M", objectArray0);
      assertNotNull(string5);
      assertEquals("76.0-*Mf;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;-*McOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.-*M76.0-*MCould not provide arguments because of exception.-*M76.0-*M-*M76.0", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("Failed to read file ", "Failed to read file ", (String) null);
      assertNotNull(string0);
      assertEquals("Failed to read file ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 36);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("CartesianProductTest can only take exactly one type of arguments source.", "");
      assertEquals(0.0, double0, 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Failed to read file ");
      assertNotNull(charBuffer0);
      assertEquals(20, charBuffer0.capacity());
      assertEquals(20, charBuffer0.remaining());
      assertEquals(20, charBuffer0.length());
      assertEquals("Failed to read file ", charBuffer0.toString());
      assertEquals(20, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviate((String) null, "Failed to read file ", 8192, (int) (byte)0);
      assertNull(string1);
      
      String string2 = StringUtils.replace("Failed to read file ", "pCGgX^~hkQd`?npCGgX^~hkQd`?n", "Failed to read file ");
      assertNotNull(string2);
      assertEquals("Failed to read file ", string2);
      assertTrue(string2.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) charBuffer0, (CharSequence) null, (int) (byte)0);
      assertEquals((-1), int2);
      assertEquals(20, charBuffer0.capacity());
      assertEquals(20, charBuffer0.remaining());
      assertEquals(20, charBuffer0.length());
      assertEquals("Failed to read file ", charBuffer0.toString());
      assertEquals(20, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "falseRtrueRfalseRfalseRfalseRfalse ");
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("v8Ns?ulmL^g\"C)2Uo}");
      assertNotNull(string1);
      assertEquals("V8NS?ULML^G\"C)2UO}", string1);
      
      String string2 = StringUtils.uncapitalize("E>G3v`O]\"/ dIEStrings must not be null");
      assertNotNull(string2);
      assertEquals("e>G3v`O]\"/ dIEStrings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "V8NS?ULML^G\"C)2UO}", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", "", (-3351), 0);
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replace("pCGgX^~hkQd`?npCGgX^~hkQd`?n", "v8Ns?ulmL^g\"C)2Uo}", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertEquals("pCGgX^~hkQd`?npCGgX^~hkQd`?n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "e>G3v`O]\"/ dIEStrings must not be null", (CharSequence) null, Integer.MIN_VALUE);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      
      boolean boolean0 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "&qC-Ce(btOD[}");
      assertNotNull(string0);
      assertEquals(")C>B#i< [%w$.", string0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains("&qC-Ce(btOD[}"));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ")C>B#i< [%w$.", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = StringUtils.join((float[]) null, '&', 32, 46);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Q?aP:R`m|+>", 1914);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'o';
      charArray1[1] = 'm';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray1);
      assertArrayEquals(new char[] {'o', 'm'}, charArray1);
      assertFalse(boolean2);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charArray1.length);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("&qC-Ce(btOD[}", (CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "&qC-Ce(btOD[}", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean4);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(0, charArray0.length);
      
      String string3 = StringUtils.reverse(")C>B#i< [%w$.");
      assertNotNull(string3);
      assertEquals(".$w%[ <i#B>C)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'P');
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 2050);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(6, stringArray0.length);
      
      String string3 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("Failed to read file ", "Failed to read file ", (String) null);
      assertNotNull(string0);
      assertEquals("Failed to read file ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 36);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("CartesianProductTest can only take exactly one type of arguments source.", "");
      assertEquals(0.0, double0, 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Failed to read file ");
      assertNotNull(charBuffer0);
      assertEquals(20, charBuffer0.length());
      assertEquals(20, charBuffer0.remaining());
      assertEquals(20, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Failed to read file ", charBuffer0.toString());
      assertEquals(20, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)34;
      String string1 = StringUtils.leftPad("|:;W8mGj`J~#F>`h", (int) (byte)54);
      assertNotNull(string1);
      assertEquals("                                      |:;W8mGj`J~#F>`h", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string2);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Failed to read file ", (CharSequence) "", (int) (byte)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("maxWith cannot be negative");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "maxWith cannot be negative", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals(20, charBuffer0.length());
      assertEquals(20, charBuffer0.remaining());
      assertEquals(20, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Failed to read file ", charBuffer0.toString());
      assertEquals(20, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      
      int int2 = StringUtils.compareIgnoreCase("Failed to read file ", "", false);
      assertEquals(20, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("tJ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.overlay("olWso:1$o?1Vs!@JvT", "tJ", 16, (-585));
      assertNotNull(string0);
      assertEquals("tJvT", string0);
      
      boolean boolean1 = StringUtils.isMixedCase("tJvT");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("tJvT", "%d5VUr:.C&9", "c*3yGjSj{UN");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("suppress4h", 'Y');
      assertNotNull(string0);
      assertEquals("suppress4h", string0);
      
      String string1 = StringUtils.strip("suppress4h");
      assertNotNull(string1);
      assertEquals("suppress4h", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("suppress4h");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("suppress4h");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "suppress4h", (CharSequence) "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.join((float[]) null, '[', (-249), (-249));
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("suppress");
      assertNotNull(string3);
      assertEquals("suppress", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isNumericSpace("suppress");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.unwrap("Q", ")fKk@~.#!@iqAFhiJO");
      assertNotNull(string4);
      assertEquals("Q", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[1] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', 'z', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', 'z', '\u0000'}, charArray0);
      assertNotNull(string2);
      assertEquals("oz\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', 'z', '\u0000'}, charArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Xm5ek =DZ ~t=m7r", "", (-30));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("oz\u0000", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", (-30));
      assertNotNull(string4);
      assertEquals("oz\u0000", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((boolean[]) null, 'z');
      assertNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("Xm5ek =DZ ~t=m7r", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.leftPad("", 2118, "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "oz\u0000", 0);
      assertEquals(2, int0);
      
      String string9 = StringUtils.swapCase((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string10);
      assertEquals("Xm5ek =DZ ~t=m7r", string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.compare("", "(/|188snT3");
      assertEquals((-10), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-10);
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) 'o';
      longArray0[3] = (long) 2118;
      longArray0[4] = (long) 2118;
      longArray0[5] = (long) 'o';
      longArray0[6] = (long) 'z';
      longArray0[7] = (long) 'z';
      longArray0[8] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'u', 2, 1450);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.rightPad((String) null, 0, "f;");
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "P+v-C6JkH8J");
      assertNotNull(string2);
      assertEquals("P+v-C6JkH8J", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat('Z', 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("f;", 'F');
      assertNotNull(string4);
      assertEquals("f;", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("P+v-C6JkH8J");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfterLast((String) null, "f;");
      assertNull(string3);
      
      String string4 = StringUtils.center((String) null, (-1), "3Tx3FUKDS?#F_gpsMf");
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("ORtD_](8.\"J9-", 2265, 10);
      assertNotNull(string5);
      assertEquals("...(8.\"J9-", string5);
      assertFalse(string5.equals((Object)string0));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) " was expected to be static: ");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty("...(8.\"J9-", supplier0);
      assertNotNull(string7);
      assertEquals("...(8.\"J9-", string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      
      String[] stringArray0 = new String[0];
      String string8 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string8);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("9$E6-_GJG }+", "...(8.\"J9-", (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.difference("VEi8w$]yL?\"$C8kFT", "VEi8w$]yL?\"$C8kFT");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter((String) null, "VEi8w$]yL?\"$C8kFT");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "VEi8w$]yL?\"$C8kFT");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "VEi8w$]yL?\"$C8kFT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compare("", "Jk3Pk(MRgeD>vOtnG- ", false);
      assertEquals((-19), int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[3] = (Object) "";
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.substringBetween("Strings must not be null", "e", "TpT");
      assertNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "Strings must not be null";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray1[2] = object1;
      objectArray1[3] = (Object) "Strings must not be null";
      objectArray1[4] = (Object) "";
      objectArray1[5] = (Object) "Strings must not be null";
      objectArray1[6] = (Object) "Jk3Pk(MRgeD>vOtnG- ";
      objectArray1[7] = (Object) "e";
      objectArray1[8] = (Object) "";
      String string2 = StringUtils.join(objectArray1, '6', 5039, 24);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(objectArray1, objectArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(9, objectArray1.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.lastIndexOfAny("Jk3Pk(MRgeD>vOtnG- ", charSequenceArray0);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "h");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.rightPad((String) null, 2073);
      assertNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("", "8:!5j");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string1);
      assertEquals("DisabledUntil", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("R+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEnd("R+", "DisabledUntil");
      assertNotNull(string2);
      assertEquals("R+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "R+", (CharSequence) "DisabledUntil", 65536);
      assertEquals(13, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      StringUtils.repeat(string0, 65536);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'P');
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      String string1 = StringUtils.mid("4GgOviHXMS", 10, 1890);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 2050);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, int1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(6, stringArray0.length);
      
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'P', 1, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(")C>B#i< [%w$.", 46);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      assertNotNull(string0);
      assertEquals("m9,?bDln!2cQsI]}?k", string0);
      
      String string1 = StringUtils.chomp("J#*AZIz`U~;b");
      assertNotNull(string1);
      assertEquals("J#*AZIz`U~;b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited("{index}", '}');
      assertNotNull(string2);
      assertEquals("{index", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("{[0-9]+}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("J#*AZIz`U~;b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Hz%{cmYo 8", (CharSequence) "{[0-9]+}");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.join((float[]) null, '}', 3573, 3573);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray0 = StringUtils.split("{index}", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      assertNotNull(string0);
      assertEquals("m9,?bDln!2cQsI]}?k", string0);
      
      String string1 = StringUtils.defaultString(" on ", "{[0-9]+}");
      assertNotNull(string1);
      assertEquals(" on ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("J#*AZIz`U~;b");
      assertNotNull(string2);
      assertEquals("J#*AZIz`U~;b", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverseDelimited("{index}", '}');
      assertNotNull(string3);
      assertEquals("{index", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%\"Us(Ix6o;PiBOS^;";
      stringArray0[1] = "Hz%{cmYo 8";
      stringArray0[2] = "Minimum abbreviation width is %d";
      stringArray0[3] = "f";
      stringArray0[4] = "{index}";
      stringArray0[5] = "Hz%{cmYo 8";
      stringArray0[6] = "J#*AZIz`U~;b";
      stringArray0[7] = "3MFG";
      String string4 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string4);
      assertEquals(8, stringArray0.length);
      
      String string5 = StringUtils.substringBefore("{index", "~5-;8ar-p$_wli3K,QRsuppress");
      assertNotNull(string5);
      assertEquals("{index", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isWhitespace("Hz%{cmYo 8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.repeat("", "f;", 35);
      assertNotNull(string0);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string0);
      
      String[] stringArray0 = StringUtils.split("k/Qe,]H=MeY,", 'c');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("_k:225Dc3KzXO");
      assertNotNull(string1);
      assertEquals("_k:225Dc3KzXO", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("9SGKdX~xE$NxA", (-1410));
      assertNotNull(string2);
      assertEquals("~xE$NxA9SGKdX", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.mid("_k:225Dc3KzXO", (-1), (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.defaultString("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.rightPad("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 0);
      assertNotNull(string5);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substring("", (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      
      String string7 = StringUtils.repeat('O', (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.substring("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 0);
      assertNotNull(string8);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      
      String string9 = StringUtils.replaceChars("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", (String) null, "");
      assertNotNull(string9);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string9);
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.rightPad("Threshold must not be negative", (-1223), 'p');
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", "o", (int) (short) (-98));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("o");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", (CharSequence) "o");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-1799));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, '#');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, booleanArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.replacePattern("", "b(as)!Pt9EiSQe", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.substringAfterLast("Locale must not be null", 2089);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Locale must not be null", '^');
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("", 0, '^');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Locale must not be null", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "a:4J", "");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '', 761, 1141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 761
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("Xm5ek =DZ ~t=m7r"));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.leftPad("Xk.|7}r ]9` {{)Y_$)", (-1), "__3");
      assertNotNull(string4);
      assertEquals("Xk.|7}r ]9` {{)Y_$)", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "Xk.|7}r ]9` {{)Y_$)";
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      String string5 = StringUtils.lowerCase("", locale0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "";
      String string6 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", "", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 874.43437;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 'z';
      doubleArray0[6] = (double) ':';
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) ':';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '=', (-1), 3006);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3659, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", charSequenceArray0[2]);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.right("o2o']NI", 6);
      assertNotNull(string3);
      assertEquals("2o']NI", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int3 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad("2o']NI", (-15));
      assertNotNull(string4);
      assertEquals("2o']NI", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBefore("", "Sd~%=w");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.substringAfter("\u0005oxzWf!ULU56Fic|o:", " falseRtrueRfalseRfalseRfalseRfalse");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("CRb|>`??", 4948, "CRb|>`??");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("CRb|>`??", 50);
      assertNotNull(string2);
      assertEquals("CRb|>`??", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "CRb|>`??", 10);
      assertEquals(8, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "CRb|>`??", 8);
      assertEquals(8, int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      String string3 = StringUtils.join(booleanArray0, 'S');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, false, true}, booleanArray0));
      assertNotNull(string3);
      assertEquals("falseStrueSfalseSfalseStrueStrueStrueSfalseStrue", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, booleanArray0.length);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "CRb|>`??", (CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNumeric("Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, '/');
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("-1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNotNull(stringArray0);
      assertEquals(24, stringArray0.length);
      
      String string2 = StringUtils.right("-1.0", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.normalizeSpace("Unable to create a resource from `%s`");
      assertNotNull(string3);
      assertEquals("Unable to create a resource from `%s`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean3 = StringUtils.endsWith("Strings must not be null", "Unable to create a resource from `%s`");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "\n\n", true);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\n\n", (CharSequence) "\n\n", 2612);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.defaultIfEmpty((String) null, "cZl7(o:%Z=[zEYg82zZSearch and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals("cZl7(o:%Z=[zEYg82zZSearch and Replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.defaultString("\n\n", "cZl7(o:%Z=[zEYg82zZSearch and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertEquals("\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBefore((String) null, 1385);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.trimToEmpty("`b>C7xhXo/Z?@9I");
      assertNotNull(string5);
      assertEquals("`b>C7xhXo/Z?@9I", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((float[]) null, 'y', 16, 2612);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.swapCase("Could not provide arguments because of exception.");
      assertNotNull(string0);
      assertEquals("cOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.", string0);
      
      String string1 = StringUtils.normalizeSpace("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;");
      assertNotNull(string1);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", 76);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) 76;
      floatArray0[2] = (float) 76;
      floatArray0[3] = 0.0F;
      String string2 = StringUtils.join(floatArray0, 'N', 76, 76);
      assertArrayEquals(new float[] {76.0F, 76.0F, 76.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, floatArray0.length);
      
      String string3 = StringUtils.removeAll("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", " to be an annotation type");
      assertNotNull(string3);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.center("", 15, 'N');
      assertNotNull(string4);
      assertEquals("NNNNNNNNNNNNNNN", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripToEmpty("ALy''t@0o");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllLowerCase("cOULD NOT PROVIDE ARGUMENTS BECAUSE OF EXCEPTION.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.replaceIgnoreCase((String) null, "Could not provide arguments because of exception.", "Strings must not be null");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      String string7 = StringUtils.repeat((String) null, 0);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ALy''t@0o", 'N');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.replaceAll("Jkk](0dN8!APT@BN5K", " to be an annotation type", (String) null);
      assertNotNull(string8);
      assertEquals("Jkk](0dN8!APT@BN5K", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.swapCase("Expected self type: %|~<:9!8 oO!Xw");
      assertNotNull(string9);
      assertEquals("eXPECTED SELF TYPE: %|~<:9!8 Oo!xW", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      charArray0[8] = 'N';
      String string10 = StringUtils.join(charArray0, 'N', 15, 0);
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertNotNull(string10);
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = "f";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "f", 55, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = StringUtils.abbreviate("uE='8bdOB", 7, 7);
      assertNotNull(string0);
      assertEquals("...bdOB", string0);
      
      String string1 = StringUtils.stripToNull("...bdOB");
      assertNotNull(string1);
      assertEquals("...bdOB", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace(">/");
      assertNotNull(string2);
      assertEquals(">/", string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("k/Qe,]H=MeY,");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.prependIfMissing((String) null, ">/", (CharSequence[]) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(">/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.abbreviateMiddle("u3pN?qAjI0$k/Qe,]H=MeY,", "f%K{N$fq]C", (-1));
      assertNotNull(string4);
      assertEquals("u3pN?qAjI0$k/Qe,]H=MeY,", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringBefore("\r", "2bpOvnfc!&<t4K");
      assertNotNull(string5);
      assertEquals("\r", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("S1xOJ22.H^]6uu");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("L", '(');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("L", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Object) "");
      assertTrue(boolean0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(""));
      
      boolean boolean1 = stack1.addAll((Collection<?>) stack0);
      assertTrue(boolean1);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(""));
      assertTrue(stack1.contains(""));
      
      Iterator<Object> iterator0 = stack1.iterator();
      assertNotNull(iterator0);
      assertNotSame(stack1, stack0);
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.contains(""));
      
      String string0 = StringUtils.join((List<?>) stack1, 'h', 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(stack1, stack0);
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.contains(""));
      assertFalse(stack1.contains(0));
      
      int int0 = StringUtils.compareIgnoreCase("XAaJ#|G <m", "$g>`m9-Dd GYz9Q}@]");
      assertEquals(84, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("btOD[})C>B#i< [%w$.", "g>`m9-Dd GYz9Q}@]", 0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'h');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.join((float[]) null, 'i', (int) 'i', 3573);
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string3 = StringUtils.unwrap((String) null, "");
      assertNull(string3);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      String string4 = StringUtils.difference("org.junitpioneer.jupiter.SystemPropertyExtension", "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string0));
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(string0));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends String>) linkedList1);
      assertFalse(boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(string0));
      assertFalse(linkedList1.contains(string0));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.contains(string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("}0Y5i|& :qD/tw", "}0Y5i|& :qD/tw");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.truncate("s.#`0/", 2);
      assertNotNull(string1);
      assertEquals("s.", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace("s.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootUpperCase("}0Y5i|& :qD/tw");
      assertNotNull(string2);
      assertEquals("}0Y5I|& :QD/TW", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("5<v}*Ln4Jn", (-3278));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeStartIgnoreCase("Rrq~Ks", "TMW5Mrp#J~e|O)$kCSN");
      assertNotNull(string4);
      assertEquals("Rrq~Ks", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[2] = (float) 97;
      floatArray0[3] = (float) (-3278);
      String string5 = StringUtils.join(floatArray0, 'x', 97, 11);
      assertArrayEquals(new float[] {2.0F, 0.0F, 97.0F, (-3278.0F)}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, floatArray0.length);
      
      String string6 = StringUtils.leftPad("TMW5Mrp#J~e|O)$kCSN", (-3278));
      assertNotNull(string6);
      assertEquals("TMW5Mrp#J~e|O)$kCSN", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.remove("t", (String) null);
      assertNotNull(string0);
      assertEquals("t", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("t");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, 'm');
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)68;
      String string2 = StringUtils.join(shortArray0, '0', (int) (short)68, (int) (short)68);
      assertArrayEquals(new short[] {(short)68}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", "W@KyT/M");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "t");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.capitalize("maxWith cannot b negative");
      assertNotNull(string0);
      assertEquals("MaxWith cannot b negative", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "MaxWith cannot b negative", (CharSequence) "MaxWith cannot b negative", (-2203));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "E{I :o5;~93Gx";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("E{I :o5;~93Gx", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.defaultString("LrGZVW$", "E{I :o5;~93Gx");
      assertNotNull(string2);
      assertEquals("LrGZVW$", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("<(wU", (int) (short) (-2043), 4);
      assertNotNull(string3);
      assertEquals("<(wU", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.reverseDelimited("E{I :o5;~93Gx", 'D');
      assertNotNull(string4);
      assertEquals("E{I :o5;~93Gx", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat((String) null, (int) (short)30);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 35, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String string1 = StringUtils.reverseDelimited("k>~y", 'L');
      assertNotNull(string1);
      assertEquals("k>~y", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((float[]) null, 'o', (-664), 549);
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("T(vt", 117);
      assertNotNull(string3);
      assertEquals("                                                                                                                T(vt", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "T(vt", charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("T(vt", "                                                                                                                T(vt");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "T(vt", charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      
      String string4 = StringUtils.reverse("j\r");
      assertNotNull(string4);
      assertEquals("\rj", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.compare("\"yt6*i6/V-(y/[ta]]", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot cache the value of a method with parameters: ", '>');
      assertNotNull(string0);
      assertEquals("Cannot cache the value of a method with parameters: ", string0);
      
      String string1 = StringUtils.toRootLowerCase("Niv$nd|a*$skG");
      assertNotNull(string1);
      assertEquals("niv$nd|a*$skg", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare(" in an array of ", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("u\u0003-V6XVvlv;G", "dI|&<\"YF$p1]5/i");
      assertNotNull(string0);
      assertEquals("u\u0003-V6XVvlv;G", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "u\u0003-V6XVvlv;G");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "u\u0003-V6XVvlv;G", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.toRootLowerCase("dI|&<\"YF$p1]5/i");
      assertNotNull(string2);
      assertEquals("di|&<\"yf$p1]5/i", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("dI|&<\"YF$p1]5/i", "tGnSn");
      assertNotNull(string3);
      assertEquals("dI|&<\"YF$p1]5/i", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.substringBetween("\r", "\r", "maxWith cannot be negative");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Ssring must Eot be n|ll", "Ssring must Eot be n|ll");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "}");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("}");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "}", (CharSequence) "}");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad("nother", 9984, 'q');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.center("}", 9984, "Locale must not be null");
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2043);
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)81;
      shortArray0[3] = (short)64;
      String string0 = StringUtils.join(shortArray0, '\\', (int) (short)81, 7);
      assertArrayEquals(new short[] {(short) (-2043), (short)64, (short)81, (short)64}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(4, shortArray0.length);
      
      String[] stringArray0 = StringUtils.split("", "", 3094);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)30;
      shortArray0[1] = (short)81;
      shortArray0[2] = (short)992;
      shortArray0[3] = (short)81;
      shortArray0[4] = (short)30;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\\', (int) (short)81, 754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string0);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string0);
      
      String string1 = StringUtils.normalizeSpace("WF");
      assertNotNull(string1);
      assertEquals("WF", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("CartesianProductTest can only take exactly one type of arguments source.", 2829, 44);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "CartesianProductTest can only take exactly one type of arguments source.", (CharSequence) "CartesianProductTest can only take exactly one type of arguments source.");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("CartesianProductTest can only take exactly one type of arguments source.", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.remove((String) null, "CartesianProductTest can only take exactly one type of arguments source.");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("WF");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.center("", 182, '9');
      assertNotNull(string5);
      assertEquals("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean3 = StringUtils.endsWith((CharSequence) null, "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      String[] stringArray1 = StringUtils.split("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "KTQ", (-3035));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.join((Iterable<?>) null, "alVlxvl&C*AV");
      assertNull(string6);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 182;
      longArray0[1] = (long) (-3035);
      longArray0[2] = (long) '9';
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      String string7 = StringUtils.join(longArray0, '$', 684, 44);
      assertArrayEquals(new long[] {182L, (-3035L), 57L, 0L, 0L}, longArray0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.lowerCase("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripToNull("O4z4H:Ge\fAl-Lo]>");
      assertNotNull(string1);
      assertEquals("O4z4H:Ge\fAl-Lo]>", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("N");
      assertNotNull(string2);
      assertEquals("N", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.uncapitalize("N");
      assertNotNull(string3);
      assertEquals("n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString("n", "\n");
      assertNotNull(string4);
      assertEquals("n", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("", 4, 4);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.reverseDelimited("l~HD{@Y7)R>", 'f');
      assertNotNull(string6);
      assertEquals("l~HD{@Y7)R>", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.repeat("N", 2);
      assertNotNull(string7);
      assertEquals("NN", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Object varargs must not be null");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare((String) null, "cZl7(o:%Z=[zEYg82zZ");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("F~:bs&~8FlgSQP%bbgX", (String) null);
      assertNotNull(string2);
      assertEquals("F~:bs&~8FlgSQP%bbgX", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.replaceOnce("F~:bs&~8FlgSQP%bbgX", "F~:bs&~8FlgSQP%bbgX", "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string3);
      assertEquals("F~:bs&~8FlgSQP%bbgX", string3);
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "cZl7(o:%Z=[zEYg82zZ");
      assertNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '';
      charArray0[2] = '{';
      charArray0[3] = '-';
      charArray0[0] = '6';
      charArray0[5] = 'i';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "cZl7(o:%Z=[zEYg82zZ", charArray0);
      assertArrayEquals(new char[] {'6', '', '{', '-', '\u0000', 'i'}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      
      String string5 = StringUtils.difference("", "Object varargs must not be null");
      assertNotNull(string5);
      assertEquals("Object varargs must not be null", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.difference((String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.right((String) null, 40);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "\r", (-1));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("\r", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.chomp("BTqG~gY,g\nnHYUjPl");
      assertNotNull(string2);
      assertEquals("BTqG~gY,g\nnHYUjPl", string2);
      assertFalse(string2.equals((Object)string1));
      
      Class<Locale.Category> class0 = Locale.Category.class;
      ServiceLoader<Locale.Category> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      Consumer<Locale.Category> consumer0 = (Consumer<Locale.Category>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.loadInstalled(class2);
      assertNotNull(serviceLoader1);
      assertSame(class2, class1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.loadInstalled(class1);
      assertNotNull(serviceLoader2);
      assertSame(class1, class2);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, "\r");
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals("java.util.ServiceLoader[java.util.Locale$Category]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-2906L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      String string4 = StringUtils.join(longArray0, 'N');
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-2906L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(string4);
      assertEquals("-1N-1N-1N-1N-1N-2906N-1N-1N-1", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("uYwaR0U,(!^&saU", "uYwaR0U,(!^&saU", "uYwaR0U,(!^&saU");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // uYwaR0U,(!^&saU
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", "cZl7(o:%Z=[zEYg82zZ");
      assertNotNull(string0);
      assertEquals("cZl7(o:%Z=[zEYg82zZSearch and Replace array lengths don't match: cZl7(o:%Z=[zEYg82zZ", string0);
      
      String string1 = StringUtils.substringAfterLast("\n\n", "org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("%QYs7m10PDJa", 13, ",");
      assertNotNull(string2);
      assertEquals("%QYs7m10PDJa,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("Strings must not be", 568, 568);
      assertNotNull(string3);
      assertEquals("Strings must not be", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat(')', 568);
      assertNotNull(string4);
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      double double0 = StringUtils.getJaroWinklerDistance("5eZ)Il^X", "Search and Replace array lengths don't match: ");
      assertEquals(0.43, double0, 0.01);
      
      String string5 = "OG1|h%s`5L ";
      String string6 = StringUtils.replace("OG1|h%s`5L ", " on ", "h8_Go]8=@XDDL");
      assertNotNull(string6);
      assertEquals("OG1|h%s`5L ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.ordinalIndexOf("Strings must not be", "OG1|h%s`5L ", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.substringAfterLast((String) null, (-1));
      assertNull(string7);
      
      String string8 = StringUtils.reverse("Strings must not be");
      assertNotNull(string8);
      assertEquals("eb ton tsum sgnirtS", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", ",aEN|T2N._LN{Dt)'q", "cZl7(o:%Z=[zEYg82zZ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 11
         // ,aEN|T2N._LN{Dt)'q
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.removeStart("", "X\"$=oo4RT");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("", 1103, 2);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("", 0, 2249);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(2, charSequenceArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "X\"$=oo4RT";
      stringArray0[1] = "";
      stringArray0[2] = "n{xl$6;@";
      stringArray0[3] = "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      stringArray0[4] = "";
      stringArray0[5] = "|O";
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      
      String string6 = StringUtils.replaceChars("IpM,\"E+_WJ|+($:'Hhz'R", '-', '');
      assertNotNull(string6);
      assertEquals("IpM,\"E+_WJ|+($:'Hhz'R", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "X\"$=oo4RT", (CharSequence) "IpM,\"E+_WJ|+($:'Hhz'R");
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Locale> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string7 = StringUtils.join(iterator0, '-');
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'K', 15, 15);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "checkPermission";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("checkPermission", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.rotate("", 182);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Locale must not be nullLocale must not be null", "offet;cannot beEnegative", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("Locale must not be nullLocale must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ";:");
      assertTrue(boolean0);
      
      String string3 = StringUtils.left("offet;cannot beEnegative", 160);
      assertNotNull(string3);
      assertEquals("offet;cannot beEnegative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string4 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string4);
      assertEquals("vs", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((Object[]) null, 'Y', 8, (-2798));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.unwrap("\n", '`');
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "o", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeEnd((String) null, "Kr|(l!8");
      assertNull(string3);
      
      String string4 = StringUtils.defaultString("(Bx");
      assertNotNull(string4);
      assertEquals("(Bx", string4);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.stripEnd("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", (String) null);
      assertNotNull(string0);
      assertEquals("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", string0);
      
      boolean boolean0 = StringUtils.isEmpty("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", "*h");
      assertNotNull(string1);
      assertEquals("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean2 = hashSet0.add(locale_Category0);
      assertTrue(boolean2);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(hashSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean3 = hashSet0.add(locale_Category1);
      assertFalse(boolean3);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(hashSet0.contains(locale_Category0));
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>(hashSet0);
      assertNotNull(arrayDeque0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(hashSet0.contains(locale_Category0));
      assertTrue(arrayDeque0.contains(locale_Category0));
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean4 = hashSet0.add(locale_Category2);
      assertTrue(boolean4);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(hashSet0.contains(locale_Category2));
      
      boolean boolean5 = StringUtils.endsWithAny("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", stringArray0);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.trimToEmpty(":Lw-5q  __kd7PQx");
      assertNotNull(string3);
      assertEquals(":Lw-5q  __kd7PQx", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((float[]) null, ',', 100, (-1679));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-169);
      intArray0[2] = 0;
      String string1 = StringUtils.join(intArray0, 'H', Integer.MAX_VALUE, (-534));
      assertArrayEquals(new int[] {0, (-169), 0}, intArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, intArray0.length);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = "-HDag\\B";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("2Jc]6/'b!p>\"", (-909), (-2641));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.leftPad("N`t^#", (-1));
      assertNotNull(string0);
      assertEquals("N`t^#", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "N`t^#", (CharSequence) "N`t^#", 98);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "N`t^#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("N`t^#", 'G');
      assertNotNull(string1);
      assertEquals("GN`t^#G", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.center("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (-1153), "u(J~%>L8U]@cf");
      assertNotNull(string0);
      assertEquals("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "");
      assertNotNull(string1);
      assertEquals("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate((String) null, "Minimum abbreviation width with offset is %d", (-1153));
      assertNull(string2);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, ']');
      assertArrayEquals(new float[] {(-1.0F), 2443.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("-1.0]2443.0]0.0", string0);
      assertEquals(3, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "-1.0]2443.0]0.0", (CharSequence) "-1.0]2443.0]0.0");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "-1.0]2443.0]0.0", (CharSequence) "-1.0]2443.0]0.0", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("/w*w ^+Ar)FIPmwtV9");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /w*w ^+Ar)FIPmwtV9
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "=-oR(z:)?8zrl");
      assertNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("=-oR(z:)?8zrl"));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String string3 = StringUtils.join(intArray0, 'H', 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      
      String string4 = StringUtils.trim("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isWhitespace("=-oR(z:)?8zrl");
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviate("-HDagB", (-2209), 1437);
      assertNotNull(string5);
      assertEquals("-HDagB", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.replaceAll((String) null, (String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.stripStart("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", (String) null);
      assertNotNull(string7);
      assertEquals("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string8 = StringUtils.defaultString("=-oR(z:)?8zrl");
      assertNotNull(string8);
      assertEquals("=-oR(z:)?8zrl", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'H', 0, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("`AuEJaHmb[ 7", 322, "`AuEJaHmb[ 7");
      assertNotNull(string1);
      assertEquals("`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "`AuEJaHmb[ 7", 1552);
      assertEquals(12, int0);
      
      String string2 = StringUtils.right("`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[", 16);
      assertNotNull(string2);
      assertEquals("Hmb[ 7`AuEJaHmb[", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("", "+_WJ|+($:'Hhz'R", 21);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("`AuEJaHmb[ 7", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("oPSOJ!Forg.easymock.bytebuddy.asm.Advice$WithCustomMapping", (String) null);
      assertNotNull(string0);
      assertEquals("oPSOJ!Forg.easymock.bytebuddy.asm.Advice$WithCustomMapping", string0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 416, '-');
      assertNotNull(string1);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("Strings must not be null", 416);
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("Strings must not be null", "maxWith cannot be negative", 55);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.remove("maxWith cannot be negative", '-');
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.compare((String) null, "The resource returned by [%s] was null, which is not allowed", true);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "maxWith cannot be negative", charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '-'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      String string4 = StringUtils.normalizeSpace("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
      assertNotNull(string4);
      assertEquals("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringBetween("maxWith cannot be negative", "falseRtrueRfalse");
      assertNull(string5);
      
      String string6 = StringUtils.substringAfter("=z@kEld\";,-", 16);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      String string7 = StringUtils.replaceIgnoreCase("falseRtrueRfalse", "Threshold must not be negative", "RX.Bi", 16);
      assertNotNull(string7);
      assertEquals("falseRtrueRfalse", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      charSequenceArray0[1] = (CharSequence) "falseRtrueRfalse";
      charSequenceArray0[2] = (CharSequence) "falseRtrueRfalse";
      charSequenceArray0[3] = (CharSequence) "falseRtrueRfalse";
      charSequenceArray0[4] = (CharSequence) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
      charSequenceArray0[5] = (CharSequence) "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
      charSequenceArray0[6] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[7] = (CharSequence) "The resource returned by [%s] was null, which is not allowed";
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("falseRtrueRfalse"));
      
      String string8 = StringUtils.join((List<?>) vector0, "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", 16, 14);
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(vector0.contains("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"));
      
      charSequenceArray0[8] = (CharSequence) "";
      String string9 = StringUtils.prependIfMissing("Strings must not be null", "falseRtrueRfalse", charSequenceArray0);
      assertNotNull(string9);
      assertEquals("Strings must not be null", string9);
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("f?c*aOosG");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringBefore("B@{z0", "\n");
      assertNotNull(string0);
      assertEquals("B@{z0", string0);
      
      String string1 = StringUtils.reverse("f?c*aOosG");
      assertNotNull(string1);
      assertEquals("GsoOa*c?f", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compare((String) null, "r:voH1'::$X{", false);
      assertEquals(1, int0);
      
      boolean boolean3 = StringUtils.isBlank("f?c*aOosG");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.strip("", "EKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "EKRw3AC#7cMcYxE707";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.substringAfterLast("", "EKRw3AC#7cMcYxE707");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replacePattern("", "", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.compare((String) null, "\r", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 116, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "mKRw3AC#7cMcYxE707";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.substringAfterLast("", "mKRw3AC#7cMcYxE707");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("jXt<6", "5eZ)Il^X");
      assertNotNull(string2);
      assertEquals("jXt<6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceFirst("", "mKRw3AC#7cMcYxE707", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceChars("\n", "", "");
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "@<@V;CBA}+<uPkiyd";
      String[] stringArray0 = StringUtils.split("VeFe{\"hpcxUR2ND");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = "h";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "~5-;8ar-p$_wli3K,QRsuppress");
      assertTrue(boolean0);
      
      String string7 = StringUtils.chomp("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.removeEnd("&qC-Ce(btOD[}/ ZJB,H?Ppw;mj)$-", "org.easymo");
      assertNotNull(string8);
      assertEquals("&qC-Ce(btOD[}/ ZJB,H?Ppw;mj)$-", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1009
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short)940;
      shortArray0[2] = (short) (-1740);
      shortArray0[3] = (short)256;
      String string0 = "E{I :o5;~93Gx";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "E{I :o5;~93Gx";
      stringArray0[1] = "E{I :o5;~93Gx";
      stringArray0[2] = "E{I :o5;~93Gx";
      stringArray0[3] = "E{I :o5;~93Gx";
      stringArray0[4] = "E{I :o5;~93Gx";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("E{I :o5;~93Gx", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "E>Fuj[MLl=,6K;a";
      String string2 = StringUtils.firstNonBlank(stringArray1);
      assertNotNull(string2);
      assertEquals("E>Fuj[MLl=,6K;a", string2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.uncapitalize("E>Fuj[MLl=,6K;a");
      assertNotNull(string3);
      assertEquals("e>Fuj[MLl=,6K;a", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '7', (int) (short) (-1438), 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1438
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("?+In2KWK3", "?+In2KWK3", false);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "?+In2KWK3", (CharSequence) "?+In2KWK3", 55);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.defaultIfEmpty("}", "}");
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.center("}", 55);
      assertNotNull(string1);
      assertEquals("                           }                           ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}";
      stringArray0[1] = "                           }                           ";
      stringArray0[2] = "                           }                           ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.chomp("}", "6Hg6#EMNBOx[!Uc]\"T");
      assertNotNull(string3);
      assertEquals("}", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((boolean[]) null, 'b', 0, 55);
      assertNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("Strings must not be ", supplier0);
      assertNotNull(string5);
      assertEquals("Strings must not be ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 'W', 119, 65536);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short) (-98);
      shortArray0[2] = (short) (-1740);
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", (int) (short) (-1740), "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String string1 = StringUtils.reverseDelimited("~5-;8ar-p$_wli3K,QRorg.easymock.bytebuddy.asm.Advice$NoExceptionHandler", '8');
      assertNotNull(string1);
      assertEquals("ar-p$_wli3K,QRorg.easymock.bytebuddy.asm.Advice$NoExceptionHandler8~5-;", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[4];
      shortArray0[2] = (short)262;
      floatArray0[1] = (-729.0F);
      floatArray0[2] = (float) 'A';
      floatArray0[3] = (float) (short) (-1740);
      String string2 = StringUtils.join(floatArray0, '&', 117, (-664));
      assertArrayEquals(new float[] {0.0F, (-729.0F), 65.0F, (-1740.0F)}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, floatArray0.length);
      
      String string3 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (-664));
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '&';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '&';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertArrayEquals(new char[] {'8', '&', '8', '8', '&'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("p{InCombiningDiacriticalMarks}+", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.defaultIfBlank("-1.0]2443.0]0.0", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertEquals("-1.0]2443.0]0.0", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-1.0]2443.0]0.0", charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "(}pB(<aI 36t*", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "(}pB(<aI 36t*", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.stringutils");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.stringutils", 1, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.stringutils", 6);
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      String string2 = StringUtils.join((Object[]) stringArray0, '%', 25, 10);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.stringutils", 14);
      assertNotNull(string3);
      assertEquals("g3.stringutils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("org.apache.commons.lang3.stringutils", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.getDigits("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.substringsBetween("}6Hg6#EMNBOx[!Uc]\"T", "tf<\"..}W&]!C", "_m[.?};a)*Gh)-^2X");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)76;
      String string5 = StringUtils.join(byteArray0, '7', Integer.MIN_VALUE, 8192);
      assertArrayEquals(new byte[] {(byte)108, (byte)0, (byte)11, (byte)4, (byte)6, (byte)122, (byte) (-96), (byte)76}, byteArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("lMarks}+F", "[", "[");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      assertEquals("p,tmt]0au~xfk{", string0);
      
      String string1 = StringUtils.removeIgnoreCase("2Jc]6/'b!p>\"", "");
      assertNotNull(string1);
      assertEquals("2Jc]6/'b!p>\"", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripAccents("AhjKcc@a{DX<Ib");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[2] = (-54);
      String string3 = StringUtils.normalizeSpace("p,tmt]0au~xfk{");
      assertNotNull(string3);
      assertEquals("p,tmt]0au~xfk{", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("2Jc]6/'b!p>\"", "", 3);
      assertEquals(12, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "2Jc]6/'b!p>\"", (-54));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.uncapitalize("p,tmt]0au~xfk{");
      assertNotNull(string4);
      assertEquals("p,tmt]0au~xfk{", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.repeat("p,tmt]0au~xfk{", "AhjKcc@a{DX<Ib", (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (-54);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-54);
      longArray0[5] = 0L;
      longArray0[6] = (long) (-54);
      longArray0[7] = (long) (-1);
      String string7 = StringUtils.replaceEachRepeatedly("SvvQhPrYg8K7s{|E/", stringArray0, stringArray0);
      assertNotNull(string7);
      assertEquals("SvvQhPrYg8K7s{|E/", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "p,tmt]0au~xfk{", (CharSequence) "p,TMt]0au~xFk{");
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string8 = StringUtils.substringBetween("", "2Jc]6/'b!p>\"");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.defaultString("BF=J/;25p%Z2W9");
      assertNotNull(string4);
      assertEquals("BF=J/;25p%Z2W9", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(vector0.contains(""));
      assertFalse(list0.contains(""));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.chop("ALy''t@0o");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "Threshold must not be negative", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'E';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ALy''t@0", charArray0);
      assertArrayEquals(new char[] {'{', '{', 'E'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '';
      longArray0[1] = (long) '';
      longArray0[2] = (long) 'E';
      String string1 = StringUtils.stripToNull("kO/^!;P-*FBA(A?");
      assertNotNull(string1);
      assertEquals("kO/^!;P-*FBA(A?", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("ALy''t@0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ALy''t@0", (CharSequence) "ALy''t@0");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfAny("kO/^!;P-*FBA(A?", stringArray0);
      assertEquals(15, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "ALy''t@0", (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("kO/^!;P-*FBA(A?", 10);
      assertNotNull(string2);
      assertEquals("kO/^!;P-*FBA(A?", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "kO/^!;P-*FBA(A?", charArray0);
      assertArrayEquals(new char[] {'{', '{', 'E'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.difference("kO/^!;P-*FBA(A?", "kO/^!;P-*FBA(A?");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "l", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.stripEnd("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", (String) null);
      assertNotNull(string0);
      assertEquals("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", string0);
      
      String string1 = StringUtils.replaceChars((String) null, ",#_4%z7", "XM5EK =DZ ~T=M7R");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("' is no valid ISO-8601 string.", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("' is no valid ISO-8601 string.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissing("XM5EK =DZ ~T=M7R", "CartesianProductTest can not have a non-empty display name.", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("XM5EK =DZ ~T=M7RCartesianProductTest can not have a non-empty display name.", string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.stripStart("sJewW", "Minimum abbreviation width is %d");
      assertNotNull(string4);
      assertEquals("JewW", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.unwrap("XM5EK =DZ ~T=M7RCartesianProductTest can not have a non-empty display name.", "7");
      assertNotNull(string5);
      assertEquals("XM5EK =DZ ~T=M7RCartesianProductTest can not have a non-empty display name.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isAlphaSpace(",#_4%z7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.removeEnd("sJewW", "szk9Cymym0d%'5bus");
      assertNotNull(string6);
      assertEquals("sJewW", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.defaultString("XM5EK =DZ ~T=M7R");
      assertNotNull(string7);
      assertEquals("XM5EK =DZ ~T=M7R", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.chomp("L:*)^l/T]");
      assertNotNull(string8);
      assertEquals("L:*)^l/T]", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.overlay("Threshold must not be negative", "QKr[)$MmAbR#qx", 24, 24);
      assertNotNull(string9);
      assertEquals("Threshold must not be neQKr[)$MmAbR#qxgative", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      int int0 = StringUtils.compare("JewW", "GdJ!R^&");
      assertEquals(3, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("sJewW", "XM5EK =DZ ~T=M7R");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("58e-av4GRb*K\u0002#/8!");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("w$a", (-204));
      assertNotNull(string0);
      assertEquals("w$a", string0);
      
      boolean boolean1 = StringUtils.isNotBlank("58e-av4GRb*K\u0002#/8!");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBetween("w$a", "Strings must not be null");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.upperCase("w$a");
      assertNotNull(string2);
      assertEquals("W$A", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "W$A", (CharSequence) "w$a", 65575);
      assertEquals(2, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "W$A", "\r");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, " ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("S%e5`tSbi$](Au^~");
      assertNotNull(string2);
      assertEquals("S%e5`tSbi$](Au^~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.leftPad("S%e5`tSbi$](Au^~", 32, (String) null);
      assertNotNull(string3);
      assertEquals("                S%e5`tSbi$](Au^~", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("0yaeR1 `70F1h");
      assertNotNull(string0);
      assertEquals("0yaeR1`70F1h", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0yaeR1 `70F1h", "0yaeR1 `70F1h");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.leftPad("0yaeR1 `70F1h", 31, 'z');
      assertNotNull(string1);
      assertEquals("zzzzzzzzzzzzzzzzzz0yaeR1 `70F1h", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad((String) null, 1, 'z');
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("Threshold must not be negative", 'n', 'R');
      assertNotNull(string3);
      assertEquals("Threshold must Rot be Regative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("zzzzzzzzzzzzzzzzzz0yaeR1 `70F1h", "zzzzzzzzzzzzzzzzzz0yaeR1 `70F1h");
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviateMiddle(".C2wj", "AvO.-*DCD_'2@}|TVB", 31);
      assertNotNull(string4);
      assertEquals(".C2wj", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrap((String) null, 'n');
      assertNull(string5);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'n';
      doubleArray0[1] = (double) 31;
      String string6 = StringUtils.join(doubleArray0, 'N');
      assertArrayEquals(new double[] {110.0, 31.0}, doubleArray0, 0.01);
      assertNotNull(string6);
      assertEquals("110.0N31.0", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'N';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'R';
      charArray0[5] = 'n';
      charArray0[6] = 'z';
      charArray0[7] = 'u';
      charArray0[8] = 'n';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'R', 'N', 'n', 'n', 'R', 'n', 'z', 'u', 'n'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.appendIfMissing(" vs ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsWhitespace(" vs ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.rightPad(" vs ", (-443), 'E');
      assertNotNull(string3);
      assertEquals(" vs ", string3);
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((double[]) null, 'E', (-4054), Integer.MAX_VALUE);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-4054));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBefore(" vs ", " vs ");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfter("h3)CT|", (-1184));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.defaultString("wLI_nS *9j<cm%");
      assertNotNull(string7);
      assertEquals("wLI_nS *9j<cm%", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.replace("f;", "f;", "f;", 0);
      assertNotNull(string1);
      assertEquals("f;", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "+/VLN_pruhz!<CyN";
      charSequenceArray0[1] = (CharSequence) "f;";
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.trimToEmpty("StdIo_System_In");
      assertNotNull(string2);
      assertEquals("StdIo_System_In", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("?krtdF?A&$hW}u*hNT{", "f;");
      assertNotNull(string3);
      assertEquals("f;", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.left("oS@isHs+8H*#'pO)^aS^ Ir^0qy0xK(`<", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst((String) null, "NBCV Z hS/");
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("NBCV Z hS/", "\n");
      assertNotNull(string3);
      assertEquals("NBCV Z hS/", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing((String) null, "\n");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) '\"';
      floatArray0[2] = (float) 1;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) '\"';
      String string5 = StringUtils.join(floatArray0, '<');
      assertArrayEquals(new float[] {1.0F, 34.0F, 1.0F, 0.0F, 1.0F, 34.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("1.0<34.0<1.0<0.0<1.0<34.0", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(6, floatArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "NBCV Z hS/", supplier0);
      assertNotNull(charSequence0);
      assertEquals("NBCV Z hS/", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string5));
      
      String string6 = StringUtils.rightPad((String) null, 76, '<');
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Search and Replace array lengths don't match: cZl7(o:%Z=[zEYg82zZ");
      assertNotNull(stringArray0);
      assertEquals(35, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2575, 2575);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("~5-;8ar-p$_wli3K,QR", "yJt1x_^\"@EomyV");
      assertNotNull(string0);
      assertEquals("~5-;8ar-p$_wli3K,QR", string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "Timeout for vintage @Test must be positive.");
      assertNull(string1);
      
      String string2 = StringUtils.stripStart("File does not exist: ", "5uiyzi@Mp1");
      assertNotNull(string2);
      assertEquals("File does not exist: ", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("yJt1x_^\"@EomyV", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNull(string3);
      
      String string4 = StringUtils.remove("", 'q');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("jXt<6");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase(" ", "Timeout for vintage @Test must be positive.", stringArray0);
      assertNotNull(string5);
      assertEquals("Timeout for vintage @Test must be positive. ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'q';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'u', 'q'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      
      String string6 = StringUtils.center("", (-2075), "Timeout for vintage @Test must be positive. ");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = "";
      String string1 = "Failed to read file ";
      String string2 = StringUtils.replacePattern((String) null, ",#_4%z7", ",#_4%z7");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 983);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Failed to read file ", ",#_4%z7");
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase(" ");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      String string3 = StringUtils.center((String) null, 4948, "8709pC");
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "8709pC", 56);
      assertEquals(6, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("9WlIY");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.substringAfterLast("+trC;", "+trC;");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.repeat("9WlIY", 4559);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      StringUtils.indexOfIgnoreCase((CharSequence) string5, (CharSequence) "+trC;");
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.replaceOnce("StdIo_System_In", "", "");
      assertNotNull(string1);
      assertEquals("StdIo_System_In", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.capitalize("52IoQsn");
      assertNotNull(string2);
      assertEquals("52IoQsn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip("#N2kH]]{[", "#N2kH]]{[");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissing("52IoQsn", "StdIo_System_In", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("52IoQsnStdIo_System_In", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.stripStart("<#D ", "");
      assertNotNull(string5);
      assertEquals("<#D ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.unwrap("52IoQsn", "<#D ");
      assertNotNull(string6);
      assertEquals("52IoQsn", string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.center("", (-387));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("#N2kH]]{[");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("#N2kH]]{[", charSequenceArray1);
      assertTrue(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("falseRtrueRfalseRfalseRfalseRfalse not be nullNNNNN");
      assertNotNull(string4);
      assertEquals("falseRtrueRfalseRfalseRfalseRfalsenotbenullNNNNN", string4);
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAllLowerCase("Minimum abbreviation width is %d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = (-2269);
      intArray0[2] = 3476;
      intArray0[3] = 3476;
      String string5 = StringUtils.join(intArray0, '-');
      assertArrayEquals(new int[] {5, (-2269), 3476, 3476}, intArray0);
      assertNotNull(string5);
      assertEquals("5--2269-3476-3476", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, intArray0.length);
      
      String string6 = StringUtils.unwrap("falseRtrueRfalseRfalseRfalseRfalsenotbenullNNNNN", '-');
      assertNotNull(string6);
      assertEquals("falseRtrueRfalseRfalseRfalseRfalsenotbenullNNNNN", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringAfter("[hxmR_(#!c5iAB}Z6>", (-1801));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.remove((String) null, (String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-65);
      String string0 = StringUtils.join(byteArray0, ')', (int) (byte)62, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94, (byte) (-15), (byte)3, (byte)62, (byte) (-65)}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, byteArray0.length);
      
      String string1 = StringUtils.reverse("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = 'w';
      charArray0[5] = ')';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {')', ')', ')', ')', 'w', ')'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '.');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "W,gY}DE9q316v");
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("W,gY}DE9q316v"));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("`AuEJaHmb[ 7", 322, "`AuEJaHmb[ 7");
      assertNotNull(string1);
      assertEquals("`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnce("nlo", "|>KLfD>R%uewfMB", "X4p!0F0@+M15UIf/");
      assertNotNull(string2);
      assertEquals("nlo", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.strip("wPp-lw/", "|>KLfD>R%uewfMB");
      assertNotNull(string4);
      assertEquals("Pp-lw/", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string5 = StringUtils.appendIfMissing("offset cannot be negative", "nlo", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("offset cannot be negativenlo", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, charSequenceArray0.length);
      
      String string6 = StringUtils.stripStart("`auejahmb[ 7", "wPp-lw/");
      assertNotNull(string6);
      assertEquals("`auejahmb[ 7", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.unwrap("", "oie'M?N[VXyvkfH");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.center("nlo", 25);
      assertNotNull(string8);
      assertEquals("           nlo           ", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      
      boolean boolean1 = StringUtils.isWhitespace("`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[ 7`AuEJaHmb[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("StdIo_System_In", charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String string1 = StringUtils.substring("eNOCvp\"@2;w`yh5=", (-1942), (-3034));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "eNOCvp\"@2;w`yh5=", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "eNOCvp\"@2;w`yh5=", (CharSequence) "7zX$@:");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("/7!5Tsp6}Kn>", stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.remove("\n", "<kw+86ZDicf/Tx");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.normalizeSpace("eNOCvp\"@2;w`yh5=");
      assertNotNull(string3);
      assertEquals("eNOCvp\"@2;w`yh5=", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.endsWith("eNOCvp\"@2;w`yh5=", "\n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.chop("<{,dH:os^l");
      assertNotNull(string4);
      assertEquals("<{,dH:os^", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "mKRw3AC#7cMcYxE707";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.substringAfterLast("", "mKRw3AC#7cMcYxE707");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("jXt<6", "5eZ)Il^X");
      assertNotNull(string2);
      assertEquals("jXt<6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", " vs ");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("jXt<6", "jXt<6");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.joinWith("jXt<6", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("mKRw3AC#7cMcYxE707jXt<6jXt<6jXt<6", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("mKRw3AC#7cMcYxE707jXt<6jXt<6jXt<6");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.repeat("c", (-1009));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals("NNNNN", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.appendIfMissingIgnoreCase("\n", "NNNNN", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("NNNNN", "DvjkLEQ@CEW*!w#JR3<", true);
      assertEquals(10, int0);
      
      String string3 = StringUtils.removeStart("Strings must not be null", "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing("NNNNN", "Strings must not be null");
      assertNotNull(string4);
      assertEquals("Strings must not be nullNNNNNStrings must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isMixedCase("NNNNN");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 'N';
      String string5 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {0.0F, 0.0F, 78.0F, 10.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("0.0N0.0N78.0N10.0N78.0", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, floatArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "0.0N0.0N78.0N10.0N78.0", (CharSequence) "\u0005oxzWf!ULU56Fic|o:");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.abbreviate((String) null, "Strings must not be null", (-1929), (-1942));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.removePattern(" 3Or{?lYxD4kU!l:\"N{", (String) null);
      assertNotNull(string1);
      assertEquals(" 3Or{?lYxD4kU!l:\"N{", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" 3Or{?lYxD4kU!l:\"N{", " 3Or{?lYxD4kU!l:\"N{");
      assertTrue(boolean0);
      
      String string2 = StringUtils.upperCase("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isWhitespace(" 3Or{?lYxD4kU!l:\"N{");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBetween(";N@[@~", "0qy0xK(`<");
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("3sVIOm*", '|');
      assertNotNull(string4);
      assertEquals("3sVIOm*", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "bN$=`f69hEJ\"F/YCB", supplier0);
      assertNotNull(charSequence0);
      assertEquals("bN$=`f69hEJ\"F/YCB", charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      String string5 = StringUtils.remove(" 3Or{?lYxD4kU!l:\"N{", '|');
      assertNotNull(string5);
      assertEquals(" 3Or{?lYxD4kU!l:\"N{", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "bN$=`f69hEJ\"F/YCB";
      boolean boolean2 = StringUtils.startsWithAny("3sVIOm*", charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAllUpperCase("offset cannot be negative");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "_[";
      String string6 = StringUtils.prependIfMissingIgnoreCase("_[", "^2RR&BV`CpSHjlRe", charSequenceArray1);
      assertNotNull(string6);
      assertEquals("_[", string6);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(1, charSequenceArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ALy''t@0oO)^aS^ Ir^0qy0xK(`<", charArray0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      boolean boolean4 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = StringUtils.containsIgnoreCase(" 3Or{?lYxD4kU!l:\"N{", "bN$=`f69hEJ\"F/YCB");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = StringUtils.splitByWholeSeparator("O)^aS^ Ir^0qy0xK(`<...", "B;/{", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase("O)^aS^ Ir^0qy0xK(`<...", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("O)^aS^ Ir^0qy0xK(`<...", string0);
      
      String string1 = StringUtils.center("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (-1153), "u(J~%>L8U]@cf");
      assertNotNull(string1);
      assertEquals("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) stringArray0, '6', (-1599), (-1599));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.wrap("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", '6');
      assertNotNull(string3);
      assertEquals("6Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType6", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.rightPad("B;/{", 1103, 'K');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.unwrap("Locale must not be null", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string5);
      assertEquals("Locale must not be null", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Locale must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = "^A*{#*{p$ZSyOoTV";
      String string1 = StringUtils.stripEnd("^A*{#*{p$ZSyOoTV", "^A*{#*{p$ZSyOoTV");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "CartesianTest can not have an empty display name.";
      int int0 = StringUtils.compare("^A*{#*{p$ZSyOoTV", "CartesianTest can not have an empty display name.");
      assertEquals(27, int0);
      
      String string3 = ":?UL0ls19dh[[Zf{";
      String string4 = StringUtils.replace("", ":?UL0ls19dh[[Zf{", "CartesianTest can not have an empty display name.");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("^A*{#*{p$ZSyOoTV");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("CartesianTest can not have an empty display name.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("CartesianTest can not have an empty display name.");
      assertNotNull(intArray0);
      assertEquals(49, intArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "CartesianTest can not have an empty display name.", (CharSequence) "CartesianTest can not have an empty display name.");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char char0 = ';';
      int int2 = StringUtils.countMatches((CharSequence) "", ';');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "w)0inbp");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // w)0inbp
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("58e-av4GRb*K\u0002#/8!");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty("{argument7i");
      assertNotNull(string0);
      assertEquals("{argument7i", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("idyeHk9Y3!,!tuN", "idyeHk9Y3!,!tuN");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!", charArray0);
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle("idyeHk9Y3!,!tuN", "idyeHk9Y3!,!tuN", 3621);
      assertNotNull(string2);
      assertEquals("idyeHk9Y3!,!tuN", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("idyeHk9Y3!,!tuN");
      assertNotNull(string3);
      assertEquals("93", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.LF;
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("93");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int1 = StringUtils.getFuzzyDistance("idyeHk9Y3!,!tuN", "idyeHk9Y3!,!tuN", locale0);
      assertEquals(43, int1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.center("Strings must not be null", 24, 't');
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.center("rror - output of one loop is the input of another", 13);
      assertNotNull(string0);
      assertEquals("rror - output of one loop is the input of another", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("rror - output of one loop is the input of another");
      assertNotNull(intArray0);
      assertEquals(49, intArray0.length);
      
      String string1 = StringUtils.substring("rror - output of one loop is the input of another", 13);
      assertNotNull(string1);
      assertEquals(" of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("rror - output of one loop is the input of another"));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("rror - output of one loop is the input of another"));
      
      boolean boolean0 = stack0.add(" of one loop is the input of another");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[ of one loop is the input of another]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(" of one loop is the input of another"));
      assertFalse(stack0.contains(string0));
      
      String string2 = StringUtils.join((List<?>) stack0, 'q', 1631, 1631);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(stack0.isEmpty());
      assertEquals("[ of one loop is the input of another]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(stack0.contains(" of one loop is the input of another"));
      assertFalse(stack0.contains(string0));
      
      int[] intArray1 = StringUtils.toCodePoints("rror - output of one loop is the input of another");
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(49, intArray1.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "rror - output of one loop is the input of another";
      charSequenceArray0[1] = (CharSequence) " of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "rror - output of one loop is the input of another";
      charSequenceArray0[3] = (CharSequence) " of one loop is the input of another";
      charSequenceArray0[4] = (CharSequence) "rror - output of one loop is the input of another";
      charSequenceArray0[5] = (CharSequence) "rror - output of one loop is the input of another";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("AT<fH,", 'q');
      assertNotNull(string3);
      assertEquals("qAT<fH,q", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(charSequenceArray0[4]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 'q';
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 'q';
      doubleArray0[4] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, 'q');
      assertArrayEquals(new double[] {13.0, 113.0, 13.0, 113.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      assertEquals("13.0q113.0q13.0q113.0q0.0", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, doubleArray0.length);
      
      boolean boolean3 = StringUtils.isNumeric("13.0q113.0q13.0q113.0q0.0");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Minimum abbrevia>ion widch is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.getDigits("idyeHk9Y3!,!tuN");
      assertNotNull(string0);
      assertEquals("93", string0);
      
      boolean boolean0 = StringUtils.isNumeric("93");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEnd("93", "93");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string0 = StringUtils.upperCase("@w5y!ZKF");
      assertNotNull(string0);
      assertEquals("@W5Y!ZKF", string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      Locale locale3 = (Locale)locale0.clone();
      assertNotNull(locale3);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("it", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertEquals("it", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale0));
      
      int int0 = StringUtils.getFuzzyDistance("@w5y!ZKF", "@w5y!ZKF", locale2);
      assertEquals(22, int0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "@W5Y!ZKF");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "@W5Y!ZKF", (CharSequence) "");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'G';
      charArray0[2] = '(';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'|', 'G', '('}, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("XXP_IO", stringArray0, (String[]) null);
      assertNotNull(string0);
      assertEquals("XXP_IO", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Search and Replace array lengths don't match: ", 322);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate(" ", (-1582));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid(".[KuYgM%&Ly5Jw", 128, 128);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) " ", supplier0);
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) " ";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", ".[KuYgM%&Ly5Jw");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" "));
      
      String string3 = StringUtils.join((List<?>) linkedList0, "", 322, 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(linkedList0.contains(322));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "\r");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 52);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      assertEquals("p,tmt]0au~xfk{", string0);
      
      String string1 = StringUtils.substringAfter("not be nullNNNNN", (-54));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("not be nullNNNNN", "");
      assertNotNull(string2);
      assertEquals("not be nullNNNNN", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripAccents("AhjKcc@a{DX<Ib");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[2] = (-54);
      String string4 = StringUtils.normalizeSpace("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastOrdinalIndexOf("not be nullNNNNN", "", 3);
      assertEquals(16, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "not be nullNNNNN", (-54));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.swapCase("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      
      String[] stringArray0 = new String[1];
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.repeat("p,tmt]0au~xfk{", "AhjKcc@a{DX<Ib", (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (-54);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-54);
      longArray0[5] = 0L;
      longArray0[6] = (long) (-54);
      longArray0[7] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ',', (-1484), (-1245));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1484
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("{argument7i");
      assertNotNull(string0);
      assertEquals("{argument7i", string0);
      
      String string1 = StringUtils.leftPad("{argument7i", 3621);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) "{argument7i", 108);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string1, "{argument7i");
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ALy''t@0o";
      stringArray0[1] = "tyNaJln/t4H[}d;V3";
      stringArray0[2] = "ALy''t@0o";
      stringArray0[3] = "ALy''t@0o";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "tyNaJln/t4H[}d;V3";
      stringArray1[1] = "tyNaJln/t4H[}d;V3";
      String string0 = StringUtils.firstNonBlank(stringArray1);
      assertNotNull(string0);
      assertEquals("tyNaJln/t4H[}d;V3", string0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      String string1 = StringUtils.removeIgnoreCase("3k}7M:jk%?ou", "lseRfalseRfalse ");
      assertNotNull(string1);
      assertEquals("3k}7M:jk%?ou", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("3k}7M:jk%?ou", "Search and Replace array lengths don't match: ", 18);
      assertNotNull(string2);
      assertEquals("3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ou", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("lseRfalseRfalse ");
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string1));
      
      boolean boolean1 = linkedHashSet0.add("Method `Stream<? extends Arguments> ");
      assertTrue(boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("Method `Stream<? extends Arguments> "));
      assertFalse(linkedHashSet0.contains(string1));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, '&');
      assertNotNull(string3);
      assertEquals("Method `Stream<? extends Arguments> ", string3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(linkedHashSet0.contains("Method `Stream<? extends Arguments> "));
      assertFalse(linkedHashSet0.contains(string1));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", "ALy''t@0o", 801);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(4, stringArray2.length);
      
      String string4 = StringUtils.replaceAll("O)^aS^ Ir^0qy0", "ALy''t@0o", "UeK]_ucq%F");
      assertNotNull(string4);
      assertEquals("O)^aS^ Ir^0qy0", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.repeat("3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ouSearch and Replace array lengths don't match: 3k}7M:jk%?ou", 2);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("(");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("("));
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, 'K');
      assertNotNull(string0);
      assertEquals("(", string0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("("));
      
      String string1 = StringUtils.substringBetween("(", "h/H?0r1|");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(5, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, 'R');
      assertNotNull(string0);
      assertEquals("AUTOSELECT_FILTERINGREXTENDED_FILTERINGRIGNORE_EXTENDED_RANGESRMAP_EXTENDED_RANGESRREJECT_EXTENDED_RANGES", string0);
      assertEquals(5, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.abbreviate("E='8bdO)", 7, 7);
      assertNotNull(string0);
      assertEquals("E='8...", string0);
      
      String string1 = StringUtils.left("E='8bdO)", 7);
      assertNotNull(string1);
      assertEquals("E='8bdO", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "E='8bdO", charArray0);
      assertArrayEquals(new char[] {'v', 'v'}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.removeFirst((String) null, "\n");
      assertNull(string0);
      
      String string1 = StringUtils.removeStart((String) null, " falseRtrueRfalseRfalseRfalseRfalse");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "b%_mP w");
      assertNull(string2);
      
      String string3 = StringUtils.join((float[]) null, '<');
      assertNull(string3);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("c6^]_5qHcU2");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertEquals(10, stringArray0.length);
      
      String string5 = StringUtils.replace("`WLAW9<MzJHtx=9twU;", "b%_mP w", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string5);
      assertEquals("`WLAW9<MzJHtx=9twU;", string5);
      assertFalse(string5.equals((Object)string4));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "`WLAW9<MzJHtx=9twU;");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny("c6^]_5qHcU2", stringArray0);
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1017));
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 15, 15);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 5322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " falseRtrueRfalseRfalseRfalseRfalse falseRtrueRfalseRfalseRfalseRfalse";
      String string0 = StringUtils.replaceOnceIgnoreCase("maxWith cannot be negative", " falseRtrueRfalseRfalseRfalseRfalse falseRtrueRfalseRfalseRfalseRfalse", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("maxWith cannot be negative");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "%s does not implement the CartesianAnnotationConsumer<T> interface.", (CharSequence) "maxWith cannot be negative", 1649);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("maxWith cannot be negative", 5);
      assertNotNull(string1);
      assertEquals("ativemaxWith cannot be neg", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid((String) null, (-30), 1649);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " falseRtrueRfalseRfalseRfalseRfalse falseRtrueRfalseRfalseRfalseRfalse", "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("org.apache.commons.lang3.StringUtils"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "%s does not implement the CartesianAnnotationConsumer<T> interface.", (-30), 68);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -30
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Strings must not be null"));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("Strings must not be null"));
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains("Strings must not be null"));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends String>) linkedList1);
      assertFalse(boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains("Strings must not be null"));
      assertFalse(linkedList1.contains("Strings must not be null"));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.contains("Strings must not be null"));
      
      String string1 = StringUtils.leftPad("}0Y5i|& :qD/tw", 16, 'Y');
      assertNotNull(string1);
      assertEquals("YY}0Y5i|& :qD/tw", string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("}0Y5i|& :qD/tw", "YY}0Y5i|& :qD/tw");
      assertEquals(0.93, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "*U#DG J<oR5Z");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("s.#`0/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootUpperCase("}0Y5i|& :qD/tw");
      assertNotNull(string2);
      assertEquals("}0Y5I|& :QD/TW", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("YY}0Y5i|& :qD/tw", 13);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.substring("*U#DG J<oR5Z", 24, (int) 'Y');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'x';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'x', 11, 177);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverseDelimited("Strings must not be null", ' ');
      assertNotNull(string1);
      assertEquals("null be not must Strings", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("1[%r9Km8zT1", 39, '4');
      assertNotNull(string2);
      assertEquals("44444444444444444444444444441[%r9Km8zT1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[1]);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("", charSequenceArray0[0], charSequenceArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string4 = StringUtils.abbreviate("1[%r9Km8zT1", "1iS", 10);
      assertNotNull(string4);
      assertEquals("1[%r9Km1iS", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1[%r9Km1iS", (CharSequence) "Strings must not be null");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.equals((CharSequence) " ", charSequenceArray0[1]);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.difference("", "\n");
      assertNotNull(string5);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("1iS");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      String string6 = StringUtils.abbreviate("44444444444444444444444444441[%r9Km8zT1", "\n", 0, 55);
      assertNotNull(string6);
      assertEquals("44444444444444444444444444441[%r9Km8zT1", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      int int2 = StringUtils.length("44444444444444444444444444441[%r9Km8zT1");
      assertEquals(39, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("5");
      assertTrue(boolean0);
      
      String string0 = StringUtils.normalizeSpace("The `date` %s is after the current date %s");
      assertNotNull(string0);
      assertEquals("The `date` %s is after the current date %s", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.stringutils");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.stringutils", 1, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.stringutils", 6);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string2 = StringUtils.abbreviate((String) null, 4, 6);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Xpc]Z", 'D');
      assertNotNull(string3);
      assertEquals("Xpc]Z", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.repeat("Xpc]Z", 1);
      assertNotNull(string4);
      assertEquals("Xpc]Z", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 6;
      intArray0[4] = (int) 'D';
      intArray0[5] = 4;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'N', 2, 1474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "maxWimh cannot benegative", (CharSequence) "maxWimh cannot benegative");
      assertEquals(1, int0);
      
      String string0 = StringUtils.repeat("...", 1);
      assertNotNull(string0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.remove("maxWith cannot be negative", 'v');
      assertNotNull(string0);
      assertEquals("maxWith cannot be negatie", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negatie";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negatie";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot be negatie";
      boolean boolean0 = StringUtils.equalsAny("maxWith cannot be negative", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "maxWith cannot be negatie";
      objectArray0[1] = (Object) "maxWith cannot be negatie";
      objectArray0[2] = (Object) charSequenceArray0[2];
      objectArray0[3] = (Object) charSequenceArray0[0];
      objectArray0[4] = (Object) charSequenceArray0[1];
      objectArray0[5] = (Object) charSequenceArray0[0];
      objectArray0[6] = (Object) "maxWith cannot be negatie";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      String string1 = StringUtils.joinWith("~~>)Ra(H)LR}sZJ", objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceOnceIgnoreCase("maxWith cannot be negative", "", "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.abbreviate("", 187, 187);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, " a|", 187, 187);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.center((String) null, 639, "tUt\"Vy[NQ@zliB");
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("", 639, 72);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat('a', 90);
      assertNotNull(string6);
      assertEquals("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.replace("maxWith cannot be negative", "", "Minimum abbreviation width with offset is %d");
      assertNotNull(string7);
      assertEquals("maxWith cannot be negative", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      int int1 = StringUtils.ordinalIndexOf("offset cannot be negative", "maxWith cannot be negative", 54);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean3 = StringUtils.equalsAny("&=b2;r7q4^fWf`Q", stringArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, stringArray0.length);
      
      String string8 = StringUtils.substringAfterLast("maxWith cannot be negative", 90);
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      
      String string9 = StringUtils.reverse("tUt\"Vy[NQ@zliB");
      assertNotNull(string9);
      assertEquals("Bilz@QN[yV\"tUt", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      
      String string10 = StringUtils.replaceFirst("C?IE6_6A&|?XCP,a", "maxWith cannot be negative", "");
      assertNotNull(string10);
      assertEquals("C?IE6_6A&|?XCP,a", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "%s does not implement the CartesianAnnotationConsumer<T> interface.");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(21, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[0], 0, 0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray1[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray1[2] = "/7!5Tsp6}Kn>";
      stringArray1[3] = "/7!5Tsp6}Kn>";
      stringArray1[4] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray1[5] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray1[6] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray1[7] = "/7!5Tsp6}Kn>";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("/7!5Tsp6}Kn>", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.wrap("\n", "\n");
      assertNotNull(string1);
      assertEquals("\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("", "s}OX");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n\n\n";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "\n\n\n";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("(N]\"kOH-AjPcA1N");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string3 = StringUtils.replaceEachRepeatedly("Threshold must not be negative", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(12, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("\n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", charSequenceArray0[1], 2);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\n\n\n";
      stringArray1[1] = "";
      charSequenceArray0[1] = (CharSequence) "\n";
      stringArray1[3] = "(N]\"kOH-AjPcA1N";
      stringArray1[4] = "";
      stringArray1[6] = "Threshold must not be negative";
      stringArray1[7] = "\n\n\n";
      String string4 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "(N]\"kOH-AjPcA1N", (CharSequence) "(N]\"kOH-AjPcA1N");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("\n\n\n", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.upperCase("\"!X&bZY00S8|IQ_%dG*");
      assertNotNull(string0);
      assertEquals("\"!X&BZY00S8|IQ_%DG*", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\"!X&bZY00S8|IQ_%dG*");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("\"!X&BZY00S8|IQ_%DG*", '<');
      assertNotNull(string1);
      assertEquals("\"!X&BZY00S8|IQ_%DG*", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = null;
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("rB2\"4NFs", "rB2\"4NFs");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "{98N{esT`7g", (CharSequence) "rB2\"4NFs");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string1 = StringUtils.join(booleanArray0, 'T', 64, 10);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, false}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(8, booleanArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("{98N{esT`7g", supplier0);
      assertNotNull(string2);
      assertEquals("{98N{esT`7g", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("maxWith cannot be negative", "o");
      assertNotNull(string0);
      assertEquals("omaxWith cannot be negativeo", string0);
      
      String string1 = StringUtils.defaultIfEmpty("omaxWith cannot be negativeo", "omaxWith cannot be negativeo");
      assertNotNull(string1);
      assertEquals("omaxWith cannot be negativeo", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStartIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "offset cannot be negative");
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("omaxWith cannot be negativeo", "o");
      assertEquals(0.68, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o", "doesn't contain any substring.");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[2] = "maxWith cannot be negative";
      stringArray1[3] = ")-<I0IU\"";
      stringArray1[4] = "omaxWith cannot be negativeo";
      stringArray1[5] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[6] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[7] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray1[8] = "MPG";
      String string3 = StringUtils.replaceEach("`S&&.y^", stringArray1, stringArray1);
      assertNotNull(string3);
      assertEquals("`S&&.y^", string3);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray1.length);
      
      String string4 = StringUtils.removeEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Could not provide arguments because of exception.");
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("maxWith cannot be negative");
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chomp("|");
      assertNotNull(string6);
      assertEquals("|", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.chomp(">");
      assertNotNull(string0);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.strip(" ~nL8.C", " ~nL8.C");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing(" ~nL8.Cv", "xt");
      assertNotNull(string1);
      assertEquals("xt ~nL8.Cvxt", string1);
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '?';
      doubleArray0[1] = (double) (-13);
      doubleArray0[2] = (double) '?';
      doubleArray0[3] = 1907.28517;
      doubleArray0[4] = (double) '?';
      doubleArray0[5] = 1164.5984508;
      doubleArray0[6] = (double) (-13);
      doubleArray0[7] = (double) '?';
      String string2 = StringUtils.join(doubleArray0, 'n', (-13), (-13));
      assertArrayEquals(new double[] {63.0, (-13.0), 63.0, 1907.28517, 63.0, 1164.5984508, (-13.0), 63.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ~nL8.Cv");
      assertFalse(boolean0);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("xt ~nL8.Cvxt", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compare(" ~nL8.Cv", "");
      assertEquals(8, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string4 = StringUtils.join(booleanArray0, 'N', (-13), (-868));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(1, booleanArray0.length);
      
      String string5 = StringUtils.join((Iterator<?>) null, ' ');
      assertNull(string5);
      
      String string6 = StringUtils.center("includeSyntheticFields", 2067, "%|[ Li\"YPj8h8z");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("`AuEJaHmb[ 7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`auejahmb[ 7";
      stringArray0[1] = "`AuEJaHmb[ 7";
      stringArray0[2] = "`auejahmb[ 7";
      stringArray0[3] = "`auejahmb[ 7";
      stringArray0[4] = "E{I :o5;~93Gx";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals("`auejahmb[ 7", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.uncapitalize("E{I :o5;~93Gx");
      assertNotNull(string3);
      assertEquals("e{I :o5;~93Gx", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)30;
      shortArray0[1] = (short) (-2556);
      shortArray0[2] = (short) (-2043);
      shortArray0[3] = (short) (-9568);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1438);
      shortArray0[6] = (short)81;
      shortArray0[7] = (short)64;
      String string4 = StringUtils.rightPad("", (int) (short)0, '7');
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceIgnoreCase("|KDz\"HtG#]~QP=7ozr", "`AuEJaHmb[ 7", "\"$Ps.T`YAPM", (int) (short) (-1438));
      assertNotNull(string5);
      assertEquals("|KDz\"HtG#]~QP=7ozr", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("`AuEJaHmb[ 7"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains("`AuEJaHmb[ 7"));
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, '7');
      assertNotNull(string6);
      assertEquals("", string6);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(stack0.contains("`AuEJaHmb[ 7"));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 256);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", (-1202));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("org.apache.commons.lang3.StringUtils", 2251);
      assertNotNull(string1);
      assertEquals("s.lang3.StringUtilsorg.apache.common", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("org.apache.commons.lang3.StringUtils", 3659, 36);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "s.lang3.StringUtilsorg.apache.common";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "s.lang3.StringUtilsorg.apache.common";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.replaceEachRepeatedly("GJX", (String[]) null, (String[]) null);
      assertNotNull(string3);
      assertEquals("GJX", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("T(vt", 36, 'j');
      assertNotNull(string4);
      assertEquals("jjjjjjjjjjjjjjjT(vtjjjjjjjjjjjjjjjj", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "jjjjjjjjjjjjjjjT(vtjjjjjjjjjjjjjjjj");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.center((String) null, (-1202), 'j');
      assertNull(string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = '\\';
      String string6 = StringUtils.join(charArray0, '4', 256, 16);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j', 'j', 'j', '\\'}, charArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 3);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("[,`dAQDW2", 3);
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "[,`dAQDW2";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 1296);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replacePattern("Strings must not be null", "", (String) null);
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = 36;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 66);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("\r", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'y', 2824, 71);
      assertArrayEquals(new float[] {(-1.0F), 2443.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(3, floatArray0.length);
      
      String string1 = StringUtils.leftPad("", (-123));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("", 'y', 'y');
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.rightPad("\n", 3613, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("}", "}");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart(string1, "\n");
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing("*U#DG J<oR5Z", "Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("Threshold must not be negative*U#DG J<oR5ZThreshold must not be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((float[]) null, 'S');
      assertNull(string5);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative*U#DG J<oR5ZThreshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(29, stringArray0.length);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.replaceEachRepeatedly((String) null, stringArray1, stringArray0);
      assertNull(string6);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(29, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "not be nullNNNNN");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(29, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("EmRE@sYFH9$ecyL");
      assertNotNull(string1);
      assertEquals("EmRE@sYFH9$ecyL", string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 2443.0F;
      objectArray0[4] = (Object) 0.0F;
      String string2 = StringUtils.join(objectArray0, '|', (-728), (-728));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "+/VLN_pruhz!<C";
      String string3 = StringUtils.wrap("_rX", 'K');
      assertNotNull(string3);
      assertEquals("K_rXK", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.rightPad((String) null, 256, '|');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Dn(<:d2", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Dn(<:d2", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string1 = StringUtils.center("Dn(<:d2", 56, "709pC");
      assertNotNull(string1);
      assertEquals("709pC709pC709pC709pC709pDn(<:d2709pC709pC709pC709pC709pC", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited(stringArray0[0], 'A');
      assertNull(string2);
      assertEquals(9, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-729.0F);
      floatArray0[1] = (-729.0F);
      floatArray0[2] = (float) 56;
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) (-1013);
      floatArray0[6] = (float) 'A';
      floatArray0[8] = (-729.0F);
      String string3 = StringUtils.join(floatArray0, 'A', 2824, 2824);
      assertArrayEquals(new float[] {(-729.0F), (-729.0F), 56.0F, 65.0F, (-1013.0F), 0.0F, 65.0F, 0.0F, (-729.0F)}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)41;
      String string4 = StringUtils.join(byteArray0, 'A', (int) (byte)41, (-1893));
      assertArrayEquals(new byte[] {(byte)42, (byte) (-120), (byte)52, (byte)47, (byte)41}, byteArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("709pC709pC709pC709pC709pDn(<:d2709pC709pC709pC709pC709pC", string2, (byte)47);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("E{I :o5;~93Gx");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string0 = StringUtils.substringAfter("E{I :o5;~93Gx", "E{I :o5;~93Gx");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "E{I :o5;~93Gx";
      stringArray1[1] = "1";
      stringArray1[2] = "1";
      stringArray1[3] = "1";
      stringArray1[4] = "E{I :o5;~93Gx";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("1", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 11 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = "l|";
      String string1 = StringUtils.center("l|", 5, "x=Y,j`)");
      assertNotNull(string1);
      assertEquals("xl|x=", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "x=Y,j`)", (CharSequence) "xl|x=", 5);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("x=Y,j`)");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("rmhhLu,bfK'-:0=?`<s");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("wKLx(Wc]d`1", "\"$Ps.T`YAPM");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("ce2OeO?}$v~Ow");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat("zy", (-1891));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Z/UNVicni5", supplier0);
      assertNotNull(charSequence0);
      assertEquals("Z/UNVicni5", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("$-@I5pC0@JPnbm/");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("ce2OeO?}$v~Ow", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 14 vs 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.center("o", 0, 'F');
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = StringUtils.upperCase("psOJ!f");
      assertNotNull(string1);
      assertEquals("PSOJ!F", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "o";
      charSequenceArray0[1] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      String string2 = StringUtils.reverseDelimited((String) null, 'F');
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.leftPad("EZ60cF5.jy,Ik", (-65), 'o');
      assertNotNull(string3);
      assertEquals("EZ60cF5.jy,Ik", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny("EmRE@sYH9$cyLzV vwx+}>zv[GC*N;", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase((String) null, "psOJ!f", charSequenceArray0);
      assertNull(string4);
      assertEquals(9, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('o'));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) null);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\r", charSequenceArray0[0]);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      String string5 = StringUtils.difference("Threshold must not be negative", "...");
      assertNotNull(string5);
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("psOJ!f");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fQJ7~'+rGqYFs fQJ7~'+rGqYFs ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "=-oR(z:)?8zrl");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'V');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      String string2 = StringUtils.remove((String) null, '{');
      assertNull(string2);
      
      String string3 = StringUtils.normalizeSpace("clone");
      assertNotNull(string3);
      assertEquals("clone", string3);
      
      String string4 = StringUtils.replaceChars("A_iLd9j+%", "]*[", (String) null);
      assertNotNull(string4);
      assertEquals("A_iLd9j+%", string4);
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) "clone", 0, (-660));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = "maxWith cannot be negative";
      int int0 = (-420);
      String string1 = StringUtils.join((long[]) null, 'i', (-420), 160);
      assertNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(160));
      
      String string2 = StringUtils.join((List<?>) stack0, "maxWith cannot be negative", 160, 95);
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertFalse(stack0.contains("maxWith cannot be negative"));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, (-420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String string1 = StringUtils.capitalize("[im^wD]44E2s");
      assertNotNull(string1);
      assertEquals("[im^wD]44E2s", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.upperCase("[im^wD]44E2s");
      assertNotNull(string2);
      assertEquals("[IM^WD]44E2S", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.uncapitalize("h");
      assertNotNull(string3);
      assertEquals("h", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "EWH`3s&O";
      charSequenceArray0[1] = (CharSequence) "h";
      charSequenceArray0[2] = (CharSequence) "h";
      charSequenceArray0[3] = (CharSequence) "[im^wD]44E2s";
      charSequenceArray0[4] = (CharSequence) "[IM^WD]44E2S";
      charSequenceArray0[5] = (CharSequence) "l|";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "EWH`3s&O";
      int int0 = StringUtils.indexOfAny((CharSequence) "EWH`3s&O", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = "f";
      String string5 = StringUtils.trimToNull("f");
      assertNotNull(string5);
      assertEquals("f", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "f", 10, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.remove((String) null, 'o');
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('o'));
      
      Stream<Object> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('o'));
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains('o'));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.contains('o'));
      
      boolean boolean2 = linkedList0.add((Object) null);
      assertTrue(boolean2);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedList0.contains('o'));
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('o'));
      
      boolean boolean3 = linkedHashSet0.add(linkedList0);
      assertTrue(boolean3);
      assertEquals(3, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(linkedList0.contains('o'));
      assertFalse(linkedHashSet0.contains('o'));
      
      boolean boolean4 = linkedList0.retainAll(linkedHashSet0);
      assertTrue(boolean4);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(linkedList0.contains('o'));
      assertFalse(linkedHashSet0.contains('o'));
      
      String string2 = null;
      boolean boolean5 = linkedList0.add((Object) null);
      assertTrue(boolean5);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(linkedList0.contains('o'));
      
      int int0 = Integer.MAX_VALUE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      linkedList0.addFirst(object0);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains('o'));
      assertTrue(linkedList0.contains(object0));
      
      String string3 = StringUtils.join((List<?>) linkedList0, '', Integer.MAX_VALUE, 628);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains(628));
      assertTrue(linkedList0.contains(object0));
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, 628);
      assertNull(string4);
      
      char char0 = '|';
      // Undeclared exception!
      try { 
        linkedList0.add(603, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 603, Size: 2
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, '4');
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@4dbd752b4java.lang.Object@171f67124java.lang.Object@104215b1", 6);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("java.lang.Object@4dbd752b4java.lang.Object@171f67124java.lang.Object@104215b1").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.abbreviate("java.lang.Object@4dbd752b4java.lang.Object@171f67124java.lang.Object@104215b1", 6);
      assertNotNull(string2);
      assertEquals("jav...", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("java.lang.Object@4dbd752b4java.lang.Object@171f67124java.lang.Object@104215b1");
      assertNotNull(string3);
      assertEquals("47524171671241042151", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split("jav...");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[3] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[3] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[4] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("CartesianProductTest can only take exactly one type of arguments source.", stringArray0[2], stringArray0);
      assertNotNull(string2);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[19];
      intArray0[0] = 3476;
      intArray0[1] = 3476;
      intArray0[2] = 5;
      intArray0[3] = 5;
      String string4 = StringUtils.join(intArray0, '+');
      assertNotNull(string4);
      assertEquals("3476+3476+5+5+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(19, intArray0.length);
      
      String string5 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'M');
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArumentsProviderorg.junitpioneer.jupiter.json.JsonInlineArumentsProvider", 3476);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = linkedList0.add(locale_Category0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      
      boolean boolean2 = linkedList0.add(locale_Category0);
      assertTrue(boolean2);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(linkedList0.contains(locale_Category0));
      
      String string7 = StringUtils.join((List<?>) linkedList0, "|l|l", 5, 5);
      assertNotNull(string7);
      assertEquals("", string7);
      assertEquals(2, linkedList0.size());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(linkedList0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '|', 4315, 110);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, floatArray0.length);
      
      String string2 = StringUtils.center("", 937, "");
      assertNotNull(string2);
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("!:+LZVY$t05cx>fStrings must not be null...", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("!:+LZVY$t05cx>fStrings must not be null...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(floatArray0, '|');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, floatArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("!:+LZVY$t05cx>fStrings must not be null...", (CharSequence) null, 110);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("!:+LZVY$t05cx>fStrings must not be null...");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("EZ60cF5.jy,Ik");
      assertNotNull(string1);
      assertEquals("EZ60CF5.JY,IK", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "EZ60cF5.jy,Ik";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "EZ60CF5.JY,IK";
      charSequenceArray0[4] = (CharSequence) "EZ60CF5.JY,IK";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.trimToNull("EZ60CF5.JY,IK");
      assertNotNull(string2);
      assertEquals("EZ60CF5.JY,IK", string2);
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], "p{InCombiningDiacriticalMarks}+");
      assertEquals(4, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '|';
      charArray0[2] = 'T';
      charArray0[3] = 'y';
      charArray0[4] = 'H';
      charArray0[5] = 'l';
      int int1 = StringUtils.indexOfAny((CharSequence) "EZ60cF5.jy,Ik", charArray0);
      assertArrayEquals(new char[] {'H', '|', 'T', 'y', 'H', 'l'}, charArray0);
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charArray0.length);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("f", "EZ60CF5.JY,IK");
      assertNotNull(string4);
      assertEquals("f", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("&{ K8BM_:z1^v");
      assertNotNull(string2);
      assertEquals("&{ K8BM_:Z1^V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("&{ K8BM_:Z1^V", 35);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase("", "9F3W7IO|^o,D/");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'Y', (-1977), (-4096));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals(0, floatArray0.length);
      
      String string6 = StringUtils.leftPad("&{ K8BM_:Z1^V", 17);
      assertNotNull(string6);
      assertEquals("    &{ K8BM_:Z1^V", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.ordinalIndexOf("&{ K8BM_:z1^v", "", 256);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.removeFirst(" falseRtrueRfalseRfalseRfalseRfalse", "\n");
      assertNotNull(string0);
      assertEquals(" falseRtrueRfalseRfalseRfalseRfalse", string0);
      
      String string1 = StringUtils.removeStart(" falseRtrueRfalseRfalseRfalseRfalse", "b%_mP w");
      assertNotNull(string1);
      assertEquals(" falseRtrueRfalseRfalseRfalseRfalse", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("not be nullNNNNN", "\n");
      assertNotNull(string2);
      assertEquals("\nnot be nullNNNNN\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((float[]) null, '<');
      assertNull(string3);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "not be nullNNNNN", supplier0);
      assertNotNull(charSequence0);
      assertEquals("not be nullNNNNN", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("O)^aS^ Ir^0qy0xK(`<");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("e", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals("e", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(17, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "e", (CharSequence) " falseRtrueRfalseRfalseRfalseRfalse");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(17, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, "*");
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("java.lang.Object@287b9be0", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$InvokerCreationAction");
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$InvokerCreationAction", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$InvokerCreationAction", (-1));
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$InvokerCreationAction", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char char0 = '-';
      String string3 = StringUtils.join(objectArray0, '-');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$InvokerCreationAction");
      assertTrue(boolean0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // *
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Dn(<:d2", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Dn(<:d2", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string1 = StringUtils.center("Dn(<:d2", 53, "709pC");
      assertNotNull(string1);
      assertEquals("709pC709pC709pC709pC709Dn(<:d2709pC709pC709pC709pC709", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverseDelimited(stringArray0[0], 'A');
      assertNull(string2);
      assertEquals(9, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-729.0F);
      floatArray0[1] = (-729.0F);
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) (-1013);
      floatArray0[6] = (float) 'A';
      floatArray0[8] = 53.0F;
      String string3 = StringUtils.join(floatArray0, 'A', 2824, 2824);
      assertArrayEquals(new float[] {(-729.0F), (-729.0F), 53.0F, 65.0F, (-1013.0F), 0.0F, 65.0F, 0.0F, 53.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, floatArray0.length);
      
      String string4 = StringUtils.leftPad("Dn(<:d2", 2838);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceChars("lhs^OihrMasDZP834<", "Dn(<:d2", string2);
      assertNotNull(string5);
      assertEquals("lhs^OihrMasZP834", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.replaceChars(" ", "org.easymock.bytebuddy.asm.Advice$OnNonDefaultValue", (String) null);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase(" ");
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string3 = StringUtils.uncapitalize("Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "EWH`3s&O", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.trimToNull((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.rotate("search and Replace array lengths don't match: ", (-1));
      assertNotNull(string5);
      assertEquals("earch and Replace array lengths don't match: s", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'I', (-518), 3364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -518
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '5', 3, 108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 108
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'h');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 35);
      assertNotNull(string2);
      assertEquals("jupiter.DisableIfTestFailsExtensionorg.junitpioneer.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("jupiter.DisableIfTestFailsExtensionorg.junitpioneer.", "jupiter.DisableIfTestFailsExtensionorg.junitpioneer.", 2847);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(53, stringArray1.length);
      
      String string3 = StringUtils.abbreviateMiddle("zV vwx+}>zv[GC*N;", "zV vwx+}>zv[GC*N;", 13);
      assertNotNull(string3);
      assertEquals("zV vwx+}>zv[GC*N;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((boolean[]) null, 'n');
      assertNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.removeIgnoreCase("jupiter.DisableIfTestFailsExtensionorg.junitpioneer.", "jupiter.DisableIfTestFailsExtensionorg.junitpioneer.");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.repeat("org.junitpioneer.jupiter.DisableIfTestFailsExtension", (String) null, 1186);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("zV vwx+}>zv[GC*N;");
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string2));
      
      String string8 = StringUtils.join((Iterable<?>) linkedHashSet0, '&');
      assertNotNull(string8);
      assertEquals("", string8);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(linkedHashSet0.contains(string2));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "org.junitpioneer.jupiter.DisableIfTestFailsExtension", 801);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      
      String string9 = StringUtils.replaceAll("b%_mP w falseRtrueRfalseRfalseRfalseRfalse", "", "{}");
      assertNotNull(string9);
      assertEquals("{}b{}%{}_{}m{}P{} {}w{} {}f{}a{}l{}s{}e{}R{}t{}r{}u{}e{}R{}f{}a{}l{}s{}e{}R{}f{}a{}l{}s{}e{}R{}f{}a{}l{}s{}e{}R{}f{}a{}l{}s{}e{}", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.repeat("", Integer.MIN_VALUE);
      assertNotNull(string10);
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring((String) null, 2, 2);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("Search and Replace array lengths don't match: "));
      
      String string1 = StringUtils.join((List<?>) vector0, 'q', 1854, 354);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.remove("t", (String) null);
      assertNotNull(string0);
      assertEquals("t", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.replaceChars("4$5}Q]Nv/9$-|q]", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("4$5}Q]Nv/9$-|q]", string0);
      
      String string1 = StringUtils.rightPad("C!Y#ET", 1484);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "4$5}Q]Nv/9$-|q]", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, "4$5}Q]Nv/9$-|q]", (-1922));
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst((String) null, "gF", "C!Y#ET");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "4$5}Q]Nv/9$-|q]";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "4$5}Q]Nv/9$-|q]";
      String string4 = StringUtils.appendIfMissingIgnoreCase(string1, (CharSequence) null, charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1922);
      longArray0[1] = (long) (-1922);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1922);
      String string5 = StringUtils.join(longArray0, 'Y', 1484, (-380));
      assertArrayEquals(new long[] {(-1922L), (-1922L), (-1L), (-1922L)}, longArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, longArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string4, (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = "\"!X&bZY00S8|IQ_%dG*";
      // Undeclared exception!
      StringUtils.rightPad("\"!X&bZY00S8|IQ_%dG*", 65536, '@');
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      char char0 = 'm';
      String string0 = StringUtils.join(booleanArray0, 'm', 65536, 3086);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, booleanArray0.length);
      
      String string1 = StringUtils.substringAfter("", 3086);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "J^;%ccG?w,WGQjz%$";
      String string3 = StringUtils.strip("J^;%ccG?w,WGQjz%$", "");
      assertNotNull(string3);
      assertEquals("J^;%ccG?w,WGQjz%$", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.rightPad("J^;%ccG?w,WGQjz%$", (-1083), 'm');
      assertNotNull(string4);
      assertEquals("J^;%ccG?w,WGQjz%$", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      charSequenceArray0[1] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      charSequenceArray0[2] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      charSequenceArray0[3] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      String string5 = StringUtils.substringBeforeLast("J^;%ccG?w,WGQjz%$", "709pCorg.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string5);
      assertEquals("J^;%ccG?w,WGQjz%$", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      charSequenceArray0[5] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "J^;%ccG?w,WGQjz%$";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfAny("J^;%ccG?w,WGQjz%$", charSequenceArray0);
      assertEquals(17, int1);
      assertFalse(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string6 = StringUtils.substringAfter("J^;%ccG?w,WGQjz%$", "J^;%ccG?w,WGQjz%$");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      // Undeclared exception!
      StringUtils.rightPad("doPrivileged", 65536, 'm');
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.rightPad("N`K^#", 8216, 'n');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Threshold must not be negative";
      stringArray1[2] = "s}OX";
      stringArray1[3] = "f;";
      stringArray1[4] = "f;";
      stringArray1[5] = "f;";
      stringArray1[6] = "(N]\"kOH-AjPcA1N";
      stringArray1[7] = null;
      String string1 = StringUtils.replaceEachRepeatedly("s}OX", (String[]) null, stringArray1);
      assertNotNull(string1);
      assertEquals("s}OX", string1);
      assertEquals(8, stringArray1.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny("Threshold must not be negative", stringArray1);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(8, stringArray1.length);
      
      String string2 = StringUtils.substringBefore("org.easymock.bytebuddy.matcher.ElementMatcher$Junction$AbstractBase", 3058);
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.matcher.ElementMatcher$Junction$AbstractBase", string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.right("Supplied value must be a valid byte literal between -32768 and 32767: [", (-536));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-536));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      objectArray0[2] = (Object) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      String string1 = StringUtils.join(objectArray0, '\\');
      assertNotNull(string1);
      assertEquals("\\Supplied value must be a valid byte literal between -32768 and 32767: [\\Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      
      String string2 = StringUtils.replaceOnce("^ b!{/-kB>euGE&iU#", "", "jdFk}3d(*");
      assertNotNull(string2);
      assertEquals("^ b!{/-kB>euGE&iU#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceIgnoreCase("", "Supplied value must be a valid byte literal between -32768 and 32767: [", "jdFk}3d(*");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("^ b!{/-kB>euGE&iU#", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [", (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 9, 20);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.rightPad("", 20);
      assertNotNull(string5);
      assertEquals("                    ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      String string6 = StringUtils.join(longArray0, '#');
      assertArrayEquals(new long[] {9L, (-1L), (-1L)}, longArray0);
      assertNotNull(string6);
      assertEquals("9#-1#-1", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "\n");
      assertNotNull(string2);
      assertEquals("\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "\n\n";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotNull(locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.getLanguage());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.toString());
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance(charSequenceArray0[1], "\n", locale1);
      assertEquals(1, int0);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\n\n", (CharSequence) "\n");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("p_(oZiRdW");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.StringUtils", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("u;-V}9XVvQv;G", "u;-V}9XVvQv;G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t";
      stringArray0[1] = "";
      stringArray0[2] = "u;-V}9XVvQv;G";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals("NNNNN", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.appendIfMissingIgnoreCase("\n", "NNNNN", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = "DvjkLEQ@CEW*!w#JR3<";
      int int0 = StringUtils.compareIgnoreCase("NNNNN", "DvjkLEQ@CEW*!w#JR3<", true);
      assertEquals(10, int0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      charArray1[1] = 'N';
      charArray1[2] = 'N';
      charArray1[3] = 'N';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "DvjkLEQ@CEW*!w#JR3<", charArray1);
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N'}, charArray1);
      assertFalse(boolean1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray1.length);
      
      String string4 = "\\";
      String string5 = StringUtils.upperCase("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        Charset.forName("\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = StringUtils.removeStart("&qC-Ce(btOD[}", "\"$Ps.T`YAPM");
      assertNotNull(string0);
      assertEquals("&qC-Ce(btOD[}", string0);
      
      String string1 = StringUtils.wrapIfMissing("/ ZJB,H?Ppw;mj)7-", "&qC-Ce(btOD[}");
      assertNotNull(string1);
      assertEquals("&qC-Ce(btOD[}/ ZJB,H?Ppw;mj)7-&qC-Ce(btOD[}", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((float[]) null, '!');
      assertNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "RLQ&3~dW-#^<OyC", supplier0);
      assertNotNull(charSequence0);
      assertEquals("RLQ&3~dW-#^<OyC", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("\"$Ps.T`YAPM", "RLQ&3~dW-#^<OyC", (-79));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("\r", supplier1);
      assertNotNull(string3);
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.leftPad(",VZ8w_M", 408, "not be nullNNNNN");
      assertNotNull(string4);
      assertEquals("not be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNnot be nullNNNNNn,VZ8w_M", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("Strings must not be null");
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripToNull("N");
      assertNotNull(string3);
      assertEquals("N", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.uncapitalize("N");
      assertNotNull(string4);
      assertEquals("n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("", "~Qh;twV~Cer[");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.abbreviate("l~HD{@Y7)R>", 4, 7);
      assertNotNull(string6);
      assertEquals("l~HD...", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.reverseDelimited("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", 'D');
      assertNotNull(string7);
      assertEquals("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.repeat("\n", (-473));
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.join((long[]) null, 'Q', (-1), (-1));
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "#$4t+s", (CharSequence) null, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.mid("\r", 64, 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("A", "", stringArray0);
      assertNotNull(string1);
      assertEquals("A", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip(".>BAL", "d?;CD4[B=XD");
      assertNotNull(string1);
      assertEquals(".>BAL", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "&O3vaO";
      stringArray0[2] = ".>BAL";
      stringArray0[3] = "";
      stringArray0[4] = ".>BAL";
      stringArray0[5] = "";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals("&O3vaO", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      
      String string3 = StringUtils.substring("fc2)9HaGYnDPG", (-1432), 209);
      assertNotNull(string3);
      assertEquals("fc2)9HaGYnDPG", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&O3vaO", (char[]) null);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("&O3vaO", stringArray0);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNumericSpace(".>BAL");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.wrap((String) null, '4');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.strip("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].");
      assertNotNull(string0);
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "checkPermission", (char[]) null);
      assertFalse(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(19);
      assertNotNull(charBuffer0);
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      boolean boolean1 = StringUtils.isAlphaSpace(charBuffer0);
      assertFalse(boolean1);
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.substringBetween("_=/KR]W[", "Argument 0 can't be null");
      assertNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.upperCase("I%j14);Q1jkw");
      assertNotNull(string2);
      assertEquals("I%J14);Q1JKW", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("Argument 0 can't be null"));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.defaultString("I%j14);Q1jkw");
      assertNotNull(string3);
      assertEquals("I%j14);Q1jkw", string3);
      assertFalse(string3.equals((Object)string2));
      
      Set<String> set1 = charset0.aliases();
      assertNotNull(set1);
      assertSame(set1, set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertFalse(set1.contains("Argument 0 can't be null"));
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("Argument 0 can't be null"));
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("Argument 0 can't be null"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(hashSet0.contains("Argument 0 can't be null"));
      assertFalse(list0.contains("Argument 0 can't be null"));
      
      String string4 = StringUtils.repeat('v', 2639);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int[] intArray0 = StringUtils.toCodePoints(string4);
      assertNotNull(intArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2639, intArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "I%J14);Q1JKW", 'v');
      assertEquals(0, int0);
      
      try { 
        StringUtils.getBytes("I%j14);Q1jkw", "_=/KR]W[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("Strings must not be null");
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripToNull("N");
      assertNotNull(string3);
      assertEquals("N", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.uncapitalize("N");
      assertNotNull(string4);
      assertEquals("n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int0);
      
      int int1 = StringUtils.compareIgnoreCase("c+(Cd]H{1T<.2YZY", "", true);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '(', (-2484), (-2728));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      
      String string1 = "(";
      String string2 = ")7ldH(V$iR";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("(", "", ")7ldH(V$iR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", "\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 2044);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("=4DK=/&XBSl^}f]7", "");
      assertNotNull(string2);
      assertEquals("=4DK=/&XBSl^}f]7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "Uw_Opn 3Ify9dcK@}");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.rotate("=4DK=/&XBSl^}f]7", 0);
      assertNotNull(string3);
      assertEquals("=4DK=/&XBSl^}f]7", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      String string4 = StringUtils.join(floatArray0, '2');
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      assertEquals("0.020.0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2, floatArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Uw_Opn 3Ify9dcK@}", supplier0);
      assertNotNull(charSequence0);
      assertEquals("Uw_Opn 3Ify9dcK@}", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      
      int int2 = StringUtils.lastOrdinalIndexOf("=4DK=/&XBSl^}f]7", "Uw_Opn 3Ify9dcK@}", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("U:Y+XGVqW+X/-hP#IP");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("U:Y+XGVqW+X/-hP#IP", supplier1);
      assertNotNull(string5);
      assertEquals("U:Y+XGVqW+X/-hP#IP", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("9NZ^BJ", 0, "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string6);
      assertEquals("9NZ^BJ", string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '9', (-1277), 1244);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("O)^aS^ Ir^0qy0xK(`<...", supplier0);
      assertNotNull(string0);
      assertEquals("O)^aS^ Ir^0qy0xK(`<...", string0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'b', 117, 117);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "O)^aS^ Ir^0qy0xK(`<...", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.join((List<?>) null, 'b', 117, 117);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("cZl7(o:%Z=[zEYg82zZ", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("cZl7(o:%Z=[zEYg82zZ", string0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("Strings must not be null");
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Strings must not be null");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'T';
      charArray0[2] = 'H';
      int int1 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertArrayEquals(new char[] {'B', 'T', 'H'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("DN%+:,{l3 resource factory", "");
      assertNotNull(string3);
      assertEquals("DN%+:,{l3 resource factory", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.upperCase("EZ60cF5.jy,Ik");
      assertNotNull(string0);
      assertEquals("EZ60CF5.JY,IK", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("EZ60cF5.jy,Ik");
      assertNotNull(string1);
      assertEquals("EZ60cF5.jy,Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "EZ60cF5.jy,Ik", "f|=M/p5@p");
      assertEquals(6, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'T';
      charArray0[2] = 'z';
      charArray0[3] = 'I';
      charArray0[4] = 'H';
      int int1 = StringUtils.indexOfAny((CharSequence) "EZ60cF5.jy,Ik", charArray0);
      assertArrayEquals(new char[] {'w', 'T', 'z', 'I', 'H'}, charArray0);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      String string2 = StringUtils.toRootLowerCase("f|=M/p5@p");
      assertNotNull(string2);
      assertEquals("f|=m/p5@p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("f|=M/p5@p", "Locale must not be null");
      assertNotNull(string3);
      assertEquals("f|=M/p5@p", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("`AuEJaHmb[ 7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`auejahmb[ 7";
      String string1 = StringUtils.strip("`auejahmb[ 7", "V|1I-{:~o");
      assertNotNull(string1);
      assertEquals("`auejahmb[ 7", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("`AuEJaHmb[ 7", "`AuEJaHmb[ 7");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("4c=k4", "zyLs.X7fIm0D$;n6");
      assertNotNull(string3);
      assertEquals("4c=k4", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.substringBetween("V|1I-{:~o", "4c=k4");
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("`auejahmb[ 7", (-299), 'q');
      assertNotNull(string5);
      assertEquals("`auejahmb[ 7", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean3 = StringUtils.startsWithAny("`auejahmb[ 7", stringArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAllUpperCase("`auejahmb[ 7");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", " ", stringArray0);
      assertNotNull(string6);
      assertEquals(" Minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals(5, stringArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("4c=k4"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4c=k4", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "\n", (CharSequence) " ");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.leftPad("st not be nullz`L4lG9.\"x", 16, "st not be nullz`L4lG9.\"x");
      assertNotNull(string0);
      assertEquals("st not be nullz`L4lG9.\"x", string0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("The type must not be null");
      assertNotNull(string0);
      assertEquals("the type must not be null", string0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", true);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String string1 = StringUtils.join(booleanArray0, 'M', 160, 46);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, booleanArray0.length);
      
      String string2 = StringUtils.removeEnd("!q", " ");
      assertNotNull(string2);
      assertEquals("!q", string2);
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string2));
      
      String string3 = StringUtils.trimToNull("pCGgX^~hkQd`?npCGgX^~hkQd`?n");
      assertNotNull(string3);
      assertEquals("pCGgX^~hkQd`?npCGgX^~hkQd`?n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "/-~{(~K]P #s\"Op-,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.right("-4w@v{x985=", (-5283));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", 1, (-1204));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("maxWith cannot be negative", "maxWith cannot be negative", (-1204));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative", 861);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '$', (-1), (-1337));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("UGd{~\"g", (-260));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("UGd{~\"g", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.getDigits("Nnz+lGn:^n`c");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.substringAfter("l,0o~>NQK[{6", "org.easymock.bytebu");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      
      int int2 = StringUtils.indexOf((CharSequence) "l,0o~>NQK[{6", (CharSequence) "", (-1));
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.remove("@8j[!;", "@8j[!;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("@8j[!;", "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBetween("Strings must not be null", "x");
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "x", 0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Strings must not be null@8j[!;Strings must not be null";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "@8j[!;";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "Strings must not be null@8j[!;Strings must not be null";
      String string4 = StringUtils.join(objectArray0, '*');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("Strings must not be null@8j[!;Strings must not be null*****@8j[!;**Strings must not be null@8j[!;Strings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfterLast((String) null, "f;");
      assertNull(string3);
      
      String string4 = StringUtils.center((String) null, (-1), "3Tx3FUKDS?#F_gpsMf");
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("ORtD_](8.\"J9-", 2265, 10);
      assertNotNull(string5);
      assertEquals("...(8.\"J9-", string5);
      assertFalse(string5.equals((Object)string0));
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = 3777;
      String string6 = StringUtils.repeat('\\', (-12));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "3Tx3FUKDS?#F_gpsMf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "f", 10, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.capitalize("u");
      assertNotNull(string0);
      assertEquals("U", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("u");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 2047L;
      String string0 = StringUtils.leftPad("x=Y,j`)", 11, "1^crcyJ_~+");
      assertNotNull(string0);
      assertEquals("1^crx=Y,j`)", string0);
      
      String string1 = StringUtils.substringAfterLast("&qC-Ce(btOD[}", "W~@nw");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("x=Y,j`)", 11);
      assertNotNull(string2);
      assertEquals("    x=Y,j`)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBefore(" vs ", 11);
      assertNotNull(string3);
      assertEquals(" vs ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBetween("Expected exactly one annotation to provide an ArgumentSource, found %d.", ".n/");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ".n/";
      charSequenceArray0[1] = (CharSequence) "1^crcyJ_~+";
      String string5 = StringUtils.substring("Minimum abbreviation width is %dM", 102, (-1027));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      charSequenceArray0[3] = (CharSequence) "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      boolean boolean1 = StringUtils.startsWithAny("Expected exactly one annotation to provide an ArgumentSource, found %d.", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase((String) null, "brqo'fU+MK", charSequenceArray0);
      assertNull(string6);
      assertEquals(4, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " on ", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category2);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category2));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      assertNotNull(enumSet1);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      
      String string1 = StringUtils.join((Iterable<?>) enumSet1, "b%_mP w falseRtrueRfalseRfalseRfalseRfalse");
      assertNotNull(string1);
      assertEquals("DISPLAYb%_mP w falseRtrueRfalseRfalseRfalseRfalseFORMAT", string1);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.UK;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("en", locale2.getLanguage());
      assertEquals("en_GB", locale2.toString());
      assertEquals("GBR", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("GB", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string2);
      assertEquals("Chinese", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale3 = Locale.ITALY;
      assertNotNull(locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("it_IT", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("it", locale3.getLanguage());
      assertEquals("IT", locale3.getCountry());
      assertEquals("ita", locale3.getISO3Language());
      assertEquals("ITA", locale3.getISO3Country());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      
      Locale locale4 = Locale.GERMANY;
      assertNotNull(locale4);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertEquals("", locale4.getVariant());
      assertEquals("de_DE", locale4.toString());
      assertEquals("DEU", locale4.getISO3Country());
      assertEquals("de", locale4.getLanguage());
      assertEquals("DE", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale3));
      
      String string3 = locale1.getDisplayScript(locale2);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale4);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en_GB", locale2.toString());
      assertEquals("GBR", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("GB", locale2.getCountry());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale4));
      
      String string4 = StringUtils.lowerCase("kWbO\"xis^m1", locale4);
      assertNotNull(string4);
      assertEquals("kwbo\"xis^m1", string4);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertEquals("", locale4.getVariant());
      assertEquals("de_DE", locale4.toString());
      assertEquals("DEU", locale4.getISO3Country());
      assertEquals("de", locale4.getLanguage());
      assertEquals("DE", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale3));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cannot access member field ", "]Na-O qK\"w/6;i&", (-32768));
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" does not define exactly one abstract method: Co]etttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt6cMaXbd/E<>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      String string1 = StringUtils.chomp("|l", "|l");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("*bX2", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "|l", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "l|", (CharSequence) "l|");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("l|", stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.remove("", "maxWith cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      
      String string4 = StringUtils.defaultString(" vs ", "*bX2");
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isBlank("maxWith cannot be negative");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "#!3u:r9$~/0Y", (CharSequence) "l|", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.defaultString(" ", "");
      assertNotNull(string5);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      String string6 = StringUtils.join((Object[]) stringArray1, "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", 17, 17);
      assertNotNull(string6);
      assertEquals("", string6);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      
      boolean boolean5 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      boolean boolean6 = StringUtils.isNumericSpace("l|");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\n"));
      
      String string3 = StringUtils.removeAll("p{InCombiningDiacriticalMarks}+", "\n");
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char char0 = 'K';
      String string4 = StringUtils.trim("DISABLED_KEY");
      assertNotNull(string4);
      assertEquals("DISABLED_KEY", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) "DISABLED_KEY", 'K');
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("\n", "\n", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "E{I :o5;~93Gx", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", '?');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rotate("Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", 0);
      assertEquals("Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", (CharSequence) "Morg.junitpioneer.jupiter.json.JsonInlineArgumentsProviderMorg.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 600);
      assertNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'Q';
      charArray0[2] = 'h';
      charArray0[3] = 'w';
      charArray0[4] = 'h';
      charArray0[5] = '#';
      charArray0[6] = '!';
      charArray0[7] = 'e';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'[', 'Q', 'h', 'w', 'h', '#', '!', 'e'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = StringUtils.replaceEachRepeatedly("~5-;8ar-p$_wli3K,QR", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("~5-;8ar-p$_wli3K,QR", string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '#');
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string1);
      assertEquals("DisabledUntil", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("R+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEnd("52IoQsn", "DisabledUntil");
      assertNotNull(string2);
      assertEquals("52IoQsn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("52IoQsn", "VqaLAeXV|~VPT|}'", 1158);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'd';
      intArray0[1] = 43;
      intArray0[2] = 1351;
      intArray0[3] = (-972);
      intArray0[4] = (-972);
      intArray0[5] = 43;
      intArray0[6] = 1158;
      String string3 = StringUtils.join(intArray0, 'd', 43, 43);
      assertArrayEquals(new int[] {100, 43, 1351, (-972), (-972), 43, 1158}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, intArray0.length);
      
      String string4 = StringUtils.substringAfterLast("52IoQsn", "DisabledUntil");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("52IoQsn", 100, 100);
      assertNotNull(string5);
      assertEquals("52IoQsn", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "52IoQsn", (CharSequence) "R+", 65);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/@w't{bBgAn.WDgyr/", (CharSequence) "=4DK=/&XBSl^}8f]7", 81);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("%l?Wv[Ec$j5 #YG", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.removeFirst("Locale must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.removeStart("Locale must not be null", "Locale must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("Locale must not be null", "Locale must not be null");
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("Locale must not be null");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string3 = null;
      String string4 = StringUtils.replacePattern((String) null, "Locale must not be null", " ");
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) "%l?Wv[Ec$j5 #YG", 36);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("...", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains(string3));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.defaultString("BF=J/;25p%Z2W9");
      assertNotNull(string4);
      assertEquals("BF=J/;25p%Z2W9", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(string3));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(vector0.contains(string3));
      assertFalse(list0.contains(string3));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      String string0 = StringUtils.removeStart("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler", "~5-;8ar-p$_wli3K,QR");
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler", string0);
      
      String string1 = StringUtils.substringAfter("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler", "~5-;8ar-p$_wli3K,QR");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("~5-;8ar-p$_wli3K,QR"));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.defaultString("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler");
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(set0.contains(string2));
      assertFalse(list0.contains(string2));
      
      int[] intArray0 = StringUtils.toCodePoints("~5-;8ar-p$_wli3K,QR");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.abbreviate("", " vs ", 2, 47);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.removeEnd((String) null, "Strings must not be null");
      assertNull(string2);
      
      String string3 = StringUtils.defaultString((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp("[INT2T!");
      assertNotNull(string4);
      assertEquals("[INT2T!", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'M');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 3573);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((float[]) null, 'i', 93, 3573);
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.unwrap("", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) (-272);
      longArray0[2] = (long) 'd';
      long long0 = 3501L;
      longArray0[3] = 3501L;
      longArray0[4] = (long) (-272);
      String string3 = StringUtils.join(longArray0, 'R', (-272), (-272));
      assertArrayEquals(new long[] {100L, (-272L), 100L, 3501L, (-272L)}, longArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, longArray0.length);
      
      String string4 = StringUtils.center("Hdl9=TA(C0UD", 57, 'T');
      assertNotNull(string4);
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTHdl9=TA(C0UDTTTTTTTTTTTTTTTTTTTTTT", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.getDigits("' is no valid ISO-8601 string.");
      assertNotNull(string5);
      assertEquals("8601", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      String string1 = "Minimum abbreviation width with offset is %d";
      int int0 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", true);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeFirst("d{+kzobVoV,v:!uN", "pCGgX^~hkQd`?npCGgX^~hkQd`?n");
      assertNotNull(string2);
      assertEquals("d{+kzobVoV,v:!uN", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStart("pCGgX^~hkQd`?npCGgX^~hkQd`?n", "Hdl9=TA(C0UD");
      assertNotNull(string3);
      assertEquals("pCGgX^~hkQd`?npCGgX^~hkQd`?n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "U:Y+XGVqW+X/-h";
      String string5 = StringUtils.wrapIfMissing("U:Y+XGVqW+X/-h", "P#IP");
      assertNotNull(string5);
      assertEquals("P#IPU:Y+XGVqW+X/-hP#IP", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isMixedCase("d{+kzobVoV,v:!uN");
      assertTrue(boolean0);
      
      String string6 = StringUtils.join((float[]) null, '<');
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "-;I4");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("(P%S", 93);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.chop(stringArray0[0]);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\r", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.substring("u1(650bua'>k5w", (-1973), (-1973));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "u1(650bua'>k5w", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object2;
      objectArray0[1] = (Object) "Strings must not be null";
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "\",2c>0LC^%%65";
      objectArray0[5] = object0;
      String string1 = StringUtils.rotate("Cannot assign self type: ", 13);
      assertNotNull(string1);
      assertEquals("n self type: Cannot assig", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("/|YQe*jvW f~'2M", 2, 5);
      assertNotNull(string2);
      assertEquals("YQe*j", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\",2c>0LC^%%65";
      charSequenceArray0[1] = (CharSequence) "n self type: Cannot assig";
      charSequenceArray0[2] = (CharSequence) "n self type: Cannot assig";
      charSequenceArray0[3] = (CharSequence) "YQe*j";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.appendIfMissing("!SIO&O.^[v", charSequenceArray0[3], charSequenceArray0);
      assertNotNull(string3);
      assertEquals("!SIO&O.^[vYQe*j", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = StringUtils.getBytes("n self type: Cannot assig", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(25, byteArray0.length);
      
      String string4 = StringUtils.truncate("", 13);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.repeat("", "f;", 35);
      assertNotNull(string0);
      assertEquals("f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;f;", string0);
      
      String[] stringArray0 = StringUtils.split("k/Qe,]H=MeY,", 'c');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("_k:225Dc3KzXO");
      assertNotNull(string1);
      assertEquals("_k:225Dc3KzXO", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "zV vwx\\+}>zv[GC*N;";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rotate("9SGKdX~xE$NxA", (-1410));
      assertNotNull(string3);
      assertEquals("~xE$NxA9SGKdX", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.mid("_k:225Dc3KzXO", (-1), 1401);
      assertNotNull(string4);
      assertEquals("_k:225Dc3KzXO", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "org.junitpioneer.jupiter.DisableIfTestFailsExtension", stringArray0);
      assertNotNull(string5);
      assertEquals("Minimum abbreviation width with offset is %dorg.junitpioneer.jupiter.DisableIfTestFailsExtension", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Charset.forName("_k:225Dc3KzXO");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _k:225Dc3KzXO
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.repeat("tJ", 43);
      assertNotNull(string0);
      assertEquals("tJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJtJ", string0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("l", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "l");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-4);
      String string0 = "K";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "K");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // K
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-98);
      shortArray0[1] = (short)940;
      shortArray0[2] = (short) (-1740);
      shortArray0[3] = (short)256;
      shortArray0[4] = (short)123;
      shortArray0[5] = (short)128;
      String string0 = StringUtils.join(shortArray0, 'o', (int) (short)256, 17);
      assertArrayEquals(new short[] {(short) (-98), (short)940, (short) (-1740), (short)256, (short)123, (short)128}, shortArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(6, shortArray0.length);
      
      String string1 = StringUtils.replaceFirst("()` not found in ", "()` not found in ", "*;0Ug5NI");
      assertNotNull(string1);
      assertEquals("()*;0Ug5NI", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("offset cannot be negative", "offset cannot be negative", "()*;0Ug5NI");
      assertNotNull(string2);
      assertEquals("());0Ug5NII(Ug0gI0NU0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("@<@V;CBA}+huPkiyd");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@<@V;CBA}+huPkiyd", "h");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("offset cannot be negative", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEnd("offset cannot be negative", "h");
      assertNotNull(string3);
      assertEquals("offset cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)940;
      longArray0[1] = (long) (short)940;
      String string4 = StringUtils.join(longArray0, 'o', 17, (-3010));
      assertArrayEquals(new long[] {940L, 940L}, longArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("O)^aS^ Ir^0qy0xK(`<...", supplier0);
      assertNotNull(string0);
      assertEquals("O)^aS^ Ir^0qy0xK(`<...", string0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp((String) null, "T%Nju]01c$");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      assertEquals("p,tmt]0au~xfk{", string0);
      
      String string1 = StringUtils.substringAfter("2Jc]6/'b!p>\"", (-54));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("2Jc]6/'b!p>\"", "");
      assertNotNull(string2);
      assertEquals("2Jc]6/'b!p>\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripAccents("AhjKcc@a{DX<Ib");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[2] = (-54);
      String string4 = StringUtils.normalizeSpace("");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.lastOrdinalIndexOf("2Jc]6/'b!p>\"", "", 3);
      assertEquals(12, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "2Jc]6/'b!p>\"", (-54));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.swapCase("");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = new String[0];
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      String string7 = StringUtils.repeat("p,tmt]0au~xfk{", "AhjKcc@a{DX<Ib", (-1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.removePattern("", "`%9hDW6");
      assertNotNull(string8);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "JQr'", (CharSequence) "JQr'");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[10];
      stringArray0[2] = "JQr'";
      String string0 = StringUtils.repeat("JQr'", "JQr'", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Strings must not be null", 6);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "", 2991);
      assertEquals(24, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2252, 6);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Strings must not be null", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string2);
      assertEquals("French", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase("Strings must not be null", locale0);
      assertNotNull(string3);
      assertEquals("strings must not be null", string3);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.mid("sR7t*L_s|4G0_*';SF", 52, 52);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "sR7t*L_s|4G0_*';SF");
      assertTrue(boolean0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.overlay("", (String) null, (-184), 1318);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "sR7t*L_s|4G0_*';SF", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = "!g5l4-g/MZ^,";
      String string1 = StringUtils.toRootLowerCase("!g5l4-g/MZ^,");
      assertNotNull(string1);
      assertEquals("!g5l4-g/mz^,", string1);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'M';
      String string2 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", 'M');
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %dM", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("Minimum abbreviation width is %dM");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", 1, 51);
      assertEquals((-1), int0);
      
      int int1 = (-1);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("!g5l4-g/mz^,", "Minimum abbreviation width is %dM", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "!g5l4-g/mz^,", (CharSequence) "!g5l4-g/mz^,", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Minimum abbrevia>ion widch is %d", 'M');
      assertNotNull(string0);
      assertEquals("Minimum abbrevia>ion widch is %dM", string0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbrevia>ion widch is %dM", 'M');
      assertNotNull(string1);
      assertEquals("Minimum abbrevia>ion widch is %dM", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String[] stringArray1 = StringUtils.split("7zX$@:");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.replacePattern("CartesianProductTest can only take exactly one type of arguments source.", (String) null, "...");
      assertNotNull(string1);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.overlay((String) null, "l|", (-1386), 2989);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("CartesianProductTest can only take exactly one type of arguments source.");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase(".js;vj(MK{");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(7, stringArray2.length);
      
      String string3 = StringUtils.substringBetween("Instance check requires a single regular-typed argument: ", "l|");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 384, 384);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.right("#$4t!t", 4);
      assertNotNull(string0);
      assertEquals("4t!t", string0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, " ", (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNotBlank(" ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToNull("maxWith cannot be negative");
      assertNotNull(string2);
      assertEquals("maxWith cannot be negative", string2);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals("NNNNN", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.appendIfMissingIgnoreCase("\n", "NNNNN", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("NNNNN", "DvjkLEQ@CEW*!w#JR3<", true);
      assertEquals(10, int0);
      
      String string3 = StringUtils.removeFirst("\u0005oxzWf!ULU56Fic|o:", "DvjkLEQ@CEW*!w#JR3<");
      assertNotNull(string3);
      assertEquals("\u0005oxzWf!ULU56Fic|o:", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart("Strings must not be null", "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing("NNNNN", "Strings must not be null");
      assertNotNull(string5);
      assertEquals("Strings must not be nullNNNNNStrings must not be null", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isMixedCase("NNNNN");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 10;
      String string6 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {0.0F, 0.0F, 78.0F, 10.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string6);
      assertEquals("0.0N0.0N78.0N10.0N0.0", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(5, floatArray0.length);
      
      String string7 = StringUtils.stripAccents((String) null);
      assertNull(string7);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "0.0N0.0N78.0N10.0N0.0", (CharSequence) "Strings must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", stringArray0);
      assertEquals(49, int0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.lastIndexOfAny("/", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("/", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("JQr'", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.capitalize("jXt<6");
      assertNotNull(string1);
      assertEquals("JXt<6", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("", "s}OX");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "JXt<6";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "JXt<6";
      charSequenceArray0[3] = (CharSequence) "jXt<6";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("(N]\"kOH-AjPcA1N");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string3 = StringUtils.replaceEachRepeatedly("Threshold must not be negative", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(12, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Threshold must not be negative", (CharSequence) "s}OX");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[0], stringArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o";
      stringArray0[1] = "o";
      stringArray0[2] = "k'4[";
      stringArray0[0] = "o";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("o", string0);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "o", (CharSequence) "k'4[", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = StringUtils.splitByWholeSeparator("O)^aS^ Ir^0qy0xK(`<...", "B;/{", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase("O)^aS^ Ir^0qy0xK(`<...", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("O)^aS^ Ir^0qy0xK(`<...", string0);
      
      String string1 = StringUtils.center("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (-1153), "u(J~%>L8U]@cf");
      assertNotNull(string1);
      assertEquals("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<t/3=vtbc]}C3`flH{", (CharSequence) "p{InCombiningDiacriticalMarks}+", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((boolean[]) null, '\'');
      assertNull(string2);
      
      String string3 = StringUtils.join((boolean[]) null, 'I');
      assertNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (CharSequence) "<t/3=vtbc]}C3`flH{");
      assertEquals(75, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals("O)^aS^ Ir^0qy0xK(`<...", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, (-1));
      assertNull(string5);
      
      int int2 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("u(J~%>L8U]@cf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((byte[]) null, 'M', 74, (-1565));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "\r", (-1), 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, "RLm,Bd16/]$R", 31, 31);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3655);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3655);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3655, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "\n");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(3655));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "\n", 76, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 256
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.swapCase("offset cannot be negativeo2o/]NI");
      assertNotNull(string0);
      assertEquals("OFFSET CANNOT BE NEGATIVEO2O/]ni", string0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 13);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "{98N{esT`7g";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-994);
      shortArray0[1] = (short)430;
      shortArray0[2] = (short)2;
      String string2 = StringUtils.join(shortArray0, 'T', (int) (short)430, (int) (short) (-994));
      assertArrayEquals(new short[] {(short) (-994), (short)430, (short)2}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(3, shortArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((float[]) null, '*', (-1981), (int) (short)430);
      assertNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("Ho4;", "");
      assertNotNull(string5);
      assertEquals("Ho4;", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.removeEndIgnoreCase(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean1 = StringUtils.isAlphanumeric("OBJECT VARARGS MUST NOT BE NULL");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.stripToNull("knSyr7?;");
      assertNotNull(string2);
      assertEquals("knSyr7?;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isWhitespace("' is no valid ISO-8601 string.");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean4 = StringUtils.startsWithAny("\n", charSequenceArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean5 = StringUtils.isAllUpperCase("Object varargs must not be null");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-13);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)3, (byte)82, (byte)117, (byte)23, (byte)0, (byte) (-96), (byte) (-49), (byte) (-13)}, byteArray0);
      assertNotNull(string4);
      assertEquals("\u0003Ru\u0017\u0000\uFFFD\uFFFD\uFFFD", string4);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.substring("*bX2", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "|l", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "l|", (CharSequence) "l|");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("l|", stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.remove("", "maxWith cannot be negative");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isNumericSpace("B$;B");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.unwrap("*bX2", 'O');
      assertNotNull(string4);
      assertEquals("*bX2", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringBetween("O)^aS^ Ir^0qy0xK(`<", "0*Dw&Q=mmkze9(;O", "Locale must not be null");
      assertNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'O', 48, 48);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      String string7 = StringUtils.chomp("4c=k4", "22(lRt}i<^=X3E9sl1{");
      assertNotNull(string7);
      assertEquals("4c=k4", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      
      boolean boolean3 = StringUtils.isNotEmpty("4c=k4");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string8 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string8);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals(4, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAllUpperCase("*bX2");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string9 = StringUtils.getIfBlank("eo<L`QJ=X4|9", supplier0);
      assertNotNull(string9);
      assertEquals("eo<L`QJ=X4|9", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Locale mist not be null");
      assertNotNull(string0);
      assertEquals("Localemistnotbenull", string0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.stripToEmpty("yN");
      assertNotNull(string0);
      assertEquals("yN", string0);
      
      String string1 = StringUtils.substring("yN", (-728));
      assertNotNull(string1);
      assertEquals("yN", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEnd("+/VLN_pruhz!<C", "yN");
      assertNotNull(string2);
      assertEquals("+/VLN_pruhz!<C", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.chomp("EmRE@sYFH9$ecyL");
      assertNotNull(string4);
      assertEquals("EmRE@sYFH9$ecyL", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "+/VLN_pruhz!<C";
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 2443.0F;
      objectArray0[3] = (Object) "yN";
      objectArray0[4] = (Object) 0.0F;
      String string5 = StringUtils.join(objectArray0, '|', (-728), (-728));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("zV vwx+}>zv[GC*N;");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "yN";
      charSequenceArray0[1] = (CharSequence) "yN";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "+/VLN_pruhz!<C";
      String string6 = StringUtils.appendIfMissing("zV vwx+}>zv[GC*N;", "EmRE@sYFH9$ecyL", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("zV vwx+}>zv[GC*N;", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      
      String string7 = StringUtils.wrap("", 'K');
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      
      String string8 = StringUtils.strip(" was expected to be static: ", "%s requires that either `contains` or `matches` is set.");
      assertNotNull(string8);
      assertEquals("was expected to be static:", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = StringUtils.join(floatArray0, '%', (-728), (-728));
      assertArrayEquals(new float[] {(-1.0F), 2443.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'h');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.DisableIfTestFailsExtension", 6, 6);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("D>7w", (String) null, 35);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 6);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      charArray0[7] = '&';
      charArray0[8] = '%';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'h', (-97), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Strings must not be null", "", 6);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "", 2991);
      assertEquals(24, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripStart("Strings must not be null", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", (String) null);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "=-oR(z:)?8zrl");
      assertNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("=-oR(z:)?8zrl"));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String string3 = StringUtils.join(intArray0, 'H', 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      
      String string4 = StringUtils.trim("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isWhitespace("=-oR(z:)?8zrl");
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviate("-HDagB", (-2209), 1436);
      assertNotNull(string5);
      assertEquals("-HDagB", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceAll((String) null, (String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.stripStart("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", (String) null);
      assertNotNull(string7);
      assertEquals("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.rightPad((String) null, 90);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.easymock.bytebu");
      assertNotNull(string0);
      assertEquals("org.easymock.bytebu", string0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("u;-V}9XVvQv;G", "u;-V}9XVvQv;G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "u;-V}9XVvQv;G";
      charSequenceArray0[1] = (CharSequence) "u;-V}9XVvQv;G";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-2334));
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("0", "]v,';GK7U/~", 2192);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`|)8WW08N", "]v,';GK7U/~", (-4639));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`|)8WW08N", 3643, (-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = "";
      int int0 = 30;
      String string1 = "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.replaceChars("", "{}", "Extension context \"");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "");
      assertTrue(boolean0);
      
      String string3 = null;
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Extension context \"";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = "%s must return a `%s` object";
      String string6 = StringUtils.chomp("%s must return a `%s` object");
      assertNotNull(string6);
      assertEquals("%s must return a `%s` object", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "%s must return a `%s` object";
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      
      Locale locale2 = (Locale)locale0.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.getLanguage());
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "%s must return a `%s` object", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.normalizeSpace(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "Uw_Opn 3Ify9dcK@}", (-42));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("offset cannot be negative", (-47));
      assertNotNull(string2);
      assertEquals("iveoffset cannot be negat", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("eBLJ3", (-1), (-1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.normalizeSpace("org.easymock.bytebuddy.build.CachedReturnPlugin");
      assertNotNull(string4);
      assertEquals("org.easymock.bytebuddy.build.CachedReturnPlugin", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((short[]) null, 'z');
      assertNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.replaceChars("7fUOsI6#v>sF9\"s", '=', '=');
      assertNotNull(string0);
      assertEquals("7fUOsI6#v>sF9\"s", string0);
      
      String string1 = StringUtils.substring("7fUOsI6#v>sF9\"s", 46);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7fUOsI6#v>sF9\"s", (CharSequence) "");
      assertNotNull(charSequence0);
      assertEquals("7fUOsI6#v>sF9\"s", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      
      String string2 = StringUtils.capitalize("method [");
      assertNotNull(string2);
      assertEquals("Method [", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.difference("Q8~4;M2KG>0_Jt@JS)v", "7fUOsI6#v>sF9\"s");
      assertNotNull(string3);
      assertEquals("7fUOsI6#v>sF9\"s", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase("7fUOsI6#v>sF9\"s", "7fUOsI6#v>sF9\"s");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((float[]) null, '=', 46, (-1858));
      assertNull(string5);
      
      String string6 = StringUtils.center("cZk(BS!7AuS%th?7@o7", (-3), (String) null);
      assertNotNull(string6);
      assertEquals("cZk(BS!7AuS%th?7@o7", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.join((float[]) null, '=');
      assertNull(string7);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence1 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence1);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "u;-V}9XVvQv;G+/VLN_pruhz!<CyN", 46);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7fUOsI6#v>sF9\"s");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[18];
      String string2 = StringUtils.join(byteArray0, '|');
      assertNotNull(string2);
      assertEquals("0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(18, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, 2);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string3 = StringUtils.join(booleanArray0, 'b');
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string3);
      assertEquals("falsebfalse", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, booleanArray0.length);
      
      String string4 = StringUtils.overlay("Minimum abbreviation width with offset is %d", "Method not available on current VM: ", 2835, (-1131));
      assertNotNull(string4);
      assertEquals("Method not available on current VM: ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Method not available on current VM: ", (CharSequence) "Method not available on current VM: ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      String string2 = StringUtils.center((String) null, 4948, "709pC");
      assertNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "709pC", 56);
      assertEquals(5, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("9WlIY");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("+trC;", "+trC;");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.repeat("9WlIY", 4559);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      String string2 = StringUtils.abbreviate("!b", "OBJECT VARARGS MUST NOT BE NULL", 505);
      assertNotNull(string2);
      assertEquals("!b", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chop("-SP6&d'6,A,");
      assertNotNull(string3);
      assertEquals("-SP6&d'6,A", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringBefore("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", 4315);
      assertNotNull(string4);
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.overlay("OBJECT VARARGS MUST NOT BE NULL", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", 28, 4315);
      assertNotNull(string5);
      assertEquals("OBJECT VARARGS MUST NOT BE Norg.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.removeEndIgnoreCase("OBJECT VARARGS MUST NOT BE NULL", "Search and Replace array lengths don't match: ");
      assertNotNull(string6);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isAlphaSpace("OBJECT VARARGS MUST NOT BE NULL");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("P0rDngF U=L:+d_D4");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.wrapIfMissing(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[18];
      String string2 = StringUtils.join(byteArray0, '|');
      assertNotNull(string2);
      assertEquals("0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(18, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, "#aXdc9%");
      assertNotNull(string3);
      assertEquals("DISPLAY", string3);
      assertEquals(1, enumSet0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.unwrap("\n", "");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.rotate("", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'n');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("66g1f|b9466g1f|b9t4", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[0] = 0L;
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.replacePattern("/7!5Tsp6}Kn>", (String) null, "CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string0);
      assertEquals("/7!5Tsp6}Kn>", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("/7!5Tsp6}Kn>", "...");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.ordinalIndexOf("/7!5Tsp6}Kn>", "/7!5Tsp6}Kn>", 3338);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsAny("/7!5Tsp6}Kn>", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (-2554));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("(O~C]FF20<'z>", "(O~C]FF20<'z>");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '8';
      charArray0[2] = 'm';
      charArray0[3] = 'B';
      charArray0[4] = '6';
      charArray0[5] = '\'';
      charArray0[6] = 'C';
      charArray0[7] = '%';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'[', '8', 'm', 'B', '6', '\'', 'C', '%'}, charArray0);
      assertNotNull(string1);
      assertEquals("[8mB6'C%", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = " is not a throwable type";
      // Undeclared exception!
      try { 
        StringUtils.joinWith(" is not a throwable type", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith(" declares less then ", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.center("o", 0, 'F');
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("UJ}%1rob~", "~c", "NNNNN");
      assertNotNull(string1);
      assertEquals("UJ}%1rob~", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("UJ}%1rob~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("!:+LZVY$t05cx>f", "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", 565, 66);
      assertNotNull(string2);
      assertEquals("!:+LZVY$t05cx>f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.join((Object[]) null, "No proxy target found for ", 0, 1149);
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", 2751, 2751);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.repeat((String) null, "The type must not be null", (-1));
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("o");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("~c");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.removeAll("", "kRtYd8iN");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '\"', 126, 3067);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1027);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "", "", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.trimToEmpty("StdIo_System_In");
      assertNotNull(string2);
      assertEquals("StdIo_System_In", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissing("&p!1j;~", "&p!1j;~", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("&p!1j;~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("checkPermission", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.substring("", 3311, 1590);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&O3vaO", charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("&O3vaO", stringArray1);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("checkPermission");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.wrap((String) null, '4');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.stripToEmpty("yN");
      assertNotNull(string0);
      assertEquals("yN", string0);
      
      String string1 = StringUtils.substring("yN", (-728));
      assertNotNull(string1);
      assertEquals("yN", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEnd("+/VLN_pruhz!<C", "yN");
      assertNotNull(string2);
      assertEquals("+/VLN_pruhz!<C", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString((String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chomp("EmRE@sYFH9$ecyL");
      assertNotNull(string4);
      assertEquals("EmRE@sYFH9$ecyL", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "+/VLN_pruhz!<C";
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 2443.0F;
      objectArray0[3] = (Object) "yN";
      objectArray0[4] = (Object) 0.0F;
      String string5 = StringUtils.join(objectArray0, '|', (-728), (-728));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("zV vwx+}>zv[GC*N;");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "yN";
      charSequenceArray0[1] = (CharSequence) "yN";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "+/VLN_pruhz!<C";
      String string6 = StringUtils.appendIfMissing("zV vwx+}>zv[GC*N;", "EmRE@sYFH9$ecyL", charSequenceArray0);
      assertNotNull(string6);
      assertEquals("zV vwx+}>zv[GC*N;", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(5, charSequenceArray0.length);
      
      String string7 = StringUtils.wrap("_rX", 'K');
      assertNotNull(string7);
      assertEquals("K_rXK", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.wrap("GMT", '+');
      assertNotNull(string0);
      assertEquals("+GMT+", string0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.capitalize("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(1, int0);
      
      String string1 = StringUtils.replacePattern("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", (-3196));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be null", "Strings must not be null");
      assertEquals(1.0, double0, 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Strings must not be null");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(24, charBuffer0.capacity());
      assertEquals("Strings must not be null", charBuffer0.toString());
      assertEquals(24, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(24, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(24, charBuffer0.remaining());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      String string2 = StringUtils.join(byteArray0, '\"', 121, 1);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      int int2 = StringUtils.ordinalIndexOf("Strings must not be null", charBuffer0, 0);
      assertEquals((-1), int2);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(24, charBuffer0.capacity());
      assertEquals("Strings must not be null", charBuffer0.toString());
      assertEquals(24, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(24, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(24, charBuffer0.remaining());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.startsWithAny("bl\"'<0EeAJ!Ip1", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("bl\"'<0EeAJ!Ip1", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      int int0 = StringUtils.length("bl\"'<0EeAJ!Ip1");
      assertEquals(16, int0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'T', 17, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.toRootUpperCase("&{ K8BM_:z1^v");
      assertNotNull(string0);
      assertEquals("&{ K8BM_:Z1^V", string0);
      
      String string1 = StringUtils.substringAfterLast("GX", 46);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join(floatArray0, '/', 2402, (-191));
      assertArrayEquals(new float[] {(-1.0F), 2443.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      
      String string3 = StringUtils.leftPad((String) null, 46);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-126);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'y', (int) (byte)120, 2402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.repeat("The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", "The `date` %s is before or on the current date %s, so `@DisabledUntil` no longer disabled test \"%s\". Please remove the annotation.", 35);
      assertNotNull(string0);
      
      String string1 = "org.easymock.bytebuddy.description.NamedElement";
      String[] stringArray0 = StringUtils.split("org.easymock.bytebuddy.description.NamedElement", 'h');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripToEmpty(" |zKf[sCf~3<sD'F");
      assertNotNull(string2);
      assertEquals("|zKf[sCf~3<sD'F", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substring("org.easymock.bytebuddy.description.NamedElement", 0);
      assertNotNull(string3);
      assertEquals("org.easymock.bytebuddy.description.NamedElement", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rotate("%`QW1qS)5V<xrAl", 3479);
      assertNotNull(string4);
      assertEquals("5V<xrAl%`QW1qS)", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.mid(" |zKf[sCf~3<sD'F", (-2567), 2655);
      assertNotNull(string5);
      assertEquals(" |zKf[sCf~3<sD'F", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
      
      String string6 = null;
      String string7 = StringUtils.appendIfMissing(", Length: ", "%`QW1qS)5V<xrAl", stringArray0);
      assertNotNull(string7);
      assertEquals(", Length: %`QW1qS)5V<xrAl", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        Charset.forName("JN$m4q{9_tvb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // JN$m4q{9_tvb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals("NNNNN", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.appendIfMissingIgnoreCase("\n", "NNNNN", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("NNNNN", "DvjkLEQ@CEW*!w#JR3<", true);
      assertEquals(10, int0);
      
      String string3 = StringUtils.removeFirst("\u0005oxzWf!ULU56Fic|o:", "DvjkLEQ@CEW*!w#JR3<");
      assertNotNull(string3);
      assertEquals("\u0005oxzWf!ULU56Fic|o:", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("Strings must not be null", "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.uncapitalize("/}J2WFR7LiL]3o&H");
      assertNotNull(string5);
      assertEquals("/}J2WFR7LiL]3o&H", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.trimToNull("I0M9}\"a3 1jmB@3s(^");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.rotate("I0M9}\"a3 1jmB@3s(^", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        Charset.forName("NNNNN");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // NNNNN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.leftPad("V@}M1Q", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("V@}M1Q");
      assertNotNull(string1);
      assertEquals("V@}M1Q", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("5*{EUHDPz{)g:F`!r9", "V@}M1Q", "5*{EUHDPz{)g:F`!r9");
      assertNotNull(string2);
      assertEquals("5*{EUHDPz{)g:F`!r9", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "V@}M1Q", (CharSequence) "V@}M1Q", 1158);
      assertEquals(0, int0);
      
      String string3 = StringUtils.chop("DISABLED_KEY");
      assertNotNull(string3);
      assertEquals("DISABLED_KE", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "V@}M1Q", (CharSequence) string0);
      assertFalse(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphaSpace("5*{EUHDPz{)g:F`!r9");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.contains((CharSequence) string0, 32);
      assertTrue(boolean4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      String string4 = StringUtils.unwrap("V@}M1Q", "Threshold must not be negative");
      assertNotNull(string4);
      assertEquals("V@}M1Q", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.defaultString((String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3659, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", charSequenceArray0[2]);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.right("o2o']NI", 6);
      assertNotNull(string3);
      assertEquals("2o']NI", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int3 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad("2o']NI", (-15));
      assertNotNull(string4);
      assertEquals("2o']NI", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBefore("", "XSd0~=w");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 126);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int4 = StringUtils.compare("Strings must not be nullStrings must not be null", "Threshold must not be negative", true);
      assertEquals((-1), int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = StringUtils.upperCase("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string1);
      assertEquals("UW_OPN 3IFY9DCK@}", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst(" on ", "Uw_Opn 3Ify9dcK@}");
      assertNotNull(string2);
      assertEquals(" on ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStart("$g>`m9-Dd GYz9Q}@]", "g|]@5hL{:~O'[l^20Yt");
      assertNotNull(string3);
      assertEquals("$g>`m9-Dd GYz9Q}@]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrapIfMissing("$g>`m9-Dd GYz9Q}@]", "wJTB !hEg&Zxj$+V1");
      assertNotNull(string4);
      assertEquals("wJTB !hEg&Zxj$+V1$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("g|]@5hL{:~O'[l^20Yt");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\"';
      floatArray0[1] = 667.79663F;
      floatArray0[2] = 0.0F;
      String string5 = StringUtils.join(floatArray0, '\"', 160, (-1338));
      assertArrayEquals(new float[] {34.0F, 667.79663F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(3, floatArray0.length);
      
      String string6 = StringUtils.leftPad("$g>`m9-Dd GYz9Q}@]", 25);
      assertNotNull(string6);
      assertEquals("       $g>`m9-Dd GYz9Q}@]", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.stripEnd("zV vwx+}>zv[GC*N;", "Strings must not be null");
      assertNotNull(string7);
      assertEquals("zV vwx+}>zv[GC*N;", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.wrap(" to be an annotation type", "Uw_Opn 3Ify9dcK@}");
      assertNotNull(string8);
      assertEquals("Uw_Opn 3Ify9dcK@} to be an annotation typeUw_Opn 3Ify9dcK@}", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "UW_OPN 3IFY9DCK@}", (-4235));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (-1));
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("\r", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.replaceChars("7fUOsI6#v>sF9\"s", '2', '2');
      assertNotNull(string0);
      assertEquals("7fUOsI6#v>sF9\"s", string0);
      
      String string1 = StringUtils.trimToNull("7fUOsI6#v>sF9\"s");
      assertNotNull(string1);
      assertEquals("7fUOsI6#v>sF9\"s", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7fUOsI6#v>sF9\"s", (CharSequence) "7fUOsI6#v>sF9\"s");
      assertNotNull(charSequence0);
      assertEquals("7fUOsI6#v>sF9\"s", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("method [");
      assertNotNull(string2);
      assertEquals("Method [", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.difference("Q8~4;M2KG>0_Jt@JS)v", "7fUOsI6#v>sF9\"s");
      assertNotNull(string3);
      assertEquals("7fUOsI6#v>sF9\"s", string3);
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase("7fUOsI6#v>sF9\"s", "7fUOsI6#v>sF9\"s");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((float[]) null, '2', 46, (-1858));
      assertNull(string5);
      
      String string6 = StringUtils.center("cZk(BS!7AuS%th?7@o7", (-3), (String) null);
      assertNotNull(string6);
      assertEquals("cZk(BS!7AuS%th?7@o7", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = "u\\73-V}9XVvQv;G+/VLN_pruhz!<CyN";
      String string8 = StringUtils.defaultString("7fUOsI6#v>sF9\"s", "u;-V}9XVvQv;G+/VLN_pruhz!<CyN");
      assertNotNull(string8);
      assertEquals("7fUOsI6#v>sF9\"s", string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      
      int int0 = 108;
      String string9 = StringUtils.abbreviate("cZk(BS!7AuS%th?7@o7", 108, 47);
      assertNotNull(string9);
      assertEquals("cZk(BS!7AuS%th?7@o7", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)charSequence0));
      
      String string10 = StringUtils.reverseDelimited((String) null, '<');
      assertNull(string10);
      
      String string11 = StringUtils.repeat((String) null, 46);
      assertNull(string11);
      
      try { 
        StringUtils.getBytes("7fUOsI6#v>sF9\"s", "u;-V}9XVvQv;G+/VLN_pruhz!<CyN");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.substringBetween("f;", "f;");
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'I', (-1), 167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.easymock.bytebuddy.build.ToStringPlugin", 998);
      assertNull(stringArray0);
      
      String string0 = StringUtils.getDigits("org.easymock.bytebuddy.build.ToStringPlugin");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rotate("1uVlTyi/+Eu%@l0&xn", 256);
      assertNotNull(string1);
      assertEquals("0&xn1uVlTyi/+Eu%@l", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1uVlTyi/+Eu%@l0&xn", 256);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEndIgnoreCase("java.lang.Object@66025a4&qC-Ce(btOD[})C>B#i< [%w$.cZk(BS!7AuS%th?7@o7", "{czR)s~,*A");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 64;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      String string3 = StringUtils.join(intArray0, 'k', 8192, (-1));
      assertArrayEquals(new int[] {64, (-1), (-1)}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, intArray0.length);
      
      String string4 = StringUtils.stripToNull("btOD[})C>B#i< [%w$.");
      assertNotNull(string4);
      assertEquals("btOD[})C>B#i< [%w$.", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.mid("org.easymock.bytebuddy.build.ToStringPlugin", 810, (-1));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.substringBefore("6w=Y.X>E\"`cwO", 997);
      assertNotNull(string6);
      assertEquals("6w=Y.X>E\"`cwO", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      int int1 = StringUtils.indexOfAny((CharSequence) "btOD[})C>B#i< [%w$.", charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.rotate("R+", 76);
      assertNotNull(string0);
      assertEquals("R+", string0);
      
      String string1 = StringUtils.mid("\n", 76, 2);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 76;
      intArray0[1] = (int) '@';
      intArray0[2] = 2;
      intArray0[3] = 76;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 76;
      intArray0[7] = 76;
      intArray0[8] = (-37);
      String string2 = StringUtils.join(intArray0, '+');
      assertArrayEquals(new int[] {76, 64, 2, 76, 2, 2, 76, 76, (-37)}, intArray0);
      assertNotNull(string2);
      assertEquals("76+64+2+76+2+2+76+76+-37", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, intArray0.length);
      
      String string3 = StringUtils.unwrap("\n", '7');
      assertNotNull(string3);
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringAfter("\n", 31);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrap("", '@');
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.substringBetween("Tc\"@<E~@tvJ", "\n", "76+64+2+76+2+2+76+76+-37");
      assertNull(string6);
      
      String string7 = StringUtils.repeat("\n", "", (-37));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 2265);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'Q');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'f');
      assertNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 5077);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.right("No proxy target found for ", 256);
      assertNotNull(string2);
      assertEquals("No proxy target found for ", string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2451;
      shortArray0[1] = (short) (-2356);
      shortArray0[2] = (short)995;
      shortArray0[3] = (short)2222;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-2111);
      String string3 = StringUtils.join(shortArray0, '<', (int) (short)2222, (-332));
      assertArrayEquals(new short[] {(short)2451, (short) (-2356), (short)995, (short)2222, (short)2, (short) (-2111)}, shortArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals(6, shortArray0.length);
      
      String string4 = StringUtils.substringAfter((String) null, 993);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "No proxy target found for ", 76);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, (-332), (int) (short)995);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)2451;
      floatArray0[1] = (float) (short) (-2356);
      String string5 = StringUtils.join(floatArray0, 'e', (int) (short) (-2111), (int) (short) (-2111));
      assertArrayEquals(new float[] {2451.0F, (-2356.0F)}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "This test is disabled until %s. If executing it on this commit would fail, the build can't be reproduced after that date.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string0 = StringUtils.join((int[]) null, 'a', 3009, 65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertEquals("it", locale2.toString());
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance(" ", charSequenceArray0[0], locale1);
      assertEquals(1, int0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "No proxy target ", (CharSequence) "No proxy target ");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '1', (-1156), (-1156));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isNotEmpty(" ");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = StringUtils.isBlank(" ");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'V', 54, 54);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Strings must not be null", 6);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "", 2991);
      assertEquals(24, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "~`=+BZ9v7N2mqnn$";
      charSequenceArray0[1] = (CharSequence) "~`=+BZ9v7N2mqnn$";
      int int0 = StringUtils.indexOfAny((CharSequence) "~`=+BZ9v7N2mqnn$", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.rightPad(" ", (-1973));
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.stringutils");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("Y<$obq`XeGjSja? F", (-696), '?');
      assertNotNull(string2);
      assertEquals("Y<$obq`XeGjSja? F", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.stringutils";
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "Y<$obq`XeGjSja? F", (-696), (-1470));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Y<$obq`XeGjSja? F";
      charSequenceArray0[5] = (CharSequence) "Strings must not be";
      charSequenceArray0[6] = (CharSequence) "Y<$obq`XeGjSja? F";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.stripToEmpty("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1");
      assertNotNull(string4);
      assertEquals("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1786;
      intArray0[1] = (int) '?';
      intArray0[2] = (-228);
      intArray0[3] = (-696);
      String string5 = StringUtils.join(intArray0, '`', (-228), (-4947));
      assertArrayEquals(new int[] {1786, 63, (-228), (-696)}, intArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, intArray0.length);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.startsWithAny("$g>`m9-Dd GYz9Q}@]wJTB !hEg&Zxj$+V1", charSequenceArray0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      assertNotNull(string2);
      assertEquals("zV vwx+}>zv[GC*N;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "");
      assertNotNull(string5);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "zV vwx+}>zv[GC*N;");
      assertEquals(0.36, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "bD`+FJ~", 30);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("m;9t]/06KG%mB", 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "maxWith cannot be negative");
      assertNotNull(string8);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("zV vwx+}>zv[GC*N;", stringArray1);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(4, stringArray1.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("xq}", (String) null);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      
      char[] charArray0 = new char[0];
      String string9 = StringUtils.join(charArray0, '=');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string9);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'a', (-1366), (-1703));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip(".>BAL", "dCD4[B=XD");
      assertNotNull(string1);
      assertEquals(".>BAL", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".>BAL";
      stringArray0[1] = ".>BAL";
      stringArray0[2] = "";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals(".>BAL", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.substring(" resource lock", 8192, 27);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'O';
      charArray0[3] = '4';
      boolean boolean0 = StringUtils.containsNone((CharSequence) ".>BAL", charArray0);
      assertArrayEquals(new char[] {'4', '4', 'O', '4'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", stringArray1);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((short[]) null, 'M', 104, 3);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("' is no valid ISO-8601 string.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      String string2 = StringUtils.join(byteArray0, '|');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, 2);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.join((float[]) null, '|', 321, 6);
      assertNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray1 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      
      boolean boolean4 = StringUtils.isAllUpperCase("' is no valid ISO-8601 string.");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteArray0.length);
      
      String string1 = StringUtils.substringBefore((String) null, (-1470));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("=Hf", "=Hf", "=Hf");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.mid("CartesianProductTest can only take exactly one type of arguments source.", 3009, 3009);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 3009, "3foMC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.substringsBetween("Cannot resolve to type: ", " ", "Z^QWN;C^zgnvT");
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "CartesianProductTest can only take exactly one type of arguments source.", 3009);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string0);
      assertEquals("\u82F1\u6587", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale0.getDisplayScript(locale1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("RLQ&3~dW-#^<OyC", locale0);
      assertNotNull(string2);
      assertEquals("rlq&3~dw-#^<oyc", string2);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "RLQ&3~dW-#^<OyC";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\u82F1\u6587";
      objectArray0[5] = (Object) "&qC-Ce(btOD[}";
      objectArray0[6] = object0;
      String string3 = StringUtils.join(objectArray0, '2', 96, (-21));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("\u82F1\u6587", "...", "]6Y!,w( ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3659, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E{I :o5;~93Gx";
      stringArray0[1] = "E{I :o5;~93Gx";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("E{I :o5;~93Gx", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(46));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(object0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "#!3u:r9$~/0Y";
      stringArray0[1] = ")C>B#i< [%w$.";
      stringArray0[2] = "#!3u:r9$~/0Y";
      stringArray0[3] = ")C>B#i< [%w$.";
      stringArray0[4] = "org.easymock.bytebuddy.asm.Advice$AssignReturned$ToFields$Handler";
      stringArray0[5] = "A parameter cannot be negative: ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      String string0 = StringUtils.defaultString("#!3u:r9$~/0Y", "A parameter cannot be negative: ");
      assertNotNull(string0);
      assertEquals("#!3u:r9$~/0Y", string0);
      
      boolean boolean1 = StringUtils.isBlank("#!3u:r9$~/0Y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("wU{R(,%");
      assertNotNull(string1);
      assertEquals("wU{R(,%", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("A parameter cannot be negative: ", "|6UR,T6${|5~");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("Only one method-level arguments source can be used with @CartesianTest");
      assertNotNull(string3);
      assertEquals("ONLY ONE METHOD-LEVEL ARGUMENTS SOURCE CAN BE USED WITH @CARTESIANTEST", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("#!3u:r9$~/0Y", supplier0);
      assertNotNull(string4);
      assertEquals("#!3u:r9$~/0Y", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.truncate("Only one method-level arguments source can be used with @CartesianTest", 46);
      assertNotNull(string5);
      assertEquals("Only one method-level arguments source can be ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.mid("Strings must not be null", 3, 52);
      assertNotNull(string0);
      assertEquals("ings must not be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null", "Strings must not be null");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(52));
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Locale locale0 = new Locale("\r");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("\r", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.mid("\r", (-897), 8192);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.getFuzzyDistance("\r", "\r", locale0);
      assertEquals(1, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("\r", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#!3u:r9$~/0Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      String string1 = StringUtils.stripToNull("#!3u:r9$~/0Y");
      assertNotNull(string1);
      assertEquals("#!3u:r9$~/0Y", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("#!3u:r9$~/0Y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.strip("#!3u:r9$~/0Y");
      assertNotNull(string4);
      assertEquals("#!3u:r9$~/0Y", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.mid("", (byte) (-103), 964);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.mid("u[E='8bd3OBX", 3, 3);
      assertNotNull(string0);
      assertEquals("='8", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "='8", "||");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trimToNull(".class");
      assertNotNull(string3);
      assertEquals(".class", string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.mid("R /9t6N", (-1), 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        Charset.forName("%a!.&w? h4=z&)YE");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %a!.&w? h4=z&)YE
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("N`K^#");
      assertNotNull(string0);
      assertEquals("n`K^#", string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("!G)");
      assertNotNull(string0);
      assertEquals("!G)", string0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "No proxy target ", (CharSequence) "No proxy target ");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.rightPad("'2Y,e5K5", 3659, "Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean4 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string3 = StringUtils.overlay(" ", "Cannot assign self type: ", 211, 3659);
      assertNotNull(string3);
      assertEquals(" Cannot assign self type: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertNotNull(string4);
      assertEquals("\u0007", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) "\u0007", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Cannot assign self type: ", 594);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#!3u:r9$~/0Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      String string1 = StringUtils.stripToNull("#!3u:r9$~/0Y");
      assertNotNull(string1);
      assertEquals("#!3u:r9$~/0Y", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphaSpace("#!3u:r9$~/0Y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      String[] stringArray0 = StringUtils.split((String) null, 'X');
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripToEmpty("~5-;8ar-p$_wli3K,QR");
      assertNotNull(string0);
      assertEquals("~5-;8ar-p$_wli3K,QR", string0);
      
      String string1 = StringUtils.substring("~5-;8ar-p$_wli3K,QR", 914);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = "eOgoZZjK`]ROB7-[[}";
      String string3 = StringUtils.rotate("eOgoZZjK`]ROB7-[[}", 0);
      assertNotNull(string3);
      assertEquals("eOgoZZjK`]ROB7-[[}", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.mid("Object varargs must not be null", 914, 26);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.appendIfMissing((String) null, "52IoQsn", charSequenceArray0);
      assertNull(string5);
      assertEquals(0, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      // Undeclared exception!
      try { 
        Charset.forName("The `untilDate` string '");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // The `untilDate` string '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("&{ K8BM_:z1^v");
      assertNotNull(string2);
      assertEquals("&{ K8BM_:Z1^V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("&{ K8BM_:Z1^V", 35);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase("", "9F3W7IO|^o,D/");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'Y', (-1977), (-4096));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals(0, floatArray0.length);
      
      String string6 = StringUtils.leftPad("&{ K8BM_:Z1^V", 17);
      assertNotNull(string6);
      assertEquals("    &{ K8BM_:Z1^V", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      int int0 = StringUtils.compare("!:+LZVY$t05cx>f", "");
      assertEquals(15, int0);
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.center("o", 0, 'F');
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("UJ}%1rob~", "~c", "NNNNN");
      assertNotNull(string1);
      assertEquals("UJ}%1rob~", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("UJ}%1rob~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("!:+LZVY$t05cx>f", "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", 565, 66);
      assertNotNull(string2);
      assertEquals("!:+LZVY$t05cx>f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.join((Object[]) null, "No proxy target found for ", 0, 1149);
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", 2751, 2751);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.repeat((String) null, "The type must not be null", (-1));
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("o");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("~c");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "%j-SEXkw!!tv>=w/db", 160);
      assertNull(stringArray0);
      
      String string7 = StringUtils.substring("NNNNN", 160, 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category1);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertEquals("DISPLAYFORMAT", string0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "No proxy target ", (CharSequence) "No proxy target ");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string2 = StringUtils.rightPad("'2Y,e5K5", 3659, "Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean4 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      
      String string3 = StringUtils.overlay(" ", "Cannot assign self type: ", 211, 3659);
      assertNotNull(string3);
      assertEquals(" Cannot assign self type: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9:=nyXK%>(7!", "; _9d_ij3SZvFEZy*{u");
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '?';
      charArray0[2] = ';';
      charArray0[3] = ' ';
      charArray0[4] = 'X';
      charArray0[5] = '?';
      charArray0[6] = 'w';
      String string1 = StringUtils.join(charArray0, '?', 4210, 4210);
      assertArrayEquals(new char[] {'2', '?', ';', ' ', 'X', '?', 'w'}, charArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.join((byte[]) null, '&', 3, 4210);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, (-1105), 4210);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1105));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.lowerCase("M$*C-\", F:j'/N46");
      assertNotNull(string0);
      assertEquals("m$*c-\", f:j'/n46", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "m$*c-\", f:j'/n46", supplier0);
      assertNotNull(charSequence0);
      assertEquals("m$*c-\", f:j'/n46", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "m$*c-\", f:j'/n46", "org.easymock.bytebuddy.matcher.ElementMatcher$Junction$AbstractBase");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      String string1 = StringUtils.join(byteArray0, '5', 101, 101);
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("X\"$=oo4RT", "", false);
      assertEquals(10, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.removeFirst("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "|O0~%xx6");
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X\"$=oo4RT";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      String string2 = StringUtils.join((boolean[]) null, '\'');
      assertNull(string2);
      
      String string3 = StringUtils.join((boolean[]) null, '\'');
      assertNull(string3);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", (CharSequence) "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("#xv,,T$0lFv", (String) null, "rW[{fX`V8", 0);
      assertNotNull(string5);
      assertEquals("#xv,,T$0lFv", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int4 = StringUtils.indexOfAny((CharSequence) "X\"$=oo4RT", (CharSequence[]) null);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("#xv,,T$0lFv");
      assertFalse(boolean0);
      
      String string6 = StringUtils.chop("&@hUXq|7");
      assertNotNull(string6);
      assertEquals("&@hUXq|", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.reverseDelimited("Threshold must not be negative", '.');
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Threshold must not be negative", 0, 3049);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must not be negative", "Threshold must not be negative", 1590);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeIgnoreCase("<t/3=vtbc]}C3`flH{", "Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("<t/3=vtbc]}C3`flH{", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("@\")7'hB-", (-1153), "<t/3=vtbc]}C3`flH{");
      assertNotNull(string2);
      assertEquals("@\")7'hB-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "<t/3=vtbc]}C3`flH{", (CharSequence) "@\")7'hB-", 6);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string3 = StringUtils.join(booleanArray0, '.');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertNotNull(string3);
      assertEquals("false.true.false.true.false.false.false", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, booleanArray0.length);
      
      String string4 = StringUtils.join(booleanArray0, '&');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertNotNull(string4);
      assertEquals("false&true&false&true&false&false&false", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(7, booleanArray0.length);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "false&true&false&true&false&false&false", (CharSequence) "Threshold must not be negative");
      assertEquals(33, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string5);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "lokup", ":l#ZXiFIk0Krau");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "lokup", (CharSequence) ":l#ZXiFIk0Krau", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNumeric("Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("-1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, floatArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("6$!ajER&NEt8SHAv `");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("\r", " ");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("{argument7i", "{argument7i", "{argument7i");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {argument7i
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.replacePattern("CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string0);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string0);
      
      String string1 = StringUtils.right((String) null, 91);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.right("E:ukju+vnx6H'?", 1583);
      assertNotNull(string0);
      assertEquals("E:ukju+vnx6H'?", string0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Locale must not be null", "gJH2ZH\"<\n", "Locale must not be null");
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, "\",2c>0LC^%%65");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.truncate("\",2c>0LC^%%65", 1246, 2423);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\",2c>0LC^%%65");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.left("java.lang.Object@54029412\",2c>0LC^%%65java.lang.Object@17b7dec9\",2c>0LC^%%65java.lang.Object@126d3a73\",2c>0LC^%%65java.lang.Object@1be52804\",2c>0LC^%%65java.lang.Object@5b078d6e", 1246);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissing("\",2c>0LC^%%65", "", stringArray0);
      assertNotNull(string3);
      assertEquals("\",2c>0LC^%%65", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.stripStart("", "SJ|l.nby4%zen$+z?i");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.unwrap("\",2c>0LC^%%65", "matches '%s'.");
      assertNotNull(string5);
      assertEquals("\",2c>0LC^%%65", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.right("\",2c>0LC^%%65", 2423);
      assertNotNull(string6);
      assertEquals("\",2c>0LC^%%65", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isWhitespace("\",2c>0LC^%%65");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("Expected exactly one annotation to provide an ArgumentSource, found %d.", stringArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.replaceChars("E{S{FO|+!", "\",2c>0LC^%%65", "<\"Rd");
      assertNotNull(string7);
      assertEquals("E{S{FO|+!", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAllUpperCase("E{S{FO|+!");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.stringutils");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.stringutils", 1, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.stringutils", 6);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      String string2 = StringUtils.join((Object[]) stringArray0, '%', 25, 10);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.stringutils", 14);
      assertNotNull(string3);
      assertEquals("g3.stringutils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("org.apache.commons.lang3.stringutils", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.getDigits("l");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Uw_Opn 3Ify9dcK@}", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[1] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[2] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[3] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[4] = "=4DK=/&XBSl^}f]7";
      stringArray0[5] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[6] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[7] = "Uw_Opn 3Ify9dcK@}";
      stringArray0[8] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Uw_Opn 3Ify9dcK@}", stringArray0);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("Uw_Opn 3Ify9dcK@}");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)10;
      shortArray0[3] = (short)22;
      String string1 = StringUtils.join(shortArray0, 'p', (int) (short)22, (-1071));
      assertArrayEquals(new short[] {(short)10, (short)10, (short)10, (short)22}, shortArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.trim(" ");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("(rA", supplier0);
      assertNotNull(string4);
      assertEquals("(rA", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfterLast("4Z/hp4idPPvMmqHl", 19);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      int int0 = StringUtils.compare("p<Mp R( f", " ", false);
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.repeat('V', (-209));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.join((Iterable<?>) null, '0');
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string0);
      assertEquals("DisabledUntil", string0);
      
      String string1 = StringUtils.remove("kU&{w )VhR", 'x');
      assertNotNull(string1);
      assertEquals("kU&{w )VhR", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.compareIgnoreCase("DisabledUntil", (String) null, false);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'i';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      String string2 = StringUtils.join(charArray0, 'x');
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'i', 'x', 'x'}, charArray0);
      assertNotNull(string2);
      assertEquals("xxxxxxxxixxxx", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.replaceEach("`", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("`", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("`", "4WnSiXIBDeN-5LO0");
      assertNotNull(string1);
      assertEquals("`", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("R+", "dT");
      assertNotNull(string0);
      assertEquals("R+", string0);
      
      String string1 = StringUtils.upperCase("dT");
      assertNotNull(string1);
      assertEquals("DT", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "w}U;2lgO;P.r(";
      String string3 = StringUtils.wrapIfMissing("w}U;2lgO;P.r(", 'K');
      assertNotNull(string3);
      assertEquals("Kw}U;2lgO;P.r(K", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      Locale locale1 = Locale.KOREA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("~5-;8ar-p$_wli3K,QR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: ~5-;8ar-p$_wli3K,QR
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("{98N{esT`7g", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("~z^l6sB]Y0/:");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{98N{esT`7g", (CharSequence) "{98N{esT`7g");
      assertEquals(0, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{98N{esT`7g"));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("{98N{esT`7g"));
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains("{98N{esT`7g"));
      
      boolean boolean1 = linkedList1.addAll((Collection<? extends String>) vector0);
      assertFalse(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(vector0.contains("{98N{esT`7g"));
      assertFalse(linkedList1.contains("{98N{esT`7g"));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.contains("{98N{esT`7g"));
      
      String string2 = StringUtils.join(iterator0, "}0Y5i|& :qD/tw");
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(linkedList0.contains("{98N{esT`7g"));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~z^l6sB]Y0/:", (CharSequence) "", (-1966));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short) (-31644);
      shortArray0[2] = (short)99;
      shortArray0[3] = (short)22;
      shortArray0[4] = (short)1130;
      String string3 = StringUtils.join(shortArray0, 'C');
      assertArrayEquals(new short[] {(short)99, (short) (-31644), (short)99, (short)22, (short)1130}, shortArray0);
      assertNotNull(string3);
      assertEquals("99C-31644C99C22C1130", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, shortArray0.length);
      
      String string4 = StringUtils.truncate("Oy1'yt[\"[%&@'", 0, (int) (short)22);
      assertNotNull(string4);
      assertEquals("Oy1'yt[\"[%&@'", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = ";64SzX}4Pdww,-m";
      String string6 = "pivnY\"";
      try { 
        StringUtils.getBytes(";64SzX}4Pdww,-m", "pivnY\"");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("tGl@!NDMd3H>1e%z,#p");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      String string0 = StringUtils.removeStart("suppress", "~5-;8ar-p$_wli3K,QR");
      assertNotNull(string0);
      assertEquals("suppress", string0);
      
      String string1 = StringUtils.truncate("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 47, 17);
      assertNotNull(string1);
      assertEquals("tains` or `matche", string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("~5-;8ar-p$_wli3K,QR"));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.defaultString("suppress");
      assertNotNull(string2);
      assertEquals("suppress", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(set0.contains("suppress"));
      assertFalse(list0.contains("suppress"));
      
      int[] intArray0 = StringUtils.toCodePoints("~5-;8ar-p$_wli3K,QR");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("calMarks}+", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", 35);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 671, "");
      assertNotNull(string0);
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.center("", 101, "");
      assertNotNull(string0);
      assertEquals("                                                                                                     ", string0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.unwrap("...", '.');
      assertNotNull(string0);
      assertEquals(".", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".", '.');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("...", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Minimum abbrevia>ion widch is %d", 'M');
      assertNotNull(string0);
      assertEquals("inimum abbrevia>ion widch is %d", string0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumeric("Strings must not be null");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 1, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBetween("Strings must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) null, 55);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.join(longArray0, '6', 0, 0);
      assertArrayEquals(new long[] {2047L, 0L, (-1L), 0L, 105L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, longArray0.length);
      
      String string1 = StringUtils.stripEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("", "tUHO#x");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeEnd("", "zQf.eNp><1Y");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.repeat("", "tUHO#x", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.abbreviate("*Q", "", 0, 0);
      assertNotNull(string6);
      assertEquals("*Q", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string7 = StringUtils.trim("");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split("6Hg6#EMNBOx[!Uc]\"T", "tUHO#x");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[18];
      String string2 = StringUtils.join(byteArray0, '|');
      assertNotNull(string2);
      assertEquals("0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(18, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, 2);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isAlphaSpace("OBJECT VARARGS MUST NOT BE NULL");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("9WlIY");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      
      boolean boolean5 = StringUtils.isAlphaSpace("Object varargs must not be null");
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      
      String string3 = StringUtils.repeat("OBJECT VARARGS MUST NOT BE NULL", 48);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.upperCase("OBJECT VARARGS MUST NOT BE NULL");
      assertNotNull(string4);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.center("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", 55, "");
      assertNotNull(string0);
      assertEquals("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", string0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.join(longArray0, '6', 0, 0);
      assertArrayEquals(new long[] {2047L, 0L, (-1L), 0L, 105L}, longArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, longArray0.length);
      
      String string1 = StringUtils.stripEnd("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("", "tUHO#x");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEnd("", "zQf.eNp><1Y");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.repeat("", "tUHO#x", 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.abbreviate("*Q", "", 0, 0);
      assertNotNull(string6);
      assertEquals("*Q", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "*Q", (-2677), 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("", "zQf.eNp><1Y");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isEmpty("");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string7 = StringUtils.normalizeSpace("fr).6y\"3#C92|W,");
      assertNotNull(string7);
      assertEquals("fr).6y\"3#C92|W,", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.join((short[]) null, '6');
      assertNull(string8);
      
      int int1 = StringUtils.indexOf((CharSequence) "*Q", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string9 = StringUtils.swapCase("");
      assertNotNull(string9);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bzd>y@";
      stringArray0[1] = "Bzd>y@";
      stringArray0[2] = "Bzd>y@";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "Bzd>y@", supplier0);
      assertNotNull(charSequence0);
      assertEquals("Bzd>y@", charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Bzd>y@", 55);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("Bzd>y@");
      assertNotNull(string0);
      assertEquals("Bzd>y@", string0);
      assertTrue(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.removeEnd("y]6Y!,w( ", "suppress");
      assertNotNull(string1);
      assertEquals("y]6Y!,w( ", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "$M]BgF!Y9", 50);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("kFGjjKN-X1Yw@vx85'=");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "kFGjjKN-X1Yw@vx85'=", (-526));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Strings must not be null", 6);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "", 2991);
      assertEquals(24, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      String string1 = StringUtils.join((Object[]) stringArray0, "t`E6>G/vWfdCAfn?Q");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "", 4315);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Duplicate registration of handler for ");
      assertEquals((-1), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(""));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends String>) vector0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(linkedList0.contains(""));
      assertFalse(vector0.contains(""));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtils.join(iterator0, "A/}<>7");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(linkedList0.contains(""));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{/dp", (CharSequence) "Minimum abbreviation width with offset is %d", 1117);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, 'M');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(0, shortArray0.length);
      
      String string4 = StringUtils.truncate("", 1318, 1318);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2209);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'y');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(string0.equals((Object)charSequence0));
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.join((float[]) null, 'R', (-3461), 84);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap("", "*Er#vlp");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 84;
      doubleArray0[1] = (double) 'R';
      doubleArray0[2] = (double) 2209;
      String string3 = StringUtils.join(doubleArray0, 'y', 839, 41);
      assertArrayEquals(new double[] {84.0, 82.0, 2209.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "N`t^#", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("' is no valid ISO-8601 string.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      String string2 = StringUtils.join(byteArray0, '|');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.isAlphaSpace("' is no valid ISO-8601 string.");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, '`');
      assertNull(string2);
      
      String string3 = StringUtils.difference(">,y8)h^=9?z'(RL\"_-", "j%$15");
      assertNotNull(string3);
      assertEquals("j%$15", string3);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.KOREA;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      // Undeclared exception!
      try { 
        locale2.getUnicodeLocaleType("-N/p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: -N/p
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("V,FnN Fq>GR*1K,m[Ul", "V,FnN Fq>GR*1K,m[Ul");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 20
         // V,FnN Fq>GR*1K,m[Ul
         //                     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("+JXbzZHtr");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      String string0 = StringUtils.join((Iterable<?>) null, "Object varargs must not be null\n");
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.splitByCharacterType("l");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "maxWimh cannot benegative", (CharSequence) "maxWimh cannot benegative");
      assertEquals(1, int0);
      
      int int1 = StringUtils.ordinalIndexOf("maxWimh cannot benegative", "maxWimh cannot benegative", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("%l?Wv[Ec$j5 #YG", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.removeFirst("Locale must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.removeStart("Locale must not be null", "Locale must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("Locale must not be null", "Locale must not be null");
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("Locale must not be null");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) '\"';
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) '\"';
      floatArray0[7] = (float) 1;
      String string3 = StringUtils.join(floatArray0, '<');
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1.0F, 34.0F, 0.0F, 34.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      assertEquals("0.0<1.0<0.0<1.0<34.0<0.0<34.0<1.0", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(8, floatArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Locale must not be null", supplier0);
      assertNotNull(charSequence0);
      assertEquals("Locale must not be null", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      
      int int1 = StringUtils.lastOrdinalIndexOf("Locale must not be null", "Locale must not be null", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("0.0<1.0<0.0<1.0<34.0<0.0<34.0<1.0");
      assertNotNull(stringArray0);
      assertEquals(31, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'M');
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) 'M';
      String string1 = StringUtils.join(longArray0, 'd', 5, (-744));
      assertArrayEquals(new long[] {1L, 105L, 77L, 77L}, longArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(4, longArray0.length);
      
      String string2 = "\n";
      String string3 = StringUtils.center("}6Hg6#EMNBOx[!Uc]\"T", (-2062), 'd');
      assertNotNull(string3);
      assertEquals("}6Hg6#EMNBOx[!Uc]\"T", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        Charset.forName("There should be a `%s` method on class `%s`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // There should be a `%s` method on class `%s`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("maxWith cannot be negative", "o");
      assertNotNull(string0);
      assertEquals("omaxWith cannot be negativeo", string0);
      
      String string1 = StringUtils.defaultIfEmpty("omaxWith cannot be negativeo", "omaxWith cannot be negativeo");
      assertNotNull(string1);
      assertEquals("omaxWith cannot be negativeo", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast((String) null, 1007);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("O~-r&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("n", "Method `Stream<? extends Arguments> ");
      assertNotNull(string3);
      assertEquals("n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.lowerCase("\n");
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) null, 76);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      String string5 = StringUtils.join(shortArray0, 'M');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(0, shortArray0.length);
      
      String string6 = StringUtils.truncate("i_~y<I8RCd;/U6j*Na7", 3394, 38);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|l";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String string1 = StringUtils.replaceEach("l|", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l|", (CharSequence) "|l", 256);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("getContext", 13);
      assertNotNull(string2);
      assertEquals("extgetCont", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("|l", 3659, 13);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "getContext";
      String string4 = StringUtils.appendIfMissing("*zKqC", "/7!5Tsp6}Kn>", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("*zKqC/7!5Tsp6}Kn>", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = "7PS+{GB";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        Charset.isSupported("Q@;.7/m!8ap=$$<aHl");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Q@;.7/m!8ap=$$<aHl
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      HashSet<Object> hashSet0 = new LinkedHashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(object0));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(object0));
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "&qC-Ce(btOD[}");
      assertNotNull(string0);
      assertEquals(")C>B#i< [%w$.", string0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(object0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ")C>B#i< [%w$.", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string1);
      assertEquals("\u82F1\u6587", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string3);
      assertNotSame(locale0, locale1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "RLQ&3~dW-#^<OyC";
      objectArray0[1] = (Object) stream0;
      objectArray0[2] = (Object) hashSet0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\u82F1\u6587";
      objectArray0[5] = (Object) "&qC-Ce(btOD[}";
      objectArray0[6] = object0;
      String string4 = StringUtils.join(objectArray0, '2', 96, (-21));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(7, objectArray0.length);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.repeat("\n", 32);
      assertNotNull(string0);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny(" ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceOnce((String) null, "", "\r2Ye3ic>`%-sNvbI");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "3~#|~`t<");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.stripToEmpty("yN");
      assertNotNull(string0);
      assertEquals("yN", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("yN", "zV vwx+}>zv[GC*N;");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("yN");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootUpperCase("&{ K8BM_:z1^v");
      assertNotNull(string1);
      assertEquals("&{ K8BM_:Z1^V", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("GX", 46);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("yN", (String) null);
      assertNotNull(string3);
      assertEquals("yN", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(floatArray0, '/', 2402, (-191));
      assertArrayEquals(new float[] {(-1.0F), 2443.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, floatArray0.length);
      
      String string5 = StringUtils.leftPad((String) null, 46);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      short[] shortArray0 = new short[5];
      String string0 = StringUtils.leftPad((String) null, (-1879));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("' is no valid ISO-8601 string.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      String string2 = StringUtils.join(byteArray0, '|');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("0", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, 2);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.join((float[]) null, '|', 321, 6);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace("' is no valid ISO-8601 string.");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string4 = StringUtils.unwrap((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string4);
      
      boolean boolean5 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean6 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%Sp{InCombiningDiacritcalarks}+", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("maxWith cannot be negative", "o");
      assertNotNull(string0);
      assertEquals("omaxWith cannot be negativeo", string0);
      
      String string1 = StringUtils.defaultIfEmpty("omaxWith cannot be negativeo", "omaxWith cannot be negativeo");
      assertNotNull(string1);
      assertEquals("omaxWith cannot be negativeo", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast((String) null, 1007);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("O~-r&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("n", "Method `Stream<? extends Arguments> ");
      assertNotNull(string3);
      assertEquals("n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.lowerCase("\n");
      assertNotNull(string4);
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.abbreviate("n", "Method `Stream<? extends Arguments> ", 1383, 1007);
      assertNotNull(string5);
      assertEquals("n", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.truncate((String) null, 16, 1007);
      assertNull(string6);
      
      String string7 = StringUtils.join((float[]) null, '\"', 1383, 1007);
      assertNull(string7);
      
      String string8 = StringUtils.unwrap("omaxWith cannot be negativeo", '\"');
      assertNotNull(string8);
      assertEquals("omaxWith cannot be negativeo", string8);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.truncate((String) null, 35);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny(" ", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string2 = StringUtils.removeStartIgnoreCase("yYZf^,'", (String) null);
      assertNotNull(string2);
      assertEquals("yYZf^,'", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootLowerCase(" to ");
      assertNotNull(string3);
      assertEquals(" to ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", " to ");
      assertEquals(0.6, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("gCrg\u0005Ct<fH0]", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace(" to ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase("WeS?[&");
      assertNotNull(string4);
      assertEquals("WES?[&", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfterLast("I@fTWK8}N*Yk^Aid", 9);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1338);
      floatArray0[1] = (float) (-172);
      floatArray0[2] = (float) Integer.MIN_VALUE;
      floatArray0[3] = (float) 9;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '[', (-1338), 107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'O');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.getIfEmpty("Strings must not be null", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      assertEquals("p,tmt]0au~xfk{", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("p,TMt]0au~xFk{"));
      
      boolean boolean0 = stack0.add((Object) "p,tmt]0au~xfk{");
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[p,tmt]0au~xfk{]", stack0.toString());
      assertFalse(stack0.contains("p,TMt]0au~xFk{"));
      assertTrue(stack0.contains("p,tmt]0au~xfk{"));
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.contains("p,TMt]0au~xFk{"));
      
      boolean boolean1 = stack1.addAll((Collection<?>) stack0);
      assertTrue(boolean1);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[p,tmt]0au~xfk{]", stack0.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[p,tmt]0au~xfk{]", stack1.toString());
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.contains("p,TMt]0au~xFk{"));
      assertTrue(stack0.contains("p,tmt]0au~xfk{"));
      assertFalse(stack1.contains("p,TMt]0au~xFk{"));
      assertTrue(stack1.contains("p,tmt]0au~xfk{"));
      
      String string1 = StringUtils.join((List<?>) stack0, 'h', (int) 'h', (int) 'h');
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(stack0, stack1);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[p,tmt]0au~xfk{]", stack0.toString());
      assertTrue(stack0.equals((Object)stack1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.contains('h'));
      assertTrue(stack0.contains("p,tmt]0au~xfk{"));
      
      String string2 = StringUtils.join((double[]) null, 'h', (int) 'h', (-121));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("u#lK=");
      assertNotNull(string0);
      assertEquals("u#lK=", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("u#lK=");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("u#lK=", "[pZC0_pjV");
      assertNotNull(string1);
      assertEquals("[pZC0_pjV", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "u#lK=", (CharSequence) "[pZC0_pjV");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "u#lK=";
      String string2 = StringUtils.prependIfMissing("[pZC0_pjV", "u#lK=", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("u#lK=[pZC0_pjV", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "u#lK=", "u#lK=[pZC0_pjV");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.toRootLowerCase("u#lK=");
      assertNotNull(string3);
      assertEquals("u#lk=", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "u#lK=[pZC0_pjV", (CharSequence) "[pZC0_pjV");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char char0 = '`';
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 1993);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringBefore("\r", "\n");
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = null;
      int int0 = Integer.MIN_VALUE;
      String string1 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("yYZf^,'", (-172));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string4 = StringUtils.substringBefore("$M,kI96r}&IPF-$\"(8", "/Al2:}Ho@BDo2:_");
      assertNotNull(string4);
      assertEquals("$M,kI96r}&IPF-$\"(8", string4);
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.lowerCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.disableiftestfailsextension", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.junitpioneer.jupiter.disableiftestfailsextension", "zV vwx+}>zv[GC*N;", Integer.MIN_VALUE, (-172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ']';
      floatArray0[1] = (float) ']';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) ']';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) ']';
      String string0 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {93.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("93.0593.050.0593.0593.0593.0", string0);
      assertEquals(6, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "checkPermission");
      assertEquals(15, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("org.junitpioneer.jupiter.DisableIfTestFailsExtension", (String) null);
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Locale locale0 = new Locale("", "Object varargs must not be null", "$M]BgF!Y9$M]BgF!Y9");
      assertNotNull(locale0);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale1.getVariant());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertSame(locale0, locale1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.repeat("~5-;8ar-p$_wli3K,QRsuppress", (String) null, 2847);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("!I+LZVY$t05cx>fStrings must not be null...", "Z`", "zG&k1;c9Z~R)fO=g");
      assertNotNull(string0);
      assertEquals("!I+LZVY$t05cx>fStrings must not be null...", string0);
      
      String string1 = StringUtils.repeat("Z`", (String) null, 12);
      assertNotNull(string1);
      assertEquals("Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`Z`", (CharSequence) "Z`");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string2 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "", 41, 6);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 27, (-1580));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringAfterLast("MP@C<", 6);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", ",+m^PApRScA,L_&cQ@x,+m^PApRScA,L_&cQ@x", 79);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("it", locale2.toString());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.getLanguage());
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      
      int int0 = StringUtils.getFuzzyDistance(" ", charSequenceArray0[0], locale1);
      assertEquals(1, int0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "No proxy target ", (CharSequence) "No proxy target ");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string2 = StringUtils.rightPad("'2Y,e5K5", 3659, "Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "No proxy target ", (CharSequence) string2, 1);
      assertEquals((-1), int2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'A';
      charArray0[2] = ')';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.substringBetween("f;", "f;");
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string1 = StringUtils.unwrap("&K@xCvR{'", "+/VLN_pruhz!<CyN");
      assertNotNull(string1);
      assertEquals("&K@xCvR{'", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("&K@xCvR{'");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("f;", " vs ");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&K@xCvR{'";
      charSequenceArray0[1] = (CharSequence) " vs ";
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase(" vs ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-513.2272F);
      floatArray0[1] = 0.0F;
      char char0 = '5';
      char char1 = 's';
      String string1 = StringUtils.join(floatArray0, 's');
      assertArrayEquals(new float[] {(-513.2272F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("-513.2272s0.0s0.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "-513.2272s0.0s0.0");
      assertEquals(33, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd((String) null, " is not static");
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("Zj9");
      assertNotNull(string3);
      assertEquals("Zj9", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "";
      String string5 = "Object varargs must not be null";
      Locale locale0 = null;
      try {
        locale0 = new Locale("org.easymock.bytebuddy.build.Plugin$ForElementMatcher", (String) null, "P/^#<sIi8I/$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-513.2272F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string1 = StringUtils.join(floatArray0, ']', 64, 64);
      assertArrayEquals(new float[] {(-513.2272F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      
      String string2 = StringUtils.defaultString("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 64, 108);
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverseDelimited("drr9y%sW#?c", 'K');
      assertNotNull(string4);
      assertEquals("drr9y%sW#?c", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", 1152);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-523);
      shortArray0[3] = (short) (-523);
      shortArray0[4] = (short) (-523);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-523);
      shortArray0[7] = (short)2;
      String string1 = StringUtils.join(shortArray0, 'I');
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-523), (short) (-523), (short) (-523), (short)0, (short) (-523), (short)2}, shortArray0);
      assertNotNull(string1);
      assertEquals("0I0I-523I-523I-523I0I-523I2", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, shortArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "0I0I-523I-523I-523I0I-523I2");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripStart("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "0I0I-523I-523I-523I0I-523I2");
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.defaultString("#!3u:r9$~/0Y", "");
      assertNotNull(string3);
      assertEquals("#!3u:r9$~/0Y", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isBlank("#!3u:r9$~/0Y");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripToNull("R7NG9$BPyi>5Q`");
      assertNotNull(string4);
      assertEquals("R7NG9$BPyi>5Q`", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("#!3u:r9$~/0Y");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3659, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", charSequenceArray0[2]);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.right("o2o']NI", 6);
      assertNotNull(string3);
      assertEquals("2o']NI", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int3 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = 'Q';
      charArray0[2] = '[';
      charArray0[3] = '/';
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'}', 'Q', '[', '/'}, charArray0);
      assertEquals((-1), int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.repeat(stringArray0[0], 2);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.repeat((String) null, "T", (-1));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("JQr'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replace("", ",;N9%J6CTd", "TOM#JpB${D|~EIs(_I", 2667);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithAny("TOM#JpB${D|~EIs(_I", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.trimToEmpty("TOM#JpB${D|~EIs(_I");
      assertNotNull(string2);
      assertEquals("TOM#JpB${D|~EIs(_I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((float[]) null, 'o', (-1601), 2667);
      assertNull(string3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 121;
      intArray0[1] = (int) 'o';
      intArray0[2] = 2651;
      intArray0[3] = (-2865);
      intArray0[4] = (-2214);
      intArray0[5] = 97;
      intArray0[6] = (-1601);
      intArray0[7] = 2409;
      intArray0[8] = 121;
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
      
      String string5 = StringUtils.join((float[]) null, 'd', 953, 2651);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isNumeric("Strings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, '/');
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals("-1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNotNull(stringArray0);
      assertEquals(24, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", (String) null, "Strings must not be null");
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-1.0", "Strings must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.replaceIgnoreCase("CZ\"tRh-", "Strings must not be null", "CZ\"tRh-", 0);
      assertNotNull(string3);
      assertEquals("CZ\"tRh-", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray1);
      assertFalse(boolean3);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, stringArray1.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) null);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.replaceChars("7fUOsI6#v>sF9\"s", '2', '2');
      assertNotNull(string0);
      assertEquals("7fUOsI6#v>sF9\"s", string0);
      
      String string1 = StringUtils.trimToNull("7fUOsI6#v>sF9\"s");
      assertNotNull(string1);
      assertEquals("7fUOsI6#v>sF9\"s", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7fUOsI6#v>sF9\"s", (CharSequence) "7fUOsI6#v>sF9\"s");
      assertNotNull(charSequence0);
      assertEquals("7fUOsI6#v>sF9\"s", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      
      String string2 = StringUtils.capitalize("method [");
      assertNotNull(string2);
      assertEquals("Method [", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.difference("Q8~4;M2KG>0_Jt@JS)v", "7fUOsI6#v>sF9\"s");
      assertNotNull(string3);
      assertEquals("7fUOsI6#v>sF9\"s", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStartIgnoreCase("7fUOsI6#v>sF9\"s", "7fUOsI6#v>sF9\"s");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "7fUOsI6#v>sF9\"s";
      charSequenceArray0[1] = (CharSequence) "7fUOsI6#v>sF9\"s";
      charSequenceArray0[2] = (CharSequence) "7fUOsI6#v>sF9\"s";
      charSequenceArray0[3] = (CharSequence) "7fUOsI6#v>sF9\"s";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-125);
      String string5 = StringUtils.join(byteArray0, 'C');
      assertArrayEquals(new byte[] {(byte)57, (byte)66, (byte) (-74), (byte)31, (byte) (-77), (byte) (-125)}, byteArray0);
      assertNotNull(string5);
      assertEquals("57C66C-74C31C-77C-125", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(6, byteArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "7fUOsI6#v>sF9\"s", (CharSequence) "method [");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (int) (byte) (-125));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "u", '>');
      assertEquals(0, int0);
      
      String string0 = StringUtils.join((Object[]) null, "u", 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("K|s,I", 'a');
      assertNotNull(string0);
      assertEquals("aK|s,Ia", string0);
      
      String string1 = StringUtils.rightPad("it ZHzs6^M[P_ c@z1d", 932, 'a');
      assertNotNull(string1);
      assertEquals("it ZHzs6^M[P_ c@z1daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string1);
      assertFalse(string1.equals((Object)string0));
      
      StringUtils.substringBefore("it ZHzs6^M[P_ c@z1daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 32);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringAfter("\r", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      int int0 = StringUtils.compare("kFGjjKN-X14wvx5'=", "kFGjjKN-X14wvx5'=");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Xm5ek =DZ ~t=m7r", "", (-30));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("o:z", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", (-30));
      assertNotNull(string4);
      assertEquals("o:z", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((boolean[]) null, 'z');
      assertNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("Xm5ek =DZ ~t=m7r", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.leftPad("", 2118, "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      
      int int0 = StringUtils.indexOf((CharSequence) "o:z", 0);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.swapCase((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string10);
      assertEquals("Xm5ek =DZ ~t=m7r", string10);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.compare("", "(/|188snT3");
      assertEquals((-10), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-10);
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) 'o';
      longArray0[3] = (long) 2118;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'o';
      longArray0[6] = (long) 'z';
      longArray0[7] = (long) ':';
      longArray0[8] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'u', (-1), 1450);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative", 14);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("maxWith cannot be negative");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("maxWith cannot be negative");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.repeat("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", 321);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) "\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringAfterLast("\r", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.upperCase("R+");
      assertNotNull(string1);
      assertEquals("R+", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize(string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween(string2, string2, "|}");
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string4 = StringUtils.wrap(string0, ' ');
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, '@', 421, 421);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, byteArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "|}", 300);
      assertEquals(2, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.valueOf((char[]) null);
      assertNull(string6);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("R+", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.wrapIfMissing(string2, '@');
      assertNotNull(string7);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = "K\"Zr3&m";
      int int0 = 160;
      String string1 = StringUtils.substring("K\"Zr3&m", 160, 160);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K\"Zr3&m";
      stringArray0[1] = "q8E";
      stringArray0[2] = "K\"Zr3&m";
      stringArray0[3] = null;
      stringArray0[4] = "q8E";
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("q8E", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.replaceChars("7fUOsI6#v>sF9\"s", '2', '2');
      assertNotNull(string0);
      assertEquals("7fUOsI6#v>sF9\"s", string0);
      
      String string1 = StringUtils.trimToNull("7fUOsI6#v>sF9\"s");
      assertNotNull(string1);
      assertEquals("7fUOsI6#v>sF9\"s", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7fUOsI6#v>sF9\"s", (CharSequence) "7fUOsI6#v>sF9\"s");
      assertNotNull(charSequence0);
      assertEquals("7fUOsI6#v>sF9\"s", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("method [");
      assertNotNull(string2);
      assertEquals("Method [", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.difference("Q8~4;M2KG>0_Jt@JS)v", "7fUOsI6#v>sF9\"s");
      assertNotNull(string3);
      assertEquals("7fUOsI6#v>sF9\"s", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.removeStartIgnoreCase("7fUOsI6#v>sF9\"s", "7fUOsI6#v>sF9\"s");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.truncate("org.junitpioneer.jupiter.params.ByteRange", 46, 47);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        Charset.forName("org.junitpioneer.jupiter.params.ByteRange");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.params.ByteRange
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("nGby8[llI8U]O", '\u000E', '\u000E');
      assertNotNull(string0);
      assertEquals("nGby8[llI8U]O", string0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("l", "l");
      assertNotNull(string0);
      assertEquals("l", string0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Q%D{r L*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.truncate("Q%D{r L*", 4);
      assertNotNull(string0);
      assertEquals("Q%D{", string0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.replaceOnce("P+v-C6JkH8J", "N", "P+v-C6JkH8J");
      assertNotNull(string1);
      assertEquals("P+v-C6JkH8J", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((int[]) null, '|');
      assertNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'|', '|', '|'}, charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("P+v-C6JkH8J", "Strings must not be nullStrings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "74tow+\"}R65@=z&Hj>6", charArray0);
      assertArrayEquals(new char[] {'|', '|', '|'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.reverse("_Akok,y;:1ST'D\"-\"");
      assertNotNull(string3);
      assertEquals("\"-\"D'TS1:;y,kokA_", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_Akok,y;:1ST'D\"-\"", (CharSequence) "Strings must not be nullStrings must not be null", 101);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.join(charArray0, '|', Integer.MAX_VALUE, 101);
      assertArrayEquals(new char[] {'|', '|', '|'}, charArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string0 = StringUtils.replace("", (String) null, "", 2667);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((float[]) null, 'o', 121, 121);
      assertNull(string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2667;
      intArray0[1] = (int) 'o';
      intArray0[2] = 2667;
      intArray0[3] = 2667;
      intArray0[4] = 121;
      intArray0[5] = 121;
      intArray0[6] = 121;
      intArray0[7] = 2667;
      intArray0[8] = 121;
      String string3 = StringUtils.join(intArray0, 'o');
      assertArrayEquals(new int[] {2667, 111, 2667, 2667, 121, 121, 121, 2667, 121}, intArray0);
      assertNotNull(string3);
      assertEquals("2667o111o2667o2667o121o121o121o2667o121", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, intArray0.length);
      
      String string4 = StringUtils.join((float[]) null, 'c', 2106, 2667);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'R', (-634), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -634
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.center("o", 0, 'F');
      assertNotNull(string0);
      assertEquals("o", string0);
      
      String string1 = StringUtils.upperCase("psOJ!f");
      assertNotNull(string1);
      assertEquals("PSOJ!F", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "o";
      charSequenceArray0[1] = (CharSequence) "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;";
      String string2 = StringUtils.reverseDelimited((String) null, 'F');
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.deleteWhitespace("\n\n");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.replaceChars("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", "PSOJ!F", "EZ60cF5.jy,Ik");
      assertNotNull(string4);
      assertEquals("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;";
      charSequenceArray0[5] = (CharSequence) "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;";
      charSequenceArray0[6] = (CharSequence) "UJ}%1rob~";
      charSequenceArray0[7] = (CharSequence) "o";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[6], "hr-2\"");
      assertEquals(5, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("`AuEJaHmb[ 7");
      assertNotNull(string0);
      assertEquals("`auejahmb[ 7", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("`auejahmb[ 7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("`AuEJaHmb[ 7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`auejahmb[ 7";
      String string1 = StringUtils.strip("`auejahmb[ 7", "V|1I-{:~o");
      assertNotNull(string1);
      assertEquals("`auejahmb[ 7", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("`AuEJaHmb[ 7", "`AuEJaHmb[ 7");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart("4c=k4", "zyLs.X7fIm0D$;n6");
      assertNotNull(string3);
      assertEquals("4c=k4", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.substringBetween("V|1I-{:~o", "4c=k4");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("`auejahmb[ 7");
      assertNotNull(string5);
      assertEquals("`auejahmb[7", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.replaceChars("SsY", "NA(V=*", "");
      assertNotNull(string6);
      assertEquals("SsY", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(5, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(5, stringArray0.length);
      
      String string7 = StringUtils.trimToNull("SsY");
      assertNotNull(string7);
      assertEquals("SsY", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "hr-2\"", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(")62nw&z|uu-fdq=W_B`");
      assertNotNull(string0);
      assertEquals(")62nw&z|uu-fdq=W_B`", string0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("s}OX", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("s}OX", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "mKRw3AC#7cMcYxE707";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("", "jXt<6", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.stripStart("s}OX", "5eZ)Il^X");
      assertNotNull(string2);
      assertEquals("s}OX", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("6Hg6#EMNBOx[!Uc]\"T", " vs ");
      assertNotNull(string3);
      assertEquals("6Hg6#EMNBOx[!Uc]\"T", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBetween("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", " vs ");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("s}OX");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      boolean boolean3 = StringUtils.startsWithAny("6Hg6#EMNBOx[!Uc]\"T", charSequenceArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string5 = StringUtils.deleteWhitespace("NNNNN");
      assertNotNull(string5);
      assertEquals("NNNNN", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, "", stringArray0);
      assertNull(string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      
      boolean boolean1 = priorityQueue0.add("/{*%rOV}{!p@oxLtC7U");
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains("/{*%rOV}{!p@oxLtC7U"));
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = priorityQueue0.add("");
      assertTrue(boolean2);
      assertEquals(2, priorityQueue0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(priorityQueue0.contains("/{*%rOV}{!p@oxLtC7U"));
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      
      priorityQueue0.forEach(consumer0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("/{*%rOV}{!p@oxLtC7U"));
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("/{*%rOV}{!p@oxLtC7U"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      String string1 = StringUtils.join((long[]) null, '*');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("g", "", (-30));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("o:z", "g", (-30));
      assertNotNull(string4);
      assertEquals("o:z", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((boolean[]) null, 'z');
      assertNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("g", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      
      String string8 = StringUtils.leftPad("", 2118, "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "o:z", 0);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.swapCase((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string10);
      assertEquals("g", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      String string11 = StringUtils.repeat("", "g", 1450);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.repeat("\n", 35);
      assertNotNull(string0);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (-1005), 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("", "s}OX");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "jXt<6";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "jXt<6";
      String string2 = StringUtils.appendIfMissing("jXt<6", "jXt<6", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("jXt<6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripStart("j7F{A`/C8 u", "\n");
      assertNotNull(string3);
      assertEquals("j7F{A`/C8 u", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.lastOrdinalIndexOf("jXt<6", "\n", (-679));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.removeStart("The `untilDate` string '", "No proxy target found for ");
      assertNotNull(string4);
      assertEquals("The `untilDate` string '", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "j7F{A`/C8 u");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      
      String string5 = StringUtils.upperCase("jXt<6", locale0);
      assertNotNull(string5);
      assertEquals("JXT<6", string5);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = "4~@o,2Ox+L;D";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (-4367));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceIgnoreCase("Dn(<:d2", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Dn(<:d2", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string1 = "709pC";
      String string2 = StringUtils.center("Dn(<:d2", 56, "709pC");
      assertNotNull(string2);
      assertEquals("709pC709pC709pC709pC709pDn(<:d2709pC709pC709pC709pC709pC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("+", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertNotNull(string3);
      assertEquals("+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverseDelimited(stringArray0[0], 'A');
      assertNull(string4);
      assertEquals(9, stringArray0.length);
      
      String string5 = StringUtils.repeat("+", (-1013));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.removeFirst((String) null, "hHPn5;h!Y");
      assertNull(string6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-4367)));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.repeat("k_+22LLM34xP]Tb", "Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", (-3016));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", ',');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-3016);
      floatArray0[1] = (float) (-3016);
      floatArray0[2] = (float) ']';
      floatArray0[3] = (float) ',';
      String string1 = StringUtils.join(floatArray0, ']');
      assertArrayEquals(new float[] {(-3016.0F), (-3016.0F), 93.0F, 44.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("-3016.0]-3016.0]93.0]44.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "k_+22LLM34xP]Tb", (CharSequence) "");
      assertEquals(15, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("-3016.0]-3016.0]93.0]44.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("org.easymock.bytebu", "3c7HS0VHK-");
      assertNotNull(string2);
      assertEquals("org.easymock.bytebu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("3c7HS0VHK-");
      assertNotNull(string3);
      assertEquals("3c7HS0VHK-", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = null;
      Locale locale0 = new Locale("U5", "&T]@D//Q?&.Tq/<N", ";Nb{3b*{EWr]\"Li6=s ");
      assertNotNull(locale0);
      assertEquals("&T]@D//Q?&.TQ/<N", locale0.getCountry());
      assertEquals(";Nb{3b*{EWr]\"Li6=s ", locale0.getVariant());
      assertEquals("u5", locale0.getLanguage());
      assertEquals("u5_&T]@D//Q?&.TQ/<N_;Nb{3b*{EWr]\"Li6=s ", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("org.easymock.bytebu", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Sd1\u0001");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("Sd1\u0001", (-2484));
      assertNotNull(string0);
      assertEquals("Sd1\u0001", string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Sd1\u0001");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (-1005), 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("jXt<6");
      assertNotNull(string1);
      assertEquals("JXt<6", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("", "s}OX");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "JXt<6";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "JXt<6";
      charSequenceArray0[3] = (CharSequence) "jXt<6";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "jXt<6";
      String string3 = StringUtils.appendIfMissing("jXt<6", "jXt<6", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("jXt<6", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.stripStart("j7F{A`/C8 u", "JXt<6");
      assertNotNull(string4);
      assertEquals("j7F{A`/C8 u", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substring("s}OX", (-1005));
      assertNotNull(string5);
      assertEquals("s}OX", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.center("", (-679));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isWhitespace("j7F{A`/C8 u");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[6], charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.remove("wT`J2T", 'v');
      assertNotNull(string0);
      assertEquals("wT`J2T", string0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.removeEnd("bLnl.8[uG%a5he", "");
      assertNotNull(string0);
      assertEquals("bLnl.8[uG%a5he", string0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      
      int int0 = StringUtils.getFuzzyDistance(" ", charSequenceArray0[0], locale1);
      assertEquals(1, int0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " ", "");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) " ", (-1));
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.left("zqN6&QS(e2l]I@fWw8", (-1109));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "zqN6&QS(e2l]I@fWw8");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("", 'l');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("zqN6&QS(e2l]I@fWw8", 'l');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "zqN6&QS(e2l]I@fWw8", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "zqN6&QS(e2l]I@fWw8", "zqN6&QS(e2l]I@fWw8");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsWhitespace("zqN6&QS(e2l]I@fWw8");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = (-1111);
      int int2 = StringUtils.lastOrdinalIndexOf("zqN6&QS(e2l]I@fWw8", "", (-1111));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean3 = StringUtils.isBlank("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string1 = StringUtils.abbreviate("", "zqN6&QS(e2l]I@fWw8", (-1111), 84);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string2 = "3&T ogN";
      String string3 = "=FD>WDi+\"%]mix.+x&";
      Charset charset1 = Charset.defaultCharset();
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      
      // Undeclared exception!
      try { 
        Charset.forName("F^7Cg(7!^Ft");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // F^7Cg(7!^Ft
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = "ALy''t@0o";
      String string1 = StringUtils.removeFirst("falseRtrueRfalseRfalseRfalseRfalse ", (String) null);
      assertNotNull(string1);
      assertEquals("falseRtrueRfalseRfalseRfalseRfalse ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("O)^aS^ Ir^0qy0xK(`<", "oS@isHs+8H*#'p");
      assertNotNull(string2);
      assertEquals("O)^aS^ Ir^0qy0xK(`<", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "not be nullNNNNN";
      String string4 = StringUtils.wrapIfMissing("DN%+:,{l3", " resource factory");
      assertNotNull(string4);
      assertEquals(" resource factoryDN%+:,{l3 resource factory", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.left((String) null, 92);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("not be nullNNNNN", "wx1OEB{|jL]2})10Q", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.left("9%Wqr12)DTB", 43);
      assertNotNull(string0);
      assertEquals("9%Wqr12)DTB", string0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", 766);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((float[]) null, '^');
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'Z');
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 766, 'Z');
      assertNotNull(string2);
      assertEqualsearch and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.left("wN*M[,?*zqbVdq2t", (-980));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      String string2 = StringUtils.left("org.junitpioneer.jupiter.resource.ResourceExtension", 9);
      assertNotNull(string2);
      assertEquals("org.junit", string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) "org.junit", '>');
      assertEquals(0, int0);
      
      String string3 = StringUtils.uncapitalize("J0):`a9ir9c");
      assertNotNull(string3);
      assertEquals("j0):`a9ir9c", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", "Locale must not be null");
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '-', 9, 182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 182
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, "\",2c>0LC^%%65");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.truncate("\",2c>0LC^%%65", 1246, 2423);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\",2c>0LC^%%65");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.left("java.lang.Object@3480c6b7\",2c>0LC^%%65java.lang.Object@285c84\",2c>0LC^%%65java.lang.Object@4f12f4f\",2c>0LC^%%65java.lang.Object@75322968\",2c>0LC^%%65java.lang.Object@4735ec07", 1246);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = ',';
      charArray0[4] = 'X';
      charArray0[5] = 'c';
      charArray0[6] = 'W';
      charArray0[7] = 'Z';
      String string3 = StringUtils.join(charArray0, '4');
      assertArrayEquals(new char[] {'3', '4', 'd', ',', 'X', 'c', 'W', 'Z'}, charArray0);
      assertNotNull(string3);
      assertEquals("3444d4,4X4c4W4Z", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("3444d4,4X4c4W4Z");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Locale must not be null");
      assertNotNull(string0);
      assertEquals("LOCALE MUST NOT BE NULL", string0);
      
      int int0 = StringUtils.length("LOCALE MUST NOT BE NULL");
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'T', 15, (-3067));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string1 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-3067), 15);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("NEVER");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("lJ", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string0 = StringUtils.replaceAll("9G3?*(!/._", "org.easymock.bytebu", "org.easymock.bytebu");
      assertNotNull(string0);
      assertEquals("9G3?*(!/._", string0);
      
      String string1 = StringUtils.strip("9G3?*(!/._");
      assertNotNull(string1);
      assertEquals("9G3?*(!/._", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "org.easymock.bytebu", (CharSequence) "org.easymock.bytebu");
      assertEquals(1, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'i';
      charArray0[3] = 'X';
      charArray0[4] = 'V';
      charArray0[5] = 'Q';
      charArray0[6] = 'U';
      charArray0[7] = '6';
      int int1 = StringUtils.indexOfAny((CharSequence) "org.easymock.bytebu", charArray0);
      assertArrayEquals(new char[] {'+', '+', 'i', 'X', 'V', 'Q', 'U', '6'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("=4DK=/&XBSl^}f]7"));
      
      stack0.setSize(836);
      assertFalse(stack0.isEmpty());
      assertEquals(836, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(836, stack0.size());
      assertFalse(stack0.contains(836));
      
      boolean boolean0 = stack0.add((Object) "=4DK=/&XBSl^}f]7");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1672, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(837, stack0.size());
      assertTrue(stack0.contains("=4DK=/&XBSl^}f]7"));
      assertFalse(stack0.contains(836));
      
      String string1 = StringUtils.join((List<?>) stack0, "1]V:Q", 0, 112);
      assertNotNull(string1);
      assertEquals("1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q1]V:Q", string1);
      assertFalse(stack0.isEmpty());
      assertEquals(1672, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(837, stack0.size());
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack0.contains("=4DK=/&XBSl^}f]7"));
      assertFalse(stack0.contains(836));
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, 1193);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.stripAccents("car5^Jz$Gh$`nrl-]dB");
      assertNotNull(string0);
      assertEquals("car5^Jz$Gh$`nrl-]dB", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(treeSet0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertFalse(linkedHashSet0.contains(object0));
      
      boolean boolean0 = linkedHashSet0.add("car5^Jz$Gh$`nrl-]dB");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertTrue(linkedHashSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertFalse(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add((Object) null);
      assertTrue(boolean1);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertTrue(linkedHashSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertFalse(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertTrue(linkedHashSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertFalse(linkedHashSet0.contains(object0));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "!:+LZVY$t05cx>f");
      assertNotNull(string1);
      assertEquals("car5^Jz$Gh$`nrl-]dB!:+LZVY$t05cx>f", string1);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(treeSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertTrue(linkedHashSet0.contains("car5^Jz$Gh$`nrl-]dB"));
      assertFalse(linkedHashSet0.contains(object0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'q';
      charArray0[2] = 'j';
      charArray0[3] = 'h';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "&qC-Ce(btOD[}", charArray0);
      assertArrayEquals(new char[] {'u', 'q', 'j', 'h'}, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string2);
      assertEquals("\u82F1\u6587", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale1.getDisplayScript(locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = StringUtils.lowerCase("", locale1);
      assertNotNull(string4);
      assertEquals("", string4);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_CA", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      
      int int0 = StringUtils.compareIgnoreCase("&qC-Ce(btOD[}", "NNNNNStrings must not be null");
      assertEquals((-72), int0);
      
      String string5 = StringUtils.removeIgnoreCase("", ",7E");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "car5^Jz$Gh$`nrl-]dB!:+LZVY$t05cx>f";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "!:+LZVY$t05cx>f";
      charSequenceArray0[4] = (CharSequence) "RLQ&3~dW-#^<OyC";
      boolean boolean3 = StringUtils.startsWithAny("RLQ&3~dW-#^<OyC", charSequenceArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string6 = StringUtils.substringBefore("", 107);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.upperCase("Z60F5.jy,");
      assertNotNull(string0);
      assertEquals("Z60F5.JY,", string0);
      
      String[] stringArray0 = StringUtils.split("...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replacePattern("Z60F5.jy,", "offset cannot be negative", "\n");
      assertNotNull(string1);
      assertEquals("Z60F5.jy,", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Z60F5.jy,", (CharSequence) "Z60F5.jy,", 93);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Z60F5.jy,", "Z60F5.jy,");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Cannotasign ", "Cannotasign ", "Cannotasign ");
      assertNotNull(string0);
      assertEquals("Cannotasign ", string0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceIgnoreCase("...", "...", (String) null);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      charSequenceArray0[0] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be nul";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.replaceAll("R+", "org.easymock.bytebu", "R+");
      assertNotNull(string0);
      assertEquals("R+", string0);
      
      boolean boolean0 = StringUtils.isAlpha("R+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("R+", "Yh,Z=p%\"Xj^wpC");
      assertNotNull(string1);
      assertEquals("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("R+", "O~-r&");
      assertNotNull(string2);
      assertEquals("R+", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("RedZm\"Rs4zMO{", "");
      assertNotNull(string3);
      assertEquals("RedZm\"Rs4zMO{", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("RedZm\"Rs4zMO{", "org.easymock.bytebu");
      assertEquals(0.35, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase("#");
      assertNotNull(string4);
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfterLast("pnZg", 1158);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.removeStartIgnoreCase("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", "R+");
      assertNotNull(string6);
      assertEquals("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1158;
      floatArray0[1] = (float) 1158;
      floatArray0[2] = (float) 1158;
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC";
      charSequenceArray0[1] = (CharSequence) "O~-r&";
      String string7 = StringUtils.replace("org.junitpioneer.jupiter.params.DisableIfNameExtension", "RedZm\"Rs4zMO{", (String) null, (-632));
      assertNotNull(string7);
      assertEquals("org.junitpioneer.jupiter.params.DisableIfNameExtension", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.DisableIfNameExtension";
      charSequenceArray0[3] = (CharSequence) "Yh,Z=p%\"Xj^wpC";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string8 = StringUtils.trimToNull("");
      assertNull(string8);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("CartesianProductTest can only take exactly one type of arguments source.", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase("\n-1.0V2443.0V0.0", "\n-1.0V2443.0V0.0");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E{I :o5;~93Gx";
      stringArray0[1] = "E{I :o5;~93Gx";
      String string0 = StringUtils.replaceEach("E{I :o5;~93Gx", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("E{I :o5;~93Gx", string0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.getDigits("E{I :o5;~93Gx");
      assertNotNull(string1);
      assertEquals("593", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("X*!4MS8J:}mgur9Jv*M", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String string1 = StringUtils.replaceEach("l|", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l|", (CharSequence) "l|", 256);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rotate("getContext", 13);
      assertNotNull(string2);
      assertEquals("extgetCont", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("l|", 3659, 13);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "getContext";
      String string4 = StringUtils.appendIfMissing("*zKqC", "/7!5Tsp6}Kn>", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("*zKqC/7!5Tsp6}Kn>", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("7PS+{GB", charset0);
      assertArrayEquals(new byte[] {(byte)55, (byte)80, (byte)83, (byte)43, (byte)123, (byte)71, (byte)66}, byteArray0);
      assertNotNull(byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string2 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 85);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '%';
      String string4 = StringUtils.join(charArray0, '%', 9, 9);
      assertArrayEquals(new char[] {'e', '%'}, charArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Locale locale0 = new Locale("No exit advice defined by ");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("no exit advice defined by ", locale0.getLanguage());
      assertEquals("no exit advice defined by ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("N`X^@e]yqkk: '('*.^", "No exit advice defined by ", locale0);
      assertEquals(1, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("no exit advice defined by ", locale0.getLanguage());
      assertEquals("no exit advice defined by ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("sR7t*L_s|4G0_*';SF", "sR7t*L_s|4G0_*';SF", "sR7t*L_s|4G0_*';SF");
      assertNotNull(string0);
      assertEquals("sR7t*L_s|4G0_*';SF", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "sR7t*L_s|4G0_*';SF", (CharSequence) "sR7t*L_s|4G0_*';SF");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 46, "Wj31uI'taIqEyWYL3");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-216.5253F);
      String string0 = StringUtils.join(floatArray0, 'h', (-2147483647), 19);
      assertArrayEquals(new float[] {(-216.5253F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, floatArray0.length);
      
      String string1 = StringUtils.center((String) null, 64, " declares less then ");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("o", "");
      assertNotNull(string2);
      assertEquals("o", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate(" ", (-1110), 108);
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverseDelimited("pCGgX^~hkQd`?npCGgX^~hkQd`?n", 'h');
      assertNotNull(string4);
      assertEquals("kQd`?nhkQd`?npCGgX^~hpCGgX^~", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat("]!o[", (-2147483647));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("PwgR4?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '|');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, byteArray0.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, 2);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.strip(".>BAL", "dCD4[B=XD");
      assertNotNull(string0);
      assertEquals(".>BAL", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".>BAL";
      objectArray0[1] = (Object) ".>BAL";
      String string1 = StringUtils.rightPad("Strings must not be", 64, '`');
      assertNotNull(string1);
      assertEquals("Strings must not be`````````````````````````````````````````````", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ".>BAL";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 171;
      intArray0[1] = (int) '?';
      intArray0[2] = (-228);
      intArray0[3] = 64;
      intArray0[4] = (int) '`';
      intArray0[5] = 64;
      intArray0[6] = (-228);
      intArray0[7] = (int) '`';
      intArray0[8] = (int) '`';
      String string3 = StringUtils.join(intArray0, '`', 64, (-980));
      assertArrayEquals(new int[] {171, 63, (-228), 64, 96, 64, (-228), 96, 96}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(9, intArray0.length);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "7V!mflc@qqU!3");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.startsWithAny("Strings must not be", charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("maxWith cannot be negative", "o");
      assertNotNull(string0);
      assertEquals("omaxWith cannot be negativeo", string0);
      
      String string1 = StringUtils.defaultIfEmpty("omaxWith cannot be negativeo", "omaxWith cannot be negativeo");
      assertNotNull(string1);
      assertEquals("omaxWith cannot be negativeo", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast((String) null, 1007);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("O~-r&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("omaxWith cannot be negativeo", (CharSequence) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.stripToEmpty("<Dvoc2ar-");
      assertNotNull(string3);
      assertEquals("<Dvoc2ar-", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 171;
      intArray0[1] = 171;
      intArray0[2] = 1007;
      intArray0[3] = 3;
      intArray0[4] = (-228);
      intArray0[5] = (-228);
      intArray0[6] = 171;
      intArray0[7] = (-228);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '-', 3, 171);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&tl?d");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      assertNotNull(string2);
      assertEquals("zV vwx+}>zv[GC*N;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string3);
      assertEquals("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultString("52IoQsn");
      assertNotNull(string4);
      assertEquals("52IoQsn", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.chomp((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'd', 35, 3);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("zV vwx+}>zv[GC*N;");
      assertTrue(boolean0);
      
      String string7 = StringUtils.appendIfMissing("ReportEntry", "zV vwx+}>zv[GC*N;", stringArray0);
      assertNotNull(string7);
      assertEquals("ReportEntryzV vwx+}>zv[GC*N;", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("ReportEntryzV vwx+}>zv[GC*N;", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("(jG53M_D\"", "52IoQsn");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.lowerCase("l<{~{]mH9->F=h");
      assertNotNull(string0);
      assertEquals("l<{~{]mh9->f=h", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[1] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[2] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[3] = (CharSequence) "l<{~{]mh9->f=h";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[2]);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("2Jc]6/'b!p>\"", (-54));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("2Jc]6/'b!p>\"", "");
      assertNotNull(string2);
      assertEquals("2Jc]6/'b!p>\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.stripAccents("AhjKcc@a{DX<Ib");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceOnceIgnoreCase("2Jc]6/'b!p>\"", "l<{~{]mh9->f=h", "");
      assertNotNull(string4);
      assertEquals("2Jc]6/'b!p>\"", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[1] = 0;
      intArray0[2] = (-54);
      String string5 = StringUtils.replaceOnce("", "AhjKcc@a{DX<Ib", "2Jc]6/'b!p>\"");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      double double0 = StringUtils.getJaroWinklerDistance("AhjKcc@a{DX<Ib", "l<{~{]mH9->F=h");
      assertEquals(0.38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\r";
      String string0 = StringUtils.join(objectArray0, 'i');
      assertNotNull(string0);
      assertEquals("\ri", string0);
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("\ri");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("\ri", "\r");
      assertNotNull(string1);
      assertEquals("\ri", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isBlank("\r");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.substringAfterLast("\r", "q/#");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.unwrap("sElajQ(9x}}#Fi|", " vs ");
      assertNotNull(string0);
      assertEquals("sElajQ(9x}}#Fi|", string0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("s}OX", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("s}OX", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "mKRw3AC#7cMcYxE707";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("", "jXt<6", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.stripStart("s}OX", "5eZ)Il^X");
      assertNotNull(string2);
      assertEquals("s}OX", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("6Hg6#EMNBOx[!Uc]\"T", " vs ");
      assertNotNull(string3);
      assertEquals("6Hg6#EMNBOx[!Uc]\"T", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBetween("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", " vs ");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("s}OX");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("\r", " vs ", charSequenceArray0);
      assertNotNull(string5);
      assertEquals("\r", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charSequenceArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.center("\n", 0, '\\');
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", "\n", "\n");
      assertNotNull(string2);
      assertEquals("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;");
      assertFalse(boolean0);
      
      int int0 = 41;
      String string3 = "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.easymock.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", 0, 51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 58
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String string0 = StringUtils.replaceAll("R+", "org.easymock.bytebu", "R+");
      assertNotNull(string0);
      assertEquals("R+", string0);
      
      boolean boolean0 = StringUtils.isAlpha("R+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("R+", "Yh,Z=p%\"Xj^wpC");
      assertNotNull(string1);
      assertEquals("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC", string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 64;
      floatArray0[1] = (float) ']';
      floatArray0[2] = (float) 64;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) ']';
      String string2 = StringUtils.join(floatArray0, '2', (-2088), (-3275));
      assertArrayEquals(new float[] {64.0F, 93.0F, 64.0F, 0.0F, 93.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      
      String string3 = StringUtils.center("R+", (-351), "org.easymock.bytebu");
      assertNotNull(string3);
      assertEquals("R+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString("S;R", "51I3>UcGT !");
      assertNotNull(string4);
      assertEquals("S;R", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("51I3>UcGT !", 56, 57);
      assertNotNull(string5);
      assertEquals("51I3>UcGT !", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.reverseDelimited("q}Hz?t!Hl", 'T');
      assertNotNull(string6);
      assertEquals("q}Hz?t!Hl", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.repeat("51I3>UcGT !", (-2088));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ']';
      floatArray0[1] = (float) ']';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) ']';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) ']';
      String string0 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {93.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("93.0593.050.0593.0593.0593.0", string0);
      assertEquals(6, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "checkPermission");
      assertEquals(15, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("org.junitpioneer.jupiter.DisableIfTestFailsExtension", (String) null);
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Locale locale0 = new Locale("", "Object varargs must not be null", "$M]BgF!Y9$M]BgF!Y9");
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale1.getCountry());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale1.getVariant());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("checkPermission"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains("checkPermission"));
      assertFalse(list0.contains("checkPermission"));
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertSame(locale0, locale1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringAfterLast("", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("X\"$=oo4RT", "", false);
      assertEquals(10, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.replaceIgnoreCase("", "pQ7P6", "X\"$=oo4RT");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "EmRE@sYFH9$ecyL";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "VCVpg";
      stringArray0[4] = "NNNNNStrings must not be null";
      stringArray0[5] = "";
      stringArray0[6] = ":8Kvg8]w";
      stringArray0[7] = "VCVpg";
      stringArray0[8] = "!:+LZVY$t05cx>f";
      String string2 = StringUtils.replaceEachRepeatedly("pQ7P6", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals("pQ7P6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.reverse("l|");
      assertNotNull(string0);
      assertEquals("|l", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String[] stringArray1 = StringUtils.split("7zX$@:");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.replacePattern("CartesianProductTest can only take exactly one type of arguments source.", (String) null, "...");
      assertNotNull(string1);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "CartesianProductTest can only take exactly one type of arguments source.", (CharSequence) "/7!5Tsp6}Kn>", 36);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("l|", "7zX$@:");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.ordinalIndexOf("/7!5Tsp6}Kn>", "CartesianProductTest can only take exactly one type of arguments source.", 36);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("?+In2KWK3", "?+In2KWK3", false);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "?+In2KWK3", (CharSequence) "?+In2KWK3", 55);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.defaultIfEmpty("}", "}");
      assertNotNull(string0);
      assertEquals("}", string0);
      
      String string1 = StringUtils.center("}", 11);
      assertNotNull(string1);
      assertEquals("     }     ", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}";
      stringArray0[1] = "     }     ";
      stringArray0[2] = "     }     ";
      stringArray0[3] = "     }     ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.chomp("}", "6Hg6#EMNBOx[!Uc]\"T");
      assertNotNull(string3);
      assertEquals("}", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int2 = StringUtils.lastOrdinalIndexOf("     }     ", "     }     ", 4);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.unwrap("}", "}");
      assertNotNull(string4);
      assertEquals("}", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\n", "\r", 1);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.remove("The Array must not be null", '&');
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.strip("maxWith cannot b negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot b negative", string0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.stripAccents("car5^Jz$Gh$`nrl-]dB");
      assertNotNull(string0);
      assertEquals("car5^Jz$Gh$`nrl-]dB", string0);
      
      String string1 = StringUtils.replaceAll("car5^Jz$Gh$`nrl-]dB", "car5^Jz$Gh$`nrl-]dB", "car5^Jz$Gh$`nrl-]dB");
      assertNotNull(string1);
      assertEquals("car5^Jz$Gh$`nrl-]dB", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("car5^Jz$Gh$`nrl-]dB");
      assertNotNull(string2);
      assertEquals("car5^Jz$Gh$`nrl-]dB", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) "car5^Jz$Gh$`nrl-]dB", (CharSequence) "car5^Jz$Gh$`nrl-]dB");
      assertEquals(1, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '+';
      charArray0[2] = '6';
      charArray0[3] = 'i';
      charArray0[4] = 'J';
      charArray0[5] = 'O';
      charArray0[6] = 'Q';
      charArray0[7] = 'W';
      charArray0[8] = 'U';
      int int1 = StringUtils.indexOfAny((CharSequence) "car5^Jz$Gh$`nrl-]dB", charArray0);
      assertArrayEquals(new char[] {'5', '+', '6', 'i', 'J', 'O', 'Q', 'W', 'U'}, charArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", '1');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("dgJ", "");
      assertNotNull(string2);
      assertEquals("dgJ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "dgJ", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "Uw_Opn 3Ify9dcK@}");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.rotate("dgJ", 0);
      assertNotNull(string3);
      assertEquals("dgJ", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("A\"\" ~X(sl", 0, (-429));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "dgJ";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Uw_Opn 3Ify9dcK@}", "Uw_Opn 3Ify9dcK@}");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("=4DK=/&XBSl^}f]7"));
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("{98N{esT`7g", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "~z^l6sB]Y0/:", 3);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      String string2 = StringUtils.substringBefore((String) null, "{98N{esT`7g");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string0 = StringUtils.replace("", (String) null, "", 2667);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((float[]) null, 'o', 121, 121);
      assertNull(string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2667;
      intArray0[1] = (int) 'o';
      intArray0[2] = 2667;
      intArray0[3] = 2667;
      intArray0[4] = 2667;
      intArray0[5] = 121;
      intArray0[6] = 121;
      intArray0[7] = 2667;
      intArray0[8] = 121;
      String string3 = StringUtils.join(intArray0, 'o');
      assertArrayEquals(new int[] {2667, 111, 2667, 2667, 2667, 121, 121, 2667, 121}, intArray0);
      assertNotNull(string3);
      assertEquals("2667o111o2667o2667o2667o121o121o2667o121", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, intArray0.length);
      
      String string4 = StringUtils.join((float[]) null, 'c', 2106, 2667);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore("[FO?FwL@tyK.lQ", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.valueOf((char[]) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      String string1 = StringUtils.substringBefore("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = priorityQueue0.add("");
      assertTrue(boolean1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      assertTrue(priorityQueue0.contains(""));
      
      priorityQueue0.forEach(consumer0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Strings must not beorg.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType"));
      assertTrue(priorityQueue0.contains(""));
      
      String string2 = "Sw]@,y^\"j";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = StringUtils.remove("", 'v');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.remove("", 'v');
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootLowerCase("Hc=$[W>;x*[B");
      assertNotNull(string2);
      assertEquals("hc=$[w>;x*[b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayList0);
      assertNotNull(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, "mg,L!F&^o");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(treeSet0.contains("mg,L!F&^o"));
      
      int int0 = StringUtils.compareIgnoreCase("!V7s[0n/x", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringAfterLast("].C/M", 1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      ArrayList<Locale.Category> arrayList1 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      int int1 = StringUtils.length("].C/M");
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", (String) null, false);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "kFGjjKN";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider";
      int int1 = StringUtils.indexOfAny((CharSequence) "kFGjjKN", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfterLast("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ']';
      floatArray0[1] = (float) ']';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) ']';
      floatArray0[4] = (float) ']';
      floatArray0[5] = (float) ']';
      String string0 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {93.0F, 93.0F, 0.0F, 93.0F, 93.0F, 93.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("93.0593.050.0593.0593.0593.0", string0);
      assertEquals(6, floatArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "checkPermission");
      assertEquals(15, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("org.junitpioneer.jupiter.DisableIfTestFailsExtension", (String) null);
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      Locale locale0 = new Locale("", "Object varargs must not be null", "$M]BgF!Y9$M]BgF!Y9");
      assertNotNull(locale0);
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertEquals("$M]BgF!Y9$M]BgF!Y9", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("_OBJECT VARARGS MUST NOT BE NULL_$M]BgF!Y9$M]BgF!Y9", locale0.toString());
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", locale0.getCountry());
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringAfterLast("", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.leftPad("", 122);
      assertNotNull(string0);
      assertEquals("                                                                                                                          ", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "                                                                                                                          ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("0{$");
      assertNotNull(string2);
      assertEquals("0{$", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = 0.42905982905982903;
      doubleArray0[2] = (double) 1296;
      doubleArray0[3] = (double) '%';
      String string3 = StringUtils.join(doubleArray0, '%', 1868, (-1));
      assertArrayEquals(new double[] {37.0, 0.42905982905982903, 1296.0, 37.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, doubleArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("0{$", '%');
      assertNotNull(string4);
      assertEquals("%0{$%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-1)));
      
      String[] stringArray1 = StringUtils.split("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider", "B#u.ku{zzN?:['^85");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(10, stringArray1.length);
      
      String string5 = StringUtils.stripEnd("\n", (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "\n");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(10, stringArray2.length);
      assertEquals(10, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.stripToNull("gJH2ZH\"<\n");
      assertNotNull(string0);
      assertEquals("gJH2ZH\"<", string0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "BtNk";
      stringArray0[1] = "$Proxy";
      stringArray0[2] = "V";
      stringArray0[3] = "5|U]\"F_vu=$";
      stringArray0[4] = ": ";
      stringArray0[5] = "a8{Q}-W=PEMCg";
      stringArray0[6] = "Locale must not be null";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("BtNk", string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.substring((String) null, 3311, 1590);
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "a8{Q}-W=PEMCg", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("V", stringArray1);
      assertTrue(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("Locale must not be null");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.chomp("!:+LZVY$t05cx>f", "Strings must not be null...");
      assertNotNull(string2);
      assertEquals("!:+LZVY$t05cx>f", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviateMiddle("5|U]\"F_vu=$", "V", (-1909));
      assertNotNull(string3);
      assertEquals("5|U]\"F_vu=$", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.leftPad(" vs ", (-564), 'U');
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      int int0 = StringUtils.compare("", ")=2kl_=tOdycrxm", false);
      assertEquals((-15), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string1 = StringUtils.join(booleanArray0, 'K');
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(string1);
      assertEquals("true", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, booleanArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "true", (CharSequence) ")=2kl_=tOdycrxm");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringBetween("qr%iT\"-xo8K5jq<Agl", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " vs ";
      objectArray0[1] = (Object) "true";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) "true";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) " vs ";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'K');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-513.2272F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string1 = StringUtils.join(floatArray0, ']', 64, 64);
      assertArrayEquals(new float[] {(-513.2272F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      
      String string2 = StringUtils.center("", 56, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.Strorg.apache.commons.lang3.Str", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("", 64, 108);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.reverseDelimited("drr9y%sW#?c", 'K');
      assertNotNull(string5);
      assertEquals("drr9y%sW#?c", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.repeat("", 1152);
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, ']');
      assertNull(stringArray0);
      
      String string7 = StringUtils.substringBefore("org.apache.commons.lang3.Strorg.apache.commons.lang3.Str", 19);
      assertNotNull(string7);
      assertEquals("org.apache.commons.lang3.Strorg.apache.commons.lang3.Str", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(stringArray0[0], '+');
      assertNull(stringArray1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.substring("@\">>x", 46);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Object) "");
      assertTrue(boolean0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(""));
      
      Stack<Object> stack1 = new Stack<Object>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(""));
      
      boolean boolean1 = stack1.addAll((Collection<?>) stack0);
      assertTrue(boolean1);
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(""));
      assertTrue(stack1.contains(""));
      
      String string0 = StringUtils.join((List<?>) stack1, 'h', 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.contains(""));
      assertFalse(stack1.contains('h'));
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.replaceIgnoreCase(" ", "\r", "\n", (-1));
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("l|", supplier0);
      assertNotNull(string0);
      assertEquals("l|", string0);
      
      String string1 = StringUtils.defaultString("l|");
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("i}gHi>$vS");
      assertNotNull(string2);
      assertEquals("i}gHi>$vS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "l|";
      objectArray0[1] = (Object) "i}gHi>$vS";
      objectArray0[2] = (Object) "l|";
      objectArray0[3] = (Object) supplier0;
      objectArray0[4] = (Object) "l|";
      int int0 = StringUtils.compareIgnoreCase("i}gHi>$vS", "D)rdf{}D@y1YZ");
      assertEquals(5, int0);
      
      String string3 = StringUtils.removeIgnoreCase("lOTa(27527fO]K", "i}gHi>$vS");
      assertNotNull(string3);
      assertEquals("lOTa(27527fO]K", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "i}gHi>$vS";
      charSequenceArray0[1] = (CharSequence) "lOTa(27527fO]K";
      charSequenceArray0[2] = (CharSequence) "lOTa(27527fO]K";
      charSequenceArray0[3] = (CharSequence) "l|";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteArray0.length);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, byteArray0.length);
      
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.startsWithAny("l|", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(46));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "&qC-Ce(btOD[}");
      assertNotNull(string0);
      assertEquals(")C>B#i< [%w$.", string0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      assertFalse(hashSet0.contains(46));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ")C>B#i< [%w$.", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string1);
      assertEquals("\u82F1\u6587", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("RLQ&3~dW-#^<OyC", locale0);
      assertNotNull(string3);
      assertEquals("rlq&3~dw-#^<oyc", string3);
      assertNotSame(locale0, locale1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "RLQ&3~dW-#^<OyC";
      objectArray0[1] = (Object) stream0;
      objectArray0[2] = (Object) hashSet0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\u82F1\u6587";
      objectArray0[5] = (Object) "&qC-Ce(btOD[}";
      objectArray0[6] = object0;
      String string4 = StringUtils.join(objectArray0, '2', 96, (-21));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(7, objectArray0.length);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.difference("offset cannot be negative", (String) null);
      assertNotNull(string1);
      assertEquals("offset cannot be negative", string1);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "l&");
      assertNotNull(string1);
      assertEquals("l&", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "Hse}{>.RCov:");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "IF_DECLARED";
      String string3 = StringUtils.wrapIfMissing("Hse}{>.RCov:", '6');
      assertNotNull(string3);
      assertEquals("6Hse}{>.RCov:6", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.difference("", "Search and Replace array lengths don't match: ");
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.KOREA;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("ko_KR", locale2.toString());
      assertEquals("KOR", locale2.getISO3Country());
      assertEquals("KR", locale2.getCountry());
      assertEquals("kor", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        locale2.getUnicodeLocaleType("Hse}{>.RCov:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: Hse}{>.RCov:
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string2 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((String[]) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "", 41, 6);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 27, (-1580));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.repeat("", "mmE6{}TG}B'Pn]p~X,m", 27);
      assertNotNull(string6);
      assertEquals("mmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,mmmE6{}TG}B'Pn]p~X,m", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("(cl", "(cl", "(cl");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 3
         // (cl
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("...", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('?', 1318);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(treeSet0.contains(string0));
      assertFalse(list0.contains(string0));
      assertFalse(list1.contains(string0));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale.setDefault(locale_Category0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.upperCase("...", locale1);
      assertNotNull(string3);
      assertEquals("...", string3);
      assertNotSame(locale1, locale0);
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, 'c', 1318, 1318);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(0, intArray0.length);
      
      String string5 = StringUtils.trim("...");
      assertNotNull(string5);
      assertEquals("...", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.abbreviate("...", 1318, 1318);
      assertNotNull(string6);
      assertEquals("...", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.replaceAll("E@.;3`W+s.h+E6", "-tk,qX", "Strings must not be null");
      assertNotNull(string7);
      assertEquals("E@.;3`W+s.h+E6", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.substringBetween("f;", "f;");
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '1', 46, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substringBetween("", "\n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E{OI :o5;~93Gx", (CharSequence) " vs ");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("Failed to read file ", "Failed to read file ", (String) null);
      assertNotNull(string0);
      assertEquals("Failed to read file ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 36);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("CartesianProductTest can only take exactly one type of arguments source.", "");
      assertEquals(0.0, double0, 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Failed to read file ");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(20, charBuffer0.capacity());
      assertEquals(20, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(20, charBuffer0.remaining());
      assertEquals("Failed to read file ", charBuffer0.toString());
      assertEquals(20, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)34;
      String string1 = StringUtils.leftPad("|:;W8mGj`J~#F>`h", (int) (byte)54);
      assertNotNull(string1);
      assertEquals("                                      |:;W8mGj`J~#F>`h", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultString("CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string2);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Failed to read file ", (CharSequence) "", (int) (byte)0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.stripStart("{9K`", "Failed to read file ");
      assertNotNull(string3);
      assertEquals("{9K`", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Strings must not be null", 10);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(24, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 2044);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-513.2272F);
      String string1 = null;
      String string2 = StringUtils.defaultIfEmpty((String) null, "Locale must not be nullLocale must not be null");
      assertNotNull(string2);
      assertEquals("Locale must not be nullLocale must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "\\Red\\Zm\"Rs4zMO{";
      String string4 = "";
      String string5 = StringUtils.removeStartIgnoreCase((String) null, "Locale must not be nullLocale must not be null");
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("9Wqr1)DTB", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.replaceAll(",fb4p~pS}y]sV%S,", ",fb4p~pS}y]sV%S,", ",fb4p~pS}y]sV%S,");
      assertNotNull(string0);
      assertEquals(",fb4p~pS}y]sV%S,", string0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '0', 1499, 7);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, booleanArray0.length);
      
      String string1 = StringUtils.removeEnd("", "Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getScript();
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(string2.equals((Object)string1));
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("W)`J`DuN|.}Kg", "W)`J`DuN|.}Kg");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // W)`J`DuN|.}Kg
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.replaceChars("%/cj", "^~<t_C;Y/nC*y", "%/cj");
      assertNotNull(string0);
      assertEquals("%cj", string0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string0 = "' is no valid ISO-8601 string.";
      String string1 = StringUtils.replaceChars("' is no valid ISO-8601 string.", "' is no valid ISO-8601 string.", "b");
      assertNotNull(string1);
      assertEquals("b", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("b");
      assertNotNull(string2);
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("' is no valid ISO-8601 string.", "b");
      assertFalse(boolean0);
      
      String string3 = "9AKDvz";
      String string4 = StringUtils.upperCase("9AKDvz");
      assertNotNull(string4);
      assertEquals("9AKDVZ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.stripToEmpty("b");
      assertNotNull(string5);
      assertEquals("b", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.removeAll("", "`!E?=<c");
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = "52IoQsnDisabledUntil";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string7);
      assertEquals(2, int0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      
      int int1 = 11;
      int int2 = StringUtils.lastIndexOf((CharSequence) string2, (CharSequence) string3, int1);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string7));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.replaceOnce("StdIo_System_In", "", "");
      assertNotNull(string1);
      assertEquals("StdIo_System_In", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithIgnoreCase("f;", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.trim("PKm$0Z`;h%WDMf");
      assertNotNull(string3);
      assertEquals("PKm$0Z`;h%WDMf", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("", ";`.SF\"l;F,RhD>p#");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte) (-93);
      String string4 = StringUtils.join(byteArray0, 'J');
      assertArrayEquals(new byte[] {(byte)8, (byte)12, (byte)4, (byte)35, (byte)16, (byte)108, (byte)0, (byte) (-5), (byte) (-93)}, byteArray0);
      assertNotNull(string4);
      assertEquals("8J12J4J35J16J108J0J-5J-93", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(9, byteArray0.length);
      
      String string5 = StringUtils.substringBetween("Strings must not be null", "", (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.stripEnd("\r", "");
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.strip("Z", "");
      assertNotNull(string0);
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("JQr'", "bl\"'N)<0EeAJ!Ip1", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("JQr'bl\"'N)<0EeAJ!Ip1", string0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.capitalize("org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(string1);
      assertEquals("Org.junitpioneer.jupiter.params.ShortRange", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("?2%;'tS*V$fCafT9~Z", "");
      assertNotNull(string2);
      assertEquals("?2%;'tS*V$fCafT9~Z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissing("`", " ", charSequenceArray0);
      assertNotNull(string3);
      assertEquals("` ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.unwrap(":7_2N.ab2#bjp", "?2%;'tS*V$fCafT9~Z");
      assertNotNull(string4);
      assertEquals(":7_2N.ab2#bjp", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.center("", (-4788));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("Org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(boolean0);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfEmpty(" D47", "j|Xc6^]o6/y9H<9");
      assertNotNull(string0);
      assertEquals(" D47", string0);
      
      String string1 = StringUtils.wrapIfMissing("YApXo6{p%1kC~.Object varargs must not be null", '$');
      assertNotNull(string1);
      assertEquals("$YApXo6{p%1kC~.Object varargs must not be null$", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("maxWith cannot be negative", "66g1f|b9t4");
      assertEquals(0.26, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.capitalize("Illegal range. The step cannot be zero.");
      assertNotNull(string0);
      assertEquals("Illegal range. The step cannot be zero.", string0);
      
      String[] stringArray0 = StringUtils.split("Illegal range. The step cannot be zero.", ';');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("Illegal range. The step cannot be zero.");
      assertNotNull(string1);
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("Illegal range. The step cannot be zero.", (-11));
      assertNotNull(string2);
      assertEquals("ot be zero.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("DisabledUntil", "DisabledUntil");
      assertNotNull(string3);
      assertEquals("DisabledUntilDisabledUntilDisabledUntil", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfEmpty("M$*C-\", F:j'/N46No proxy target found for ", "uvb'+s!zo@@xomt/");
      assertNotNull(string4);
      assertEquals("M$*C-\", F:j'/N46No proxy target found for ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeStartIgnoreCase("Y~=kM:,2R_%.$&N", "Illegal range. The step cannot be zero.");
      assertNotNull(string5);
      assertEquals("Y~=kM:,2R_%.$&N", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("M$*C-\", F:j'/N46No proxy target found for ", "Y~=kM:,2R_%.$&N");
      assertEquals(0.42, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Y~=kM:,2R_%.$&N", "ot be zero.");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("Y~=kM:,2R_%.$&N");
      assertFalse(boolean0);
      
      String string6 = StringUtils.toRootUpperCase("Illegal range. The step cannot be zero.");
      assertNotNull(string6);
      assertEquals("ILLEGAL RANGE. THE STEP CANNOT BE ZERO.", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringAfterLast("Y~=kM:,2R_%.$&N", 3396);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.removeStartIgnoreCase("ILLEGAL RANGE. THE STEP CANNOT BE ZERO.", "ot be zero.");
      assertNotNull(string8);
      assertEquals("ILLEGAL RANGE. THE STEP CANNOT BE ZERO.", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("x&@_hH~Bx!r");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      String string0 = "Illegal range. The step cannot be zero.";
      String string1 = StringUtils.capitalize("Illegal range. The step cannot be zero.");
      assertNotNull(string1);
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("D", "suppress");
      assertNotNull(string2);
      assertEquals("suppress", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Parameter [%s] is not of the correct target type %s", 977);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = (-1270);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "suppress", (CharSequence) "D", (-1270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'V');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.remove("{98N{esT`7g", "{98N{esT`7g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("{98N{esT`7g", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chop("&*+v$@N)~;VUazh<K");
      assertNotNull(string2);
      assertEquals("&*+v$@N)~;VUazh<", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore("{98N{esT`7g", (-950));
      assertNotNull(string3);
      assertEquals("{98N{esT`7g", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replace("{98N{esT`7g", "", "OC#wH0", (-950));
      assertNotNull(string4);
      assertEquals("{98N{esT`7g", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace("&*+v$@N)~;VUazh<");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&*+v$@N)~;VUazh<");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      String string5 = StringUtils.trimToEmpty("&*+v$@N)~;VUazh<K");
      assertNotNull(string5);
      assertEquals("&*+v$@N)~;VUazh<K", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.wrapIfMissing("", 'w');
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "w,hVDQsx'J5", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-3158), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.replace("f;", "f;", "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.replaceOnce("StdIo_System_In", "", "");
      assertNotNull(string1);
      assertEquals("StdIo_System_In", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "f;";
      String string2 = StringUtils.trimToNull("dCF`y&@:N*_(E/E<B4m");
      assertNotNull(string2);
      assertEquals("dCF`y&@:N*_(E/E<B4m", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rotate("", 0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Charset.forName(".");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(1, int0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.stringutils");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.stringutils", 1, 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.stringutils", 6);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      String string2 = StringUtils.join(charArray0, '<', 2147, 44);
      assertArrayEquals(new char[] {'%', '%', '%', '%', '%', '%'}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tyNaJln/t4H[}d;V3";
      stringArray0[2] = "tyNaJln/t4H[}d;V3";
      String string0 = StringUtils.substring("tyNaJln/t4H[}d;V3", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("tyNaJln/t4H[}d;V3", stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace(stringArray0[1]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.mid("3\"}ni@f$wGDj", (-2057), 52);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "3\"}ni@f$wGDj", "tyNaJln/t4H[}d;V3");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("3\"}ni@f$wGDj"));
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.wrap("tJ", "Z/MB}SZz;hK_C tS@");
      assertNotNull(string0);
      assertEquals("Z/MB}SZz;hK_C tS@tJZ/MB}SZz;hK_C tS@", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Z/MB}SZz;hK_C tS@", (CharSequence) "Z/MB}SZz;hK_C tS@tJZ/MB}SZz;hK_C tS@");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Z/MB}SZz;hK_C tS@tJZ/MB}SZz;hK_C tS@", "tJ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.rotate("Z/MB}SZz;hK_C tS@", (-877));
      assertNotNull(string1);
      assertEquals("K_C tS@Z/MB}SZz;h", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Z/MB}SZz;hK_C tS@", (CharSequence) "K_C tS@Z/MB}SZz;h");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.chop("ALy''t@0o");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "Threshold must not be negative", 5);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '';
      charArray0[2] = 'E';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ALy''t@0", charArray0);
      assertArrayEquals(new char[] {'{', '', 'E'}, charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '';
      longArray0[1] = (long) '';
      longArray0[2] = (long) 'E';
      longArray0[3] = (long) '';
      longArray0[4] = (long) '';
      longArray0[5] = (long) '';
      longArray0[6] = (long) '{';
      longArray0[7] = (long) '';
      longArray0[8] = (long) 'E';
      String string1 = StringUtils.join(longArray0, 'E');
      assertArrayEquals(new long[] {127L, 127L, 69L, 127L, 127L, 127L, 123L, 127L, 69L}, longArray0);
      assertNotNull(string1);
      assertEquals("127E127E69E127E127E127E123E127E69", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("/", "/");
      assertEquals(0, int0);
      
      String string0 = StringUtils.uncapitalize("/");
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.center("\r", 304, '.');
      assertNotNull(string0);
      assertEquals(".......................................................................................................................................................\r........................................................................................................................................................", string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.stripAccents("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'E';
      charArray0[2] = 'f';
      charArray0[3] = 'B';
      charArray0[4] = 'r';
      charArray0[5] = 'm';
      charArray0[6] = ':';
      charArray0[7] = 'H';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'h', 'E', 'f', 'B', 'r', 'm', ':', 'H'}, charArray0);
      assertNotNull(string1);
      assertEquals("hEfBrm:H", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      assertNotNull(string0);
      assertEquals("Uw_Opn 3Ify9dcK@}", string0);
      
      String string1 = "=4DK=/&XBSl^}f]7";
      String string2 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("dgJ", "");
      assertNotNull(string3);
      assertEquals("dgJ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "dgJ", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "Uw_Opn 3Ify9dcK@}");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "dgJ", 0, 1594);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Object varargs must not be null", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      long[] longArray0 = new long[1];
      longArray0[0] = 629L;
      String string0 = StringUtils.join(longArray0, 'p');
      assertArrayEquals(new long[] {629L}, longArray0);
      assertNotNull(string0);
      assertEquals("629", string0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2209);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.removeEnd("$M]BgF!Y9", "$M]BgF!Y9");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 25;
      longArray0[2] = (long) 25;
      String string2 = StringUtils.join(longArray0, 'c');
      assertArrayEquals(new long[] {99L, 25L, 25L}, longArray0);
      assertNotNull(string2);
      assertEquals("99c25c25", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(".d..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O9ziTewMl\"<E", '0');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'N');
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals("O9ziTewMl\"<E", string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "%V*/f/h|j.U,@W", "%V*/f/h|j.U,@W");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "%V*/f/h|j.U,@W", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.removePattern("StdIo_System_Err", "StdIo_System_Err");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("f5oo,", (-3768), (-3768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.removePattern(" ", "offset cannot be negative");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) " ", (CharSequence) " ");
      assertNotNull(charSequence0);
      assertEquals(" ", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "offset cannot be negative");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("offset cannot be negative");
      assertNotNull(string1);
      assertEquals("Offset cannot be negative", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("D", "19]*");
      assertNotNull(string2);
      assertEquals("19]*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      
      String string3 = StringUtils.removeStartIgnoreCase("Offset cannot be negative", " ");
      assertNotNull(string3);
      assertEquals("Offset cannot be negative", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOf((CharSequence) "?x'|cqv8GM3V_si\"?,Q", (-648), (-648));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = "getContext";
      // Undeclared exception!
      try { 
        StringUtils.truncate("getContext", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.removeAll("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.rotate("", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.abbreviate("eX]", 2044, 2044);
      assertNotNull(string0);
      assertEquals("eX]", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "eX]", (CharSequence) "", 2044);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.difference("=4DK=/&XBSl^}8f]7", "=4DK=/&XBSl^}8f]7");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=4DK=/&XBSl^}8f]7", (CharSequence) "", 12);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "qlQ7O.ZS=2.7Lbl", (CharSequence) "qlQ7O.ZS=2.7Lbl", 9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string1 = StringUtils.center("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", 56, "709pC");
      assertNotNull(string1);
      assertEquals("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "709pC", (CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", 65536);
      assertEquals(71, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string2 = StringUtils.join(booleanArray0, '#');
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(string2);
      assertEquals("false", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) stringArray0[0], (CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Strings must not be null", 6);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "", 2991);
      assertEquals(24, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      String string1 = StringUtils.join(booleanArray0, 'R');
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertNotNull(string1);
      assertEquals("falseRfalseRfalseRtrue", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, booleanArray0.length);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      boolean boolean1 = StringUtils.startsWithAny("falseRfalseRfalseRtrue", stringArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, ',');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("0$wU", 102);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("0$wU");
      assertNotNull(string1);
      assertEquals("0$WU", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("rfK>", "0$wU", (CharSequence[]) null);
      assertNotNull(string2);
      assertEquals("0$wUrfK>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("0$wU", "");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllLowerCase("rfK>");
      assertFalse(boolean0);
      
      String string4 = StringUtils.trim("MFXMkjBfuee<%`i?.");
      assertNotNull(string4);
      assertEquals("MFXMkjBfuee<%`i?.", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Execution of '%s' took [%d] ms.");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.replace("@ah:4JAb", "@ah:4JAb", "\n", 0);
      assertNotNull(string0);
      assertEquals("@ah:4JAb", string0);
      
      String string1 = StringUtils.center("\n", 1951, "\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "@ah:4JAb", 17);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '1', 0, 6);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (-1005), 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("", "s}OX");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "jXt<6";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "jXt<6";
      String string2 = StringUtils.appendIfMissing("jXt<6", "jXt<6", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("jXt<6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.stripStart("j7F{A`/C8 u", "\n");
      assertNotNull(string3);
      assertEquals("j7F{A`/C8 u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("", "");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("j7F{A`/C8 u");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[6], charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllUpperCase("j7F{A`/C8 u");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.rightPad("f;", 0, "f;");
      assertNotNull(string0);
      assertEquals("f;", string0);
      
      String string1 = StringUtils.replaceOnce("StdIo_System_In", "", "");
      assertNotNull(string1);
      assertEquals("StdIo_System_In", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.capitalize("52IoQsn");
      assertNotNull(string2);
      assertEquals("52IoQsn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip("#N2kH]]{[", "wPp-lw/");
      assertNotNull(string3);
      assertEquals("#N2kH]]{[", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.appendIfMissing("52IoQsn", "StdIo_System_In", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("52IoQsnStdIo_System_In", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      
      String string5 = StringUtils.stripStart("<#D ", "#N2kH]]{[");
      assertNotNull(string5);
      assertEquals("<#D ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.unwrap("52IoQsn", "<#D ");
      assertNotNull(string6);
      assertEquals("52IoQsn", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.center("", (-387));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isWhitespace("#N2kH]]{[");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("#N2kH]]{[", charSequenceArray1);
      assertTrue(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      
      String string3 = StringUtils.center("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", 4948, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Search and Replace array lengths don't match: ", 4948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.unwrap("DisabledUntil", "DisabledUntil");
      assertNotNull(string0);
      assertEquals("DisabledUntil", string0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String[] stringArray0 = StringUtils.split("\n", "\n", 46);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string0);
      assertEquals("DisabledUntil", string0);
      
      boolean boolean0 = StringUtils.isAlpha("R+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("DisabledUntil", "Yh,Z=p%\"Xj^wpC");
      assertNotNull(string1);
      assertEquals("Yh,Z=p%\"Xj^wpCDisabledUntilYh,Z=p%\"Xj^wpC", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("DisabledUntil", "O~-r&");
      assertNotNull(string2);
      assertEquals("DisabledUntil", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("RedZm\"Rs4zMO{", "");
      assertNotNull(string3);
      assertEquals("RedZm\"Rs4zMO{", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("RedZm\"Rs4zMO{", "DisabledUntil");
      assertEquals(0.38, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("Yh,Z=p%\"Xj^wpCDisabledUntilYh,Z=p%\"Xj^wpC");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase("#");
      assertNotNull(string4);
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringAfterLast("pnZg", 1158);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.removeStartIgnoreCase("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", "R+");
      assertNotNull(string6);
      assertEquals("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1158;
      floatArray0[1] = (float) 1158;
      floatArray0[2] = (float) 1158;
      floatArray0[3] = (float) 1158;
      floatArray0[4] = (float) 1158;
      floatArray0[5] = (float) 1158;
      floatArray0[6] = (float) 1158;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '/', 1158, 2138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "Hse}{>.RCov:");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("IF_DECLARED", '`');
      assertNotNull(string2);
      assertEquals("`IF_DECLARED`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("Search and Replace array lengths don't match: ", " vs ", false);
      assertEquals(51, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '`';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = '%';
      charArray0[5] = '`';
      charArray0[6] = '%';
      charArray0[7] = 'w';
      String string3 = StringUtils.join(charArray0, '0', 543, 492);
      assertArrayEquals(new char[] {'%', '`', 'w', 'w', '%', '`', '%', 'w'}, charArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("7M", "Unable to get the contents of the resource created by `%s`", "");
      assertNotNull(string4);
      assertEquals("7M", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.reverse("t|");
      assertNotNull(string0);
      assertEquals("|t", string0);
      
      String string1 = StringUtils.removeIgnoreCase("t|", "|t");
      assertNotNull(string1);
      assertEquals("t|", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("t|");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare((String) null, ")J5yt(ldo Esl", false);
      assertEquals(1, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ")J5yt(ldo Esl";
      objectArray0[1] = (Object) "|t";
      objectArray0[2] = (Object) "|t";
      objectArray0[3] = (Object) "t|";
      objectArray0[4] = (Object) "|t";
      objectArray0[5] = (Object) "t|";
      objectArray0[6] = (Object) "t|";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      String string2 = StringUtils.join(objectArray0, (String) null, (-3690), (-3690));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '5', 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[16];
      stringArray0[0] = "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O9ziTewMl\"<E", '0');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1144);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("7V!mflc@qqU!3", 0);
      assertNotNull(string1);
      assertEquals("7V!mflc@qqU!3", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("/D,b,W%'GbS%=6x{cI", (-969), (-969));
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("clone");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("clone"));
      
      String string0 = StringUtils.leftPad("...", 2681, "[");
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(string0, "[", 256);
      assertNotNull(string1);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l|*)l:<6_-|GPiI#~Wv";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.containsWhitespace("[");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrapIfMissing(string0, "[");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat((String) null, "(t^jl0&U9n", 37);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.equals((CharSequence) string2, (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.stripStart("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", "clone");
      assertNotNull(string4);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("P ");
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("P "));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("9%Wqr2)DTB");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("N`t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "R";
      String string0 = StringUtils.appendIfMissing("R", "maxWimh cannot benegative", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("R", string0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("h,<b @a_Jh~\"fNKEO]", "75m");
      assertNotNull(string0);
      assertEquals("75mh,<b @a_Jh~\"fNKEO]75m", string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("66g1f|b9t4", "bl\"'N)<0EeAJ!Ip1", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("66g1f|b9t4bl\"'N)<0EeAJ!Ip1", string0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("JQr'", "JQr'");
      assertNotNull(string0);
      assertEquals("JQr'", string0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
      assertNotNull(string1);
      assertEquals("NNNNN", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.appendIfMissingIgnoreCase("\n", "NNNNN", charSequenceArray0);
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("Na pDyxuOl8R0^On3", "DvjkLEQ@CEW*!w#JR3<", true);
      assertEquals(10, int0);
      
      String string3 = StringUtils.removeFirst("\u0005oxzWf!ULU56Fic|o:", "DvjkLEQ@CEW*!w#JR3<");
      assertNotNull(string3);
      assertEquals("\u0005oxzWf!ULU56Fic|o:", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart("Strings must not be null", "F~:bs&~8FlgSQP%bbgX");
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing("NNNNN", "Strings must not be null");
      assertNotNull(string5);
      assertEquals("Strings must not be nullNNNNNStrings must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isMixedCase("NNNNN");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 'N';
      String string6 = StringUtils.join(floatArray0, 'N');
      assertArrayEquals(new float[] {0.0F, 0.0F, 78.0F, 10.0F, 78.0F}, floatArray0, 0.01F);
      assertNotNull(string6);
      assertEquals("0.0N0.0N78.0N10.0N78.0", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("u", "u");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "u", (-97), (-97));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '{', (-97), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("l|", supplier0);
      assertNotNull(string0);
      assertEquals("l|", string0);
      
      String string1 = StringUtils.defaultString("l|");
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("i}gHi>$vS");
      assertNotNull(string2);
      assertEquals("i}gHi>$vS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "l|";
      objectArray0[1] = (Object) "i}gHi>$vS";
      objectArray0[2] = (Object) "l|";
      objectArray0[3] = (Object) supplier0;
      objectArray0[4] = (Object) "l|";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '2', (-2034458190), 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2034458190
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.chomp("pCGgX^~hkQd`?n", "pCGgX^~hkQd`?n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("pCGgX^~hkQd`?n", 531);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!0Jfj[=2u[>.Hl&a'h";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "pCGgX^~hkQd`?n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string2 = StringUtils.stripStart("", "!0Jfj[=2u[>.Hl&a'h");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      
      String string3 = StringUtils.defaultString("DisabledUntil", "");
      assertNotNull(string3);
      assertEquals("DisabledUntil", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate("#N2kH]]{[", "6Hg6#EMNBOx[!Uc]\"T", 531, 531);
      assertNotNull(string4);
      assertEquals("#N2kH]]{[", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Exception cloning Cloneable type ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Exception cloning Cloneable type 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "@ah:4JAb", (CharSequence) "D\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)4;
      String string0 = StringUtils.join(byteArray0, '1');
      assertArrayEquals(new byte[] {(byte) (-69), (byte)4}, byteArray0);
      assertNotNull(string0);
      assertEquals("-6914", string0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("-6914");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'O', 15, (-1377));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) ", '", (CharSequence) ", '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder", '\\');
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder", string0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string1);
      assertEquals("FORMATDISPLAYFORMATDISPLAYFORMATFORMAT", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, locale_CategoryArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "FORMATDISPLAYFORMATDISPLAYFORMATFORMAT";
      charSequenceArray0[1] = (CharSequence) "FORMATDISPLAYFORMATDISPLAYFORMATFORMAT";
      charSequenceArray0[2] = (CharSequence) "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder";
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '';
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)59;
      String string2 = StringUtils.join(byteArray0, 'r');
      assertArrayEquals(new byte[] {(byte)59}, byteArray0);
      assertNotNull(string2);
      assertEquals("59", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "59", (CharSequence) "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "FORMATDISPLAYFORMATDISPLAYFORMATFORMAT", (CharSequence) "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder", (int) (byte)59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.rightPad("", 5298, 'p');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripAccents(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("gJH2ZH\"<\n");
      assertNotNull(string4);
      assertEquals("gJH2ZH\"<", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("", "maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'K');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, shortArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(0, int0);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "omaxWith cannot be negativeoCould not provide arguments because of exception.", ".");
      assertEquals(76, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2209);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.removeEnd("$M]BgF!Y9", "$M]BgF!Y9");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 25);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = "";
      String string1 = "\"4A";
      int int0 = 0;
      String string2 = StringUtils.abbreviate("", "\"4A", 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("JQr'", 's');
      assertNotNull(string0);
      assertEquals("sJQr's", string0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|M\"H", 'H');
      assertNotNull(string0);
      assertEquals("H|M\"H", string0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("db", "db");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.repeat("k_+22LLM34xP]Tb", "Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", (-3016));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", ',');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it");
      assertNotNull(string1);
      assertEquals("Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("+/VLN_pruhz!<C", 35);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd("EmRE@sYFH9$ecyL", "zV vwx+}>zv[GC*N;");
      assertNotNull(string3);
      assertEquals("EmRE@sYFH9$ecyL", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultString("\r");
      assertNotNull(string4);
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.chomp("EmRE@sYFH9$ecyL");
      assertNotNull(string5);
      assertEquals("EmRE@sYFH9$ecyL", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.join((Object[]) stringArray0, '|', 35, 35);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.appendIfMissing("EmRE@sYFH9$ecyL", "Test marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", stringArray0);
      assertNotNull(string7);
      assertEquals("EmRE@sYFH9$ecyLTest marked as 'expected to fail' succeeded; remove @ExpectedToFail from it", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String string0 = StringUtils.rotate("(w_Bp>b@wb!%fqcs", (-380));
      assertNotNull(string0);
      assertEquals("fqcs(w_Bp>b@wb!%", string0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", " ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "qrE^HvZFZM");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "maxWith cannot be negative", "qrE^HvZFZM");
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("P ", "P ");
      assertNotNull(string0);
      assertEquals("P ", string0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.substring("\n", (-1));
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("bl\"'N)<0EeAJ!Ip1", "66g1f|b9t4");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "lJ");
      assertNotNull(string0);
      assertEquals("DISPLAYlJFORMAT", string0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.removeEnd("There should be a `%s` method on class `%s`", "There should be a `%s` method on class `%s`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "There should be a `%s` method on class `%s`", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "\n");
      assertNotNull(string0);
      assertEquals("DISPLAY", string0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = StringUtils.join(iterator0, "0{ex^\"VhRJ?");
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("0{ex^\"VhRJ?"));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase("f", locale0);
      assertNotNull(string0);
      assertEquals("f", string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "f", "|");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "maxWimh cannot benegative", "maxWimh cannot benegative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", " ", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "kFGjjKN-X14w@vx85'=", (CharSequence) "kFGjjKN-X14w@vx85'=");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-523);
      shortArray0[1] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'I');
      assertArrayEquals(new short[] {(short) (-523), (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals("-523I0", string0);
      assertEquals(2, shortArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "-523I0", (CharSequence) "-523I0");
      assertEquals(1, int0);
      
      String string1 = StringUtils.stripStart("", "-523I0");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#!3u:r9$~/0Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.defaultString("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("#!3u:r9$~/0Y", "#N2kH]]{[", (int) (short)0, (int) (short) (-523));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Strings must not be null";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Strings must not be null";
      objectArray0[4] = (Object) "\",2c>0LC^%%65";
      String string1 = StringUtils.wrapIfMissing("Strings must not be null", "");
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '\"';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) '\"';
      floatArray0[4] = (float) '\"';
      String string2 = StringUtils.join(floatArray0, 'U');
      assertArrayEquals(new float[] {0.0F, 34.0F, 0.0F, 34.0F, 34.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      assertEquals("0.0U34.0U0.0U34.0U34.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("X\"$=oo4RT", "", false);
      assertEquals(10, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.removeFirst("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "Strings must not be");
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "Strings must not be");
      assertNotNull(string2);
      assertEquals("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("", "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isMixedCase("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 10;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      String string4 = StringUtils.join(floatArray0, '\"');
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      assertEquals("10.0\"0.0\"0.0\"0.0", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, floatArray0.length);
      
      String string5 = StringUtils.abbreviateMiddle("AJ]{4U{$", "", 10);
      assertNotNull(string5);
      assertEquals("AJ]{4U{$", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'N');
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "EZ60cF5.jy,Ik", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("EZ60cF5.jy,Ik");
      assertFalse(boolean0);
      
      String string0 = StringUtils.swapCase("maxWith cannot be negativey");
      assertNotNull(string0);
      assertEquals("MAXwITH CANNOT BE NEGATIVEY", string0);
      
      int int1 = StringUtils.compareIgnoreCase("'!8,L!2>", "MAXwITH CANNOT BE NEGATIVEY", false);
      assertEquals((-70), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBetween("maxWith cannot be negativey", (String) null, "N`m XZ8MYO/IT");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "EZ60cF5.jy,Ik";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "N`m XZ8MYO/IT";
      charSequenceArray0[3] = (CharSequence) "EZ60cF5.jy,Ik";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) (short)4;
      floatArray0[2] = (float) (short)4;
      floatArray0[3] = (float) (short)3;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) ' ';
      floatArray0[6] = (float) (short)3;
      floatArray0[7] = (float) 172;
      String string0 = StringUtils.join(floatArray0, 'o');
      assertArrayEquals(new float[] {4.0F, 4.0F, 4.0F, 3.0F, 0.0F, 32.0F, 3.0F, 172.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals("4.0o4.0o4.0o3.0o0.0o32.0o3.0o172.0", string0);
      assertEquals(8, floatArray0.length);
      
      String string1 = StringUtils.defaultIfBlank("(;", "G");
      assertNotNull(string1);
      assertEquals("(;", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove(" is not in the range '0' - '9'", "(;");
      assertNotNull(string2);
      assertEquals(" is not in the range '0' - '9'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase(" is not in the range '0' - '9'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing((String) null, "66g1f|bt4", (CharSequence[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Timeoutfor vitage @Test must be positive.#H", "Timeoutfor vitage @Test must be positive.#H");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O9ziTewMl\"<E", '0');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'N');
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", "Strings must not be null", false);
      assertEquals((-24), int0);
      
      String string3 = StringUtils.removeFirst("", "O9ziTewMl\"<E");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeStart("Strings must not be null", (String) null);
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrapIfMissing("", "=HRGiyB");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '0';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) (-24);
      floatArray0[4] = (float) 'N';
      floatArray0[5] = (float) (-24);
      String string6 = StringUtils.join(floatArray0, '0');
      assertArrayEquals(new float[] {48.0F, 0.0F, 78.0F, (-24.0F), 78.0F, (-24.0F)}, floatArray0, 0.01F);
      assertNotNull(string6);
      assertEquals("48.000.0078.00-24.0078.00-24.0", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Ssring must Eot be n|ll");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.getDigits("w,hVDQsx'J5");
      assertNotNull(string0);
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      assertNotNull(string2);
      assertEquals("zV vwx+}>zv[GC*N;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "");
      assertNotNull(string5);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "bD`+FJ~");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("m;9t]/06KG%mB", 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("zV vwx+}>zv[GC*N;", stringArray1);
      assertFalse(boolean1);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.substringBeforeLast("\n", "");
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("yCGZ/t", "yCGZ/t");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      int int0 = 0;
      char char0 = 'e';
      String string0 = StringUtils.center("", 0, 'e');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = "&=b2;r7q4^fWf`Q";
      String string5 = StringUtils.join((Object[]) stringArray0, "&=b2;r7q4^fWf`Q", 0, 0);
      assertNotNull(string5);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      
      String string6 = StringUtils.center("}-POs0hp0L]B6cB;G_`", 0, "");
      assertNotNull(string6);
      assertEquals("}-POs0hp0L]B6cB;G_`", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("offset cannot be negative", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "maxWimh cannot benegative", (CharSequence) "maxWimh cannot benegative");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "|||";
      String string0 = StringUtils.prependIfMissingIgnoreCase("\n", " ", charSequenceArray0);
      assertNotNull(string0);
      assertEquals("\n", string0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String string0 = StringUtils.replaceEach("l|", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("l|", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("l|", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("E/0C-9/", "/7!5Tsp6}Kn>", stringArray0);
      assertNotNull(string2);
      assertEquals("/7!5Tsp6}Kn>E/0C-9/", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", "/7!5Tsp6}Kn>E/0C-9/");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllLowerCase("l|");
      assertFalse(boolean0);
      
      String string4 = StringUtils.trim("/7!5Tsp6}Kn>");
      assertNotNull(string4);
      assertEquals("/7!5Tsp6}Kn>", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("Minimum abbreviation width is %d"));
      
      String string5 = StringUtils.join((Iterable<?>) vector0, "/7!5Tsp6}Kn>");
      assertNotNull(string5);
      assertEquals("", string5);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(vector0.contains("Minimum abbreviation width is %d"));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "l|", (CharSequence) "CartesianProductTest can only take exactly one type of arguments source.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-513.2272F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string1 = StringUtils.join(floatArray0, ']', 64, 64);
      assertArrayEquals(new float[] {(-513.2272F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      
      String string2 = StringUtils.center("", 56, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.Strorg.apache.commons.lang3.Str", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Locale locale0 = new Locale("NKXc0Gm(@;U-", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "org.apache.commons.lang3.StringUtils");
      assertNotNull(locale0);
      assertEquals("nkxc0gm(@;u-", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.StringUtils", locale0.getVariant());
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", locale0.getCountry());
      assertEquals("nkxc0gm(@;u-_ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER_org.apache.commons.lang3.StringUtils", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("nkxc0gm(@;u-", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.StringUtils", locale0.getVariant());
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", locale0.getCountry());
      assertEquals("nkxc0gm(@;u-_ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER_org.apache.commons.lang3.StringUtils", locale0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", locale1.getVariant());
      assertEquals("nkxc0gm(@;u-", locale1.getLanguage());
      assertEquals("nkxc0gm(@;u-_ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER_org.apache.commons.lang3.StringUtils", locale1.toString());
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", locale1.getCountry());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string1));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.equals((Object)stack0));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack1, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertNotSame(stack1, stack0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(list0.contains(string1));
      
      int int0 = StringUtils.getFuzzyDistance("", "org.apache.commons.lang3.StringUtils", locale1);
      assertEquals(0, int0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("nkxc0gm(@;u-", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.StringUtils", locale0.getVariant());
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", locale0.getCountry());
      assertEquals("nkxc0gm(@;u-_ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER_org.apache.commons.lang3.StringUtils", locale0.toString());
      assertEquals("org.apache.commons.lang3.StringUtils", locale1.getVariant());
      assertEquals("nkxc0gm(@;u-", locale1.getLanguage());
      assertEquals("nkxc0gm(@;u-_ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER_org.apache.commons.lang3.StringUtils", locale1.toString());
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", locale1.getCountry());
      
      String string4 = StringUtils.substringAfterLast("NKXc0Gm(@;U-", 24);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Iterable<?>) null, 'a');
      assertNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 56, 64);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.abbreviate("u[E='8bd3OBX", 7, 7);
      assertNotNull(string0);
      assertEquals("...d...", string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.abbreviate("uw8'6+U:l1l}2a&S>*c", 167, 167);
      assertNotNull(string0);
      assertEquals("uw8'6+U:l1l}2a&S>*c", string0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join(iterator0, '');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(''));
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(hashSet0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, '}');
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('}'));
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.reverse("ese6(u>+r-0]crQ3");
      assertNotNull(string0);
      assertEquals("3Qrc]0-r+>u(6ese", string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      String string1 = StringUtils.join(booleanArray0, 'H');
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, false, true}, booleanArray0));
      assertNotNull(string1);
      assertEquals("falseHfalseHtrueHtrueHfalseHtrueHtrueHfalseHtrue", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, booleanArray0.length);
      
      String string2 = StringUtils.abbreviate(".z", (-1375), 227);
      assertNotNull(string2);
      assertEquals(".z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("ese6(u>+r-0]crQ3");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "3Qrc]0-r+>u(6ese";
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string1));
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, 'H');
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(arrayDeque0.contains(string1));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "3Qrc]0-r+>u(6ese";
      charSequenceArray0[3] = (CharSequence) ".z";
      charSequenceArray0[4] = (CharSequence) ".z";
      charSequenceArray0[5] = (CharSequence) "falseHfalseHtrueHtrueHfalseHtrueHtrueHfalseHtrue";
      charSequenceArray0[6] = (CharSequence) ".z";
      charSequenceArray0[7] = (CharSequence) "3Qrc]0-r+>u(6ese";
      charSequenceArray0[8] = (CharSequence) ".z";
      String string4 = StringUtils.prependIfMissingIgnoreCase("falseHfalseHtrueHtrueHfalseHtrueHtrueHfalseHtrue", "3Qrc]0-r+>u(6ese", charSequenceArray0);
      assertNotNull(string4);
      assertEquals("falseHfalseHtrueHtrueHfalseHtrueHtrueHfalseHtrue", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "", 4315);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Duplicate registration of handler for ");
      assertEquals((-1), int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string1));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends String>) vector0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(linkedList0.contains(string1));
      assertFalse(vector0.contains(string1));
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      String string2 = StringUtils.join(iterator0, "A/}<>7");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(linkedList0.contains(string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{/dp", (CharSequence) "Minimum abbreviation width with offset is %d", 1117);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, 'M');
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, shortArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("Minimum abbreviation width with offset is %d", stringArray0);
      assertFalse(boolean1);
      assertSame(stringArray0, stringArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("NNNNN");
      assertNotNull(string4);
      assertEquals("NNNNN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.replace((String) null, "\r", (String) null, 1117);
      assertNull(string5);
      
      String string6 = StringUtils.repeat('M', (-1));
      assertNotNull(string6);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.join(stringArray1);
      assertNotNull(string7);
      assertEquals("", string7);
      assertSame(stringArray1, stringArray0);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.removeStart(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.truncate("D", 7, 7);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeEndIgnoreCase("", "Hse}{>.RCov:");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrapIfMissing("IF_DECLARED", '`');
      assertNotNull(string3);
      assertEquals("`IF_DECLARED`", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.difference("Hse}{>.RCov:", "Hse}{>.RCov:");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      String string0 = StringUtils.difference("D", "suppress");
      assertNotNull(string0);
      assertEquals("suppress", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("~5-;8ar-p$_wli3K,QR", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertNotNull(string1);
      assertEquals("~5-;8ar-p$_wli3K,QR", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", 47, 17);
      assertNotNull(string2);
      assertEquals("tains` or `matche", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        Charset.forName("~5-;8ar-p$_wli3K,QR");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~5-;8ar-p$_wli3K,QR
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string2);
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      // Undeclared exception!
      try { 
        StringUtils.truncate("Object varargs must not be null", 82, (-1070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "d;;}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d;;}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("", "rB2\"4NFs");
      assertEquals((-8), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "rB2\"4NFs");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String string0 = StringUtils.truncate("Yn| i2!rS-J r9Z5", 3836);
      assertNotNull(string0);
      assertEquals("Yn| i2!rS-J r9Z5", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Yn| i2!rS-J r9Z5", "Yn| i2!rS-J r9Z5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "Hse}{>.RCov:");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.upperCase("r(LxRf@X");
      assertNotNull(string1);
      assertEquals("R(LXRF@X", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("r(LxRf@X", '`');
      assertNotNull(string2);
      assertEquals("`r(LxRf@X`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("r(LxRf@X", (String) null);
      assertNotNull(string3);
      assertEquals("r(LxRf@X", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.difference(" ", "\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)0;
      String string0 = StringUtils.join(shortArray0, '1');
      assertArrayEquals(new short[] {(short)13, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals("131010101010", string0);
      assertEquals(6, shortArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("131010101010", "131010101010", (short)13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "sR7*L_s|40_*';SF", 'n');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("sR7*L_s|40_*';SF");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.unwrap("sR7*L_s|40_*';SF", 's');
      assertNotNull(string0);
      assertEquals("sR7*L_s|40_*';SF", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "sR7*L_s|40_*';SF", charArray0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.replaceAll("R+", "org.easymock.bytebu", "R+");
      assertNotNull(string0);
      assertEquals("R+", string0);
      
      boolean boolean0 = StringUtils.isAlpha("R+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("R+", "Yh,Z=p%\"Xj^wpC");
      assertNotNull(string1);
      assertEquals("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfEmpty("R+", "O~-r&");
      assertNotNull(string2);
      assertEquals("R+", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeStartIgnoreCase("RedZm\"Rs4zMO{", "");
      assertNotNull(string3);
      assertEquals("RedZm\"Rs4zMO{", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("RedZm\"Rs4zMO{", "org.easymock.bytebu");
      assertEquals(0.35, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase("#");
      assertNotNull(string4);
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfterLast("pnZg", 1158);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.removeStartIgnoreCase("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", "R+");
      assertNotNull(string6);
      assertEquals("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1158;
      floatArray0[1] = (float) 1158;
      floatArray0[2] = (float) 1158;
      floatArray0[3] = (float) 1158;
      floatArray0[4] = (float) 1158;
      floatArray0[1] = (float) 1158;
      floatArray0[6] = (float) 1158;
      String[] stringArray1 = StringUtils.split("org.easymock.bytebu");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#", (CharSequence) "O~-r&", 1158);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("bl\"'N)<0EeAJ!Ip1", "bl\"'N)<0EeAJ!Ip1");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replacePattern("CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.", "CartesianProductTest can only take exactly one type of arguments source.");
      assertNotNull(string1);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 36);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("CartesianProductTest can only take exactly one type of arguments source.", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (int) (short) (-1740), '2');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, 14);
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(14, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category2, locale_Category0, locale_Category1);
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category2));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      assertNotNull(enumSet1);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      
      String string1 = StringUtils.join((Iterable<?>) enumSet1, (String) null);
      assertNotNull(string1);
      assertEquals("DISPLAYFORMAT", string1);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet1.contains(locale_Category2));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = '4';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', '4'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.forLanguageTag("h1_");
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      Locale locale3 = Locale.UK;
      assertNotNull(locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getVariant());
      assertEquals("GBR", locale3.getISO3Country());
      assertEquals("GB", locale3.getCountry());
      assertEquals("en_GB", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      
      String string2 = locale1.getDisplayLanguage(locale3);
      assertNotNull(string2);
      assertEquals("English", string2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("GBR", locale3.getISO3Country());
      assertEquals("GB", locale3.getCountry());
      assertEquals("en_GB", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale4 = Locale.ITALY;
      assertNotNull(locale4);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale3);
      assertEquals("IT", locale4.getCountry());
      assertEquals("it", locale4.getLanguage());
      assertEquals("ITA", locale4.getISO3Country());
      assertEquals("ita", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("it_IT", locale4.toString());
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale3));
      
      String string3 = locale3.getDisplayScript(locale4);
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale3);
      assertEquals("", locale3.getVariant());
      assertEquals("GBR", locale3.getISO3Country());
      assertEquals("GB", locale3.getCountry());
      assertEquals("en_GB", locale3.toString());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("IT", locale4.getCountry());
      assertEquals("it", locale4.getLanguage());
      assertEquals("ITA", locale4.getISO3Country());
      assertEquals("ita", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("it_IT", locale4.toString());
      assertFalse(locale3.equals((Object)locale4));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("checkPermission", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.substring("", 3311, 1590);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      String string2 = StringUtils.substringBetween("", "checkPermission");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("&O3vaO");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, "checkPermission", stringArray0);
      assertNull(string3);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(object0));
      
      boolean boolean1 = hashSet0.add(")C>B#i< [%w$.");
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      
      Stream<Object> stream0 = hashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "&qC-Ce(btOD[}");
      assertNotNull(string0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.contains(46));
      assertTrue(hashSet0.contains(")C>B#i< [%w$."));
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "java.lang.Object@1bc08ae4&qC-Ce(btOD[})C>B#i< [%w$.", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charArray0.length);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string1);
      assertEquals("\u82F1\u6587", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("RLQ&3~dW-#^<OyC", locale0);
      assertNotNull(string3);
      assertEquals("rlq&3~dw-#^<oyc", string3);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("&qC-Ce(btOD[}", ")C>B#i< [%w$.");
      assertEquals((-3), int0);
      
      String string4 = StringUtils.removeIgnoreCase("RLQ&3~dW-#^<OyC", "rlq&3~dw-#^<oyc");
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ")C>B#i< [%w$.";
      charSequenceArray0[2] = (CharSequence) "rlq&3~dw-#^<oyc";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+JXbzZHtr");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("+JXbzZHtr", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("A", "A");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.leftPad("O)^aS^ Ir^0qy0xK(`<", 32, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Aborting to pO)^aS^ Ir^0qy0xK(`<", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "O)^aS^ Ir^0qy0xK(`<");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("", "Aborting to pO)^aS^ Ir^0qy0xK(`<", "Aborting to pO)^aS^ Ir^0qy0xK(`<");
      assertNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-337), 32);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Aborting to pO)^aS^ Ir^0qy0xK(`<", 32);
      assertNull(stringArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "O)^aS^ Ir^0qy0xK(`<", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string2 = StringUtils.join(booleanArray0, 'R');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertNotNull(string2);
      assertEquals("falseRtrueRfalseRfalseRfalseRfalse", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, booleanArray0.length);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to pO)^aS^ Ir^0qy0xK(`<", (CharSequence) "O)^aS^ Ir^0qy0xK(`<");
      assertEquals(13, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      String string3 = StringUtils.join(byteArray0, 'z');
      assertArrayEquals(new byte[] {(byte)121, (byte)90, (byte)0, (byte)57}, byteArray0);
      assertNotNull(string3);
      assertEquals("121z90z0z57", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, byteArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.unwrap("8la)T=.27Na(", 'l');
      assertNotNull(string0);
      assertEquals("8la)T=.27Na(", string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E{I :o5;~93Gx", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.prependIfMissing("C-@U[3{To4w)Ry", "C-@U[3{To4w)Ry", stringArray0);
      assertNotNull(string0);
      assertEquals("C-@U[3{To4w)Ry", string0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "E{I :o5;~93Gx", (CharSequence) "C-@U[3{To4w)Ry");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.rotate("K(%nNZN", 17);
      assertNotNull(string0);
      assertEquals("NZNK(%n", string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.unwrap("...", '.');
      assertNotNull(string0);
      assertEquals(".", string0);
      
      String string1 = StringUtils.chomp("org.easymock.bytebuddy.description.NamedElement#g*WI8aypxxw9YV!");
      assertNotNull(string1);
      assertEquals("org.easymock.bytebuddy.description.NamedElement#g*WI8aypxxw9YV!", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("ZrOZajIk65`");
      assertNotNull(string2);
      assertEquals("ZrOZajIk65", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.easymock.bytebuddy.description.NamedElement#g*WI8aypxxw9YV!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tyNaJln/t4H[}d;V3";
      stringArray0[1] = "";
      stringArray0[2] = "', '";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("tyNaJln/t4H[}d;V3", string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("", 0, 0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "tyNaJln/t4H[}d;V3");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("tyNaJln/t4H[}d;V3", stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.remove("B$;B", "e}pyONF");
      assertNotNull(string3);
      assertEquals("B$;B", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumericSpace("B$;B");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.unwrap(" XSSPhV:", 'O');
      assertNotNull(string4);
      assertEquals(" XSSPhV:", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBetween("", "", "");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      double double0 = StringUtils.getJaroWinklerDistance("tyNaJln/t4H[}d;V3", "tyNaJln/t4H[}d;V3");
      assertEquals(1.0, double0, 0.01);
      
      String string6 = StringUtils.center("M,$f", 0, "tyNaJln/t4H[}d;V3");
      assertNotNull(string6);
      assertEquals("M,$f", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", stringArray0);
      assertNotNull(string7);
      assertEquals("Search and Replace array lengths don't match: ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, " XSSPhV:");
      assertNull(stringArray1);
      
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("tyNaJln/t4H[}d;V3", stringArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, stringArray0.length);
      
      String string8 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string8);
      assertEquals("tyNaJln/t4H[}d;V3", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals(3, stringArray0.length);
      
      String string9 = StringUtils.mid("Search and Replace array lengths don't match: ", (-585), (-1204));
      assertNotNull(string9);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      
      String[] stringArray2 = StringUtils.split("This class only serves as a marker type and should not be instantiated");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(13, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound$DefaultArgument");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.leftPad("o", 16, "o");
      assertNotNull(string0);
      assertEquals("oooooooooooooooo", string0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("/GEBkc'9J3pE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = StringUtils.leftPad("R+", 1158);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("DisabledUntil");
      assertNotNull(string1);
      assertEquals("DisabledUntil", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("R+");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEnd("52IoQsn", "DisabledUntil");
      assertNotNull(string2);
      assertEquals("52IoQsn", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("52IoQsn", "VqaLAeXV|~VPT|}'", 1158);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.defaultString("Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different scopes");
      assertNotNull(string3);
      assertEquals("Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different scopes", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.chomp("52IoQsn");
      assertNotNull(string4);
      assertEquals("52IoQsn", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'M', 1158, 1158);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNotEmpty("DisabledUntil");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      boolean boolean1 = StringUtils.isAlphanumeric("OBJECT VARARGS MUST NOT BE NULL");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.remove("Search and Replace array lengths don't match: ", '|');
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean3 = StringUtils.contains((CharSequence) "' is no valid ISO-8601 string.", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", (CharSequence) null, 11);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((char[]) null, '|', 869, 61);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("E'1AXl4`LW?~7Oz", 2068);
      assertNotNull(string4);
      assertEquals("E'1AXl4`LW?~7Oz", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder", '\\');
      assertNotNull(string0);
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder", string0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[6];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string1);
      assertEquals("FORMATDISPLAYFORMATDISPLAYFORMATFORMAT", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, locale_CategoryArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "FORMATDISPLAYFORMATDISPLAYFORMATFORMAT";
      charSequenceArray0[1] = (CharSequence) "FORMATDISPLAYFORMATDISPLAYFORMATFORMAT";
      charSequenceArray0[2] = (CharSequence) "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder";
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '';
      String string2 = StringUtils.join(charArray0, ']', 3, 3);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', ''}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, charArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      String string0 = StringUtils.join(charArray0, 'X', (-835), (-835));
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      assertNotNull(string2);
      assertEquals("zV vwx+}>zv[GC*N;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.wrap("", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "");
      assertNotNull(string5);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      double double0 = StringUtils.getJaroWinklerDistance("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "zV vwx+}>zv[GC*N;");
      assertEquals(0.36, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("x&_OH~Bx!r", "bD`+FJ~");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("m;9t]/06KG%mB", 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "maxWith cannot be negative");
      assertNotNull(string8);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.getDigits(" ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 23);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("o", 0);
      assertNotNull(string1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("o");
      assertNotNull(string2);
      assertEquals("O", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "o";
      charSequenceArray0[2] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      charSequenceArray0[3] = (CharSequence) "O";
      charSequenceArray0[4] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      String string3 = StringUtils.stripAccents("f");
      assertNotNull(string3);
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[5] = (CharSequence) "f";
      charSequenceArray0[6] = (CharSequence) "O";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.trim(" ");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("Strings must not be nullNNNNN", "o");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.removeStart(" ", "\r");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.join(booleanArray0, 'g', 402, 402);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, booleanArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("Z|IBxhk", "v");
      assertNotNull(string2);
      assertEquals("Z|IBxhk", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("o", "`+0>wn?Fyv");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tyNaJln/t4H[}d;V3";
      stringArray0[0] = "";
      stringArray0[2] = "', '";
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[1], (CharSequence) "");
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("tyNaJln/t4H[}d;V3", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.remove("B$;B", "e}pyONF");
      assertNotNull(string2);
      assertEquals("B$;B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNumericSpace("B$;B");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = 2824;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'A';
      floatArray0[1] = (float) 2824;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'A', (-354), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("%s: Could not resolve parameter by name (%s).", "kFGjjKN", false);
      assertEquals((-70), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "kFGjjKN";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" %Okk}k>H^gt*", " %Okk}k>H^gt*", 4);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 30);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      assertEquals("zV vwx+}>zv[GC*N;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension", "org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.DisableIfTestFailsExtension", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "");
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      double double0 = StringUtils.getJaroWinklerDistance("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "zV vwx+}>zv[GC*N;");
      assertEquals(0.36, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("x&@_hH~Bx!r", "bD`+FJ~");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("m;9t]/06KG%mB", 0);
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.removeStartIgnoreCase("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", "maxWith cannot be negative");
      assertNotNull(string8);
      assertEquals("org.easymock.bytebuddy.utility.dispatcher.JavaDispatcher$ProxiedInvocationHandler", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("zV vwx+}>zv[GC*N;", stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Strings must not be null", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substringBefore("\n", 2);
      assertNotNull(string1);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("Could not provide arguments because of exception.", "\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter("Could not provide arguments because of exception.", "Could not provide arguments because of exception.");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfter("\n", (String) null);
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.trimToNull(" ~nL8.Cv");
      assertNotNull(string6);
      assertEquals("~nL8.Cv", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      int int2 = StringUtils.indexOfAny((CharSequence) null, "get");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("hOJQo3y8/#C3@m,8");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("hOJQo3y8/#C3@m,8", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "E{I :o5;~93Gx";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("E{I :o5;~93Gx", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      assertEquals("p,tmt]0au~xfk{", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "p,TMt]0au~xFk{";
      String[] stringArray0 = StringUtils.split("~5-;8ar-p$_wli3K,QRsuppress", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("VhNEh xLoI-<]a");
      assertNotNull(string1);
      assertEquals("VhNEh xLoI-<]a", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("org.easymock.bytebuddy.asm.Advice$NoExceptionHandler", 49);
      assertNotNull(string2);
      assertEquals("ler", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("VhNEh xLoI-<]a", "$");
      assertNotNull(string3);
      assertEquals("$VhNEh xLoI-<]a$", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultIfEmpty("p,TMt]0au~xFk{", "VhNEh xLoI-<]a");
      assertNotNull(string4);
      assertEquals("p,TMt]0au~xFk{", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.removeStartIgnoreCase("No proxy target found for ", "p,tmt]0au~xfk{");
      assertNotNull(string5);
      assertEquals("No proxy target found for ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("p,TMt]0au~xFk{", "org.easymock.bytebuddy.asm.Advice$NoExceptionHandler");
      assertEquals(0.29, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p,tmt]0au~xfk{", "&;gpd");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.isWhitespace("p,TMt]0au~xFk{");
      assertFalse(boolean0);
      
      String string6 = StringUtils.toRootUpperCase("ler");
      assertNotNull(string6);
      assertEquals("LER", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringAfterLast("cZk(BS!7AuS%th?7@o7", 0);
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.removeStartIgnoreCase("!:+LZVY$t05cx>f", ".*{[0-9]+}.*");
      assertNotNull(string8);
      assertEquals("!:+LZVY$t05cx>f", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals(0, int0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase((CharSequence) null, stringArray1);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("L", "L");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.abbreviateMiddle("\n", "\n", (-1));
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull(" ");
      assertNull(string1);
      
      String string2 = StringUtils.chomp("\r");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("E/0C-9/", "maxWith cannot be negative", (CharSequence[]) null);
      assertNotNull(string1);
      assertEquals("maxWith cannot be negativeE/0C-9/", string1);
      
      String string2 = StringUtils.substringAfterLast("EmRE@sYFH9$ecyL", "O)^aS^ Ir^0qy0xK(`<...");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(string1));
      
      boolean boolean1 = vector0.add((String) null);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(vector0.contains(string1));
      
      boolean boolean2 = vector0.add("R");
      assertTrue(boolean2);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, R]", vector0.toString());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(vector0.contains("R"));
      assertFalse(vector0.contains(string1));
      
      boolean boolean3 = vector0.add("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider");
      assertTrue(boolean3);
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, R, org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider]", vector0.toString());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(vector0.contains("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider"));
      assertFalse(vector0.contains(string1));
      
      String string4 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertNotNull(string4);
      assertEquals("Rorg.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider", string4);
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, R, org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider]", vector0.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(vector0.contains("org.junitpioneer.jupiter.json.AbstractJsonSourceBasedArgumentsProvider"));
      assertFalse(vector0.contains(string1));
      
      boolean boolean4 = StringUtils.equals((CharSequence) "", (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, " ", stringArray0);
      assertNull(string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringAfterLast("The resource returned by [%s] was null, which is not allowed", "java.lang.Object@66025a4&qC-Ce(btOD[})C>B#i< [%w$.cZk(BS!7AuS%th?7@o7");
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.trim(" ");
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(string5));
      
      boolean boolean3 = vector0.add("");
      assertTrue(boolean3);
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(vector0.contains(string5));
      assertFalse(vector0.contains(" "));
      
      boolean boolean4 = vector0.add("+ZT7zZFtQuh>hXU");
      assertTrue(boolean4);
      assertEquals("[, +ZT7zZFtQuh>hXU]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(vector0.contains(string5));
      assertFalse(vector0.contains(" "));
      
      String string6 = StringUtils.join((Iterable<?>) vector0, "7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v");
      assertNotNull(string6);
      assertEquals("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v+ZT7zZFtQuh>hXU", string6);
      assertEquals("[, +ZT7zZFtQuh>hXU]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(vector0.contains(string5));
      assertFalse(vector0.contains("7V!mflc@qqU!3Q8~4;M2KG>0_Jt@JS)v"));
      
      boolean boolean5 = StringUtils.equals((CharSequence) " ", (CharSequence) "");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 0, (-1009));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("F~:bs&~8FlgSQP%bbgXStrings must not be null", "mKRw3AC#7cMcYxE707");
      assertNotNull(string0);
      assertEquals("F~:bs&~8FlgSQP%bbgXStrings must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("", "jXt<6", charSequenceArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.stripStart("F~:bs&~8FlgSQP%bbgXStrings must not be null", "5eZ)Il^X");
      assertNotNull(string2);
      assertEquals("F~:bs&~8FlgSQP%bbgXStrings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "5eZ)Il^X", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.swapCase("F~:bs&~8FlgSQP%bbgXStrings must not be null");
      assertNotNull(string3);
      assertEquals("f~:BS&~8fLGsqp%BBGxsTRINGS MUST NOT BE NULL", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mKRw3AC#7cMcYxE707";
      stringArray0[1] = "";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(2, stringArray0.length);
      
      String string5 = StringUtils.repeat("Locale must not be null", "f", 64);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "=-oR(z:)?8zrl");
      assertNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("=-oR(z:)?8zrl"));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String string3 = StringUtils.join(intArray0, 'H', 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string3);
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      
      String string4 = StringUtils.trim("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isWhitespace("=-oR(z:)?8zrl");
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviate("-HDagB", (-2209), 1436);
      assertNotNull(string5);
      assertEquals("-HDagB", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceAll((String) null, (String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.stripStart("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", (String) null);
      assertNotNull(string7);
      assertEquals("u;-V}9XVvQv;G+/VLN_pruhz!<CyN", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("bl\"'N)<0EeAJ!Ip1bl\"'N)<0EeAJ!Ip1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.substringAfter("m,;L,FiYBlm19", "m,;L,FiYBlm19");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertNotNull(string0);
      assertEquals("L", string0);
      assertEquals(1, charArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "L", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = StringUtils.ordinalIndexOf("L", "L", (-580));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 2047L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = 105L;
      String string0 = StringUtils.upperCase("EZ60cF5.jy,Ik");
      assertNotNull(string0);
      assertEquals("EZ60CF5.JY,IK", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("EZ60cF5.jy,Ik");
      assertNotNull(string1);
      assertEquals("EZ60cF5.jy,Ik", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "DisabledUntil", 321, 89);
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "DisabledUntil", 31, 133);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.leftPad("DisabledUntil", 97, "");
      assertNotNull(string4);
      assertEquals("                                                                                    DisabledUntil", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "EZ60cF5.jy,Ik", (-1622));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.swapCase("Threshold must not be negative");
      assertNotNull(string5);
      assertEquals("tHRESHOLD MUST NOT BE NEGATIVE", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.repeat("EZ60cF5.jy,Ik", "#PiI3+8_2VsN*n~`", 133);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("u;-V}9XVvQv;G", "u;-V}9XVvQv;G");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("709pC", (-1817), "u;-V}9XVvQv;G");
      assertNotNull(string1);
      assertEquals("709pC", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("1^crcyJ_~+", "u;-V}9XVvQv;G");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("...");
      assertNotNull(string2);
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.removeEnd("709pC", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string3);
      assertEquals("709pC", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultString("52IoQsnDisabledUntil");
      assertNotNull(string4);
      assertEquals("52IoQsnDisabledUntil", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.chomp((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("u");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.trim(" ");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", '~');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.leftPad((String) null, 19, "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("lookup", "lookup", 322);
      assertNotNull(string0);
      assertEquals("lookup", string0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.substringBetween("bl'<0EeAJ!Ip1", "bl'<0EeAJ!Ip1");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.difference("=4DK=/&XBSl^}f]7", "=4DK=/&XBSl^}f]7");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "=4DK=/&XBSl^}f]7";
      String string1 = StringUtils.deleteWhitespace("Threshold must not be negative");
      assertNotNull(string1);
      assertEquals("Thresholdmustnotbenegative", string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "Thresholdmustnotbenegative";
      charSequenceArray0[2] = (CharSequence) "=4DK=/&XBSl^}f]7";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.replacePattern("j=&Seb.kfd+&4_` >2k", "j=&Seb.kfd+&4_` >2k", (String) null);
      assertNotNull(string2);
      assertEquals("j=&Seb.kfd+&4_` >2k", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "j=&Seb.kfd+&4_` >2k";
      charSequenceArray0[5] = (CharSequence) "=4DK=/&XBSl^}f]7";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("=4DK=/&XBSl^}f]7"));
      
      String string3 = StringUtils.abbreviateMiddle("Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", "j=&Seb.kfd+&4_` >2k", 32);
      assertNotNull(string3);
      assertEquals("Requirej=&Seb.kfd+&4_` >2k none.", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.deleteWhitespace("Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.");
      assertNotNull(string4);
      assertEquals("Requiredatleastoneofthefollowing:@DisableIfArgument,@DisableIfAllArguments,@DisableIfAnyArgumentbutfoundnone.", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "VST;UXf[@mk", (CharSequence) "VST;UXf[@mk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<7sX@ ^m'k3;u%&", "RUx26tA", 1817);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.startsWith("Strings must not be null", "Strings must not be null");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.chop("+6l9:4l'm ?+^Wcsdd");
      assertNotNull(string1);
      assertEquals("+6l9:4l'm ?+^Wcsd", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBefore("Strings must not be null", 10);
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("Search and Replace array lengths don't match: ", "+6l9:4l'm ?+^Wcsdd", "Strings must not be null", 2854);
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&*+v$@N)~;VUazh<K");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      String string0 = StringUtils.upperCase("Cannotasign ", locale0);
      assertNotNull(string0);
      assertEquals("CANNOTASIGN ", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("CANNOTASIGN ", "CANNOTASIGN ", locale0);
      assertEquals(34, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.substringBetween("Xm5ek =DZ ~t=m7r", "");
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertNotNull(string2);
      assertEquals("o:z", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'o', ':', 'z'}, charArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("g", "", (-30));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("o:z", "g", (-30));
      assertNotNull(string4);
      assertEquals("o:z", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((boolean[]) null, 'z');
      assertNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals("g", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string7);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.leftPad("", 2118, "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "o:z", 0);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.swapCase((String) null);
      assertNull(string9);
      
      Locale locale0 = new Locale("iBV]0?Y~)V", "'Qrl^iW$+-iL");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ibv]0?y~)v", locale0.getLanguage());
      assertEquals("'QRL^IW$+-IL", locale0.getCountry());
      assertEquals("ibv]0?y~)v_'QRL^IW$+-IL", locale0.toString());
      
      String string10 = StringUtils.upperCase("", locale0);
      assertNotNull(string10);
      assertEquals("", string10);
      assertEquals("", locale0.getVariant());
      assertEquals("ibv]0?y~)v", locale0.getLanguage());
      assertEquals("'QRL^IW$+-IL", locale0.getCountry());
      assertEquals("ibv]0?y~)v_'QRL^IW$+-IL", locale0.toString());
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '7');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.params.ShortRange");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.params.ShortRange", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.substring("*3w`4h~`S; .h]mr$", 2450, 2450);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 2047L;
      String string0 = StringUtils.leftPad("x=Y,j`)", 11, "1^crcyJ_~+");
      assertNotNull(string0);
      assertEquals("1^crx=Y,j`)", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("...", "1^crcyJ_~+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("1^crcyJ_~+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.toRootUpperCase("%s does not implement %s interface.");
      assertNotNull(string2);
      assertEquals("%S DOES NOT IMPLEMENT %S INTERFACE.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("J^;%ccG?w,WGQjz%$", "...");
      assertEquals(60, int0);
      
      boolean boolean2 = StringUtils.isNumericSpace("1^crx=Y,j`)");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("tJ", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "&O3vaO";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("checkPermission", string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.substring("", 3311, 1590);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "&O3vaO", charArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("&O3vaO", stringArray1);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("checkPermission");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.chomp("7V!mflc@qqU!3", "Q8~4;M2KG>0_Jt@JS)v");
      assertNotNull(string2);
      assertEquals("7V!mflc@qqU!3", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Aborting No protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("aborting No protect against StackOverflowError - output of one loop is the input of another", string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '(', 801, 815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 801
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, ']');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(1, charArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      int int0 = StringUtils.compare("<2=N}{uU`#g&Z", "Cue$9PXH@Px?YLP");
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.leftPad(" vs ", (-564), 'U');
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      int int0 = StringUtils.compare("", ")=2kl_=tOdycrxm", false);
      assertEquals((-15), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = '%';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'w', (-330), 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -330
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      String string2 = StringUtils.center((String) null, 4948, "709pC");
      assertNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "709pC", 56);
      assertEquals(5, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("9WlIY");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("+trC;", "+trC;");
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.repeat("9WlIY", 4588);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-523);
      shortArray0[1] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'I');
      assertArrayEquals(new short[] {(short) (-523), (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals("-523I0", string0);
      assertEquals(2, shortArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "-523I0", (CharSequence) "-523I0");
      assertEquals(1, int0);
      
      String string1 = StringUtils.stripStart("", "-523I0");
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#!3u:r9$~/0Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.defaultString("", "");
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)22;
      String string3 = StringUtils.stripToNull("#!3u:r9$~/0Y");
      assertNotNull(string3);
      assertEquals("#!3u:r9$~/0Y", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphaSpace("#!3u:r9$~/0Y");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.center("J2,iQ&z Ez9}}|y8:n5GEt^*usb", 35, "J2,iQ&z Ez9}}|y8:n5GEt^*usb");
      assertNotNull(string0);
      assertEquals("J2,iJ2,iQ&z Ez9}}|y8:n5GEt^*usbJ2,i", string0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '|', 4315, 110);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, floatArray0.length);
      
      String string2 = StringUtils.center("", 937, "");
      assertNotNull(string2);
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("!:+LZVY$t05cx>fStrings must not be null...", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("!:+LZVY$t05cx>fStrings must not be null...", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("u[E='8bd3OBX", 110, 4315);
      assertNotNull(string4);
      assertEquals("u[E='8bd3OBX", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.reverseDelimited("Search and Replace array lengths don't match: ", '|');
      assertNotNull(string5);
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.repeat("Fn)}", (int) '|');
      assertNotNull(string6);
      assertEquals("Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}Fn)}", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Fn)}", 'F');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, "=-oR(z:)?8zrl");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'V');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, enumSet0.size());
      
      String string2 = StringUtils.join(iterator0, "Object varargs must not be null");
      assertNotNull(string2);
      assertEquals("", string2);
      assertEquals(0, enumSet0.size());
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.repeat("", 43);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tyNaJln/t4H[}d;V3";
      stringArray0[2] = "tyNaJln/t4H[}d;V3";
      String string0 = StringUtils.substring("tyNaJln/t4H[}d;V3", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) stringArray0[1], (CharSequence) "tyNaJln/t4H[}d;V3");
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("tyNaJln/t4H[}d;V3", stringArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.defaultString(";uY'C6$oZ.<*&8$clS", "tyNaJln/t4H[}d;V3");
      assertNotNull(string1);
      assertEquals(";uY'C6$oZ.<*&8$clS", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate((String) null, 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Failed to access security manager", 's');
      assertNotNull(string3);
      assertEquals("ecurity managers sFailed to acce", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("tyNaJln/t4H[}d;V3", 0);
      assertNotNull(string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "ecurity managers sFailed to acce", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.repeat(";", 32767);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(32767));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(32767));
      
      String string1 = StringUtils.join(iterator0, '$');
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(treeSet0.contains('$'));
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.center("N`t^#", 35, "N`t^#");
      assertNotNull(string0);
      assertEquals("N`t^#N`t^#N`t^#N`t^#N`t^#N`t^#N`t^#", string0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ERC,pLd0>@QgDMhbT+F", (-2967), (-2967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.defaultString("5?~XsBDG{r@Gx3CP7~");
      assertNotNull(string0);
      assertEquals("5?~XsBDG{r@Gx3CP7~", string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.repeat("SMPxtc", 2761);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.rightPad("9a/", 17, "9a/");
      assertNotNull(string0);
      assertEquals("9a/9a/9a/9a/9a/9a", string0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, 'Y', (-2021), (-2021));
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean0 = stack0.add((Object) vector0);
      assertTrue(boolean0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[[]]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = vector0.addAll((Collection<?>) stack0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[(this Collection)]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[[(this Collection)]]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.join((List<?>) vector0, 'h', 1909, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(vector0.isEmpty());
      assertEquals("[(this Collection)]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(0));
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("useTypeHashConstant", '}');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceEachRepeatedly("r/(m", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("r/(m", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "PwgR4?";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("PwgR4?", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEachRepeatedly("],&%@}?=W.", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals("],&%@}?=W.", string0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      StringUtils.wrapIfMissing("", "}");
      StringUtils.isAlphaSpace("}");
      StringUtils.mid("|", (-1098), 3709);
      StringUtils.indexOfAnyBut((CharSequence) "}", (CharSequence) "}");
      StringUtils.isAlphanumeric("|");
      String string1 = StringUtils.leftPad("nother", 9984, 'q');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("5I_6ow'H?", stringArray0, stringArray0);
      assertEquals("5I_6ow'H?", string0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.leftPad("\r", (-1));
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("Object varargs must not be null", (String[]) null, (String[]) null);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".k..");
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(".k..", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      StringUtils.upperCase(" ");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      locale1.clone();
      int int0 = StringUtils.getFuzzyDistance(" ", charSequenceArray0[0], locale1);
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale.getISOCountries();
      StringUtils.join((byte[]) null, '|');
      boolean boolean3 = StringUtils.contains((CharSequence) " ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertTrue(boolean3 == boolean2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) " ", 177);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      StringUtils.uncapitalize("m9,?bDln!2cQsI]}?k");
      StringUtils.chomp("J#*AZIz`U~;b");
      StringUtils.strip("an unknown method", "J#*AZIz`U~;b");
      StringUtils.removeAll("J#*AZIz`U~;b", " E");
      StringUtils.countMatches((CharSequence) "J#*AZIz`U~;b", 'K');
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("m9,?bDln!2cQsI]}?k", "J#*AZIz`U~;b", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'b');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.join((byte[]) null, '4');
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "/?d0C?i", "org.apache.commons.lang3.StringUtils");
      StringUtils.endsWithIgnoreCase("org.apache.commons.lang3.StringUtils", "/?d0C?i");
      StringUtils.upperCase("]k9xDuiV;X(");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.isAllEmpty(charSequenceArray0);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = locale0.stripExtensions();
      locale1.clone();
      locale1.getDisplayName();
      StringUtils.getFuzzyDistance("org.apache.commons.lang3.StringUtils", "]k9xDuiV;X(", locale1);
      StringUtils.indexOfDifference((CharSequence) "]K9XDUIV;X(", (CharSequence) "]k9xDuiV;X(");
      Locale.getISOCountries();
      StringUtils.join((byte[]) null, '|');
      StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "org.apache.commons.lang3.StrangUtals");
      StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) null, 0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      StringUtils.join(iterator0, "v");
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.StringUtils", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Locale locale0 = new Locale("Strings must Sot be null");
      int int0 = StringUtils.getFuzzyDistance("Strings must Sot be null", "Strings must Sot be null", locale0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[17];
      String string0 = StringUtils.join(booleanArray0, 'B');
      assertEquals("falseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBfalse", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.upperCase("\n");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "\n";
      StringUtils.isAlphaSpace("\n");
      Locale locale0 = Locale.ITALIAN;
      Locale.getISOLanguages();
      locale0.clone();
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.defaultString("_9OhzC.");
      assertEquals("_9OhzC.", string2);
      
      StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 35);
      String string3 = StringUtils.stripStart("", "_9OhzC.");
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      String string0 = StringUtils.join(booleanArray0, '1', 1154, 1154);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      
      Locale locale0 = Locale.TAIWAN;
      locale0.getUnicodeLocaleAttributes();
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      Locale.getISOCountries();
      StringUtils.join((byte[]) null, '|');
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      StringUtils.substring((String) null, 262, 262);
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 262, 262);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'v');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.mid("sR7t*L_s|4G0_*';SF", 52, 52);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rotate("\r", (-1));
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of anotherlBzKR", (-634), (-634));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverflowError - output of one loop is the input of anotherlBzKR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.reverse("P ");
      assertNotNull(string0);
      assertEquals(" P", string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      String string0 = StringUtils.substring("eNOCvp\"@2;w`yh5=", (-1942), (-3034));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "eNOCvp\"@2;w`yh5=", (CharSequence) "[7zX$@:");
      String string1 = StringUtils.remove("eNOCvp\"@2;w`yh5=", "<kw+86ZDicf/Tx");
      assertEquals("eNOCvp\"@2;w`yh5=", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "eNOCvp\"@2;w`yh5=", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = "dCD4[B=XD";
      StringUtils.strip(".>BAL", "dCD4[B=XD");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".>BAL";
      objectArray0[1] = (Object) ".>BAL";
      StringUtils.rightPad("Strings must not be", 64, '`');
      StringUtils.splitByWholeSeparator(".>BAL", "Strings must not be", (-2148));
      StringUtils.join((long[]) null, '`', (-1), 95);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) ".>BAL", (CharSequence) null, 322);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = "";
      StringUtils.reverseDelimited("", 'M');
      int int0 = (-744);
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) 'M';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'd', (-272), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -272
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative");
      String string1 = StringUtils.abbreviate("maxWith cannot be negative", "", (-313));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '4', 1113, 0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)8192;
      shortArray0[3] = (short) (-2436);
      String string1 = StringUtils.join(shortArray0, ' ');
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("13 0 8192 -2436", "org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Unbound$DefaultArgument");
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNotEmpty("13 0 8192 -2436");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "13 0 8192 -2436";
      stringArray0[1] = "";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'M');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-2628), 722);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringAfterLast("", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '5', 0, 0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("j{", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      int int1 = StringUtils.lastIndexOf((CharSequence) "\n", (-1), (-1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ALy''t@0o";
      stringArray0[1] = "tyNaJln/t4H[}d;V3";
      stringArray0[2] = "ALy''t@0o";
      stringArray0[3] = "ALy''t@0o";
      stringArray0[4] = "tyNaJln/t4H[}d;V3";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      
      StringUtils.normalizeSpace("0qB&`~9*)M|_]h1Q$");
      String string1 = StringUtils.substring("eNOCvp\"@2;w`yh5=", (-1942), (-1942));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ALy''t@0o", (char[]) null);
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "tyNaJln/t4H[}d;V3");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("0qB&`~9*)M|_]h1Q$", stringArray0);
      String string2 = StringUtils.remove("ALy''t@0o", "0qB&`~9*)M|_]h1Q$");
      boolean boolean2 = StringUtils.isNumericSpace("ALy''t@0o");
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.normalizeSpace("ALy''t@0o");
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.endsWith("ALy''t@0o", "tyNaJln/t4H[}d;V3");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.substringAfter("u\u0003-V6XVvlv;G", "u\u0003-V6XVvlv;G");
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 4948, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = string1;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      
      StringUtils.normalizeSpace((String) null);
      String string3 = StringUtils.substring("eNOCvp\"@2;w`yh5=", (-1942), 4948);
      assertEquals("eNOCvp\"@2;w`yh5=", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "u\u0003-V6XVvlv;G");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("709pC", stringArray0);
      assertFalse(boolean1);
      
      StringUtils.remove("O)^aS^ Ir^0qy0xK(`<...", (String) null);
      boolean boolean2 = StringUtils.isNumericSpace("O)^aS^ Ir^0qy0xK(`<...");
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.normalizeSpace("!q ");
      assertEquals("!q", string4);
      
      boolean boolean3 = StringUtils.endsWith("u\u0003-V6XVvlv;G", "0qB&`~9*)M|_]h1Q$");
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "sR7t*L_s|4G0_*';SF";
      charSequenceArray0[1] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.abbreviate("\n", "", 3);
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.repeat("\n", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      StringUtils.join((short[]) null, 'z');
      charSequenceArray0[0] = (CharSequence) "/GEBkc'9J3pE";
      charSequenceArray0[2] = (CharSequence) "/GEBkc'9J3pE";
      StringUtils.prependIfMissingIgnoreCase((String) null, charSequenceArray0[0], charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      StringUtils.reverse("l|");
      StringUtils.capitalize("[im^wD]44E2s");
      StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      StringUtils.upperCase("[im^wD]44E2s");
      StringUtils.uncapitalize("h");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "EWH`3s&O";
      charSequenceArray0[1] = (CharSequence) "h";
      charSequenceArray0[2] = (CharSequence) "h";
      charSequenceArray0[3] = (CharSequence) "[im^wD]44E2s";
      charSequenceArray0[4] = (CharSequence) "[IM^WD]44E2S";
      charSequenceArray0[5] = (CharSequence) "l|";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "EWH`3s&O";
      StringUtils.indexOfAny((CharSequence) "EWH`3s&O", charSequenceArray0);
      String string0 = "f";
      StringUtils.trimToNull("f");
      StringUtils.isAnyEmpty(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", "f", 10, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      short[] shortArray0 = new short[11];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '.', (-1), (int) (short)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ' ', 172, 2725);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 172
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'S', 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      int[] intArray0 = new int[0];
      StringUtils.reverse("K");
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '\'', (-1), 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      StringUtils.split("");
      StringUtils.split("");
      int int0 = StringUtils.compareIgnoreCase("", (String) null);
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "rB2\"4NFs");
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String string0 = StringUtils.join(booleanArray0, '@', 321, 321);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Two or more parameters are annotated with @Shared annotations with the name \"%s\" but with different factory classes");
      assertEquals("Twoormoreparametersareannotatedwith@Sharedannotationswiththename\"%s\"butwithdifferentfactoryclasses", string1);
      
      StringUtils.containsIgnoreCase((CharSequence) null, "CartesianProductTest can only take exactly one type of arguments source.");
      String string2 = StringUtils.substringAfterLast("N~6YZ;>|A0N", "N~6YZ;>|A0N");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Minimum abbreviation width is %d", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "S\"Yo6fv:ZMif:Cg\"-*!");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      String string1 = StringUtils.replacePattern("2%cHy(; |P *,", "U", " ");
      assertEquals("2%cHy(; |P *,", string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, " ", charSequenceArray0);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("", (String) null, 45);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, " vs ");
      assertNull(string4);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "U", 852, (-1));
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      StringUtils.chomp("Uw_Opn 3Ify9dcK@}");
      StringUtils.substringAfter("dgJ", "Uw_Opn 3Ify9dcK@}");
      StringUtils.countMatches((CharSequence) "=4DK=/&XBSl^}f]7", (CharSequence) "Uw_Opn 3Ify9dcK@}");
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 0, 1594);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      StringUtils.firstNonBlank(stringArray0);
      String string0 = StringUtils.appendIfMissing("{}", (CharSequence) null, stringArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("E{I :o5;~93Gx", "E{I :o5;~93Gx", stringArray0);
      assertEquals("E{I :o5;~93Gx", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "E{I :o5;~93Gx", (CharSequence) "E{I :o5;~93Gx");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.rightPad("Zp%LaKi%FL", 22);
      assertNotNull(string0);
      assertEquals("Zp%LaKi%FL            ", string0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.EMPTY;
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[0], charSequenceArray0);
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.substringAfter("", "m");
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.rightPad("2`5r=@", 64, '?');
      charSequenceArray0[3] = (CharSequence) "2`5r=@?????????????????????????????????????????????????????????";
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.containsIgnoreCase(charSequenceArray0[0], charSequenceArray0[2]);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.stripToEmpty("ld_cN-PP\"0nMea~k");
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '?';
      intArray0[2] = (-228);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '?', 63, 171);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 63
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.unwrap("...", '.');
      StringUtils.substringBetween(".", ".", ".");
      StringUtils.chop((String) null);
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      StringUtils.containsOnly((CharSequence) null, ".");
      StringUtils.isAllLowerCase("...");
      String string1 = StringUtils.swapCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{iNcOMBININGdIACRITICALmARKS}+", string1);
      
      String string2 = StringUtils.unwrap("...", ".");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p,TMt]0au~xFk{");
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) "p,tmt]0au~xfk{");
      Stack<Object> stack1 = new Stack<Object>();
      stack1.addAll((Collection<?>) stack0);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "p,tmt]0au~xfk{";
      charSequenceArray0[1] = (CharSequence) "p,tmt]0au~xfk{";
      charSequenceArray0[2] = (CharSequence) "p,TMt]0au~xFk{";
      charSequenceArray0[3] = (CharSequence) "p,tmt]0au~xfk{";
      charSequenceArray0[4] = (CharSequence) "aPBU`t&WXdl!R5VKc";
      String string1 = StringUtils.appendIfMissing("aPBU`t&WXdl!R5VKc", "p,tmt]0au~xfk{", charSequenceArray0);
      String string2 = StringUtils.stripStart("p,TMt]0au~xFk{", "p,TMt]0au~xFk{");
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("u;-V}9XVvQv;G", "");
      assertEquals("u;-V}9XVvQv;G", string3);
      
      String string4 = StringUtils.center("aPBU`t&WXdl!R5VKc", (-679));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("p,tmt]0au~xfk{");
      boolean boolean1 = StringUtils.startsWithAny("aPBU`t&WXdl!R5VKc", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width is %d", 20, 20);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("`@c&N:", "`@c&N:");
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.center("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("bl\"'N)<0EeAJ!Ip1", "bl\"'N)<0EeAJ!Ip1", charSequenceArray0);
      assertEquals("bl\"'N)<0EeAJ!Ip1", string0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.LF;
      StringUtils.indexOf((CharSequence) "\n", (-1005), 0);
      String string1 = StringUtils.capitalize("jXt<6");
      assertEquals("JXt<6", string1);
      
      String string2 = StringUtils.strip("", "s}OX");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "JXt<6";
      charSequenceArray0[1] = (CharSequence) "jXt<6";
      charSequenceArray0[2] = (CharSequence) "JXt<6";
      charSequenceArray0[3] = (CharSequence) "jXt<6";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "jXt<6";
      String string3 = StringUtils.appendIfMissing("jXt<6", "jXt<6", charSequenceArray0);
      assertEquals("jXt<6", string3);
      
      String string4 = StringUtils.stripStart("j7F{A`/C8 u", "JXt<6");
      assertEquals("j7F{A`/C8 u", string4);
      
      StringUtils.unwrap("", "");
      String string5 = StringUtils.center("", (-679));
      assertTrue(string5.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isWhitespace("j7F{A`/C8 u");
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[6], charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("String) must not be npll", "String) must not be npll");
      assertEquals("", string0);
      
      float[] floatArray0 = new float[0];
      StringUtils.join(floatArray0, '|', 4315, 110);
      String string1 = StringUtils.replace("String) must not be npll", "Search and Replace array lengths don't match: ", "", 4315);
      assertEquals("String) must not be npll", string1);
      
      StringUtils.substringAfterLast("!:+LZVY$t05cx>fStrings must not be null...", "");
      StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      String string2 = StringUtils.leftPad("String) must not be npll", 4315, "");
      int int0 = StringUtils.lastOrdinalIndexOf("Search and Replace array lengths don't match: ", string2, 74);
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match:", string3);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("2+s%o", (Supplier<String>) null);
      assertEquals("2+s%o", string0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("l|", supplier0);
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.prependIfMissingIgnoreCase("?y].", " ", stringArray0);
      assertEquals(" ?y].", string0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase(" ", "\n", charSequenceArray0);
      assertEquals("\n ", string0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("maxWith cannot b negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("P ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("#9;C", "Threshold must not b negative");
      assertEquals("#9;C", string0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("tGl@!NDMd3H>1e%z,#p", "tGl@!NDMd3H>1e%z,#p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("ERC,pLd0>@QgDMhbT+F", "ERC,pLd0>@QgDMhbT+F", charSequenceArray0);
      assertEquals("ERC,pLd0>@QgDMhbT+F", string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Threshold must not be negaive");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "L", "L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("kFGjjKN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Strings must not be null", "Strings must not be null");
      assertEquals("", string0);
      
      StringUtils.countMatches((CharSequence) "", (CharSequence) "Strings must not be null");
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      StringUtils.indexOf((CharSequence) "Strings must not be null", 0, 0);
      StringUtils.isNumeric("Strings must not be null");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, '/');
      assertEquals("-1.0", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound");
      assertEquals(24, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", (String) null, "Strings must not be null");
      assertEquals("org.easymock.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$DelegationProcessor$Handler$Bound", string2);
      
      StringUtils.isWhitespace((CharSequence) null);
      String string3 = StringUtils.getDigits("R");
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\r", (-2423));
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      int int0 = StringUtils.lastOrdinalIndexOf("", "\r", (-2423));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '|';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      StringUtils.substringsBetween((String) null, (String) null, (String) null);
      StringUtils.containsWhitespace((CharSequence) null);
      StringUtils.join((Object[]) null, 'e');
      StringUtils.isNumericSpace((CharSequence) null);
      StringUtils.normalizeSpace((String) null);
      StringUtils.join((List<?>) null, 'e', 4, 4);
      StringUtils.getCommonPrefix((String[]) null);
      StringUtils.repeat((String) null, 4);
      StringUtils.join((Object[]) null, ')');
      StringUtils.isAlphaSpace((CharSequence) null);
      StringUtils.defaultIfBlank((String) null, "+dyrk6OCv#");
      StringUtils.swapCase((String) null);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "+dyrk6OCv#", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.abbreviate("", "\n", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("b'(<4F!BH[", (CharSequence) null, 2192);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Object varargs must not be null", "' is no valid ISO-8601 string.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      
      StringUtils.trimToNull((String) null);
      String string2 = StringUtils.removeAll("Search and Replace array lengths don't match: ", "F~:bs&~8FlgSQP%bbgXStrings must not be null");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (String) null);
      int int1 = StringUtils.lastIndexOf((CharSequence) "OBJECT VARARGS MUST NOT BE NULL", (CharSequence) "OBJECT VARARGS MUST NOT BE NULL", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4j\";Y{E9KC~d", "4j\";Y{E9KC~d", (-1));
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.uncapitalize("\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      StringUtils.join(objectArray0, '4');
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@246ae8154java.lang.Object@7ca4ee0a4java.lang.Object@370d44d3", 6);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty("", supplier0);
      StringUtils.lastOrdinalIndexOf("java.lang.Object@246ae8154java.lang.Object@7ca4ee0a4java.lang.Object@370d44d3", (CharSequence) null, (-1524));
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.abbreviate((String) null, 6);
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.wrap("xx $9jN\"#W/", "xx $9jN\"#W/");
      assertEquals("xx $9jN\"#W/xx $9jN\"#W/xx $9jN\"#W/", string0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String[] stringArray0 = new String[6];
      try { 
        StringUtils.getBytes("Str", "Str");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!g5l4-g/MZ^,");
      assertEquals("!g5l4-g/mz^,", string0);
      
      String string1 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", 'M');
      assertEquals("Minimum abbreviation width is %dM", string1);
      
      String string2 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (int) 'M');
      assertEquals("inimum abbreviation width is %d", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is %d", "fcH^75t.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-523);
      shortArray0[1] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'I');
      assertEquals("-523I0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "-523I0", (CharSequence) "-523I0");
      assertEquals(1, int0);
      
      StringUtils.stripStart("", "-523I0");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "#!3u:r9$~/0Y";
      StringUtils.stripAll(stringArray0);
      String string1 = StringUtils.defaultString("", "");
      assertEquals("", string1);
      
      StringUtils.isBlank("");
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (int) (short) (-523));
      assertEquals((-1), int1);
      
      StringUtils.join((float[]) null, 'I', (int) (short)0, (int) (short)0);
      StringUtils.isNumericSpace("");
      boolean boolean0 = StringUtils.isAllLowerCase("-523I0");
      String string2 = StringUtils.join((Object[]) stringArray0, "#!3u:r9$~/0Y", (-946), (-2494));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-523I0", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 35);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'd');
      String string1 = StringUtils.stripToEmpty("org.junitpioneer.jupiter.DisableIfTestFailsExtension");
      StringUtils.substring("zV vwx+}>zv[GC*N;", 0);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string2 = StringUtils.rotate("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 35);
      assertNotNull(string2);
      assertEquals("jupiter.DisableIfTestFailsExtensionorg.junitpioneer.", string2);
      
      StringUtils.mid("52IoQsn", 26, 35);
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.appendIfMissing((String) null, "org.junitpioneer.jupiter.DisableIfTestFailsExtension", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      Charset.defaultCharset();
      Charset.defaultCharset();
      StringUtils.getBytes((String) null, (String) null);
      String string4 = StringUtils.remove("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 'm');
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(46);
      hashSet0.add(")C>B#i< [%w$.");
      hashSet0.parallelStream();
      StringUtils.join((Iterable<?>) hashSet0, "&qC-Ce(btOD[}");
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) ")C>B#i< [%w$.", charArray0);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.CANADA;
      locale1.getDisplayLanguage(locale0);
      locale0.getDisplayScript(locale1);
      String string0 = StringUtils.lowerCase("&qC-Ce(btOD[}", locale0);
      assertEquals("&qc-ce(btod[}", string0);
      
      int int0 = StringUtils.compareIgnoreCase("&qC-Ce(btOD[}", ")C>B#i< [%w$.");
      assertEquals((-3), int0);
      
      String string1 = StringUtils.removeIgnoreCase("&qC-Ce(btOD[}", "&qc-ce(btod[}");
      String string2 = StringUtils.substringAfterLast(")C>B#i< [%w$.", 46);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStartIgnoreCase("7|;", "&qC-Ce(btOD[}");
      assertEquals("7|;", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.");
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("7|;", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("uP)+hT_3", 167);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.chomp("\r", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("\r", " ");
      String string1 = StringUtils.wrap("", '\\');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.strip(";,].eR18)nGxmH6", ";,].eR18)nGxmH6");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[0]);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("org.apache.commons.lang3.LocaleUtils", (String) null);
      assertEquals(36, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      StringUtils.chomp("pCGgX^~hkQd`?n", "pCGgX^~hkQd`?n");
      int int0 = 531;
      StringUtils.substringAfterLast("pCGgX^~hkQd`?n", 531);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!0Jfj[=2u[>.Hl&a'h";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "pCGgX^~hkQd`?n";
      StringUtils.stripAll(stringArray0);
      char[] charArray0 = new char[0];
      StringUtils.containsAny((CharSequence) "", charArray0);
      try { 
        StringUtils.getBytes("6nU", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.strip(".>BAL", "d?;CD4[B=XD");
      assertEquals(".>BAL", string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".>BAL";
      objectArray0[1] = (Object) ".>BAL";
      StringUtils.containsAny((CharSequence) ".>BAL", (char[]) null);
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      StringUtils.substringBetween("Argument 0 can't be null", "d?;CD4[B=XD");
      StringUtils.valueOf((char[]) null);
      StringUtils.containsAny((CharSequence) "Argument 0 can't be null", (char[]) null);
      String string2 = StringUtils.upperCase("d?;CD4[B=XD");
      assertEquals("D?;CD4[B=XD", string2);
      
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      StringUtils.defaultString(".>BAL");
      charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Vector<String> vector0 = new Vector<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      int[] intArray0 = StringUtils.toCodePoints("Xm5ek =DZ ~t=m7r");
      assertEquals(16, intArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) ".>BAL", '|');
      assertEquals(0, int0);
      
      byte[] byteArray0 = StringUtils.getBytes("vqxFwb]7#", (String) null);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[1] = (CharSequence) " ";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("=");
      int int0 = StringUtils.indexOfAny((CharSequence) "=", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Fs'jvTtb,^e=c}V4@`", (-1472));
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '';
      StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      StringUtils.stripToNull("e<LZ) Xj^MW");
      StringUtils.isWhitespace("e<LZ) Xj^MW");
      StringUtils.join(charArray0, '');
      StringUtils.startsWithAny("{", (CharSequence[]) null);
      StringUtils.overlay("Threshold must not be negative", (String) null, 148, 40);
      StringUtils.isAllUpperCase("Threshold must not be negative");
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      StringUtils.rightPad("f;", 0, "f;");
      StringUtils.replaceOnce("StdI_Sysem_In", "", "");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[0] = (CharSequence) "f;";
      StringUtils.indexOfAny((CharSequence) "StdI_Sysem_In", charSequenceArray0);
      StringUtils.overlay("", "3x", (-1), 0);
      StringUtils.trimToNull("dCF`y&@:N*_(E/E<B4m");
      StringUtils.rotate("x", 0);
      // Undeclared exception!
      try { 
        Charset.forName(".");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.overlay("", "", 4624, 4624);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceFirst("", "", "");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.reverse("\n");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.rotate("\n", 3659);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string2 = StringUtils.mid("\n", 3659, 0);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "E{I :o5;~93Gx", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      StringUtils.stripAccents("");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      StringUtils.compareIgnoreCase("X\"$=oo4RT", "", false);
      StringUtils.removeFirst("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", "Strings must not be");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X\"$=oo4RT";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      StringUtils.indexOfAny((CharSequence) "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType", charSequenceArray0);
      StringUtils.trimToNull("org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType");
      StringUtils.rotate("N`X=*{R,G]", 931);
      // Undeclared exception!
      try { 
        Charset.forName("]N`X=*{R,G");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]N`X=*{R,G
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rightPad("\n", (-1), "\r");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      StringUtils.reverse("\n");
      StringUtils.rightPad("\n", 3613, (String) null);
      StringUtils.replaceOnce("falseRtrueRfalseRfalseRfalseRfalse", "XcOy<E/T#+[5&'", "-.P}N{7>0Tc");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "\n";
      StringUtils.uncapitalize("EWH`3s&O");
      charSequenceArray0[3] = (CharSequence) "eWH`3s&O";
      StringUtils.indexOfAny((CharSequence) "-.P}N{7>0Tc", charSequenceArray0);
      StringUtils.trimToNull("U");
      StringUtils.rotate("U", 0);
      // Undeclared exception!
      try { 
        Charset.forName("U");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // U
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      StringUtils.reverse("\n");
      int int0 = 13;
      StringUtils.rightPad((String) null, 13, "\n");
      String string0 = "StdIo_System_In";
      StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) null);
      StringUtils.overlay("NNNNNStrings must not be null", "\n", (-371), (-498));
      StringUtils.trimToNull("");
      StringUtils.rotate("StdIo_System_In", 13);
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "checkPermission";
      stringArray0[2] = "";
      stringArray0[3] = "checkPermission";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("checkPermission", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 182);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("Locale must not be nullLocale must not be null", 182, 4);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "checkPermission";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "checkPermission";
      stringArray1[5] = "|O";
      stringArray1[6] = "Threshold must not be negative";
      stringArray1[7] = "checkPermission";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertTrue(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Threshold must not be negative", (CharSequence) "|O");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("~", "~", "~");
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = "f;";
      int int0 = 0;
      StringUtils.rightPad("f;", 0, "f;");
      String string1 = "";
      StringUtils.replaceOnce("StdIo_System_In", "", "");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "f;";
      StringUtils.indexOfAny((CharSequence) "StdIo_System_In", charSequenceArray0);
      String string2 = "3x";
      StringUtils.overlay("", "3x", 0, 0);
      StringUtils.trimToNull("dCF`y&@:N*_(E/E<B4m");
      String string3 = "";
      StringUtils.rotate("", 0);
      // Undeclared exception!
      try { 
        Charset.forName(".");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.overlay(" ", " ", (-1), (-1));
      assertEquals("  ", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.replaceChars("lokup", (String) null, (String) null);
      assertNotNull(string0);
      assertEquals("lokup", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      StringUtils.splitByCharacterTypeCamelCase(" ");
      String string1 = StringUtils.defaultIfBlank(" ", " ");
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String string0 = StringUtils.difference("V@}MJ1Q", "V@}MJ1Q");
      boolean boolean0 = StringUtils.endsWith("", "V@}MJ1Q");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String string0 = StringUtils.trimToNull("-4w@x85=");
      assertNotNull(string0);
      assertEquals("-4w@x85=", string0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.replaceChars("tGl@!NDMd3H>1e%z,#p", "tGl@!NDMd3H>1e%z,#p", "tGl@!NDMd3H>1e%z,#p");
      assertEquals("tGl@!NDMd3H>1e%z,#p", string0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "IF_DECLARED", "IF_DECLARED");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      String string0 = StringUtils.upperCase("Minimum abbreviation wid9h with offset is %d");
      assertNotNull(string0);
      assertEquals("MINIMUM ABBREVIATION WID9H WITH OFFSET IS %D", string0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      String string0 = StringUtils.trim("ui1(650bua'>k5w");
      assertNotNull(string0);
      assertEquals("ui1(650bua'>k5w", string0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("seq!p+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" ", (String) null, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "Search and Replace array lengths don't match: ");
      String string1 = StringUtils.upperCase(" ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.trimToNull("...");
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "...", "`J6/!");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.junitpioneer.jupiter.json.Jso InlineArumeTtsProvider", "org.junitpioneer.jupiter.json.Jso InlineArumeTtsProvider");
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.center(" ", (-1), "\n");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("u");
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b'(<4F!BH[");
      assertEquals("b'(<4F!BH[", string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6&<{L)W", (CharSequence) "6&<{L)W", Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      StringUtils.reverse("l|");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      String string0 = StringUtils.replaceEach("l|", stringArray0, stringArray0);
      assertEquals("l|", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l|", (CharSequence) "l|", 256);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("getContext", 13);
      assertEquals("extgetCont", string1);
      
      StringUtils.mid("l|", 3659, 13);
      String string2 = StringUtils.normalizeSpace("CartesianProductTest can only take exactly one type of arguments source.");
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string2);
      
      StringUtils.join((short[]) null, 'T');
      int int1 = StringUtils.indexOf((CharSequence) "|l", (CharSequence) "l|");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      StringUtils.splitByWholeSeparator(" ", " ", (-2888));
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(",  ");
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "REffk<;Z");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("P ", "P ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils.firstNonBlank(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      StringUtils.normalizeSpace("!QE1Ew*=MmE4`{;sg");
      StringUtils.splitByWholeSeparator("", "", (-1614));
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "\n");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      StringUtils.stripToNull("\r");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils.leftPad("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (-4367), 'y');
      StringUtils.indexOf((CharSequence) "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (-4367));
      StringUtils.replaceIgnoreCase("Dn(<:d2", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "VCVpg";
      stringArray0[2] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[3] = "Dn(<:d2";
      stringArray0[4] = ":8Kvg8]w";
      stringArray0[5] = ":8Kvg8]w";
      stringArray0[6] = null;
      stringArray0[7] = ":8Kvg8]w";
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(":8Kvg8]w", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOf((CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>(priorityQueue0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue1, 'v');
      assertNotNull(string0);
      
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "\n", 3659);
      String string1 = StringUtils.rotate("\n", (-1027));
      StringUtils.mid("org.junitpioneer.jupiter.DisableIfTestFailsExtension", 3659, (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\n";
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.DisableIfTestFailsExtension";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "org.junitpioneer.jupiter.DisableIfTestFailsExtension";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "\n");
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2209);
      StringUtils.trimToEmpty("");
      String string0 = StringUtils.removeEnd("$M]BgF!Y9", "$M]BgF!Y9");
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 25);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = StringUtils.removeEnd("tGl@!NDMd3H>1e%z,#p", "tGl@!NDMd3H>1e%z,#p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider", "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      StringUtils.repeat('|', (int) '|');
      StringUtils.substringAfter("dgJ", "2%ha%?6|i|{b,B");
      StringUtils.unwrap("", "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
      StringUtils.chop("");
      StringUtils.substringsBetween("o5O1yY.h`&[d)jso5kk", "org.easymock.bytebuddy.asm.AdvicelJlJ", (String) null);
      StringUtils.wrap("|tJK", '|');
      StringUtils.splitPreserveAllTokens("", '0');
      String string0 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "f\t))]XJ", 0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.stripStart(",Vp#Vn;C'8k", "O(h^M|YdB9:7,x");
      assertEquals("Vp#Vn;C'8k", string0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.strip("s?$1-FcJa!{{:UHna", "\n");
      assertEquals("s?$1-FcJa!{{:UHna", string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string0 = StringUtils.replaceChars("' is no valid ISO-8601 string.", "' is no valid ISO-8601 string.", "b");
      assertEquals("b", string0);
      
      String string1 = StringUtils.trimToNull("b");
      assertEquals("b", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("' is no valid ISO-8601 string.", "b");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("9AKDv");
      assertEquals("9AKDV", string2);
      assertNotNull(string2);
      
      StringUtils.isAllBlank((CharSequence[]) null);
      String string3 = StringUtils.stripEnd("|a!2d;#Fz", "|a!2d;#Fz");
      StringUtils.defaultString("' is no valid ISO-8601 string.");
      Locale locale0 = new Locale("", "].b;'Yds$Zw`|8M", "' is no valid ISO-8601 string.");
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getDisplayLanguage();
      locale0.getDisplayScript(locale1);
      StringUtils.getFuzzyDistance("].b;'Yds$Zw`|8M", "", locale0);
      String string4 = StringUtils.substringAfterLast("' is no valid ISO-8601 string.", 0);
      assertTrue(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "].b;'Yds$Zw`|8M";
      stringArray0[1] = "Z";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Z");
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("j\"U Qz^D");
      assertEquals("j\"U Qz^D", string0);
      
      String string1 = StringUtils.center("Threshold must not be negative", 0, (String) null);
      assertEquals("Threshold must not be negative", string1);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2443.0F;
      floatArray0[2] = 0.0F;
      StringUtils.join(floatArray0, ']');
      StringUtils.getLevenshteinDistance((CharSequence) "-1.0]2443.0]0.0", (CharSequence) "-1.0]2443.0]0.0");
      StringUtils.containsWhitespace("-1.0]2443.0]0.0");
      StringUtils.stripEnd("-1.0]2443.0]0.0", "-1.0]2443.0]0.0");
      StringUtils.defaultString("-1.0]2443.0]0.0");
      String string0 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale("-1.0]2443.0]0.0", "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      StringUtils.reverse("l|");
      int int0 = 3659;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|";
      String string0 = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[1] = "CartesianProductTest can only take exactly one type of arguments source.";
      stringArray0[2] = "/7!5Tsp6}Kn>";
      stringArray0[3] = "l|";
      StringUtils.replaceEach("l|", stringArray0, stringArray0);
      String string1 = null;
      StringUtils.removeEnd("l|", (String) null);
      StringUtils.defaultString("|l");
      StringUtils.chomp("|l");
      int int1 = 1008;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '9', 1008, 3659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1008
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.LF;
      String string1 = StringUtils.center("\n", 0, '\\');
      assertEquals("\n", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", "\n", "\n");
      StringUtils.isWhitespace("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;");
      String string3 = StringUtils.substringBefore("EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", (int) '\\');
      assertTrue(string3.equals((Object)string2));
      
      StringUtils.join((String[]) null);
      int int0 = StringUtils.indexOfDifference((CharSequence) "EmRE@sYFH9$ecyLzV vwx+}>zv[GC*N;", (CharSequence) "org.junitpioneer.jupiter.json.JsonInlineArgumentsProvider");
      assertEquals(0, int0);
      
      StringUtils.join((Object[]) null, "F~:bs&~8FlgSQP%bbgXStrings must not be null", 41, (-1580));
      StringUtils.lastIndexOf((CharSequence) null, 6, 1310);
      StringUtils.getCommonPrefix((String[]) null);
      String string4 = StringUtils.repeat("F~:bs&~8FlgSQP%bbgXStrings must not be null", " ", (-1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String string0 = StringUtils.stripStart("\n", "\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String string0 = StringUtils.stripToNull("{}");
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.stripEnd("{W-P3(fM$Q4&3-5tY+Y", "{W-P3(fM$Q4&3-5tY+Y");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = "";
      StringUtils.removeEnd("", "");
      String string1 = ".>BAL";
      String string2 = "dCD4[B=XD";
      StringUtils.strip(".>BAL", "dCD4[B=XD");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".>BAL";
      objectArray0[1] = (Object) ".>BAL";
      int int0 = 49;
      int int1 = 288;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ".>BAL", 49, 288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("gu$FUOFWCgENF\"E");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("gu$FUOFWCgENF\"E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("souYXOR?h1vEF");
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.remove("(1I_7cb( ^IW+_O-Qw", "(1I_7cb( ^IW+_O-Qw");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("JQr'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringBefore(" ", (-1));
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.replace("qm@5e", "qm@5e", "qm@5e");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.LF;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.endsWithAny("\n", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      StringUtils.center("o", 0, 'F');
      StringUtils.upperCase("psOJ!f");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "o";
      charSequenceArray0[1] = (CharSequence) "EmRE@sYH9$cyLzV vwx+}>zv[GC*N;";
      StringUtils.removeStart("PSOJ!F", "o");
      charSequenceArray0[2] = (CharSequence) "PSOJ!F";
      StringUtils.leftPad("EZ60c5.jy,Ik", (-65), 'o');
      StringUtils.startsWithAny("EmRE@sYH9$cyLzV vwx+}>zv[GC*N;", charSequenceArray0);
      StringUtils.isAllUpperCase(charSequenceArray0[0]);
      StringUtils.endsWithAny("EZ60c5.jy,Ik", charSequenceArray0);
      StringUtils.trimToEmpty("9g)dAL%e");
      String string0 = StringUtils.join((float[]) null, 'F', 2505, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToEmpty("StdIo_System_In");
      assertEquals("StdIo_System_In", string0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("u;-V}9XVvQv;G", "u;-V}9XVvQv;G");
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("|", "}");
      assertEquals("}|}", string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'o');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.endsWithAny("\n", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.replaceAll("R+", "org.easymock.bytebu", "R+");
      boolean boolean0 = StringUtils.isAlpha("R+");
      String string1 = StringUtils.wrap("R+", "Yh,Z=p%\"Xj^wpC");
      assertEquals("Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC", string1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 64;
      floatArray0[2] = (float) 64;
      floatArray0[4] = (float) ']';
      StringUtils.join(floatArray0, '2', (-2088), (-3275));
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "R+";
      charSequenceArray0[1] = (CharSequence) "R+";
      charSequenceArray0[2] = (CharSequence) "R+";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "R+";
      charSequenceArray0[5] = (CharSequence) "Yh,Z=p%\"Xj^wpCR+Yh,Z=p%\"Xj^wpC";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("Yh,Z=p%\"Xj^wpC", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToEmpty("R+");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join(floatArray0, 'V', 54, (-65));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      StringUtils.join((Object[]) null);
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 46);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.wrap("V@}M1Q", "V@}M1Q");
      assertEquals("V@}M1QV@}M1QV@}M1Q", string0);
      
      boolean boolean0 = StringUtils.endsWith("V@}M1QV@}M1QV@}M1Q", "V@}M1Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("N`t^@e]yqkk: '(8*.^");
      assertEquals("N`t^@e]yqkk: '(8*.^", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) '<';
      floatArray0[1] = (float) '<';
      String string0 = StringUtils.join(floatArray0, '<');
      assertNotNull(string0);
      assertEquals("60.0<60.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0<0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(";~r'", ";~r'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      charSequenceArray0[6] = (CharSequence) "java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@6bb343a6java.lang.Object@42417bdfjava.lang.Object@142342adjava.lang.Object@6ca37c2d", charSequenceArray0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-249.2F);
      floatArray0[1] = 3231.3057F;
      floatArray0[2] = 433.0F;
      floatArray0[3] = (-1216.4F);
      floatArray0[4] = (-540.8812F);
      floatArray0[5] = 3176.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-19.73942F);
      floatArray0[8] = 0.0F;
      String string2 = StringUtils.join(floatArray0, 'E', (-1009), (-1009));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "Y7aYPSOJ!F");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      StringUtils.replace(" ", "", "b%_mP w", 148);
      StringUtils.trimToEmpty((String) null);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (float) 35;
      floatArray0[5] = (float) 35;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '?', 35, 2611);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.joinWith("tL!ne\"+E50[`zHVVd[", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E{I :o5;~93Gx";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) " ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("E{I :o5;~93Gx");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "tGl@!NDMd3H>1e%z,#p", (CharSequence) "tGl@!NDMd3H>1e%z,#p");
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("tGl@!NDMd3H>1e%z,#p");
      assertEquals(19, int1);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Ssring must Eot be n|ll", (CharSequence) "Ssring must Eot be n|ll");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.easymock.bytebuddy.implementation.auxiliary.AuxiliaryType";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("5", '/');
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2589.72617);
      doubleArray0[1] = (-4061.22639416663);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 690.1761064881322;
      doubleArray0[6] = (-72.0);
      doubleArray0[7] = (-2115.2468061);
      doubleArray0[8] = 1.0;
      String string0 = StringUtils.join(doubleArray0, '[');
      assertEquals("-2589.72617[-4061.22639416663[1.5[-1.0[-1.0[690.1761064881322[-72.0[-2115.2468061[1.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 'm');
      assertEquals("0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replace("\r", "\n", "", (-1));
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.ordinalIndexOf("\r", "", 19);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("b'0[(<4F!BH[", "b'0[(<4F!BH[", "b'0[(<4F!BH[");
      assertEquals("b'0[(<4F!BH[", string0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.startsWithAny("\n", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.apache.commons.lang3.ObjectUtils$Null", "q5)t");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("F~:bs&~8FlgSQP%bbgXStrings must not be null", "F~:bs&~8FlgSQP%bbgXStrings must not be null", 54);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      StringUtils.rightPad("f;", 0, "f;");
      StringUtils.replace("f;", "f;", "f;", 0);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "f;";
      StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      StringUtils.trimToEmpty("StdIo_System_In");
      String string0 = StringUtils.join((float[]) null, '?', (-1679), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace("!QE1Ew*=MmE4`{;sg");
      assertEquals("!QE1Ew*=MmE4`{;sg", string0);
      
      StringUtils.isNumeric((CharSequence) null);
      StringUtils.join((double[]) null, '/');
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("!QE1Ew*=MmE4`{;sg");
      assertEquals(13, stringArray1.length);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("sx/", "sx/", "J");
      assertEquals("J", string1);
      
      String string2 = StringUtils.removeStart((String) null, "Strings must not be null");
      assertNull(string2);
      
      StringUtils.isWhitespace((CharSequence) null);
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      StringUtils.indexOf((CharSequence) "!QE1Ew*=MmE4`{;sg", 1778);
      boolean[] booleanArray0 = new boolean[0];
      String string4 = StringUtils.join(booleanArray0, '/');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.removeIgnoreCase("\n", "");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      StringUtils.capitalize("Illegal range. The step cannot be zero.");
      StringUtils.difference("D", "suppress");
      StringUtils.removeStartIgnoreCase("suppress", "?x'|cqv8GM3V_si\"?,Q");
      StringUtils.indexOf((CharSequence) "suppress", (-1), 2915);
      StringUtils.truncate("getContext", 968, 2915);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-62);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "%+X0V=PxE");
      StringUtils.compare("%+X0V=PxE", "%+X0V=PxE", false);
      String string0 = StringUtils.center("%+X0V=PxE", 2089, "Locale must not be null");
      StringUtils.join((int[]) null, '^', 2238, 0);
      StringUtils.removePattern("Locale must not be null", string0);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '\u0013';
      String string0 = StringUtils.join(intArray0, '\u0013', 10, 10);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.removeStart(" ", " ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      StringUtils.leftPad("O)^aS^ Ir^0qy0xK(`<", 32, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.removeStart("...", "");
      StringUtils.repeat('x', 32);
      Locale locale0 = Locale.ENGLISH;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.setDefault(locale_Category0, locale0);
      StringUtils.upperCase("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", locale0);
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'x', 32, 0);
      String string0 = null;
      StringUtils.trim((String) null);
      StringUtils.isWhitespace((CharSequence) null);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("There should be a shared resource for the name %s", 2735, (-188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      StringUtils.reverse("\n");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 3659);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.rotate("\n", 3659);
      assertEquals("\n", string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      String string1 = StringUtils.normalizeSpace("\n");
      assertEquals("", string1);
      
      StringUtils.join((short[]) null, 'z');
      int int1 = StringUtils.indexOf(charSequenceArray0[1], (CharSequence) "\n");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[3] = (CharSequence) "\n";
      int int0 = StringUtils.lastOrdinalIndexOf("\n", charSequenceArray0[3], 3659);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.ordinalIndexOf("\n", "\r", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.chomp("JQr'");
      assertEquals("JQr'", string0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny("ERC,pLd0>@QgDMhbT+F", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "(", (CharSequence) "(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("/", "/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2044;
      String string0 = StringUtils.join(intArray0, '(');
      assertNotNull(string0);
      assertEquals("2044", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=4DK=/&XBSl^}8f]7", (CharSequence) "2044", 2044);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("lJ", "lJ", "lJ");
      assertEquals("lJ", string0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.strip(".>BAL", "dCD4[B=XD");
      assertEquals(".>BAL", string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".>BAL";
      objectArray0[1] = (Object) ".>BAL";
      String string2 = StringUtils.substringAfter("", 49);
      String[] stringArray0 = new String[0];
      StringUtils.firstNonBlank(stringArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, "dCD4[B=XD", stringArray0);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "pCGgX^~hkQd`?npCGgX^~hkQd`?n");
      assertTrue(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllLowerCase(".>BAL");
      StringUtils.trim((String) null);
      Vector<String> vector0 = new Vector<String>();
      String string5 = StringUtils.join((Iterable<?>) vector0, (String) null);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringAfter("\r", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "N`t^@");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      StringUtils.lowerCase("l<{~{]mH9->F=h");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[1] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[2] = (CharSequence) "l<{~{]mH9->F=h";
      charSequenceArray0[3] = (CharSequence) "l<{~{]mh9->f=h";
      StringUtils.startsWithAny("l<{~{]mh9->f=h", charSequenceArray0);
      StringUtils.substringAfter("2Jc]6/'b!p>\"", (-54));
      StringUtils.removeIgnoreCase("2Jc]6/'b!p>\"", "");
      StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[1]);
      StringUtils.stripAccents("AhjKcc@a{DX<Ib");
      StringUtils.replaceOnceIgnoreCase("2Jc]6/'b!p>\"", "l<{~{]mh9->f=h", "");
      int[] intArray0 = new int[3];
      intArray0[0] = (-54);
      intArray0[1] = 0;
      intArray0[2] = (-54);
      StringUtils.join(intArray0, 'L', 0, (-54));
      StringUtils.normalizeSpace("");
      StringUtils.lastOrdinalIndexOf("2Jc]6/'b!p>\"", "", 3);
      StringUtils.removeStart("No proxy target found for ", "M$*C-\", F:j'/N46");
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "eF3eAPI*HJ?`i=c");
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      String string0 = StringUtils.stripAccents("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianFactoryArgumentsProvider", string0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.chop("java.security.");
      assertEquals("java.security", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = "!g5l4-g/MZ^,";
      StringUtils.chop("!g5l4-g/MZ^,");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "!g5l4-g/MZ^", (-1764), (-1764));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
  }
}
