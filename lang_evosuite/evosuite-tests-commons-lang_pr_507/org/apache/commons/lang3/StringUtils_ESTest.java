/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 13:13:24 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.getDigits("<$M@p~,dedF;v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 3515, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad(string1, 3515, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "{6iI<pd-D{vap+kl_Ll?;0Gr<a{offset cannot be negative");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\r", Integer.MAX_VALUE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.wrap(" ", '\u0001');
      assertEquals("\u0001 \u0001", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\u0001 \u0001", (CharSequence) "\u0001 \u0001");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\u0001 \u0001");
      assertEquals("\u0001 ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\u0001 \u0001", (CharSequence) "\u0001 \u0001");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.normalizeSpace("\u0001 ");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.remove("^5$Xph@", "^5$Xph@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("!$mm?'g?&mL{}B%ieOV", ';');
      assertEquals(";!$mm?'g?&mL{}B%ieOV;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) ';';
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) ';';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ';', 101, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) " ");
      assertTrue(boolean0);
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(" ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      
      String string0 = StringUtils.rightPad(" ", 2, "g;hX");
      assertEquals(" g", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.chop("Timeout");
      assertEquals("Timeou", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Timeou");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Timeout";
      charSequenceArray0[1] = (CharSequence) "Timeout";
      charSequenceArray0[2] = (CharSequence) "Timeou";
      charSequenceArray0[3] = (CharSequence) "Timeout";
      charSequenceArray0[4] = (CharSequence) "Timeou";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("Timeou", 'R');
      assertEquals("RTimeouR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.upperCase("9d(U7jb?I0)");
      assertEquals("9D(U7JB?I0)", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "9D(U7JB?I0)");
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.limit());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("9D(U7JB?I0)", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "9d(U7jb?I0)", (CharSequence) charBuffer0);
      assertFalse(boolean0);
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.limit());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("9D(U7JB?I0)", charBuffer0.toString());
      
      boolean boolean1 = StringUtils.isNumericSpace(charBuffer0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.limit());
      assertEquals(11, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("9D(U7JB?I0)", charBuffer0.toString());
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "9d(U7jb?I0)";
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("<$M1p(,dedFv", "<$M1p(,dedFv", 31);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<$M1p(,dedFv";
      objectArray0[1] = (Object) "<$M1p(,dedFv";
      objectArray0[2] = (Object) "<$M1p(,dedFv";
      objectArray0[3] = (Object) "<$M1p(,dedFv";
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "<$M1p(,dedFv", 1, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", 32, 32);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("Failed to get parent directory from provider");
      assertEquals("Failed to get parent directory from provider", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "Failed to get parent directory from provider";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Failed to get parent directory from provider";
      objectArray0[3] = (Object) "Failed to get parent directory from provider";
      objectArray0[4] = (Object) "Failed to get parent directory from provider";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "Failed to get parent directory from provider";
      objectArray0[8] = (Object) null;
      String string1 = StringUtils.join(objectArray0, '<', 1, 16);
      assertEquals(23, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("java.lang.Object@78340ed2<Failed to get parent directory from provider<Failed to get parent directory from provider<Failed to get parent directory from provider<<Failed to get parent directory from provider<<<<<<<<<", "Failed to get parent directory from provider", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("4 raG)k", objectArray0);
      assertEquals(23, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("\n", " ", locale0);
      assertEquals(0, int0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Threshold must not be negative", " ", "\r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)2;
      String string0 = StringUtils.join(byteArray0, 'S', (int) (byte)0, 4);
      assertEquals("-127S0S-105S-58", string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-105), (byte) (-58), (byte) (-84), (byte) (-31), (byte)0, (byte)122, (byte)2}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category[] locale_CategoryArray1 = linkedHashSet0.toArray(locale_CategoryArray0);
      assertEquals(1, locale_CategoryArray0.length);
      assertEquals(1, locale_CategoryArray1.length);
      assertSame(locale_CategoryArray0, locale_CategoryArray1);
      assertSame(locale_CategoryArray1, locale_CategoryArray0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(locale_CategoryArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = linkedHashSet0.add((Object) null);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(object1));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, '~');
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(string0);
      
      Stream<Object> stream0 = linkedHashSet0.stream();
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(stream0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = '~';
      charArray0[3] = '\\';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '\\';
      charArray0[8] = 'a';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', '\\', '~', '\\', '~', '~', '~', '\\', 'a'}, charArray0);
      
      String string1 = StringUtils.substringBetween("java.lang.Object@25837caa~", "", "java.lang.Object@25837caa~");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[6] = (double) 1093;
      String string0 = StringUtils.join(doubleArray0, '6', 0, 5);
      assertEquals("0.060.060.060.060.0", string0);
      assertEquals(11, doubleArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "n& Xn7YF", "0.060.060.060.060.0");
      assertEquals("p{I0Combi0i0gDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "0.060.060.060.060.0", (CharSequence) "0.060.060.060.060.0", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.getDigits("<$M1p(,dedF;v");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<$M1p(,dedF;v", "1");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "<$M1p(,dedF;v", (CharSequence) "1");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = StringUtils.difference("D", "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      int int0 = 90;
      String string1 = StringUtils.rotate("kNY2<U7`", 90);
      assertEquals("7`kNY2<U", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.repeat("=.%w0wgsJ703It", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "9&Z(|D&SD[tTe{&'7");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("9&Z(|D&SD[tTe{&'7", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "9&Z(|D&SD[tTe{&'7", (CharSequence) charBuffer0);
      assertTrue(boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("9&Z(|D&SD[tTe{&'7", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "9&Z(|D&SD[tTe{&'7", "9&Z(|D&SD[tTe{&'7");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "\r");
      assertFalse(boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.chomp("Z1FAYMIhm7Pt+KN-", "Y[ux|;aL>S?`");
      assertEquals("Z1FAYMIhm7Pt+KN-", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Z1FAYMIhm7Pt+KN-");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("Z1FAYMIhm7Pt+KN-", charBuffer0.toString());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {' '}, charArray0);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.limit());
      assertEquals(" ", charBuffer1.toString());
      assertEquals(1, charBuffer1.length());
      assertEquals(1, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) "Z1FAYMIhm7Pt+KN-", 64);
      assertEquals(0, int0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("Z1FAYMIhm7Pt+KN-", charBuffer0.toString());
      assertEquals(16, charBuffer0.limit());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Y[ux|;aL>S?`";
      charSequenceArray0[1] = (CharSequence) charBuffer1;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "Z1FAYMIhm7Pt+KN-";
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.equalsAny("Z1FAYMIhm7Pt+KN-", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "D", "D");
      assertEquals(0, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("D"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<String> iterator0 = stack0.iterator();
      assertFalse(stack0.contains("D"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, " vs ");
      assertEquals("", string0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(string0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 1022L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      String string1 = StringUtils.join(longArray0, ';', 0, 3);
      assertEquals("0;0;1022", string1);
      assertEquals(7, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 1022L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("", 15);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '8';
      String string0 = StringUtils.join(charArray0, '@', 0, 1);
      assertEquals("@", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'@', '8'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("@", (String) null, (String) null);
      assertEquals("@", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("@", "@");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("@", "");
      assertEquals("@", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("maxWith cannot be negative", "@", "@");
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertFalse(linkedList0.contains(1));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.replaceEach("\n", (String[]) null, (String[]) null);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.wrap(" ", '\u0004');
      assertEquals("\u0004 \u0004", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\u0004 \u0004");
      assertEquals("\u0004 \u0004", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("\u0004 \u0004");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\u0004 \u0004";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "\u0004 \u0004";
      charSequenceArray0[5] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '8';
      int int0 = 10;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '@', 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '5');
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "HeT ");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("-tV(CNb|", "", "org.junitpioneer.jupiter.params.ByteRange");
      assertNull(stringArray0);
      
      String string2 = StringUtils.substringAfter("M|+Oh/K", "v.");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("v.");
      assertFalse(boolean0);
      
      String string3 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string3);
      
      Vector<String> vector0 = new Vector<String>();
      assertFalse(vector0.contains("HeT "));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '5', Integer.MAX_VALUE, (-1650));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-1650)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stack0;
      objectArray0[1] = (Object) stack0;
      Object[] objectArray1 = stack0.toArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(objectArray1);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)58;
      shortArray0[2] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'r', 0, (int) (short)5);
      assertEquals("58r0r5r0r0", string0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)58, (short)0, (short)5, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("58r0r5r0r0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.center("a2P03/5QuOWt", 124);
      assertEquals("                                                        a2P03/5QuOWt                                                        ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "                                                        a2P03/5QuOWt                                                        ", (CharSequence) "                                                        a2P03/5QuOWt                                                        ", 124);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("\r", (String) null, Integer.MAX_VALUE, (-831));
      assertEquals("\r", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\r", "", Integer.MIN_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("eq", "peQZw<P4rD]W", true);
      assertEquals((-11), int0);
      
      String string0 = StringUtils.join((float[]) null, 'n', 32, (int) 'n');
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("The Character ust not be null", "peQZw<P4rD]W", "[V]?du71oA_>NFM");
      assertEquals("The Character ust not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "The Character ust not be null", 32);
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat('1', 32);
      assertEquals("11111111111111111111111111111111", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("peQZw<P4rD]W", "The Character ust not be null", 28);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.defaultString("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("vW");
      assertEquals("vW", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Expected exactly one annotation to provide an ArgumentSource, found %d.", 9991);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', '4'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\\4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charBuffer0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\\', '4'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\\4", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.capacity());
      
      boolean boolean2 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[5];
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.prependIfMissingIgnoreCase("D^hkt8@29:i", "D^hkt8@29:i", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "D^hkt8@29:i";
      String string1 = StringUtils.removeStart("D^hkt8@29:i", "e3=DdkMbcn{-p0)XYe");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "D^hkt8@29:i";
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.SPACE;
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) " ";
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '_');
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "D^hkt8@29:i_D^hkt8@29:i__ __";
      String string5 = StringUtils.chomp("D^hkt8@29:i", "D^hkt8@29:i_D^hkt8@29:i__ __");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "D^hkt8@29:i";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      // Undeclared exception!
      StringUtils.repeat('\'', 65536);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.repeat("...", 3743);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.replaceChars(string0, ";;utd!#V*", (String) null);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, "The Character must not be nullThe Character must not be null", "DefaultLocale");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The Character must not be nullThe Character must not be null";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int[] intArray0 = new int[19];
      intArray0[0] = 8;
      intArray0[1] = 1114111;
      intArray0[2] = 1114111;
      intArray0[3] = 7;
      intArray0[4] = 1114111;
      intArray0[5] = 9;
      String string1 = StringUtils.join(intArray0, 'x', 8, 9);
      assertEquals("0", string1);
      assertEquals(19, intArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "((S=`8\"{>-k]'iP`N-", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 124;
      intArray0[2] = 2294;
      char char0 = 'G';
      String string0 = StringUtils.join(intArray0, 'G', 2294, (-3704));
      assertEquals("", string0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 124, 2294}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.leftPad("", 65536, "");
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.removeEndIgnoreCase("4}8s-dB4\"8N$", (String) null);
      assertEquals("4}8s-dB4\"8N$", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'Y';
      charArray0[2] = 'm';
      charArray0[3] = '$';
      charArray0[4] = '<';
      charArray0[5] = 'T';
      charArray0[6] = '6';
      charArray0[7] = '1';
      charArray0[8] = '0';
      int int0 = StringUtils.indexOfAny((CharSequence) "4}8s-dB4\"8N$", charArray0);
      assertEquals(11, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'/', 'Y', 'm', '$', '<', 'T', '6', '1', '0'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)82;
      String string1 = StringUtils.join(byteArray0, '6', 0, (int) (byte) (-67));
      assertEquals("", string1);
      assertEquals(7, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte) (-67), (byte)88, (byte)110, (byte) (-92), (byte)82}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-21);
      String string0 = StringUtils.join(byteArray0, ')');
      assertEquals("-12)-21", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-21)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("55", 101);
      assertEquals("5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("Timeout", "55", "|d@L4)\"W29?");
      assertEquals("Timeout", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.repeat("O|", 3766);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("O|");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("'7G.a^", 8, "O|");
      assertEquals("O|'7G.a^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'k';
      charArray0[2] = 'q';
      charArray0[3] = 't';
      charArray0[4] = '\\';
      charArray0[5] = 'g';
      charArray0[6] = ')';
      charArray0[7] = ']';
      String string0 = StringUtils.join(charArray0, ']');
      assertEquals("1]k]q]t]\\]g])]]", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'1', 'k', 'q', 't', '\\', 'g', ')', ']'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '1';
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'g';
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ']';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ".//>\"b\"P-9Hbw%", (-1610612734), (-1840));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("hm");
      assertEquals("hm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("hm", "hm", "Ag>edgzfX{Wald3.", 64);
      assertEquals("Ag>edgzfX{Wald3.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("hm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.reverseDelimited("84hHK:pH", '8');
      assertEquals("4hHK:pH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '4';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'f';
      longArray0[2] = (long) '8';
      longArray0[3] = (long) '4';
      longArray0[7] = (long) '4';
      longArray0[8] = (long) '4';
      String string1 = StringUtils.replaceChars("84hHK:pH", 'N', '3');
      assertEquals("84hHK:pH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("84hHK:pH", "4hHK:pH", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "e93ex:)J4G8\"tj .";
      stringArray0[2] = "\r";
      stringArray0[3] = "\n";
      stringArray0[4] = "e93ex:)J4G8\"tj .";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("e93ex:)J4G8\"tj .", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = ".";
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(".");
      assertTrue(boolean0);
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)22;
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      // Undeclared exception!
      StringUtils.join(intArray0, '', (-357849497), 51);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          boolean boolean0 = StringUtils.contains((CharSequence) "9{ZE(DD[tTeC&7", 57);
          assertTrue(boolean0);
          
          int int0 = StringUtils.INDEX_NOT_FOUND;
          assertEquals((-1), int0);
          
          String string0 = StringUtils.chomp("sDH");
          assertEquals("sDH", string0);
          assertNotNull(string0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The character must not be nullThe character must not be null", " ", " ");
      assertEquals("character", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Search and ", " ");
      assertEquals(" Search and ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('B', 108);
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = "n";
      char char0 = 'D';
      String string1 = StringUtils.leftPad("n", 3252, 'D');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(string1, 3252);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) string1, (CharSequence) "n");
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      char char1 = '2';
      // Undeclared exception!
      StringUtils.countMatches((CharSequence) string2, '2');
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("{co3%1oEgfA3-tG\"Y", 2221, "\n");
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'L';
      charArray0[2] = '7';
      charArray0[3] = '_';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'E', 'L', '7', '_'}, charArray0);
      
      // Undeclared exception!
      StringUtils.leftPad("\r", 8183, "");
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("U\"<t&YTl0IM<.Y/}J", '~');
      assertEquals("~U\"<t&YTl0IM<.Y/}J~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("~U\"<t&YTl0IM<.Y/}J~", '~');
      assertEquals("U\"<t&YTl0IM<.Y/}J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("...", '^');
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("...", 'R');
      assertEquals("R...R", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("R...R", 'R');
      assertEquals("...", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("...", "BI<nH4%n");
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "...", (CharSequence) "R...R");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short)256;
      shortArray0[2] = (short)587;
      shortArray0[3] = (short)160;
      shortArray0[4] = (short)16;
      String string4 = StringUtils.join(shortArray0, '%', 0, (-2519));
      assertEquals("", string4);
      assertEquals(5, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new short[] {(short)37, (short)256, (short)587, (short)160, (short)16}, shortArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceIgnoreCase("xJZXLo_^~v>r0$H", "Arguments cannot both be null", (String) null);
      assertEquals("xJZXLo_^~v>r0$H", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("xJZXLo_^~v>r0$H", "<Ft(/]", 379, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = "ePAr`=z!D]gQ}";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ePAr`=z!D]gQ}", "..[.", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.repeat(" ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = '%';
      charArray0[2] = ':';
      charArray0[3] = '=';
      charArray0[4] = '`';
      charArray0[5] = 'j';
      charArray0[6] = 'Y';
      charArray0[7] = 'r';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'R', '%', ':', '=', '`', 'j', 'Y', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("1", (String) null, true);
      assertEquals(1, int0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string0 = StringUtils.join((float[]) null, 'f', (-1792), (int) 'f');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 1);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('4', 3);
      assertEquals("444", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains((-1792)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) serviceLoader0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      String string2 = StringUtils.join(objectArray0, (String) null, 2, 3);
      assertEquals("", string2);
      assertEquals(5, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = "O]HqsQi5eG|Ve/{+q7";
      String string2 = StringUtils.chomp("O]HqsQi5eG|Ve/{+q7");
      assertEquals("O]HqsQi5eG|Ve/{+q7", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = 9992;
      String string3 = StringUtils.rightPad("O]HqsQi5eG|Ve/{+q7", 9992);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.rightPad("O]HqsQi5eG|Ve/{+q7", 9992);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", 353);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", ']');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.ArrayUtils", "9(+B9Iu?{9TsuJ^", false);
      assertEquals(54, int0);
      
      String string1 = StringUtils.join((float[]) null, ']', 54, 13);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 41);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('4', (-3091));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("<$M1p(,dedF;v"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("<$M1p(,dedF;v", "1", 1787);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.join((double[]) null, '4', (-3091), 1184);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.right("Failed to get parent directory from provider", (-244));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 6171, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'j';
      charArray0[2] = 'd';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replacePattern("", "", "v'C!hA!");
      assertEquals("v'C!hA!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string2 = "~5[";
      int int0 = 48;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(string2, string0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("O]HqsQi5eG|Ve/{+q7");
      assertEquals("O]HqsQi5eG|Ve/{+q7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("5)F@kU");
      assertEquals("5)F@kU", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("O]HqsQi5eG|Ve/{+q7", 9992);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("-tEda^ @*W!<xohpB", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.rightPad("", 9992, 'u');
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = "55";
      boolean boolean0 = StringUtils.isNumeric("QR7%2Y(3h5MoS\"7gT");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)6;
      char char0 = '{';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '{', (-2078209979), 836);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      String string0 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.repeat("~|X;qt;;$LEv", "~|X;qt;;$LEv", 1114111);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.reverseDelimited("org.juxit=ioneer.jupiOer.TempDirectory$CloseablePath", '^');
      assertEquals("org.juxit=ioneer.jupiOer.TempDirectory$CloseablePath", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.juxit=ioneer.jupiOer.TempDirectory$CloseablePath", (CharSequence) "org.juxit=ioneer.jupiOer.TempDirectory$CloseablePath", 99);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '^', 0, 2288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must not bt negative", (CharSequence[]) stringArray0);
      assertEquals(1, int0);
      assertEquals(188, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(188, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("%s");
      assertEquals("%s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "c<7sMCZS`0$nl", 'i');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsAny("%s", stringArray0);
      assertFalse(boolean2);
      assertEquals(188, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("?=V h&]kL5>", supplier0);
      assertEquals("?=V h&]kL5>", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('{', 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string2 = StringUtils.removeFirst((String) null, "SX#K1Lo^NmWG1XpX~VgMm'-,N,z");
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "?=V h&]kL5>";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.deleteWhitespace("SX#K1Lo^NmWG1XpX~VgMm'-,N,z");
      assertEquals("SX#K1Lo^NmWG1XpX~VgMm'-,N,z", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '{');
      assertEquals(0, int0);
      
      String string4 = StringUtils.wrapIfMissing("\r", (String) null);
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("p{InCombiningDiacriticalMarks}+", "SX#K1Lo^NmWG1XpX~VgMm'-,N,z");
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], 0, 15);
      assertEquals((-1), int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string7 = StringUtils.join((Object[]) null, "\r", 15, 90);
      assertNull(string7);
      
      String string8 = StringUtils.stripStart("SX#K1Lo^NmWG1XpX~VgMm'-,N,z", "?=V h&]kL5>");
      assertEquals("SX#K1Lo^NmWG1XpX~VgMm'-,N,z", string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      boolean boolean4 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      String string9 = StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[0], (CharSequence[]) null);
      assertEquals("", string9);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.stripToNull("*<5\"gv[E[hwDWf");
      assertEquals("*<5\"gv[E[hwDWf", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r\r");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("Backup", "*<5\"gv[E[hwDWf");
      assertEquals("*<5\"gv[E[hwDWf", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short) (-2659);
      shortArray0[3] = (short) (-450);
      shortArray0[4] = (short)16;
      shortArray0[5] = (short)851;
      shortArray0[6] = (short)3;
      String string3 = StringUtils.join(shortArray0, 'u', (int) (short) (-450), (int) (short) (-640));
      assertEquals("", string3);
      assertEquals(7, shortArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short)4, (short) (-640), (short) (-2659), (short) (-450), (short)16, (short)851, (short)3}, shortArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.chomp("\r\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.unwrap((String) null, '/');
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1078));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore((String) null, "h");
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      boolean boolean4 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean4);
      assertEquals(5, charArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/'}, charArray0);
      
      boolean boolean5 = StringUtils.isAllUpperCase("h");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      
      boolean boolean6 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      
      String string4 = StringUtils.rightPad((String) null, (-1), "s");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.replaceAll("5", "5", "5");
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("5", "5");
      assertEquals("5", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("5", "5");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeStart("Tm(3/w>r", "zf~L0;:=_");
      assertEquals("Tm(3/w>r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("5");
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      String string3 = treeSet0.floor("5");
      assertFalse(treeSet0.contains(string1));
      assertNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("zf~L0;:=_");
      assertEquals("zf~l0;:=_", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("5");
      assertEquals("5", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String string6 = StringUtils.repeat((String) null, "\n\";z;_;9;;", (-1410));
      assertNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "bSFN", (CharSequence) "bSFN");
      assertEquals(1, int0);
      
      String string0 = StringUtils.upperCase("bSFN");
      assertEquals("BSFN", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.compareIgnoreCase("BSFN", "@V");
      assertEquals(34, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.truncate("@V", 1, 1);
      assertEquals("V", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("Kx\"#^K", "BSFN", "BSFN");
      assertEquals("Kx\"#^K", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Kx\"#^K";
      String[] stringArray0 = StringUtils.substringsBetween("BSFN", "Kx\"#^K", "V");
      assertNull(stringArray0);
      
      String string3 = StringUtils.join((Object[]) null, "V");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "^13j64H^");
      assertEquals("^13j64H^\n^13j64H^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.replacePattern("\n", "Backup", "\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("\n");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate("\n", "", 64, (-1091));
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("D");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("D");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string0 = StringUtils.abbreviateMiddle("Minimum abbreviation width is %d", "94rCvUJ_Gv*MC\",", 32);
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("|]");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.repeat("8a,Y!Kq[54cDU'DasG", (-1466));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "8a,Y!Kq[54cDU'DasG";
      charSequenceArray0[2] = (CharSequence) "8a,Y!Kq[54cDU'DasG";
      charSequenceArray0[3] = (CharSequence) "8a,Y!Kq[54cDU'DasG";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "8a,Y!Kq[54cDU'DasG";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "8a,Y!Kq[54cDU'DasG";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween("8a,Y!Kq[54cDU'DasG", "v_LI5b7axs'{k", (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[3]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("junit-pioneer", supplier0);
      assertEquals("junit-pioneer", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("8a,Y!Kq[54cDU'DasG", "0[|+(");
      assertEquals("8a,Y!Kq[54cDU'DasG", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[7], "", (-1466));
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "junit-pioneer", 5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) (-1466);
      floatArray0[4] = (float) 5;
      floatArray0[5] = 1808.0F;
      String string4 = StringUtils.join(floatArray0, 'W', 2439, (-48));
      assertEquals("", string4);
      assertEquals(6, floatArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 5.0F, (-1466.0F), 5.0F, 1808.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Search and Replace array lengths don't match: ", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.abbreviateMiddle("5", "\" should have a parent context.", 0);
      assertEquals("5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", ", ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-614.17F);
      floatArray0[1] = 1188.0F;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      String string3 = StringUtils.join(floatArray0, 'u', 0, 1);
      assertEquals("-614.17", string3);
      assertEquals(6, floatArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new float[] {(-614.17F), 1188.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("1", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.join((float[]) null, 'f', (-1792), (int) 'f');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 1);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart("9(+B9Iu?{9TsuJ^", "2T~p~NuQFNZ8yh@~d#H");
      assertEquals("9(+B9Iu?{9TsuJ^", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat((String) null, 241);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)76;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\uFFFD\u001C3\uFFFD#TL", string3);
      assertEquals(8, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19), (byte)28, (byte)51, (byte) (-72), (byte)35, (byte)84, (byte)76}, byteArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.removeEnd(";?$zRm", "W.,x_lQWgw");
      assertEquals(";?$zRm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap(";?$zRm", ";?$zRm");
      assertEquals(";?$zRm;?$zRm;?$zRm", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "W.,x_lQWgw";
      stringArray0[1] = ";?$zRm";
      stringArray0[2] = ";?$zRm";
      stringArray0[3] = "^cE%3j642^0#1YLnuc;/M ,eOcyVR~";
      stringArray0[4] = "*";
      stringArray0[5] = "W.,x_lQWgw";
      stringArray0[6] = ";?$zRm";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("W.,x_lQWgw", string2);
      assertEquals(7, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("maxWith cannot be negative", ";?$zRm");
      assertEquals("maxWith cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAny("...", stringArray0);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "W.,x_lQWgw", (CharSequence) "maxWith cannot be negative");
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(";?$zRm;?$zRm;?$zRm", "W.,x_lQWgw", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = "t6slUMU)o! ,.`V";
      String string1 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      String string2 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'f');
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "t6slUMU)o! ,.`V", 32);
      assertEquals(10, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", 99);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '5', 0, 2288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.chop("Timeout");
      assertEquals("Timeou", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Timeou");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Timeou", (CharSequence) "Timeout", 602);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      int int1 = StringUtils.indexOfAny((CharSequence) "Timeou", charArray0);
      assertEquals(2, int1);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'f', 'm', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int2 = StringUtils.countMatches((CharSequence) "Timeou", (CharSequence) "Timeout");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-2762);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-2762);
      shortArray0[4] = (short) (-2762);
      shortArray0[5] = (short)3;
      String string1 = StringUtils.join(shortArray0, '>', 955, (int) (short)3);
      assertEquals("", string1);
      assertEquals(6, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)3, (short) (-2762), (short)3, (short) (-2762), (short) (-2762), (short)3}, shortArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)3;
      objectArray0[1] = (Object) (short) (-2762);
      objectArray0[2] = (Object) (short)3;
      objectArray0[3] = (Object) (short) (-2762);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "Timeout";
      objectArray0[6] = (Object) (short) (-2762);
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (int) (short)3, 1034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = StringUtils.join(longArray0, '>');
      assertEquals("0>0>0>0", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 3, "Q$[");
      assertEquals("Q$[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Q$[");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.unwrap("", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "...";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("...", string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("V7?o$VY|[{<3_r~", "...", 5);
      assertEquals("V...~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("...", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny(" ", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string3 = StringUtils.replacePattern("...", "Search and Replace array lengths don't match: ", "2zIXl%V/J;aR${=<7et");
      assertEquals("...", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "...";
      charSequenceArray0[6] = (CharSequence) " ";
      charSequenceArray0[7] = (CharSequence) "...";
      boolean boolean3 = StringUtils.equalsAny("...", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "bSFN", (CharSequence) "bSFN");
      assertEquals(1, int0);
      
      String string0 = StringUtils.upperCase("bSFN");
      assertEquals("BSFN", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.compareIgnoreCase("BSFN", "...");
      assertEquals(52, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.truncate("...", 1, 1);
      assertEquals(".", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce(".", "BSFN", "BSFN");
      assertEquals(".", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "...";
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Th+l&$/,x!!K)Le6J", charArray0);
      assertEquals(1, int2);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      String string3 = StringUtils.substringBeforeLast("o!E0XTiz", "=<cz*y[4w2W(Sm0[");
      assertEquals("o!E0XTiz", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("BSFN", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.center("MWuRN39]Qof.P", 2533, "MWuRN39]Qof.P");
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, 'U');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty(string0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MWuRN39]Qof.P";
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = "MWuRN39]Qof.P";
      stringArray0[4] = string0;
      stringArray0[5] = "MWuRN39]Qof.P";
      stringArray0[6] = "MWuRN39]Qof.P";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("MWuRN39]Qof.P", string1);
      assertEquals(7, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) 'U';
      intArray0[2] = (int) 'U';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'T', 0, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.chomp("L7er)_xEiLoGa&tt", "%s");
      assertEquals("L7er)_xEiLoGa&tt", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'X';
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      intArray0[4] = (int) 'X';
      String string1 = StringUtils.join(intArray0, 'X');
      assertEquals("88X88X88X88X88", string1);
      assertEquals(5, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {88, 88, 88, 88, 88}, intArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("88X88X88X88X88", 'X');
      assertEquals("88X88X88X88X88", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("88X88X88X88X88");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "F&P<E|", (CharSequence) "F&P<E|");
      assertEquals("F&P<E|", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F&P<E|", (CharSequence) "F&P<E|");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("F&P<E|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'E');
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 100.0;
      String string0 = StringUtils.join(doubleArray0, 'i', 51, (-77));
      assertEquals("", string0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.1, 100.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("", "l");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "l";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'h');
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'h';
      charArray0[6] = 'i';
      charArray0[7] = 'h';
      charArray0[8] = '@';
      String string4 = StringUtils.join(charArray0, 'i', (-77), (-77));
      assertEquals("", string4);
      assertEquals(9, charArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertArrayEquals(new char[] {'h', 'h', 'h', 'i', 'i', 'h', 'i', 'h', '@'}, charArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.substringBetween("/]", "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "i\"Zs9", (CharSequence) "ePAr`=z!D]gQ}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("/]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("/]"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = new Locale("-kyEl~Fz8ZiOB,g`");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("-kyel~fz8ziob,g`", locale0.getLanguage());
      assertEquals("-kyel~fz8ziob,g`", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.repeat("yb*^Q", 3968);
      assertNotNull(string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("yb*^Q"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>(arrayDeque0);
      assertFalse(arrayDeque0.contains("yb*^Q"));
      assertFalse(arrayDeque1.contains("yb*^Q"));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      
      String string2 = StringUtils.wrap("/]", "-kyEl~Fz8ZiOB,g`");
      assertEquals("-kyEl~Fz8ZiOB,g`/]-kyEl~Fz8ZiOB,g`", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) "-kyEl~Fz8ZiOB,g`/]-kyEl~Fz8ZiOB,g`", string1);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "<$M1p(,dedF;v";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "<$M1p(,dedF;v", supplier0);
      assertEquals("<$M1p(,dedF;v", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny("<$M1p(,dedF;v", stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("! -kD9bc", "<$M1p(,dedF;v", stringArray0);
      assertEquals("! -kD9bc<$M1p(,dedF;v", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "<$M1p(,dedF;v", (CharSequence[]) stringArray0);
      assertTrue(boolean1);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceChars("<$M1p(,dedF;v", "?<9KjQ%xXg)h>kW", "<$M1p(,dedF;v");
      assertEquals("$$M1p(,dedF;v", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "! -kD9bc<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v");
      assertEquals(8, int0);
      
      String string3 = StringUtils.removePattern("<$M1p(,dedF;v", "Search and Replace array lengths don't match: io1");
      assertEquals("<$M1p(,dedF;v", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "<$M1p(,dedF;v", 53, 7);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = StringUtils.join(longArray0, '>');
      assertEquals("0>0>0>0", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Q$[", (CharSequence) "]DQ_", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!ncl$t1jw0(d:a:";
      stringArray0[1] = "!ncl$t1jw0(d:a:";
      stringArray0[2] = "!nCL$t1JW0(d:a:";
      stringArray0[3] = "!nCL$t1JW0(d:a:";
      stringArray0[4] = "!ncl$t1jw0(d:a:";
      stringArray0[5] = "!nCL$t1JW0(d:a:";
      stringArray0[6] = "!ncl$t1jw0(d:a:";
      stringArray0[2] = "!ncl$t1jw0(d:a:";
      String string1 = StringUtils.toRootUpperCase("!ncl$t1jw0(d:a:");
      assertEquals("!NCL$T1JW0(D:A:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("!ncl$t1jw0(d:a:", string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'l', 73, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-tV(CNb|<Ft(/]-tV(CNb|", "<Ft(/]");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("ExceptionWasThrown", "3]QA'|EVEP", "-tV(CNb|");
      assertNull(stringArray1);
      
      String string1 = StringUtils.join((Object[]) null, "ExceptionWasThrown");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("-tV(CNb|");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("<Ft(/]");
      assertEquals("<Ft(/]", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("I");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, 10, 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'q');
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'q', 32, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.truncate("Failed to create custom temp directory", 98);
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      charArray0[2] = 'M';
      charArray0[3] = '-';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Failed to create custom temp directory", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Q', '.', 'M', '-'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Failed to create custom temp directory";
      charSequenceArray0[1] = (CharSequence) "Failed to create custom temp directory";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.wrap("Failed to create custom temp directory", '!');
      assertEquals("!Failed to create custom temp directory!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isBlank("!Failed to create custom temp directory!");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "!Failed to create custom temp directory!", charSequenceArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2394);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2110;
      shortArray0[3] = (short) (-480);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Q', (int) (short) (-480), (int) (short) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -480
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.getDigits("bAcsMmLYqLZ}jno@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("YR@#tJfm<3rS", 'G');
      assertEquals("GYR@#tJfm<3rSG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "bAcsMmLYqLZ}jno@";
      charSequenceArray0[1] = (CharSequence) " ";
      String string2 = StringUtils.abbreviate("org.junitpioneer.jupiter.SystemPropertyExtension", " ", 10, 10);
      assertEquals(" ioneer.j ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) " ioneer.j ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) " ";
      boolean boolean1 = StringUtils.endsWithAny("YR@#tJfm<3rS", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate((String) null, 1263, 1246);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("...", "Search and Replace array lengths don't match: ", "...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "...", 11, 11);
      assertEquals("...Repla...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("...Repla...", "NDQau}[P?pZ1Q-w");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // NDQau}[P?pZ1Q-w
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.chop("z*&HXk)NXeTd.");
      assertEquals("z*&HXk)NXeTd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("z*&HXk)NXeTd.", "z*&HXk)NXeTd");
      assertEquals("z*&HXk)NXeTd.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "z*&HXk)NXeTd.", (CharSequence) "z*&HXk)NXeTd.", 4989);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'h';
      charArray0[2] = '0';
      charArray0[3] = ']';
      charArray0[4] = 'e';
      charArray0[5] = ')';
      charArray0[6] = 'l';
      charArray0[7] = '`';
      charArray0[8] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'X', 'h', '0', ']', 'e', ')', 'l', '`', '?'}, charArray0);
      
      String string1 = "org.apache.commons.lang3.RegExUtils";
      String string2 = "Strings must not be null";
      // Undeclared exception!
      try { 
        Charset.forName("Strings must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Strings must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.params.Range", " but was: ", true);
      assertEquals(79, int0);
      
      String string0 = null;
      String string1 = "Extension context \"";
      String string2 = StringUtils.unwrap((String) null, "Extension context \"");
      assertNull(string2);
      
      String string3 = StringUtils.removePattern((String) null, "v-du(Fe");
      assertNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byte byte1 = (byte)66;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-27);
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      char char0 = '.';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '.', (int) (byte) (-109), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = "^13\\j64H^\n";
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean0 = stack0.add((String) null);
      assertTrue(boolean0);
      assertFalse(stack0.contains(string0));
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "yFQeRB$cL:");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.normalizeSpace("#|-^OB3hG?\"PS-}|t");
      assertEquals("#|-^OB3hG?\"PS-}|t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("84hHK:pH", '8');
      assertEquals("4hHK:pH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.removeStart("4hHK:pH", "#|-^OB3hG?\"PS-}|t");
      assertEquals("4hHK:pH", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("84hHK:pH");
      assertFalse(boolean0);
      
      String string3 = StringUtils.difference("4hHK:pH", "?d >V^xDE8k|niz");
      assertEquals("?d >V^xDE8k|niz", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithAny("#|-^OB3hG?\"PS-}|t", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.abbreviate("?d >V^xDE8k|niz", 35, 35);
      assertEquals("?d >V^xDE8k|niz", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "#|-^OB3hG?\"PS-}|t", 35);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null, 18);
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 498);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripToNull("h8.'2)<~~(7xI?Bs");
      assertEquals("h8.'2)<~~(7xI?Bs", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("h8.'2)<~~(7xI?Bs");
      assertEquals("h8.'2)<~~(7xI?Bs", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "h8.'2)<~~(7xI?Bs", 'U');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.stripAccents("I8GYb");
      assertEquals("I8GYb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("I8GYb");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.right("*", 53);
      assertEquals("*", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("*");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("*", string1);
      assertEquals(4, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("*", "*");
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("lz\"0", (-426), "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertEquals("lz\"0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("*", "*");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "JeTjiuW\"stimjmgxGb");
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'U');
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'M');
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilmFX1^il");
      assertEquals("u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilmFX1^il", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilmFX1^il", (CharSequence) "u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilmFX1^il");
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.chop("Timeout");
      assertEquals("Timeou", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match:");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Timeou", (CharSequence) "Timeout", 602);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[3] = 'f';
      charArray0[1] = 'm';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertEquals(0, int1);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', 'f', '\u0000', '\u0000'}, charArray0);
      
      String string2 = "#|-^OB3hG?\"PS-}|t ";
      String string3 = StringUtils.truncate("#|-^OB3hG?\"PS-}|t ", 536, Integer.MAX_VALUE);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("Pdciz)", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.rightPad("3+S.R.", 5584, 'd');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore(string0, "cANNOT STORE ORG.JUNITPIONEER.JPITER.t|M\"dIRECTORY");
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) "3+S.R.";
      charSequenceArray0[6] = (CharSequence) "cANNOT STORE ORG.JUNITPIONEER.JPITER.t|M\"dIRECTORY";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) string1;
      charSequenceArray1[1] = (CharSequence) "3+S.R.";
      charSequenceArray1[2] = (CharSequence) string1;
      charSequenceArray1[3] = (CharSequence) "3+S.R.";
      charSequenceArray1[4] = (CharSequence) string1;
      // Undeclared exception!
      StringUtils.center("", 5584, 'd');
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      String string0 = StringUtils.chomp("L");
      assertEquals("L", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("L", 'k');
      assertEquals("kLk", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, "L");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, 3894, 3894);
      assertNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "kLk", charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k', 'k', 'k', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertFalse(stack1.contains(locale0));
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      Stack<Locale> stack2 = new Stack<Locale>();
      assertFalse(stack2.contains(locale0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertEquals(10, stack2.capacity());
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertNotNull(stack2);
      
      stack2.addElement(locale0);
      assertTrue(stack2.contains(locale0));
      assertFalse(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.empty());
      assertEquals(1, stack2.size());
      assertFalse(stack2.isEmpty());
      assertEquals("[]", stack2.toString());
      
      boolean boolean0 = stack2.add(locale0);
      assertTrue(boolean0);
      assertTrue(stack2.contains(locale0));
      assertFalse(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(10, stack2.capacity());
      assertEquals(2, stack2.size());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertEquals("[, ]", stack2.toString());
      
      Locale locale1 = new Locale("!l&xa:<rmU7?_[");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("!l&xa:<rmu7?_[", locale1.toString());
      assertEquals("!l&xa:<rmu7?_[", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string0 = StringUtils.removeFirst((String) null, "");
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!l&xa:<rmU7?_[";
      stringArray0[1] = "!l&xa:<rmU7?_[";
      stringArray0[2] = null;
      stringArray0[3] = "!l&xa:<rmU7?_[";
      stringArray0[4] = "";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack1, "", 19, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 56
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#|-^OB3hG?\"PS-}|t", 6);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("#|-^OB3hG?\"PS-}|t", "mZ5'?~ecX+APkH)(V");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("#|-^OB3hG?\"PS-}|t", " ");
      assertEquals(" #|-^OB3hG?\"PS-}|t ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart(" #|-^OB3hG?\"PS-}|t ", (String) null);
      assertEquals("#|-^OB3hG?\"PS-}|t ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'D', 8192, 3);
      assertEquals("", string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.lookup(vector0, linkedList0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase(" ", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("<$M1p(,dedF;v", "<$M1p(,dedF;v", "<$M1p(,dedF;v");
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("0Y2:dZ-zgvV", "<$M1p(,dedF;v");
      assertEquals("0Y2:dZ-zgvV", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("<$M1p(,dedF;v");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "0Y2:dZ-zgvV", 'M');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = '0';
      int int1 = StringUtils.indexOfAny((CharSequence) "0Y2:dZ-zgvV", charArray0);
      assertEquals(0, int1);
      assertEquals(7, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'0', '0', 'M', 'M', 'M', 'M', '0'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "<$M1p(,dedF;v", charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'0', '0', 'M', 'M', 'M', 'M', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.swapCase("'6w%l,QzrP%;uJtuh> ");
      assertEquals("'6W%L,qZRp%;UjTUH> ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("C;kb=RYaS}-", 'D');
      assertEquals("DC;kb=RYaS}-D", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("DC;kb=RYaS}-D", 'D');
      assertEquals("DC;kb=RYaS}-D", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("#|-^OB3hG?\"PS-}|t");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains("#|-^OB3hG?\"PS-}|t"));
      assertTrue(priorityQueue0.contains("#|-^OB3hG?\"PS-}|t"));
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g");
      assertTrue(boolean1);
      assertFalse(treeSet0.contains("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g"));
      assertTrue(priorityQueue0.contains("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("I^");
      assertTrue(boolean2);
      assertFalse(treeSet0.contains("#|-^OB3hG?\"PS-}|t"));
      assertTrue(priorityQueue0.contains("#|-^OB3hG?\"PS-}|t"));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, priorityQueue0.size());
      
      boolean boolean3 = priorityQueue0.add("K_}EF");
      assertTrue(boolean3);
      assertFalse(treeSet0.contains("K_}EF"));
      assertTrue(priorityQueue0.contains("K_}EF"));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, priorityQueue0.size());
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      boolean boolean4 = StringUtils.isAsciiPrintable("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "K_}EF";
      charSequenceArray0[1] = (CharSequence) "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      charSequenceArray0[2] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[3] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[4] = (CharSequence) "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      String string0 = StringUtils.prependIfMissingIgnoreCase("riticalMarks}+", "K_}EF", charSequenceArray0);
      assertEquals("K_}EFriticalMarks}+", string0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("K_}EFriticalMarks}+", "");
      assertEquals("K_}EFriticalMarks}+", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("#|-^OB3hG?\"PS-}|t", '#');
      assertEquals("#|-^OB3hG?\"PS-}|t#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      boolean boolean5 = StringUtils.containsOnly(charSequenceArray0[2], charArray0);
      assertFalse(boolean5);
      assertEquals(0, charArray0.length);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      String string0 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("JfUfCt! ~:vQv'-_F7g");
      assertEquals("JfUfCt! ~:vQv'-_F7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", 'o');
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensiono", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "~|X;qt;;$LEv", (CharSequence[]) stringArray1);
      assertTrue(boolean0);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.right("...", 3);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("6temp.dir", "...", true);
      assertEquals(8, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "6temp.dir", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("...", (-997));
      assertEquals("...", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, " #|-^OB3hG?\"PS-}|t");
      assertNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      stringArray0[2] = " #|-^OB3hG?\"PS-}|t";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "...";
      stringArray0[6] = "6temp.dir";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("oJw,1tA<J's..u5L", "-A");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("m9Zm[A=Ld", " ", 5);
      assertEquals("m9 Ld", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("m9 Ld", stringArray0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.equalsAny("m9 Ld", stringArray0);
      assertFalse(boolean3);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertFalse(stack1.contains(locale0));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[1] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#|-^OB3hG?\"PS-}|t", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) charBuffer0, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("3", charBuffer0.toString());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "#|-^OB3hG?\"PS-}|t", "0Sh,([43 KR");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      String string0 = StringUtils.substring(">", 9);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "#|-^OB3hG?\"PS-}|t", (CharSequence) "");
      assertEquals(18, int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 18;
      longArray0[4] = (long) 18;
      longArray0[5] = (long) '3';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'l', (-1), 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#|-^OB3hG?\"PS-}|t", 6);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(" ", "mZ5'?~ecX+APkH)(V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("#|-^OB3hG?\"PS-}|t", " ");
      assertEquals(" #|-^OB3hG?\"PS-}|t ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("ExpectedException", "&l]TpqP-", "ExpectedException");
      assertEquals("ExpectedException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("ExpectedException", (String) null, "&l]TpqP-");
      assertEquals("ExpectedException", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("#|-^OB3hG?\"PS-}|t"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("#|-^OB3hG?\"PS-}|t"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<Object> stream0 = linkedList0.stream();
      assertFalse(linkedList0.contains("#|-^OB3hG?\"PS-}|t"));
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>(linkedList0);
      assertFalse(linkedList0.contains("#|-^OB3hG?\"PS-}|t"));
      assertFalse(arrayDeque1.contains("#|-^OB3hG?\"PS-}|t"));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.join((Iterable<?>) null, " ");
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize(" vs ");
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Strings must not be null", 357, "Strings must not be null");
      assertEquals("Strings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nStrings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      String string0 = StringUtils.join(byteArray0, '6', (int) (byte)0, (int) (byte) (-87));
      assertEquals("", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)108}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("Fx[lbO%Nj_t99${R]*", "");
      assertEquals("Fx[lbO%Nj_t99${R]*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "Fx[lbO%Nj_t99${R]*");
      assertEquals(0, int0);
      
      String string2 = StringUtils.chop("Fx[lbO%Nj_t99${R]*");
      assertEquals("Fx[lbO%Nj_t99${R]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank("Fx[lbO%Nj_t99${R]");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.difference("", "Fx[lbO%Nj_t99${R]*");
      assertEquals("Fx[lbO%Nj_t99${R]*", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("Fx[lbO%Nj_t99${R]*", "Fx[lbO%Nj_t99${R]*");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Fx[lbO%Nj_t99${R]*", "Fx[lbO%Nj_t99${R]");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.trimToNull("]T]k06");
      assertEquals("]T]k06", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte) (-87);
      doubleArray0[2] = (double) (byte) (-87);
      doubleArray0[3] = (double) (byte)108;
      doubleArray0[4] = (double) (byte) (-87);
      doubleArray0[5] = (double) '6';
      doubleArray0[6] = (double) '6';
      String string5 = StringUtils.join(doubleArray0, '6');
      assertEquals("0.06-87.06-87.06108.06-87.0654.0654.0", string5);
      assertEquals(7, doubleArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new double[] {0.0, (-87.0), (-87.0), 108.0, (-87.0), 54.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("<$M1p(,dedF;v", "<$M1p(,dedF;v", "<$M1p(,dedF;v");
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("<$M1p(,dedF;v");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = new Locale("<$M1p(,dedF;v");
      assertEquals("<$m1p(,dedf;v", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("<$m1p(,dedf;v", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#|-^OB3hG?\"PS-}|t", 6);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(" ", "mZ5'?~ecX+APkH)(V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("#|-^OB3hG?\"PS-}|t", "");
      assertEquals("#|-^OB3hG?\"PS-}|t", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0#1YLnuc;/M";
      charSequenceArray0[1] = (CharSequence) "mZ5'?~ecX+APkH)(V";
      charSequenceArray0[2] = (CharSequence) "mZ5'?~ecX+APkH)(V";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "0#1YLnuc;/M";
      charSequenceArray0[5] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[6] = (CharSequence) "0#1YLnuc;/M";
      charSequenceArray0[7] = (CharSequence) "mZ5'?~ecX+APkH)(V";
      String string1 = StringUtils.replaceOnceIgnoreCase("ExpectedException", "&l]TpqP-", "ExpectedException");
      assertEquals("ExpectedException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[8] = (CharSequence) "ExpectedException";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.replacePattern("ExpectedException", (String) null, "&l]TpqP-");
      assertEquals("ExpectedException", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("ExpectedException", stringArray0, stringArray0);
      assertEquals("ExpectedException", string3);
      assertEquals(1, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("0#1YLnuc;/M");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank(charSequenceArray0[3]);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.replaceChars("ExpectedException", "\n", "mZ5'?~ecX+APkH)(V");
      assertEquals("ExpectedException", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.rotate("Search and Replace array lengths don't match: ", (-1));
      assertEquals("earch and Replace array lengths don't match: S", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.rightPad("Z;FW5mE7\"7q.$\"()R", 10, ')');
      assertEquals("Z;FW5mE7\"7q.$\"()R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("+V+:kF", "Z;FW5mE7\"7q.$\"()R");
      assertEquals("+V+:kF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, "", "maxWith cannot be negative");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!N[`y", "!N[`y", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.chop("*");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string1 = StringUtils.repeat('`', 2240);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("*"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string1;
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = "*";
      stringArray0[6] = "*";
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string2);
      assertEquals(7, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace(stringArray0[4]);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("*");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "*", (CharSequence) "", 17);
      assertEquals(1, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "", 2240);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.rightPad("#N36E{7['dY7;", 9991);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "_;|$S");
      assertEquals("_;|$S", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "_;|$S", (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("f", "cANNOT STORE ORG.JUNITPIONEER.JU", 65536);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("_;|$S"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("_;|$S"));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      boolean boolean1 = stack1.add("*!zu5:)u");
      assertTrue(boolean1);
      assertTrue(stack1.contains("*!zu5:)u"));
      assertFalse(stack1.contains("_;|$S"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(stack1, stack0);
      assertEquals("[*!zu5:)u]", stack1.toString());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      
      boolean boolean2 = stack1.add("=P%njQs$&M094");
      assertTrue(boolean2);
      assertTrue(stack1.contains("=P%njQs$&M094"));
      assertFalse(stack1.contains("_;|$S"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals("[*!zu5:)u, =P%njQs$&M094]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertTrue(stack1.contains("=P%njQs$&M094"));
      assertFalse(stack1.contains("_;|$S"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals("[*!zu5:)u, =P%njQs$&M094]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "f");
      assertEquals("*!zu5:)uf=P%njQs$&M094", string1);
      assertTrue(stack1.contains("=P%njQs$&M094"));
      assertFalse(stack1.contains("_;|$S"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals("[*!zu5:)u, =P%njQs$&M094]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("1'k:.^iEA");
      assertEquals("1'k:.^iEA", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.center("1'k:.^iEA", 65536);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Vp(>6%RURZiX[g", (CharSequence) "Vp(>6%RURZiX[g");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("xJZXLo_^~v>r0$H", "", 917, 9);
      assertEquals("xJZXLo_^~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("vp(>6%RURZiX[g", "tu$;^G7xWbBf\":E~n");
      assertEquals("vp(>6%RURZiX[g", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("vp(>6%RURZiX[g");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.difference("k.6Fs)S_'P4jq*\"<E", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "k.6Fs)S_'P4jq*\"<E";
      charSequenceArray0[1] = (CharSequence) "k.6Fs)S_'P4jq*\"<E";
      charSequenceArray0[2] = (CharSequence) "Vp(>6%RURZiX[g";
      String string5 = StringUtils.wrap("", '9');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "k.6Fs)S_'P4jq*\"<E";
      charSequenceArray0[5] = (CharSequence) "vp(>6%RURZiX[g";
      charSequenceArray0[6] = (CharSequence) "vp(>6%RURZiX[g";
      boolean boolean2 = StringUtils.endsWithAny("k.6Fs)S_'P4jq*\"<E", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.abbreviate("vp(>6%RURZiX[g", 35, 9);
      assertEquals("...RZiX[g", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "...";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("...", string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("...", '?');
      assertEquals("?...?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithAny("?...?", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate("offset cannot be negative#|-^OB3hG?\"PS-}|t", 344, 35);
      assertEquals("...ot be negative#|-^OB3hG?\"PS-}|t", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.substringBefore("...", "c{");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("...", "...");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("M#24]<$M1p(,dedF;v", "5", "XYO>2p+");
      assertEquals("M#24]<$M1p(,dedF;v", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("XYO>2p+", "5");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.chomp("M#24]<$M1p(,dedF;v");
      assertEquals("M#24]<$M1p(,dedF;v", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("M#24]<$M1p(,dedF;v", "XYO>2p+");
      assertEquals("M#24]<$M1p(,dedF;v", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "z", 0);
      assertNull(stringArray1);
      
      String string5 = StringUtils.join((double[]) null, 'd', 1081, (-3270));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Failed to delete temp directory ", "Failed to delete temp directory ", "Failed to delete temp directory ");
      assertEquals("Failed to delete temp directory ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.reverseDelimited("Failed to delete temp directory ", 'H');
      assertEquals("Failed to delete temp directory ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("Failed to delete temp directory ");
      assertEquals(" yrotcerid pmet eteled ot deliaF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Failed to delete temp directory ", (CharSequence) "Failed to delete temp directory ");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "              5              Search and Replace array lengths don't match: ", (CharSequence) "              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              Search and Replace array lengths don't match: ", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "              5              Search and Replace array lengths don't match: ", (CharSequence) "              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              Search and Replace array lengths don't match: ", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      String string0 = StringUtils.repeat("              5              Search and Replace array lengths don't match: ", 160);
      assertFalse(string0.equals((Object)charSequence0));
      assertFalse(string0.equals((Object)charSequence1));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("              5              Search and Replace array lengths don't match: ", string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)charSequence0));
      assertFalse(string0.equals((Object)charSequence1));
      
      boolean boolean1 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean1);
      assertFalse(string0.equals((Object)charSequence0));
      assertFalse(string0.equals((Object)charSequence1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      StringUtils.split(string0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[0] = "~|X;qt;;$LEv";
      String string0 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = enumSet0.contains(stringArray0[6]);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      assertEquals(2, enumSet0.size());
      
      String string1 = StringUtils.join(iterator0, stringArray0[6]);
      assertEquals("DISPLAYFORMAT", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, enumSet0.size());
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern("d,Y ", "~|X;qt;;$LEv");
      assertEquals("d,Y ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.substring("..", 160, 1726);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("O>MOC~twdrf", "Illegal range. The step cannot be zero.");
      assertEquals("O>MOC~twdrf", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.CR;
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.mid("org.junitpioneer.vintage.ExpectedExceptionExtension", 1726, 160);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Object varargs must not be null", "u");
      assertEquals("ll", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "#|-^OB3hG?\"PS-}|t", 6);
      assertEquals((-1), int0);
      
      String string0 = "mZ5'?~ecX+APkH)(V";
      String[] stringArray0 = StringUtils.split(" ", "mZ5'?~ecX+APkH)(V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("#|-^OB3hG?\"PS-}|t", " ");
      assertEquals(" #|-^OB3hG?\"PS-}|t ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0#1YLnuc;/M";
      charSequenceArray0[1] = (CharSequence) "mZ5'?~ecX+APkH)(V";
      charSequenceArray0[2] = (CharSequence) "mZ5'?~ecX+APkH)(V";
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '0';
      charArray0[2] = '\\';
      charArray0[3] = '/';
      charArray0[4] = '3';
      charArray0[5] = '\"';
      charArray0[6] = 'd';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " #|-^OB3hG?\"PS-}|t ", charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'(', '0', '\\', '/', '3', '\"', 'd'}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[2], (CharSequence) " #|-^OB3hG?\"PS-}|t ");
      assertEquals(19, int1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringAfterLast("Threshold must not be negativeThreshold must not be negative", " ");
      assertEquals("negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), 359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'E', 102, 102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("4_PG5HkLfP|Sr:Ww", "");
      assertEquals("4_PG5HkLfP|Sr:Ww", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "4_PG5HkLfP|Sr:Ww", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("O", 11, "4_PG5HkLfP|Sr:Ww");
      assertEquals("4_PG5HkLfPO", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.truncate(".O/M,Vg>E", 0, 0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate(" ,.m&cVKgy1fW\"z1aW\n", 1441);
      assertEquals("m&cVKgy1fW\"z1aW\n ,.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "4_PG5HkLfP|Sr:Ww");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("5", '.');
      assertEquals(".5.", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("S");
      assertEquals("s", locale0.toString());
      assertEquals("s", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = null;
      String string2 = StringUtils.abbreviateMiddle((String) null, "p", 1431655765);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase(".5.");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("\" should have a parent context.", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertFalse(stack1.contains(locale0));
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      Stack<Locale> stack2 = new Stack<Locale>();
      assertFalse(stack2.contains(locale0));
      assertTrue(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(stack2.empty());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertNotNull(stack2);
      
      stack2.addElement(locale0);
      assertTrue(stack2.contains(locale0));
      assertFalse(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertEquals("[]", stack2.toString());
      assertFalse(stack2.isEmpty());
      assertEquals(1, stack2.size());
      
      boolean boolean0 = stack2.add(locale0);
      assertTrue(boolean0);
      assertTrue(stack2.contains(locale0));
      assertFalse(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("[, ]", stack2.toString());
      assertEquals(2, stack2.size());
      assertFalse(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.isEmpty());
      
      Locale locale1 = new Locale("!l&xa:<rmU7?_[");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("!l&xa:<rmu7?_[", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("!l&xa:<rmu7?_[", locale1.getLanguage());
      assertNotNull(locale1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "*", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "8P93.&3u*W9\"%1o", (CharSequence) "!l&xa:<rmU7?_[");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 60, 2916);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.capitalize("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("Failed to delete temp directory ", "q*o6d jzP}DF0qz");
      assertEquals("Failed to delete temp directory ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", ".M,3w6^G");
      assertEquals(23, int0);
      
      String string2 = StringUtils.leftPad("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", 27, "U&0i$M*6n!#3Xw");
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "q*o6d jzP}DF0qz", "Object varargs must not be null", 23);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "Threshold must not be negative");
      assertEquals(0.61, double0, 0.01);
      
      String string4 = StringUtils.truncate("Failed to delete temp directory ", 6, 49);
      assertEquals(" to delete temp directory ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.substring((String) null, 23, 32);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Threshold must not be negative", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "<$M1p(,dedF;v";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "<$M1p(,dedF;v", supplier0);
      assertEquals("<$M1p(,dedF;v", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny("<$M1p(,dedF;v", stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.abbreviate("Failed to create custom temp directory", 112);
      assertEquals("Failed to create custom temp directory", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", (-2847));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("              5              Search and Replace array lengths don't match: ");
      assertEquals("5 Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("<Ft(/]", "Cannot store ");
      assertEquals("<Ft(/]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "-tV(CNb|", (CharSequence) "Cannot store ");
      assertEquals("-tV(CNb|", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-tV(CNb|", "-tV(CNb|<Ft(/]-tV(CNb|");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("<Ft(/]", (-1), "k,v?n=9pX)nV35nH");
      assertEquals("<Ft(/]", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("-tV(CNb|", ".M,3w6^G");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 342, 36);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      double double1 = StringUtils.getJaroWinklerDistance("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "");
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      String string5 = StringUtils.unwrap("              5              Search and Replace array lengths don't match: ", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertEquals("              5              Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "-tV(CNb|<Ft(/]-tV(CNb|";
      boolean boolean0 = StringUtils.startsWithAny("-tV(CNb|", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.repeat('f', (-1));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r\n");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\r\n";
      charSequenceArray0[1] = (CharSequence) "\r\n";
      charSequenceArray0[2] = (CharSequence) "\r\n";
      String string0 = StringUtils.normalizeSpace("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r\n";
      charSequenceArray0[5] = (CharSequence) "\r\n";
      boolean boolean1 = StringUtils.endsWithAny("\r\n", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("\r\n", "");
      assertEquals("\r\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("eq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Failed to delete temp directory ", "Failed to delete temp directory ", "Failed to delete temp directory ");
      assertEquals("Failed to delete temp directory ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = 1408.6F;
      floatArray0[2] = (float) 322;
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (-1050.347F);
      String string3 = StringUtils.join(floatArray0, 'L', 550, 6);
      assertEquals("", string3);
      assertEquals(5, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new float[] {76.0F, 1408.6F, 322.0F, 76.0F, (-1050.347F)}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("", "", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "*d)63[g-", (CharSequence) "*d)63[g-");
      assertEquals(0, int0);
      
      String string5 = StringUtils.rightPad((String) null, (-314), "2$Skh");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5]tPL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Failed to delete temp directory ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.join((double[]) null, 'v', 6, (-1));
      assertNull(string6);
      
      String string7 = StringUtils.left("*d)63[g-", 32);
      assertEquals("*d)63[g-", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.unwrap("5", 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("5", "tu$;^G7xWbBf\":E~n", 29);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "5", (-241));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertEquals("5", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "tu$;^G7xWbBf\":E~n", "5");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "5", (-241));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.stripToNull("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("5");
      assertEquals("5", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeFirst("YHlVjE", "The String must not be empty");
      assertEquals("YHlVjE", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("5", stringArray0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, (-1));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-tV(CNb|", "org.apache.commons.lang3.StringUtils");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("vG", " vs ");
      assertEquals(" vs vG vs ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase(" vs vG vs ");
      assertEquals(" VS Vg VS ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Expected exactly one annotation to provide an ArgumentSource, found %d.", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.replaceChars("Minimum abbreviation width is %d", (String) null, " vs ");
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("eL7)3", " vs vG vs ");
      assertEquals("eL7)3", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = '^';
      charArray0[2] = 'V';
      charArray0[3] = 'Y';
      charArray0[4] = '/';
      charArray0[5] = 'v';
      charArray0[6] = '$';
      charArray0[7] = 'l';
      charArray0[8] = '&';
      int int0 = StringUtils.indexOfAny((CharSequence) "eL7)3", charArray0);
      assertEquals(1, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'L', '^', 'V', 'Y', '/', 'v', '$', 'l', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("Failed to delete temp directory ", "Failed to delete temp directory ", "Failed to delete temp directory ");
      assertEquals("Failed to delete temp directory ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      boolean boolean0 = StringUtils.isAsciiPrintable("5]tPL");
      assertTrue(boolean0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("5]tPL", "5]tPL", charSequenceArray0);
      assertEquals("5]tPL", string3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, ".jhNu juFI7t)S");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("5]tPL");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.join((double[]) null, '<', 0, 3);
      assertNull(string4);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Cannot store ");
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1997);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1997, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1997, charBuffer0.length());
      assertEquals(1997, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1997, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(charBuffer0, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils", charSequenceArray0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("Don't clear/set the same property more than once.");
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory$CloseablePath", '^');
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", (-622));
      assertEquals((-1), int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], charSequenceArray0[1], 56);
      assertEquals(35, int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '%', 56, (-622));
      assertEquals("", string4);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      stringArray0[1] = "org.apache.commons.lang3.RegExUtils";
      stringArray0[2] = "org.apache.commons.lang3.RegExUtils";
      stringArray0[3] = "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      stringArray0[4] = "org.apache.commons.lang3.RegExUtils";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("org.", string5);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '0', (int) (byte) (-14), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.leftPad("5", 9, "5");
      assertEquals("555555555", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "555555555";
      stringArray0[1] = "5";
      stringArray0[2] = "555555555";
      stringArray0[3] = "5";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("5", string1);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$O5Nes(se=pR /Q2IB@#}0", "6", "6");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("5", '.');
      assertEquals(".5.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("Icg;w{|", "Vd|f(/>g{[]\"$");
      assertEquals("Icg;w{|", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("r+il4", "Extension context \"");
      assertEquals("r+il4", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Icg;w{|", '.', '.');
      assertEquals("Icg;w{|", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Icg;w{|", (CharSequence) "S", 1927);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.defaultString("EH}ttfhMfw%_F", "sL,*Ekcmt+Ql'vKS;6F");
      assertEquals("EH}ttfhMfw%_F", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "5", (CharSequence) "Vd|f(/>g{[]\"$");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.center("]DylFwd", (-1431655763), '.');
      assertEquals("]DylFwd", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrap("org.junitpioneer.vintage.TimeoutExtension", (String) null);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "_j/", (CharSequence) "sL,*Ekcmt+Ql'vKS;6F", 1927);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "yTSh{O/8`mt4c", 10, (-128));
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      String string8 = StringUtils.stripToNull("io");
      assertEquals("io", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.left("]agc[*f", (-128));
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Extension context \"", charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\r", 8198, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "<Ft(/]", (CharSequence) "<Ft(/]", (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.leftPad("<Ft(/]", 9943, 'u');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: \n", "Search and Replace array lengths don't match: \n", "(oJ8/$\"2K%cAW", 503);
      assertEquals("(oJ8/$\"2K%cAW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "\r", (CharSequence) "Search and Replace array lengths don't match: \n");
      assertEquals("Search and Replace array lengths don't match: \n", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) "(oJ8/$\"2K%cAW");
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string0));
      assertNotNull(charSequence1);
      
      String string2 = StringUtils.repeat("Object varargs must not be null", 15);
      assertEquals("Object varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be null", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("(oJ8/$\"2K%cAW", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 503;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 503;
      String string5 = StringUtils.join(doubleArray0, ')');
      assertEquals("503.0)1.0)503.0", string5);
      assertEquals(3, doubleArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertArrayEquals(new double[] {503.0, 1.0, 503.0}, doubleArray0, 0.01);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace("Object varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = "\n";
      String string1 = StringUtils.right("@7]e~Z>2VG-WG", 53);
      assertEquals("@7]e~Z>2VG-WG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "Search and Replace array lengths don't match: ";
      stringArray0[3] = "@7]e~Z>2VG-WG";
      stringArray0[4] = "lpWmR";
      stringArray0[5] = "\n";
      stringArray0[6] = "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("\n", string2);
      assertEquals(7, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(oJ8/$\"2K%cAW", (String) null);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = "DefaultTimeZone";
      String string4 = StringUtils.leftPad("DefaultTimeZone", (-1), "sU\"jDn%XX@5'");
      assertEquals("DefaultTimeZone", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("sU\"jDn%XX@5'", "\n");
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "", 53);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.center("Q[", 3, "Q[");
      assertEquals("Q[Q", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("Q[Q", "Q[Q");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Q[", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((float[]) null, ')', 3, 65);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Q[Q", 5);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat('>', 65);
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.upperCase("\r\n");
      assertEquals("\r\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "\r\n", 3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", " ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "\n");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(47, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(47, stringArray0.length);
      
      String string1 = StringUtils.rightPad("=:+pXZn>u", 2361, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.repeat('A', 2396);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertFalse(arrayList1.contains(2396));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2361;
      floatArray0[1] = (float) 2396;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 2361;
      floatArray0[4] = (float) 'H';
      floatArray0[5] = (float) 'H';
      floatArray0[6] = (float) 'H';
      String string3 = StringUtils.abbreviate(string1, "\n", 2361);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints(string3);
      assertEquals(2361, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) string2, (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) "\n");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      String string4 = StringUtils.removeEnd("Z0KbSbi-|!_b#U", "m~0<fGVy@m~0<fGVy@");
      assertEquals("Z0KbSbi-|!_b#U", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[12];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "'6w%l,QzrP%;uJtuh> ", "'6w%l,QzrP%;uJtuh> ");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("'6w%l,QzrP%;uJtuh> "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.contains("'6w%l,QzrP%;uJtuh> "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = arrayList0.add((Object) "'6w%l,QzrP%;uJtuh> ");
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("'6w%l,QzrP%;uJtuh> "));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, ']');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("...", string0);
      assertEquals("...", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = "6>\"thDC38ELI&3WZr";
      String string3 = "^Bm*;7[~}iXCh";
      int int0 = StringUtils.compare("^Bm*;7[~}iXCh", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("^Bm*;7[~}iXCh");
      assertFalse(boolean0);
      
      String string4 = "[n>#RpsdW(USgd";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("[n>#RpsdW(USgd", "Minimum abbreviation width with offset is %d              5              ", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 74
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(">bW]KG._L");
      assertEquals(">bW]KG._L", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ">bW]KG._L", (CharSequence) ">bW]KG._L", (-162));
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '>', 3, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string2 = StringUtils.truncate("Comparator should not be null.", 1, 1114111);
      assertEquals("omparator should not be null.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = new Locale("Backup");
      assertEquals("", locale0.getISO3Country());
      assertEquals("backup", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("backup", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split(" /]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'm');
      assertEquals("mSearch and Replace array lengths don't match: m", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "mSearch and Replace array lengths don't match: m");
      assertEquals(48, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "mSearch and Replace array lengths don't match: m", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.swapCase("vy");
      assertEquals("VY", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "VY", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\r\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "\n");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string1 = "6,~t.5$iymJ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals(47, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(47, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 2361;
      String string2 = "=:+pXZn>u";
      String string3 = null;
      String string4 = StringUtils.rightPad("=:+pXZn>u", 2361, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.repeat('A', 2396);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertFalse(arrayList1.contains("=:+pXZn>u"));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2361;
      floatArray0[1] = (float) 2396;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 2361;
      floatArray0[4] = (float) 'H';
      floatArray0[5] = (float) 'H';
      floatArray0[6] = (float) 'H';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'H', 6, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceChars("%okysaG;5Z1-v6eft", "p{InCombiningDiacriticalMarks}+", "j!sm!9#ngd){BF#x");
      assertEquals("%9yxG;5Z1-v6ef", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "`i", (CharSequence) "%#yG;5Z1-v6ef");
      assertEquals("`i", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "j!sm!9#ngd){BF#x", (CharSequence) "%okysaG;5Z1-v6eft");
      assertEquals("j!sm!9#ngd){BF#x", charSequence1);
      assertFalse(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      String string2 = StringUtils.repeat("_YgLomN-BwAtheEI", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("p{InCombiningDiacriticalMarks}+", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("j!sm!9#ngd){BF#x");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("-oL6nb7wBEt1=");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'v';
      String string4 = StringUtils.join(doubleArray0, '-');
      assertEquals("0.0-0.0-118.0", string4);
      assertEquals(3, doubleArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new double[] {0.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace("j!sm!9#ngd){BF#x");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToNull("(I&O");
      assertEquals("(I&O", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "(I&O", (CharSequence) "0#1YLnuc;/M");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.chop("(I&O");
      assertEquals("(I&", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("^13j64H^");
      assertTrue(boolean0);
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rotate("g+", 728);
      assertEquals("g+", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("g+", "(I&");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.join((double[]) null, '/');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = "1mE<Fu0P\\4g@l/MhH$";
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.params.ShortRange", "1mE<Fu0P\u0004g@l/MhH$", false);
      assertEquals(62, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "1mE<Fu0P\u0004g@l/MhH$";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Strings must not be null", (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.join((char[]) null, '~');
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 62);
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("V*i8d?i3G@=zzHL.Uj(", "{YJKLvF*IHuf");
      assertEquals("V*i8d?i3G@=zzHL.Uj(", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = "Threshold must not be negative";
      String string6 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.center(" ", 62, "Threshold must not be negative");
      assertEquals("Threshold must not be negative Threshold must not be negativeT", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string8 = StringUtils.normalizeSpace((String) null);
      assertNull(string8);
      
      String string9 = "Threshold must not be negative<$M1p(,dedF;v";
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "Threshold must not be negative<$M1p(,dedF;v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Failed to delete temp directory ", (CharSequence) "");
      assertEquals(32, int0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = new Locale("Failed to delete temp directory ");
      assertEquals("", locale0.getISO3Country());
      assertEquals("failed to delete temp directory ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("failed to delete temp directory ", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.compare("V*i8d?i3G@=zzHL.Uj(~", "");
      assertEquals(20, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.wrapIfMissing("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g", "3t&oBgeY~");
      assertEquals("3t&oBgeY~tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g3t&oBgeY~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int3 = StringUtils.compare("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g", "", false);
      assertEquals(31, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedFv", 'v');
      assertEquals("<$M1p(,dedF", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("<$M1p(,dedFv", 'v');
      assertEquals("v<$M1p(,dedFv", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      boolean boolean0 = StringUtils.isAlphanumericSpace("t6slUMU)o! ,.`V");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "t6slUMU)o! ,.`V", 'B');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("bn}iq,('V$?", "t6slUMU)o! ,.`V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "bn}iq,('V$?", "QT:Q5\"(jNJX98K)");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8");
      assertEquals("bn}iq,('V$?", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "QT:Q5\"(jNJX98K)", (CharSequence) "", 12);
      assertEquals(12, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("9.Xfu{F]A");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "\n");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", ":d`^NiPG");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.rightPad("=:+pXZn>u", 2361, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.leftPad("Minimum abbreviation width is %d", 2396, 'H');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Search and Replace array lengths don't match: ");
      assertEquals(17, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.toRootLowerCase("%B=I/d<J=");
      assertEquals("%b=i/d<j=", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("\n", "");
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("estExtension", (String) null);
      assertEquals("estExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "estExtension";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("L8h`#2($T(", "L8h`#2($T(", "L8h`#2($T(");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // L8h`#2($T(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.capitalize("oJw,1tA<J's..u5L");
      assertEquals("OJw,1tA<J's..u5L", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "OJw,1tA<J's..u5L";
      charSequenceArray0[1] = (CharSequence) "oJw,1tA<J's..u5L";
      charSequenceArray0[2] = (CharSequence) "oJw,1tA<J's..u5L";
      charSequenceArray0[3] = (CharSequence) "OJw,1tA<J's..u5L";
      boolean boolean0 = StringUtils.startsWithAny("OJw,1tA<J's..u5L", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "OJw,1tA<J's..u5L");
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.center("oJw,1tA<J's..u5L", 0);
      assertEquals("oJw,1tA<J's..u5L", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[2] = 'F';
      charArray0[4] = '4';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[0], 0);
      assertEquals(0, int1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 863;
      intArray0[1] = 863;
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) 'v';
      String string0 = StringUtils.join(intArray0, '#');
      assertEquals("863#863#35#35#118", string0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {863, 863, 35, 35, 118}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "WR4|@#&p;R:");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "WR4|@#&p;R:", 35);
      assertEquals(5, int0);
      
      String string2 = StringUtils.deleteWhitespace("0S");
      assertEquals("0S", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("ePAr`=z!D]gQ}", "...", 11, 11);
      assertEquals("...=z!D]gQ}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("NDQau}[P?pZ1Q-w").when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertEquals("NDQau}[P?pZ1Q-w", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("ExceptionWasThrown", "yTSh{O/8`mt4c");
      assertEquals("ExceptionWasThrown", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("...", "IhNAv4iXTsEpx{0Z");
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("...=z!D]gQ}", '$', '$');
      assertEquals("...=z!D]gQ}", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...=z!D]gQ}", 29);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.defaultString("org.junitpioneer.jupiter.params.ByteRange", "_j/");
      assertEquals("org.junitpioneer.jupiter.params.ByteRange", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "yTSh{O/8`mt4c", (CharSequence) "yTSh{O/8`mt4c");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.deleteWhitespace((String) null);
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 235, 29);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Supplier<CharSequence> supplier1 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "ExceptionWasThrown", supplier1);
      assertEquals("ExceptionWasThrown", charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string6));
      assertTrue(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "ExceptionWasThrown", "p`';p,");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("...");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.right("K01\"QfhK", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("K01\"QfhK");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("K01\"QfhK", "m~0<fGVy@m~0<fGVy@", 38);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("K01\"QfhK"));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("K01\"QfhK"));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ListIterator<String> listIterator1 = stack0.listIterator();
      assertFalse(stack0.contains("K01\"QfhK"));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertNotSame(listIterator1, listIterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      String string1 = StringUtils.join((char[]) null, 'N', 1129, 0);
      assertNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("K01\"QfhK", "Comparator should not be null.");
      assertEquals(0.39, double0, 0.01);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "K01\"QfhK");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Comparator should not be null.");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("K01\"QfhK", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'K', 128, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.getDigits("!nCL$t1JW0(d:a:");
      assertEquals("10", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("10");
      assertEquals("10", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("10", 4796);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("10", "");
      assertEquals("10", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("P");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfter("<Ft(/]<Ft(/]", "nPQacRaHKz[f");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.trimToEmpty("P");
      assertEquals("P", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("The type must not be null", 9);
      assertEquals("must not be null", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to delete temp directory ", "");
      assertEquals("Failed to delete temp directory ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Failed to delete temp directory ", (CharSequence) "", 588);
      assertEquals(32, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "_}w0(-Ol,2,", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "_}w0(-Ol,2,", (CharSequence) "");
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.defaultString("Search and Replace array lengths don't match: ", ",6+{OotWm");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("Failed to delete temp directory ", "Threshold must not be negative", "");
      assertEquals("Failed to delete temp directory ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string5 = StringUtils.join((List<?>) stack0, "Failed to delete temp directory ", 11, 9);
      assertEquals("", string5);
      assertFalse(stack0.contains(""));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, (String) null, 3, 3);
      assertNull(string0);
      
      int int0 = StringUtils.compare("6temp.dir", "6temp.dir", true);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((char[]) null, '~');
      assertNull(string1);
      
      String string2 = StringUtils.center("6temp.dir", 0);
      assertEquals("6temp.dir", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("6temp.dir", (String) null);
      assertEquals("6temp.dir", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("...");
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 0, "_={");
      assertNull(string5);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string6 = StringUtils.normalizeSpace("Xo3)");
      assertEquals("Xo3)", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "4hHK:pH");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("a4'S>-`&@W;IHl:R", (-1));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.right("...", 38);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add("org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertTrue(boolean1);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("org.junitpioneer.jupiter.TempDirectory$CloseablePath"));
      assertFalse(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[org.junitpioneer.jupiter.TempDirectory$CloseablePath]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("org.junitpioneer.jupiter.TempDirectory$CloseablePath"));
      assertFalse(stack0.isEmpty());
      assertEquals("[org.junitpioneer.jupiter.TempDirectory$CloseablePath]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ListIterator<String> listIterator1 = stack0.listIterator();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("org.junitpioneer.jupiter.TempDirectory$CloseablePath"));
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertNotSame(listIterator1, listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals("[org.junitpioneer.jupiter.TempDirectory$CloseablePath]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertNotNull(listIterator1);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (double) (-11);
      doubleArray0[2] = (double) (-11);
      doubleArray0[3] = (double) (short)8;
      doubleArray0[4] = (double) 'v';
      doubleArray0[5] = (double) 'v';
      doubleArray0[6] = (double) (-11);
      doubleArray0[7] = (double) 'v';
      doubleArray0[8] = (double) 38;
      String string2 = StringUtils.join(doubleArray0, 'v');
      assertEquals("38.0v-11.0v-11.0v8.0v118.0v118.0v-11.0v118.0v38.0", string2);
      assertEquals(9, doubleArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new double[] {38.0, (-11.0), (-11.0), 8.0, 118.0, 118.0, (-11.0), 118.0, 38.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isWhitespace("...");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[5] = (CharSequence) "...";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      int int0 = StringUtils.lastIndexOfAny("38.0v-11.0v-11.0v8.0v118.0v118.0v-11.0v118.0v38.0", charSequenceArray0);
      assertEquals(49, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'C');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, (String) null, 3, 3);
      assertNull(string0);
      
      int int0 = StringUtils.compare("6temp.dir", "6temp.dir", true);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((char[]) null, '~');
      assertNull(string1);
      
      String string2 = StringUtils.center("6temp.dir", 0);
      assertEquals("6temp.dir", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("6temp.dir", (String) null);
      assertEquals("6temp.dir", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("...");
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 0, "_={");
      assertNull(string5);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.normalizeSpace("Xo3)");
      assertEquals("Xo3)", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "6temp.dir";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("6temp.dir", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.normalizeSpace("#|-^OB3hG?\"PS-}|t");
      assertEquals("#|-^OB3hG?\"PS-}|t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("84hHK:pH", '8');
      assertEquals("4hHK:pH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[1] = (CharSequence) "#|-^OB3hG?\"PS-}|t";
      charSequenceArray0[2] = (CharSequence) "84hHK:pH";
      charSequenceArray0[3] = (CharSequence) "84hHK:pH";
      charSequenceArray0[4] = (CharSequence) "4hHK:pH";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "84hHK:pH", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[2], "#|-^OB3hG?\"PS-}|t");
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'f';
      charArray1[1] = '4';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "#|-^OB3hG?\"PS-}|t", charArray1);
      assertTrue(boolean2);
      assertEquals(2, charArray1.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', '4'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '8';
      longArray0[3] = (long) '4';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) '8';
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) '4';
      longArray0[8] = 38L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '8', 1, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.getDigits("vp(>6%RURZiX[g");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("6", "temp.dir");
      assertEquals("6", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 4796);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("The character ", "Xo3)");
      assertEquals("Xo3)The character Xo3)", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("Xo3)");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfter((String) null, "  dA(");
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string6 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("Search and Replace array lengths don't match: ", 4796);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("<Ft(/]", "org.apache.commons.lang3.StringUtils", 262);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "<Ft(/]", 262);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("<F(/]", string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("<Ft(/]", "<Ft(/]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "-tV(CNb|<Ft(/]-tV(CNb|", "bbL@5OHC=PW9PG38$ ");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("-tV(CNb|");
      assertFalse(boolean0);
      
      String string3 = StringUtils.upperCase("<F(/]");
      assertEquals("<F(/]", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.SPACE;
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) " ", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string6 = StringUtils.rotate("<Ft(/]", 11);
      assertEquals("Ft(/]<", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.capitalize("");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("5", 0);
      assertEquals("5", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      String string2 = StringUtils.join(byteArray0, 'e');
      assertEquals("0e0", string2);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("j>xO", '-');
      assertEquals("j>xO", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jGIyenh";
      stringArray0[1] = "!ncl$t1jw0(d:a:";
      stringArray0[2] = "j>xO";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "!ncl$t1jw0(d:a:";
      stringArray1[1] = "5";
      stringArray1[2] = "5";
      String string4 = StringUtils.replaceEach("!ncl$t1jw0(d:a:", stringArray0, stringArray1);
      assertEquals("5", string4);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5");
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(3, stringArray2.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotNull(stringArray2);
      
      byte[] byteArray1 = StringUtils.getBytes("", (String) null);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("y`x&{j~!2}!");
      assertEquals("y`x&{j~!2}!", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y`x&{j~!2}!";
      stringArray0[1] = "!F{`#[%R/_h/ve4";
      stringArray0[2] = "!F{`#[%R/_h/ve4";
      stringArray0[3] = "HTpib7<95D";
      stringArray0[4] = "!F{`#[%R/_h/ve4";
      stringArray0[5] = "y`x&{j~!2}!";
      stringArray0[6] = "!F{`#[%R/_h/ve4";
      stringArray0[7] = "!F{`#[%R/_h/ve4";
      stringArray0[8] = "y`x&{j~!2}!";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "HTpib7<95D";
      stringArray1[1] = "!F{`#[%R/_h/ve4";
      stringArray1[2] = "y`x&{j~!2}!";
      stringArray1[3] = "!nCL$t1JW0(d:a:!ncl$t1jw0(d:a:";
      stringArray1[4] = "y`x&{j~!2}!";
      stringArray1[5] = "HTpib7<95D";
      stringArray1[6] = "HTpib7<95D";
      stringArray1[7] = "y`x&{j~!2}!";
      stringArray1[8] = "y`x&{j~!2}!";
      String string1 = StringUtils.replaceEachRepeatedly("y`x&{j~!2}!", stringArray0, stringArray1);
      assertEquals("!nCL$t1JW0(d:a:!ncl$t1jw0(d:a:", string1);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("!nCL$t1JW0(d:a:!ncl$t1jw0(d:a:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '&');
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(string0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertFalse(hashSet0.contains(string0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertEquals("", string1);
      assertFalse(hashSet0.contains(string0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '|', 57, 336);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      CharSequence charSequence0 = null;
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string0 = "\n";
      String string1 = StringUtils.substringAfter("\n", "\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char char0 = 'D';
      String string2 = StringUtils.join((int[]) null, 'D', (-1806), (-1806));
      assertNull(string2);
      
      String string3 = "e";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "e";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "e";
      String string4 = StringUtils.joinWith("e", objectArray0);
      assertEquals("eeeee", string4);
      assertEquals(4, objectArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = "&(DgbiM< U&JMD";
      try { 
        StringUtils.getBytes("", "&(DgbiM< U&JMD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-8), 't');
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '*';
      String string1 = StringUtils.join(charArray0, '^');
      assertEquals("t^t^*", string1);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", "3\"5v2IR!n53+*j");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "t^t^*", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      
      String string3 = StringUtils.repeat('F', (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "t^t^*", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.stripStart("", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, 160, 't');
      assertNull(string5);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "b]@_xU6$5>r;lBXtRA");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.uncapitalize("y>^J()Yjz:$");
      assertEquals("y>^J()Yjz:$", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string3));
      assertNotNull(treeSet0);
      
      String string7 = treeSet0.floor("y>^J()Yjz:$");
      assertFalse(treeSet0.contains(string3));
      assertNull(string7);
      
      String string8 = StringUtils.replace("", (String) null, "h]+*");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(0, stringArray0.length);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("i7jK9W", "Strings must not be null", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("r|c;OJA8p]@a+Pa^b:");
      assertEquals("r|c;oja8p]@a+pa^b:", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("r|c;oja8p]@a+pa^b:", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.unwrap("+*!<R.NHchWlg", "r|S:'dTo^czv:");
      assertEquals("+*!<R.NHchWlg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Avc F|@", 908);
      assertEquals("Avc F|string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("Avc F|
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("The Array must not be null", "Object varargs must not be null");
      assertEquals("The Array must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "OxZ3^[x@b";
      charSequenceArray0[1] = (CharSequence) "The Array must not be null";
      charSequenceArray0[2] = (CharSequence) "Avc F|
      String string4 = StringUtils.prependIfMissing((String) null, "The Array must not be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "+*!<R.NHchWlg";
      charSequenceArray1[1] = (CharSequence) "The Array must not be null";
      charSequenceArray1[2] = (CharSequence) "Cannot store ";
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray1);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string5 = StringUtils.leftPad((String) null, 2256, "org.junitpioneer.jupiter.TempDirectory");
      assertNull(string5);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string6 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("", string6);
      assertEquals(0, byteArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.unwrap("5", 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("5", 29);
      assertEquals("              5              ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      String string3 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "              5              ");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "              5              ", "5");
      assertEquals(14, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("5");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("5"));
      assertNotNull(treeSet0);
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, 'd');
      assertEquals("", string4);
      assertFalse(treeSet0.contains("5"));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "5";
      charSequenceArray0[3] = (CharSequence) "5";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.abbreviate("5", (String) null, 17);
      assertEquals("5", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[3]);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.replaceIgnoreCase("KBv>iF-F)B;n# ]VI4", " ", " ", 526);
      assertEquals("KBv>iF-F)B;n# ]VI4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "KBv>iF-F)B;n# ]VI4", (CharSequence) "\r");
      assertEquals("KBv>iF-F)B;n# ]VI4", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "!<5yZe*,P]/I,;T4", (CharSequence) "\r");
      assertEquals("!<5yZe*,P]/I,;T4", charSequence1);
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      String string2 = StringUtils.repeat((String) null, 526);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("KBv>iF-F)B;n# ]VI4", "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 526;
      doubleArray0[1] = (double) 526;
      doubleArray0[2] = 972.3;
      doubleArray0[3] = (double) 'v';
      doubleArray0[4] = (double) 'v';
      String string4 = StringUtils.join(doubleArray0, 'e');
      assertEquals("526.0e526.0e972.3e118.0e118.0", string4);
      assertEquals(5, doubleArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new double[] {526.0, 526.0, 972.3, 118.0, 118.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace(" ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "!<5yZe*,P]/I,;T4", (CharSequence) "KBv>iF-F)B;n# ]VI4", (-1913));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("?xx", " ", "3v)N4@T7hP@7n^");
      assertEquals("?xx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("?xx"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int3 = StringUtils.compare("'6w%l,", "?xx");
      assertEquals((-24), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("3v)N4@T7hP@7n^");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceFirst("GDBm\"$2 -Dq", "", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+GDBm\"$2 -Dq", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ntpyKt|[?%}h/", 'n');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.center("uO~-1\"UZ3", 0, "5y6.A*ng$Cb/(nG");
      assertEquals("uO~-1\"UZ3", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      int int5 = StringUtils.getFuzzyDistance("3v)N4@T7hP@7n^", "uO~-1\"UZ3", locale0);
      assertEquals(0, int5);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Minimum abbreviation width is %d", 'b');
      assertEquals("reviation width is %dbMinimum a", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("\r\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("y{", '[');
      assertEquals("y{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("Ih", locale0);
      assertEquals("ih", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(string2);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertNotNull(locale1);
      
      String string3 = locale1.getDisplayVariant(locale0);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertNotNull(string3);
      
      String string4 = locale0.getDisplayLanguage(locale1);
      assertEquals("", string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ih", 884);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap("", "Ih");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNull(stringArray0);
      
      String string6 = StringUtils.repeat("e", 1046);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.chop("Timeout");
      assertEquals("Timeou", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Search and Replace array lengths don't match: ", "Timeou");
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Timeou", (CharSequence) "Timeout", 602);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      int int1 = StringUtils.indexOfAny((CharSequence) "Timeou", charArray0);
      assertEquals(2, int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'f', 'm'}, charArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", 2, (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.stripAccents("Timeout");
      assertEquals("Timeout", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Timeout", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "{H7>&OMr{kE0q", "Threshold must not be negative");
      assertEquals("Sealch and Replace allay lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'm';
      charArray1[3] = 'm';
      charArray1[4] = 'f';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Timeou", charArray1);
      assertFalse(boolean2);
      assertEquals(5, charArray1.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', 'f', 'm', 'm', 'f'}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.wrap("oJw,1tA<J's..u5LMinimum abbreviation width with offset is %d", "}S`Ui'.O77");
      assertEquals("}S`Ui'.O77oJw,1tA<J's..u5LMinimum abbreviation width with offset is %d}S`Ui'.O77", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "}S`Ui'.O77oJw,1tA<J's..u5LMinimum abbreviation width with offset is %d}S`Ui'.O77", (CharSequence) "}S`Ui'.O77");
      assertEquals(10, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "}S`Ui'.O77oJw,1tA<J's..u5LMinimum abbreviation width with offset is %d}S`Ui'.O77", (CharSequence) "}S`Ui'.O77oJw,1tA<J's..u5LMinimum abbreviation width with offset is %d}S`Ui'.O77");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("DmZa ]j:Pf=hf", "<Ft(/]", "94-\"<?Y>cF$r(yXo");
      assertEquals("DmZa ]j:Pf=hf", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "?xx", (CharSequence) "?xx");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)89;
      String string2 = StringUtils.join(byteArray0, 'c');
      assertEquals("13c103c89c89c14c14c89", string2);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)13, (byte)103, (byte)89, (byte)89, (byte)14, (byte)14, (byte)89}, byteArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited(" ", 'c');
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = new Locale(" ");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(" ", locale0.toString());
      assertEquals(" ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "$v`", 10);
      assertEquals(3, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String[] stringArray0 = StringUtils.split("$v`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)21;
      String string1 = StringUtils.join(byteArray0, '5');
      assertEquals("105-120576521", string1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-120), (byte)76, (byte)21}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, '5');
      assertNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "ZkwZR+(Q(J4.";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string3 = StringUtils.replaceEach("......=z!D]gQ}", stringArray0, stringArray0);
      assertEquals("......=z!D]gQ}", string3);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace(string0);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      byte[] byteArray1 = StringUtils.getBytes("zQI{;|NFZ4(", (String) null);
      assertEquals(11, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String string5 = StringUtils.substringAfterLast("<m=:#N\"Daal", (String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "&5gzsAzX_vz]#j";
      charSequenceArray0[1] = (CharSequence) "&5gzsAzX_vz]#j";
      charSequenceArray0[2] = (CharSequence) "&5gzsAzX_vz]#j";
      charSequenceArray0[3] = (CharSequence) "&5gzsAzX_vz]#j";
      charSequenceArray0[1] = (CharSequence) "&5gzsAzX_vz]#j";
      charSequenceArray0[5] = (CharSequence) "&5gzsAzX_vz]#j";
      String string0 = StringUtils.appendIfMissing("&5gzsAzX_vz]#j", "&5gzsAzX_vz]#j", charSequenceArray0);
      assertEquals("&5gzsAzX_vz]#j", string0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("&5gzsAzX_vz]#j");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&5gzsAzX_vz]#j";
      stringArray0[1] = "&5gzsAzX_vz]#j";
      stringArray0[2] = "&5gzsAzX_vz]#j";
      stringArray0[3] = "&5gzsAzX_vz]#j";
      stringArray0[4] = "&5gzsAzX_vz]#j";
      stringArray0[5] = "&5gzsAzX_vz]#j";
      stringArray0[6] = "%n]#MEdO4De-?[";
      stringArray0[7] = "&5gzsAzX_vz]#j";
      stringArray0[8] = "&5gzsAzX_vz]#j";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "&5gzsAzX_vz]#j");
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("The character must not be null", "&5gzsAzX_vz]#j", 152);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[4], (-1952257859));
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.rotate("&5gzsAzX_vz]#j", (-1952257859));
      assertEquals("gzsAzX_vz]#j&5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("&5gzsAzX_vz]#j", (-787));
      assertEquals("&5gzsAzX_vz]#j", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern("&5gzsAzX_vz]#j", "RxWIP");
      assertEquals("&5gzsAzX_vz]#j", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%s", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "bt(5cT", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substring((String) null, (-1));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.chop("Array element ");
      assertEquals("Array element", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "V*i8d?i3G@=zzHL.Uj(H", (CharSequence) "Array element");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Array element", 4);
      assertEquals("A...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Array element", (CharSequence) "Array element ");
      assertEquals(1, int0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains(4));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains(4));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, 'S');
      assertEquals("", string2);
      assertFalse(arrayDeque0.contains(4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'v');
      assertEquals("<$M1p(,dedF;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace array lengths don't match: \n", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "<$M1p(,dedF;", (Supplier<CharSequence>) null);
      assertEquals("<$M1p(,dedF;", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.uncapitalize("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)50;
      shortArray0[2] = (short)4159;
      shortArray0[3] = (short)4159;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)50;
      shortArray0[6] = (short)50;
      shortArray0[7] = (short)12;
      shortArray0[8] = (short)50;
      String string3 = StringUtils.join(shortArray0, 'I', (int) (short)12, (-958));
      assertEquals("", string3);
      assertEquals(9, shortArray0.length);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new short[] {(short)50, (short)50, (short)4159, (short)4159, (short)50, (short)50, (short)50, (short)12, (short)50}, shortArray0);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "L+|fj9j");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "<$M1p(,dedF;");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("...", string0);
      assertEquals("...", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("...");
      assertEquals("...", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "...", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string3 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("...", string0);
      assertEquals("...", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string4));
      assertNotNull(treeSet0);
      
      String string5 = treeSet0.floor("GB_S/N04(.");
      assertFalse(treeSet0.contains(string4));
      assertNull(string5);
      
      boolean boolean0 = treeSet0.add("%N7Ji8g`ZzZ$G/");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(string4));
      assertTrue(treeSet0.contains("%N7Ji8g`ZzZ$G/"));
      
      String string6 = StringUtils.join((Iterable<?>) treeSet0, '\"');
      assertEquals("%N7Ji8g`ZzZ$G/", string6);
      assertFalse(treeSet0.contains(string4));
      assertTrue(treeSet0.contains(string6));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String string7 = StringUtils.abbreviate("...", ";?@#Tc0?M;OcH4b|HJ", 64);
      assertEquals("...", string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.chop("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.chop("D\n");
      assertEquals("D", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("D\n");
      assertEquals("D\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      charSequenceArray0[1] = (CharSequence) "t6slUMU)o! ,.`V";
      String string1 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'f');
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "......=z!D]gQ}");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("zT/SF'\"&+;)lm+p!", "org.junitpioneer.jupiter.TempDirectory$CloseablePath", 0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("[J-X#^?llh|b#", ", ", true);
      assertEquals(47, int0);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      int int1 = 14;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("*P(xLw1))E1C", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", 0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("<$M1p(,dedF;v");
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("^cE%3j642^\n", "67_ ");
      assertEquals("^cE%3j642^\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("<$M1p(,dedF;v", string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("<$M1p(,dedF;v", "^5$Xph@^5$Xph@", stringArray0);
      assertEquals("<$M1p(,dedF;v", string3);
      assertEquals(4, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("u&r}Ko:2", "1#lXFp'gg]x/zF*x_~", 53);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertFalse(priorityQueue0.contains("1#lXFp'gg]x/zF*x_~"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>(322);
      assertFalse(priorityQueue1.contains("1#lXFp'gg]x/zF*x_~"));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      
      boolean boolean0 = priorityQueue1.add("<$M1p(,dedF;v");
      assertTrue(boolean0);
      assertFalse(priorityQueue1.contains("1#lXFp'gg]x/zF*x_~"));
      assertTrue(priorityQueue1.contains("<$M1p(,dedF;v"));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("1#lXFp'gg]x/zF*x_~"));
      assertNotNull(treeSet0);
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertFalse(treeSet1.contains("1#lXFp'gg]x/zF*x_~"));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      boolean boolean1 = treeSet1.add("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1);
      assertFalse(treeSet1.contains("1#lXFp'gg]x/zF*x_~"));
      assertTrue(treeSet1.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(treeSet1, treeSet0);
      
      TreeSet<String> treeSet2 = new TreeSet<String>();
      assertFalse(treeSet2.contains("1#lXFp'gg]x/zF*x_~"));
      assertTrue(treeSet2.equals((Object)treeSet0));
      assertFalse(treeSet2.equals((Object)treeSet1));
      assertNotNull(treeSet2);
      
      String string5 = treeSet2.floor("^cE%3j642^\n");
      assertFalse(treeSet2.contains("^cE%3j642^\n"));
      assertTrue(treeSet2.equals((Object)treeSet0));
      assertFalse(treeSet2.equals((Object)treeSet1));
      assertNotSame(treeSet2, treeSet0);
      assertNotSame(treeSet2, treeSet1);
      assertNull(string5);
      
      String string6 = StringUtils.join((Iterable<?>) treeSet2, '0');
      assertEquals("", string6);
      assertFalse(treeSet2.contains("^cE%3j642^\n"));
      assertTrue(treeSet2.equals((Object)treeSet0));
      assertFalse(treeSet2.equals((Object)treeSet1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(treeSet2, treeSet0);
      assertNotSame(treeSet2, treeSet1);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      String string7 = StringUtils.abbreviate((String) null, "p{InCombiningDiacriticalMarks}+", (-3336));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-tV(CNb|<Ft(/]-tV(CNb|", "<Ft(/]");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      charSequenceArray0[1] = (CharSequence) "t6slUMU)o! ,.`V";
      String string1 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'f');
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "t6slUMU)o! ,.`V", 32);
      assertEquals(10, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("t6slUMU)o! ,.`V"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", 99);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '5', 0, 2288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("!ncl$t1jw0(d:a:", "$dE7:U-@");
      assertEquals("!ncl$t1jw0(d:a", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "!ncl$t1jw0(d:a", (CharSequence) "$dE7:U-@");
      assertEquals(0, int0);
      
      String string2 = StringUtils.chomp("\r");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.wrap("5", "5");
      assertEquals("555", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "555", (CharSequence) "555");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "5", (CharSequence) "5");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("SWY=A.", " ", 65536);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) " ", 2980);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("SWY=A.", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "SWY=A.", "5");
      assertTrue(boolean0);
      
      int int3 = StringUtils.indexOf((CharSequence) "555", (-799));
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.chomp("\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("\r", 3202);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.chomp("-");
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("}Q@/ci}9^{ =", 'N');
      assertEquals("}Q@/ci}9^{ =", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "}Q@/ci}9^{ =";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "}Q@/ci}9^{ =", supplier0);
      assertEquals("}Q@/ci}9^{ =", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny("}Q@/ci}9^{ =", stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("! -kD9bc", "}Q@/ci}9^{ =", stringArray0);
      assertEquals("! -kD9bc}Q@/ci}9^{ =", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "}Q@/ci}9^{ =", 222);
      assertEquals((-1), int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add("Backup");
      assertTrue(boolean1);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("Backup"));
      assertTrue(boolean1 == boolean0);
      assertEquals("[Backup]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      boolean boolean2 = stack0.add("Backup");
      assertTrue(boolean2);
      assertFalse(stack0.contains("}Q@/ci}9^{ ="));
      assertTrue(stack0.contains("Backup"));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("[Backup, Backup]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("}Q@/ci}9^{ ="));
      assertTrue(stack0.contains("Backup"));
      assertEquals("[Backup, Backup]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((float[]) null, 'o');
      assertNull(string2);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("! -kD9bc", stringArray0);
      assertFalse(boolean3);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'o');
      assertEquals("BackupoBackup", string3);
      assertFalse(stack0.contains("}Q@/ci}9^{ ="));
      assertTrue(stack0.contains("Backup"));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[Backup, Backup]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.removeFirst("fCGx8R>vrTj~*oPt", "      ...");
      assertEquals("fCGx8R>vrTj~*oPt", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "      ...";
      charSequenceArray0[1] = (CharSequence) "fCGx8R>vrTj~*oPt";
      charSequenceArray0[2] = (CharSequence) "fCGx8R>vrTj~*oPt";
      charSequenceArray0[3] = (CharSequence) "fCGx8R>vrTj~*oPt";
      charSequenceArray0[4] = (CharSequence) "fCGx8R>vrTj~*oPt";
      charSequenceArray0[5] = (CharSequence) "      ...";
      boolean boolean0 = StringUtils.startsWithAny("fCGx8R>vrTj~*oPt", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[3], 271, 271);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStart("      ...", "w@!+?Ngp*^-q=[%5U");
      assertEquals("      ...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("w@!+?Ngp*^-q=[%5U", (-1), 271);
      assertEquals("U", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("      ...", "      ...");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 116);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.substringAfter("Comparator should not be null.", "@)<u:04 kW");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "      ...", 116, 116);
      assertEquals("", string5);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern("-", "Minimum abbreviation width is %d");
      assertEquals("-", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, "-", 116, (-1));
      assertEquals("", string7);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.joinWith("fCGx8R>vrTj~*oPt", charSequenceArray0);
      assertEquals("      ...fCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPtfCGx8R>vrTj~*oPt      ...", string8);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.stripStart("", "...");
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      
      int int2 = StringUtils.compare((String) null, "Comparator should not be null.", true);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'r';
      charArray0[2] = 'D';
      charArray0[3] = 'N';
      charArray0[4] = '[';
      String string10 = StringUtils.join(charArray0, '[');
      assertEquals("~[r[D[N[[", string10);
      assertEquals(5, charArray0.length);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertArrayEquals(new char[] {'~', 'r', 'D', 'N', '['}, charArray0);
      assertNotNull(string10);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "~[r[D[N[[", 271);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(1, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("?xx", "Locale must not be null", "U@Gr[&6$3r!q9aVxe:s");
      assertEquals("?xx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "U@Gr[&6$3r!q9aVxe:s");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.removeIgnoreCase("\r", ")zD");
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.compare("g,-_HJaX}$veS\"1-Y~k", "j:?TPKgt");
      assertEquals((-3), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.unwrap((String) null, '2');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("U@Gr[&6$3r!q9aVxe:s", "      ...");
      assertEquals("      ...U@Gr[&6$3r!q9aVxe:s      ...", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "p{InCombiningDiacriticalMarks}+", (char[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("t6slUMU)o! ,.`V", 'X');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "");
      assertEquals(30, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Failed to delete temp directory ", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.truncate("Failed to delete temp directory ", 409, 1114111);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = new Locale("{L");
      assertEquals("{l", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("{l", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("Comparator should not be null.");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrap(" /]", '1');
      assertEquals("1 /]1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) " /]", (CharSequence) "");
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "f", (-1043), 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1043
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[2], charSequenceArray0[3]);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, "PU'N7$>2j4,UNN_JI-");
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              search and replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("HT0\"^LYnO;JlF;72,", "              5              Minimum abbreviation width with offset is %d");
      assertEquals("HT0\"^LYnO;JlF;72,", string4);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("HT0\"^LYnO;JlF;72,", '_');
      assertEquals("_HT0\"^LYnO;JlF;72,_", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", (String) null, 1747);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((String) null);
      assertTrue(boolean0);
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("Search and Replace array lengths don't match: "));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.trimToEmpty("Je0]=y<&K");
      assertEquals("Je0]=y<&K", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'T');
      assertNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.rightPad("{:jf$OYF", 4849, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("5", 0);
      assertEquals("5", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "5";
      stringArray0[2] = "";
      stringArray0[3] = "5";
      stringArray0[4] = "5";
      stringArray0[5] = "5";
      stringArray0[6] = "";
      stringArray0[7] = "5";
      stringArray0[8] = "5";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("5", string3);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "5");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.substringBefore("5", "5");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("", (String) null, 0, 10);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.strip("*");
      assertEquals("*", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[4] = '-';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'b', 'b', '\u0000', '-'}, charArray0);
      
      String string1 = StringUtils.upperCase("*");
      assertEquals("*", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("D", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "E");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("*");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringAfter("#xffeJ}/p(/dN", "");
      assertEquals("#xffeJ}/p(/dN", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("              5              Search and Replace array lengths don't match: ");
      assertEquals(36, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.trimToEmpty("AJ4-i|/XqF`(");
      assertEquals("AJ4-i|/XqF`(", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("offset cannot be negative", (-1284));
      assertEquals("offset cannot be negative", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("`EfI) e", 'V');
      assertEquals("V`EfI) eV", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripStart("offset cannot be negative", "EThreshold must not be negative");
      assertEquals("ffset cannot be negative", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = "~|X;qt;;$LEv";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("~|X;qt;;$LEv", "~|X;qt;;$LEv", "~|X;qt;;$LEv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      boolean boolean0 = StringUtils.isAlphanumericSpace("t6slUMU)o! ,.`V");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "t6slUMU)o! ,.`V", 'B');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("bn}iq,('V$?", "t6slUMU)o! ,.`V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "bn}iq,('V$?", "QT:Q5\"(jNJX98K)");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8");
      assertEquals("bn}iq,('V$?", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("IG+J9hg|slm", (String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = "\r";
      String string1 = " vs ";
      String string2 = StringUtils.removeEnd("\r", " vs ");
      assertEquals("\r", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string3 = "}Si'.O77";
      String string4 = StringUtils.substringAfterLast("}Si'.O77", "\r");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.ordinalIndexOf("\r", "", 14);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("}Si'.O77", 14, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = new Object[7];
      boolean boolean0 = arrayList0.add((Object) "Q=64uT;eI/1k:~t#|_G");
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Q=64uT;eI/1k:~t#|_G"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      boolean boolean1 = arrayList0.add((Object) "Q=64uT;eI/1k:~t#|_G");
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("Q=64uT;eI/1k:~t#|_G"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      objectArray0[5] = (Object) "Q=64uT;eI/1k:~t#|_G";
      objectArray0[6] = (Object) "Q=64uT;eI/1k:~t#|_G";
      Object[] objectArray1 = arrayList0.toArray(objectArray0);
      assertTrue(arrayList0.contains("Q=64uT;eI/1k:~t#|_G"));
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(objectArray1);
      
      String string0 = StringUtils.join((List<?>) arrayList0, "Q=64uT;eI/1k:~t#|_G", (-603), (-603));
      assertEquals("", string0);
      assertTrue(arrayList0.contains("Q=64uT;eI/1k:~t#|_G"));
      assertFalse(arrayList0.contains((-603)));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-603));
      assertEquals(0, int0);
      
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = arrayList0.containsAll(linkedHashSet0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("Q=64uT;eI/1k:~t#|_G"));
      assertFalse(arrayList0.contains((-603)));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      String[] stringArray0 = StringUtils.split("", '\"');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 468, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\"', (-1), 305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeStart("\r", "");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cann", 'd');
      assertEquals("maxWith cann", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("maxWith cann", " ");
      assertEquals("maxWith", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("<$M1p(,dedF;v", 37);
      assertEquals("            <$M1p(,dedF;v            ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("maxWith cann", "");
      assertEquals("maxWith cann", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "maxWith cann", "            <$M1p(,dedF;v            ");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.split("maxWith cann");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.center("maxWith", 7, "Z*bd#");
      assertEquals("maxWith", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "            <$M1p(,dedF;v            ", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringAfterLast("maxWith cann", "maxWith cann");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "9RH|r'Iq@# c@!dBbO");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((List<?>) null, 'U', (-1), (-1345));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.unwrap("5", 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("5", 29);
      assertEquals("              5              ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("5", "5");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("              5              ", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d              5              Minimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.replacePattern("Minimum abbreviation width with offset is %d              5              Minimum abbreviation width with offset is %d", " is not in the range '0' - '9'", "1");
      assertEquals("Minimum abbreviation width with offset is %d              5              Minimum abbreviation width with offset is %d", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceEach("ste!t2.=w6v", stringArray0, stringArray0);
      assertEquals("ste!t2.=w6v", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" is not in the range '0' - '9'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank(charSequenceArray0[0]);
      assertTrue(boolean2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\n", "\n", 262);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "5", 32);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "M#24]<$M1p(,dedF;v", " vs ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) " vs ", 13);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripToNull("^13j64H^qt%hQNrB'J0");
      assertEquals("^13j64H^qt%hQNrB'J0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("RepeatFailedTestExtension", "M#24]<$M1p(,dedF;v");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // M#24]<$M1p(,dedF;v
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'v');
      assertEquals("<$M1p(,dedF;", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      String string1 = StringUtils.abbreviate(",pp_", "<$M1p(,dedF;v", 3207);
      assertEquals(",pp_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 1, " vs ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(9, stringArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v', 'v'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-854);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)8;
      String string3 = StringUtils.join(shortArray0, 'v');
      assertEquals("-854v2v8", string3);
      assertEquals(3, shortArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short) (-854), (short)2, (short)8}, shortArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("|SkZ T:3", "offset cannot be negative", ",pp_");
      assertEquals("|SkZ T:3", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "...");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("ePAr`=z!D]gQ}", "...", 11, 11);
      assertEquals("...=z!D]gQ}", string2);
      assertNotNull(string2);
      
      String string3 = "NDQau}[P?pZ1Q-w";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("NDQau}[P?pZ1Q-w").when(supplier0).get();
      String string4 = StringUtils.getIfBlank((String) null, supplier0);
      assertEquals("NDQau}[P?pZ1Q-w", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "yTSh{O/8`mt4c");
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string3));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Search and Replace array lengths don't match: ", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$O5Nes(se=pR /Q2IB@#}0", "6", "6");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap("#5>kM;LhQ~Z", (String) null);
      assertEquals("#5>kM;LhQ~Z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("\r", (String) null, "\r");
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '3');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type Map.Entry nor an Array", (String) null);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("$O5Nes(se=pR /Q2IB@#}0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.normalizeSpace("5A$V+");
      assertEquals("5A$V+", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Dy[]`g[SU p'_j.SM.D", (String) null);
      assertEquals("Dy[]`g[SU p'_j.SM.D", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Dy[]`g[SU p'_j.SM.D");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.abbreviate("IN0c.", 1389, 1120);
      assertEquals("IN0c.", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string6 = StringUtils.replaceEach("              5              Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertEquals("              5              Search and Replace array lengths don't match: ", string6);
      assertEquals(9, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "              5              Search and Replace array lengths don't match: ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.join((double[]) null, 'C');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("{16A#4%9#urUu@u@MY*", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "^13j64H^");
      assertEquals("^13j64H^\n^13j64H^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.replacePattern("\n", "Backup", "\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("0#1YLnuc;/M", stringArray0, stringArray0);
      assertEquals("0#1YLnuc;/M", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("M@^^'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("Backup");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "0#1YLnuc;/M");
      assertNull(stringArray1);
      
      String string4 = StringUtils.replaceAll("M@^^'", "\n", "Arguments cannot both be null");
      assertEquals("M@^^'", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.removeEnd("<$M@p~,dedF;v", "<$M@p~,dedF;v");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.overlay("<$M@p~,dedF;v", (String) null, 25, 3848);
      assertEquals("<$M@p~,dedF;v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "<$M@p~,dedF;v", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string2 = StringUtils.trimToEmpty("<$M@p~,dedF;v");
      assertEquals("<$M@p~,dedF;v", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank("<$M@p~,dedF;v");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char char0 = 'm';
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string2 = StringUtils.truncate("Comparator should not be null.", 1, 1114111);
      assertEquals("omparator should not be null.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      Locale locale0 = new Locale("Backup");
      assertEquals("", locale0.getISO3Country());
      assertEquals("backup", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("backup", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string3 = " /]";
      String[] stringArray1 = StringUtils.split(" /]");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'm');
      assertEquals("mSearch and Replace array lengths don't match: m", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "mSearch and Replace array lengths don't match: m");
      assertEquals(48, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, (String) null, 0, 1586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("??*J8Dc,P;:6", "M#24]");
      assertEquals((-46), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = StringUtils.getDigits("??*J8Dc,P;:6");
      assertEquals("86", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("M#24]");
      assertEquals("M#24]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("86", "86", 1592);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertNotNull(locale1);
      
      Locale locale2 = Locale.US;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("en_US", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("US", locale2.getCountry());
      assertNotNull(locale2);
      
      String string3 = StringUtils.left(";TiBo-uqqHWF", 422);
      assertEquals(";TiBo-uqqHWF", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("...Search and Replace array lengths don't match: ", locale2);
      assertEquals("...SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string4);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("USA", locale2.getISO3Country());
      assertEquals("en_US", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("US", locale2.getCountry());
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, (-1), ".+3o[A72r=7");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.rightPad((String) null, 3766, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      assertEquals("!nCL$t1JW0(d:a:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "!ncl$t1jw0(d:a:", "+l!");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("!ncl$t1jw0(d:a:");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.stripStart("Threshold must not be negative", (String) null);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Failed to delete temp directory ", "Threshold must not be negative", (-1464));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "offset cannot be negativejIl, B1$_B'");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.unwrap("", "Strings must not be null");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = '2';
      charArray0[2] = '0';
      charArray0[3] = 'k';
      charArray0[4] = 'H';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = '2';
      charArray0[8] = '0';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'l', '2', '0', 'k', 'H', 'D', 'D', '2', '0'}, charArray0);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.strip("maxWith cann", " ");
      assertEquals("maxWith cann", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("maxWith cann", (-1748));
      assertEquals("maxWith cann", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '3';
      String string2 = StringUtils.truncate("maxWith cann", 8, 8);
      assertEquals("cann", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = new Locale("Backup");
      assertEquals("backup", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("backup", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("}c@kh{ku*^cu");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrap("", '/');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cann", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(40, int0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, " ", 1114111, 1);
      assertEquals("", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd(" ", "...");
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cann", (CharSequence) " /]", 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.truncate("+AK4t", 3, 3);
      assertEquals("4t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("4t");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "+AK4t", (CharSequence) "4t");
      assertEquals(0, int0);
      
      byte[] byteArray0 = StringUtils.getBytes("b7-x2~Ch)kiK>3*fXU\r\r", (Charset) null);
      assertEquals(20, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("6");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("6", "6");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("6", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 'D';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      charArray0[5] = 'm';
      charArray0[7] = '~';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "6", charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'s', 's', 'D', 'm', 'w', 'm', '\u0000', '~'}, charArray0);
      
      String string3 = StringUtils.truncate("Pdciz)", 0, 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.repeat("6", 3336);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("", " vs ", 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string4, (CharSequence) "6", (int) 'm');
      assertEquals(109, int1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "\n");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: ", 'N');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      Locale locale0 = new Locale("Search and Replace array lengths don't match: ");
      assertEquals("search and replace array lengths don't match: ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("search and replace array lengths don't match: ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("`QtUECJf]=3[_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrap("Vtr(ttL}cM){u", '4');
      assertEquals("4Vtr(ttL}cM){u4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "`QtUECJf]=3[_");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "4Vtr(ttL}cM){u4", 13, 13);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("", (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ", 13);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("O]HqsQi5eG|Ve/{+q7");
      assertEquals("O]HqsQi5eG|Ve/{+q7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("O]HqsQi5eG|Ve/{+q7", 9992);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "O]HqsQi5eG|Ve/{+q7", (CharSequence) string2);
      assertEquals(0, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "O]HqsQi5eG|Ve/{+q7", 4);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join(objectArray0, '+', 21, 4);
      assertEquals("", string3);
      assertEquals(5, objectArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-8), 't');
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '*';
      String string1 = StringUtils.join(charArray0, '^');
      assertEquals("t^t^*", string1);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", "3\"5v2IR!n53+*j");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "t^t^*", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "t^t^*", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.stripStart("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int3 = StringUtils.compareIgnoreCase("5", "|su%}d*?Q*N", false);
      assertEquals((-71), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.replace("AfU/F0]v\";\"", "", "org.junitpioneer.jupiter.params.IntRange", 0);
      assertEquals("AfU/F0]v\";\"", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("The Array must not be null", 48, '8');
      assertEquals("88888888888The Array must not be null88888888888", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing((String) null, "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$O5Nes(se=pR /Q2IB@#}0", "6", "6");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBefore("6", "5");
      assertEquals("6", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("1@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 35);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("6", "?xU6");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("5", " ", "org.apache.commons.lang3.Charsets");
      assertEquals("5", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "5", (CharSequence) "?xU6");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.stripToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.chop("$O5Nes(se=pR /Q2IB@#}0");
      assertEquals("$O5Nes(se=pR /Q2IB@#}", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNotBlank("$O5Nes(se=pR /Q2IB@#}");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.difference("i\"Zs9", (String) null);
      assertEquals("i\"Zs9", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("?xU6", "i\"Zs9");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "1@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals(0.67, double0, 0.01);
      
      String string8 = StringUtils.trimToNull((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.join((double[]) null, '\\');
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.difference("I55[Uz~!$<$2*JeA3t(", (String) null);
      assertEquals("I55[Uz~!$<$2*JeA3t(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 11);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("\n\";z;_;9;;", "");
      assertEquals("\n\";z;_;9;;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("\n\";z;_;9;;");
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      String string4 = treeSet0.floor("");
      assertFalse(treeSet0.contains(""));
      assertNull(string4);
      
      String string5 = StringUtils.join((Iterable<?>) stack0, 'd');
      assertEquals("", string5);
      assertFalse(stack0.contains(""));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.center("Extension context \"\n", 5, "Extension context \"\n");
      assertEquals("Extension context \"\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'g', 12, (-2815));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("cy", "cy", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, "M#24]", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compare("'N7$>2j4", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("maxWith cannot be negative", " _}6[rvN<a2L");
      assertEquals(" _}6[rvN<a2LmaxWith cannot be negative _}6[rvN<a2L", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("^5$Xph@^5$Xph@", '!');
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.repeat("^5$Xph@^5$Xph@", 1);
      assertEquals("^5$Xph@^5$Xph@", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfAny("M#24]", stringArray1);
      assertEquals((-1), int2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(stringArray1, stringArray0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "^5$Xph@^5$Xph@", (CharSequence) "maxWith cannot be negative", 1);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = 'k';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) " _}6[rvN<a2LmaxWith cannot be negative _}6[rvN<a2L", charArray0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'!', '!', '!', 'k', '!', '!', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("Search and Replace array lengths don't match: "));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.repeat("Search and Replace array lengths don't match: ", 1);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.capitalize(";Bjqhqy@aeQ0vsuPpzv");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[1] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[2] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[3] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[4] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[5] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[6] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      charSequenceArray0[7] = (CharSequence) ";Bjqhqy@aeQ0vsuPpzv";
      boolean boolean0 = StringUtils.startsWithAny(";Bjqhqy@aeQ0vsuPpzv", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) ";Bjqhqy@aeQ0vsuPpzv");
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertFalse(boolean2);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      String string1 = StringUtils.abbreviate(",pp_", "<$M1p(,dedF;v", 3207);
      assertEquals(",pp_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 0, " vs ");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(9, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringAfterLast("org.junitpioneer.jupiter.params.RangeSourceProvider", ",pp_");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.strip((String) null, "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'a';
      charArray0[2] = '5';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertSame(classLoader0, classLoader2);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.load(class1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", ", Length: 0");
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate("wFUAO*hXs*t@}-}", 18);
      assertEquals("wFUAO*hXs*t@}-}", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "wFUAO*hXs*t@}-}";
      charSequenceArray0[1] = (CharSequence) ", Length: 0";
      String string3 = StringUtils.replaceChars("GhTq1dAUz$$8e|T", (String) null, "?C`/7");
      assertEquals("GhTq1dAUz$$8e|T", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "GhTq1dAUz$$8e|T";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("              5              Search and Replace Erray lengths don't match: ", "              5              Search and Replace Erray lengths don't match: ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.upperCase("              5              Search and Replace Erray lengths don't match: ");
      assertEquals("              5              SEARCH AND REPLACE ERRAY LENGTHS DON'T MATCH: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.substringBetween("$O5Nes(se=pR /Q2IB@#}0", "6", "6");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("5", '.');
      assertEquals(".5.", string1);
      assertNotNull(string1);
      
      Locale locale0 = new Locale("S");
      assertEquals("", locale0.getISO3Country());
      assertEquals("s", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("s", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(locale1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = locale1.getDisplayScript(locale0);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("s", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("s", locale0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(string2);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("s", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("s", locale0.toString());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale0));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Locale locale2 = (Locale)locale0.clone();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("s", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("s", locale0.toString());
      assertEquals("s", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("s", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotNull(locale2);
      
      String string3 = "b]}kig=xXf!3-|F#}zIDu=!(f#vS$e5N[~*o`";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 2399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=2399.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "<Ft(/]");
      assertEquals("<Ft(/]<Ft(/]<Ft(/]", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("<Ft(/]<Ft(/]<Ft(/]", "<Ft(/]", 1);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Extension context \"");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("org.junitpioneer.jupiter.TempDirectory", 1404);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWith("Extension context \"", "i\"Zs9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      StringUtils.deleteWhitespace(string0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.center("Failed to delete temp directory ", 59, "Failed to delete temp directory ");
      assertEquals("Failed to delFailed to delete temp directory Failed to dele", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("zR\"jZC%U5#^`-De", "<$M1p(,dedF;v");
      assertEquals("zR\"jZC%U5#^`-De", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Failed to delete temp directory ", "zR\"jZC%U5#^`-De");
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Failed to delete temp directory "));
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertFalse(treeSet0.contains("Failed to delete temp directory "));
      assertFalse(priorityQueue0.contains("Failed to delete temp directory "));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("zR\"jZC%U5#^`-De");
      assertTrue(boolean1);
      assertFalse(treeSet0.contains("Failed to delete temp directory "));
      assertTrue(priorityQueue0.contains("zR\"jZC%U5#^`-De"));
      assertFalse(priorityQueue0.contains("Failed to delete temp directory "));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      assertFalse(priorityQueue1.contains("Failed to delete temp directory "));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      
      boolean boolean2 = priorityQueue1.add("");
      assertTrue(boolean2);
      assertTrue(priorityQueue1.contains(""));
      assertFalse(priorityQueue1.contains("Failed to delete temp directory "));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      
      boolean boolean3 = treeSet0.add("Failed to delete temp directory ");
      assertTrue(boolean3);
      assertTrue(treeSet0.contains("Failed to delete temp directory "));
      assertFalse(treeSet0.contains("zR\"jZC%U5#^`-De"));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string2 = treeSet0.floor("");
      assertTrue(treeSet0.contains("Failed to delete temp directory "));
      assertFalse(treeSet0.contains("zR\"jZC%U5#^`-De"));
      assertNull(string2);
      
      String string3 = StringUtils.join((Iterable<?>) treeSet0, 'c');
      assertEquals("Failed to delete temp directory ", string3);
      assertTrue(treeSet0.contains(string3));
      assertFalse(treeSet0.contains("zR\"jZC%U5#^`-De"));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviate("", "<Ft(/]**", 55);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isMixedCase("zR\"jZC%U5#^`-De");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.center("5C#_C::RYBGGuD", 59, "5C#_C::RYBGGuD");
      assertEquals("5C#_C::RYBGGuD5C#_C::R5C#_C::RYBGGuD5C#_C::RYBGGuD5C#_C::RY", string0);
      assertNotNull(string0);
      
      String string1 = "zR\"jZC%U5#^`-De";
      String string2 = StringUtils.substringBeforeLast("zR\"jZC%U5#^`-De", "<$M1p(,dedF;v");
      assertEquals("zR\"jZC%U5#^`-De", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("5C#_C::RYBGGuD", "zR\"jZC%U5#^`-De");
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("<$M1p(,dedF;v"));
      assertNotNull(treeSet0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("zR\"jZC%U5#^`-De", "\r", 4);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((String) null);
      assertTrue(boolean1);
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(boolean1 == boolean0);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      boolean boolean2 = stack0.add("Failed to delete temp directory ");
      assertTrue(boolean2);
      assertTrue(stack0.contains("Failed to delete temp directory "));
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null, Failed to delete temp directory ]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertTrue(stack0.contains("Failed to delete temp directory "));
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null, Failed to delete temp directory ]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "1HivVVOkw~H$ K!fP");
      assertEquals("1HivVVOkw~H$ K!fPFailed to delete temp directory ", string3);
      assertTrue(stack0.contains("Failed to delete temp directory "));
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null, Failed to delete temp directory ]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string3);
      
      String string4 = "y>7x-Lvl7kg\"r2JH<N";
      String string5 = StringUtils.trimToEmpty("\r");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[12];
      charSequenceArray0[0] = (CharSequence) "Failed to delete temp directory ";
      String string6 = StringUtils.replace("bS8>KCqg;)q9m_", "qbi\"&#i~n\"y4", " 4Q[A6s2#;]xbqP");
      assertEquals("bS8>KCqg;)q9m_", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "bS8>KCqg;)q9m_";
      charSequenceArray0[2] = (CharSequence) "y>7x-Lvl7kg\"r2JH<N";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfAny((CharSequence) "Failed to delete temp directory ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(12, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern(" 4Q[A6s2#;]xbqP", "**");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // **
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertTrue(boolean0);
      
      String string0 = "5]tPL";
      String string1 = "Timeout";
      String string2 = StringUtils.center("Timeout", 39, 'L');
      assertEquals("LLLLLLLLLLLLLLLLTimeoutLLLLLLLLLLLLLLLL", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("!nCL$t1JW0(d:a:", 'L');
      assertEquals("!nC$t1JW0(d:a:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Timeout");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("Timeout", stringWriter0.toString());
      assertEquals("Timeout", stringWriter1.toString());
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('e');
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      assertEquals("Timeoute", stringWriter0.toString());
      assertEquals("Timeoute", stringWriter1.toString());
      assertEquals("Timeoute", stringWriter2.toString());
      assertNotNull(stringWriter2);
      
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) null, 64, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("M#24]<$M1p(,dedF;v", "5", "XYO>2p+");
      assertEquals("M#24]<$M1p(,dedF;v", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("XYO>2p+", "5");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween("XYO>2p+", "M#24]<$M1p(,dedF;v");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "?FZgd#7d5Cxa3sU{D", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ExpectedExceptionoffset cannot be negative", "5");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.toRootLowerCase("M#24]<$M1p(,dedF;v");
      assertEquals("m#24]<$m1p(,dedf;v", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonEmpty(stringArray1);
      assertEquals("ExpectedExceptionoffset cannot be negative", string5);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string5);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 'd';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      String string6 = StringUtils.join(longArray0, '>');
      assertEquals("-1>111>-1>0>100>-1>0>-1>-1", string6);
      assertEquals(9, longArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), 111L, (-1L), 0L, 100L, (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("ePAr`=z!D]gQ}", "...", 11, 11);
      assertEquals("...=z!D]gQ}", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("NDQau}[P?pZ1Q-w").when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertEquals("NDQau}[P?pZ1Q-w", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("ExceptionWasThrown", "yTSh{O/8`mt4c");
      assertEquals("ExceptionWasThrown", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("...", "IhNAv4iXTsEpx{0Z");
      assertEquals("...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("...=z!D]gQ}", '$', '$');
      assertEquals("...=z!D]gQ}", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...=z!D]gQ}", 56);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.defaultString("org.junitpioneer.jupiter.params.ByteRange", "_j/");
      assertEquals("org.junitpioneer.jupiter.params.ByteRange", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "yTSh{O/8`mt4c", (CharSequence) "yTSh{O/8`mt4c");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.center("...", (-1), '$');
      assertEquals("...", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("org.junitpioneer.jupiter.params.ByteRange", "Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %dorg.junitpioneer.jupiter.params.ByteRangeMinimum abbreviation width is %d", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %dorg.junitpioneer.jupiter.params.ByteRangeMinimum abbreviation width is %d", (CharSequence) "IhNAv4iXTsEpx{0Z", (-1391));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (-1391), (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      String string9 = StringUtils.stripToNull("7U*");
      assertEquals("7U*", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.getDigits("<$M1p(,dedF;v");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("<$M1p(,dedF;v");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'N';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "1", charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'8', 'N'}, charArray0);
      
      Vector<String> vector0 = new Vector<String>();
      assertFalse(vector0.contains("<$M1p(,dedF;v"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, " vs ", 1250, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1250) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      String string0 = StringUtils.join(byteArray0, '6', (int) (byte)0, (int) (byte) (-87));
      assertEquals("", string0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)108}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)108;
      shortArray0[1] = (short) (byte)108;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)108;
      shortArray0[6] = (short) (byte) (-87);
      shortArray0[7] = (short) (byte) (-87);
      String string2 = StringUtils.join(shortArray0, 's', (int) (short)0, (int) (short)0);
      assertEquals("", string2);
      assertEquals(8, shortArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new short[] {(short)108, (short)108, (short)0, (short)0, (short)0, (short)108, (short) (-87), (short) (-87)}, shortArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "Fx[lbO%Nj_t99${R]*");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.replaceAll("yn{3cfG).u[`'Vr..", "Fx[lbO%Nj_t99${R]*", ":,, 9(|Q~n3zEMs5}V");
      assertEquals("yn{3cfG).u[`'Vr..", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference((String) null, " is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9'", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "r7P_{F2N<2&7Eu-", "r7P_{F2N<2&7Eu-");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", (int) (short)108);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("fT2*(N");
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) '7';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) '7';
      doubleArray0[6] = (double) 1093;
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1093);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("K9id9Ys*JvDN5(8{;}6");
      assertEquals("K9id9Ys*JvDN5(8{;}6", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "K9id9Ys*JvDN5(8{;}6", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "K9id9Ys*JvDN5(8{;}6", (CharSequence) "K9id9Ys*JvDN5(8{;}6", 101);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failedto delete tempdirectory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Threshold must not be negative", (-13));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY", "cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripToNull("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      String string5 = StringUtils.chop("hzVlz=g.2b#NB/HxvD");
      assertEquals("hzVlz=g.2b#NB/Hxv", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank(",");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.difference("Threshold must not be negative", "', has a length less than 2");
      assertEquals("', has a length less than 2", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("Threshold must not be negative", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("codefx", "\" should have a parent context.");
      assertEquals(0.53, double0, 0.01);
      
      String string7 = StringUtils.trimToNull("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-13);
      doubleArray0[1] = (double) (-13);
      doubleArray0[2] = (double) 0;
      String string8 = StringUtils.join(doubleArray0, '!');
      assertEquals("-13.0!-13.0!0.0", string8);
      assertEquals(3, doubleArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertArrayEquals(new double[] {(-13.0), (-13.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.substringBefore("7BkV", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("jIl, B1$_B'", "offset cannot be negative");
      assertEquals("offset cannot be negativejIl, B1$_B'offset cannot be negative", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\u0005~ts\"I./8L,!Jg{ct", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b[@a!+&<'P;Wt", '!');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "b[@a!+&<'P;Wt", (-35), (-935));
      assertEquals("", string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("rF", "b[@a!+&<'P;Wt");
      assertEquals("rF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("A)}5", 28, "offset cannot be negativejIl, B1$_B'offset cannot be negative");
      assertEquals("A)}5offset cannot be negativ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("A)}5");
      assertEquals("5", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.center("d&S%*>Za0o", 24, "d&S%*>Za0o");
      assertEquals("d&S%*>Zd&S%*>Za0od&S%*>Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("6");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("6", "6");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("6", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 'D';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      charArray0[5] = 'm';
      charArray0[6] = 'D';
      charArray0[7] = '~';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "6", charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'s', 's', 'D', 'm', 'w', 'm', 'D', '~'}, charArray0);
      
      String string3 = StringUtils.truncate("Pdciz)", 0, 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6", (CharSequence) "6");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.repeat("6", 3336);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("", " vs ", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) string4, (CharSequence) "6", 0);
      assertEquals(0, int2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-8), 't');
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = '*';
      String string1 = StringUtils.join(charArray0, '^');
      assertEquals("t^t^*", string1);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", "3\"5v2IR!n53+*j");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "t^t^*", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'t', 't', '*'}, charArray0);
      
      String string3 = StringUtils.repeat('F', (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "t^t^*", (-1));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.stripStart("", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int3 = StringUtils.compareIgnoreCase("5", "|su%}*?Q*N", false);
      assertEquals((-71), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBetween(" ", "?FZgd#7d5Cxa3sU{D");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "", (-8));
      assertEquals((-1), int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "?FZgd#7d5Cxa3sU{D");
      assertNull(stringArray0);
      
      String string6 = StringUtils.toRootLowerCase("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) '*';
      String string8 = StringUtils.join(longArray0, 'o');
      assertEquals("0o42", string8);
      assertEquals(2, longArray0.length);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertArrayEquals(new long[] {0L, 42L}, longArray0);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Zu1B");
      assertEquals("Zu1B1u1u1BB1u1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.rightPad("3+S.R.", 5584, 'd');
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("maxWith cannot be negative", "Y06^\"lchZ");
      assertEquals((-12), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) (-12);
      longArray0[2] = (long) 5584;
      longArray0[3] = (long) (-12);
      longArray0[4] = (long) 'd';
      longArray0[5] = (long) 'd';
      longArray0[6] = (long) 4100;
      String string1 = StringUtils.join(longArray0, '|');
      assertEquals("100|-12|5584|-12|100|100|4100", string1);
      assertEquals(7, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {100L, (-12L), 5584L, (-12L), 100L, 100L, 4100L}, longArray0);
      assertNotNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "maxWith cannot be negative");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      String string2 = StringUtils.getDigits(" 9S");
      assertEquals("9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string0);
      
      String string1 = "/t";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("/t");
      assertFalse(boolean0);
      
      String string3 = "gm1gVc";
      String string4 = StringUtils.replaceAll((String) null, "", "p{InCombiningDiacriticalMarks}+");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = "";
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("p{InCombiningDiacriticalMarks}+"));
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        treeSet0.headSet((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad("\r", 8183, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.swapCase("org.apache.common.lang3Charsets");
      assertEquals("ORG.APACHE.COMMON.LANG3cHARSETS", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("ORG.APACHE.COMMON.LANG3cHARSETS", "org.apache.common.lang3Charsets");
      assertEquals(0.41, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      charSequenceArray0[1] = (CharSequence) "t6slUMU)o! ,.`V";
      String string1 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "t6slUMU)o! ,.`V", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "t6slUMU)o! ,.`V";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray1);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains('f'));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean2 = stack0.add((Object) charSequenceArray0[1]);
      assertTrue(boolean2);
      assertTrue(stack0.contains("t6slUMU)o! ,.`V"));
      assertFalse(stack0.contains('f'));
      assertEquals(2, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals("[t6slUMU)o! ,.`V]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertTrue(stack0.contains("t6slUMU)o! ,.`V"));
      assertFalse(stack0.contains('f'));
      assertEquals("[t6slUMU)o! ,.`V]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join((List<?>) stack0, "org.junitpioneer.jupiter.TempDirectory$CloseablePath", 16, 16);
      assertEquals("", string4);
      assertTrue(stack0.contains("t6slUMU)o! ,.`V"));
      assertFalse(stack0.contains("org.junitpioneer.jupiter.TempDirectory$CloseablePath"));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[t6slUMU)o! ,.`V]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("", "7U*");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, ' ', 7, 2);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0[4], charSequenceArray0);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 222);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 21;
      String string2 = StringUtils.join(floatArray0, 'g', 1491, 1491);
      assertEquals("", string2);
      assertEquals(2, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      assertArrayEquals(new float[] {2.0F, 21.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14{ O(<>#S3>xcr14{ O(<>#S3>XCR14", "");
      assertEquals("w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14w%UAB{ O(<>#S3>xcr14{ O(<>#S3>XCR14{ O(<>#S3>xcr14{ O(<>#S3>XCR14", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string4 = StringUtils.join((List<?>) linkedList0, "Minimum abbreviation width with offset is %d", 2, 2);
      assertEquals("", string4);
      assertFalse(linkedList0.contains(string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, linkedList0.size());
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string1);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("j^z y(", supplier0);
      assertEquals("j^z y(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '$', 1697, 56);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.getDigits("Aacr~S.?oanF]KSb+w8");
      assertEquals("8", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'm', 14, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.capitalize("oJw,1tA<J's..u5L");
      assertEquals("OJw,1tA<J's..u5L", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "OJw,1tA<J's..u5L";
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "codefx", charSequenceArray0[0]);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "g4.nFh+x`JQ)wU4", (CharSequence) "g4.nFh+x`JQ)wU4");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!wS~Eb<Wv!{BtyN'", "codefx", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("oJw,1tA<J's..u5L"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((String) null);
      assertTrue(boolean0);
      assertFalse(stack0.contains("oJw,1tA<J's..u5L"));
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      boolean boolean1 = stack0.add("5Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertTrue(stack0.contains("5Search and Replace array lengths don't match: "));
      assertFalse(stack0.contains("oJw,1tA<J's..u5L"));
      assertTrue(boolean1 == boolean0);
      assertEquals("[null, 5Search and Replace array lengths don't match: ]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("5Search and Replace array lengths don't match: "));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      boolean boolean2 = stack1.add((String) null);
      assertTrue(boolean2);
      assertFalse(stack1.contains("5Search and Replace array lengths don't match: "));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[null]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("5Search and Replace array lengths don't match: "));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[null]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("oJw,1tA<J's..u5L", 'X');
      assertEquals("oJw,1tA<J's..u5L", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (-3767));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "RepeatFailedTestExtension", 1119);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("-20?q5y0p'", "Cannot clear and set the following system properties at the same time: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("Ih", "NAv4iXTsEpx{0Z");
      assertEquals("NAv4iXTsEpx{0ZIhNAv4iXTsEpx{0Z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.replacePattern("NAv4iXTsEpx{0ZIhNAv4iXTsEpx{0Z", "\n", "Thr");
      assertEquals("NAv4iXTsEpx{0ZIhNAv4iXTsEpx{0Z", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach("NAv4iXTsEpx{0Z", stringArray0, stringArray0);
      assertEquals("NAv4iXTsEpx{0Z", string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cannot clear and set the following system properties at the same time: ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.center("x*w*", 64, '<');
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<x*w*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("RepeatFailedTestExtension"));
      assertNotNull(treeSet0);
      
      boolean boolean2 = treeSet0.add("NAv4iXTsEpx{0ZIhNAv4iXTsEpx{0Z");
      assertTrue(boolean2);
      assertTrue(treeSet0.contains(string1));
      assertFalse(treeSet0.contains("RepeatFailedTestExtension"));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertFalse(treeSet1.contains("RepeatFailedTestExtension"));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      String string4 = treeSet1.floor("Search and Replace array lengths don't match: ");
      assertFalse(treeSet1.contains("RepeatFailedTestExtension"));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNull(string4);
      
      String string5 = StringUtils.join((Iterable<?>) treeSet1, 'c');
      assertEquals("", string5);
      assertFalse(treeSet1.contains("RepeatFailedTestExtension"));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.abbreviate(")^}2XPvjP7", "", 0);
      assertEquals(")^}2XPvjP7", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOf((CharSequence) "RepeatFailedTestExtension", 1119);
      assertEquals((-1), int0);
      
      String string0 = "-20?q5y0p'";
      String[] stringArray1 = StringUtils.split("J+2", "{<ipDJO0");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "Cannot clear and set the following system properties at the same time: ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      
      String string2 = StringUtils.replacePattern((String) null, "(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW@QWBu}", "(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW@QWBu}");
      assertNull(string2);
      
      String string3 = StringUtils.replaceEach("Cannot clear and set the following system properties at the same time: ", stringArray1, stringArray1);
      assertEquals("Cannot clear and set the following system properties at the same time: ", string3);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("]?EAR,)|>}vWh-", (String) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = "x*w*";
      String string6 = StringUtils.center("-20?q5y0p'", (-1), '<');
      assertEquals("-20?q5y0p'", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string7 = StringUtils.rotate("Ih", (-1));
      assertEquals("hI", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW@QWBu}", "-20?q5y0p'", ".0CKTd,}jfG");
      assertEquals("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW@QWBu}", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "Cannot clear and set the following system properties at the same time: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.removeEndIgnoreCase("<$M1p(,dedF;v", "GB_S/N04(.");
      assertEquals("<$M1p(,dedF;v", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("<$M1p(,dedF;v", stringArray0[0]);
      assertEquals("<$M1p(,dedF;v", string2);
      assertEquals(9, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("<$M1p(,dedF;v", (String) null);
      assertEquals("<$M1p(,dedF;v", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("h $Y<We2/M;D&t+lOa");
      assertEquals("H $Y<We2/M;D&t+lOa", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween("NAv4iXTsEpx{0Z", "rC%RhuTE", (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'p');
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1971);
      shortArray0[4] = (short) (-155);
      short short0 = (short) (-1936);
      shortArray0[5] = (short) (-1936);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-3210);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'p', (int) (short) (-1936), 446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1936
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.stripStart("%.?yb,[:7xe", "%.?yb,[:7xe");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.replace((String) null, "%.?yb,[:7xe", (String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "%.?yb,[:7xe");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("%.?yb,[:7xe");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.wrap((String) null, 'A');
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("55", '1');
      assertEquals("55", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "55", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 1731);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = "<$M1p(,dedF;v";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "<$M1p(,dedF;v", supplier0);
      assertEquals("<$M1p(,dedF;v", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny("<$M1p(,dedF;v", stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("! -kD9bc", "<$M1p(,dedF;v", stringArray0);
      assertEquals("! -kD9bc<$M1p(,dedF;v", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "<$M1p(,dedF;v", 222);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("\n");
      assertNull(string2);
      
      String string3 = StringUtils.chomp("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("<$M1p(,dedF;v", 1712);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.substringBeforeLast("", "Failed to delete temp directory ");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("\n", (String) null, "offset cannot be negativejIl, B1$_B'");
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("\n^13j64H^", "\n");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("offset cannot be negativejIl, B1$_B'");
      assertEquals("offset cannot be negativejIl, B1$_B", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceOnce("", " is not in the range '0' - '9'", "3#{g/?j");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripToNull((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.stripToNull("^jvw_y5^WDW/akR");
      assertEquals("^jvw_y5^WDW/akR", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, ' ', 7, 2);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0[4], charSequenceArray0);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 222);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("oEb-6H Lh");
      assertEquals("oEb-6H Lh", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 222);
      assertNull(string4);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, " but was: ", true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[3], 7, 83);
      assertEquals((-1), int2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1), (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.swapCase(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Strings must not be null", "Strings must not be null", "Strings must not be null");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Strings must not be null", 'P');
      assertEquals("PStrings must not be nullP", string1);
      assertNotNull(string1);
      
      Locale locale0 = new Locale("PStrings must not be nullP");
      assertEquals("pstrings must not be nullp", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("pstrings must not be nullp", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = locale1.getDisplayScript(locale0);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("pstrings must not be nullp", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("pstrings must not be nullp", locale0.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(string2);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("pstrings must not be nullp", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("pstrings must not be nullp", locale0.getLanguage());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale1));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertNotNull(locale2);
      
      String string3 = "b]}kig=xXf!3-|F#}zIDu=!(f#vS$e5N[~*o`";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Strings must not be null", 2399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=2399.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.leftPad(" ", (-1), "");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("\r", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'a';
      charArray0[2] = '5';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'-', 'a', '5'}, charArray0);
      
      String string0 = StringUtils.upperCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("offset cannot be negative", (-1689));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "offset cannot be negative", (CharSequence) "P~BXdFRP(NKus?Ec");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.abbreviateMiddle("offset cannot be negative", "<$M1p(,dedF;v", '-');
      assertEquals("offset cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("blank_blank_blank_2014");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.rotate("", (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((byte[]) null, 'm', 48, 0);
      assertNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "blank_blank_blank_2014");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean2 = StringUtils.isNotBlank("Threshold must not be negative");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.upperCase("...");
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "OFFSET CANNOT BE NEGATIVE");
      assertEquals(25, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean3);
      assertEquals(3, charArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {'-', 'a', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '<');
      assertEquals("", string2);
      assertEquals(0, byteArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.apache.commons.lang3.CharSequenceUtils", '<');
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[4] = "?xx";
      stringArray0[5] = "WH,'zov{@D0=pg\"d@";
      stringArray0[6] = "?xx";
      stringArray0[7] = "org.apache.commons.lang3.CharSequenceUtils";
      String string4 = StringUtils.replaceEach("Vj)PxXAS}<", stringArray0, stringArray0);
      assertEquals("Vj)PxXAS}<", string4);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Vj)PxXAS}<");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      try { 
        StringUtils.getBytes("O\"DmTaiQy'\"X#if9K@", "org.apache.commons.lang3.CharSequenceUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "e";
      charSequenceArray0[1] = (CharSequence) "e";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.leftPad(".uvqHSpK", (-1491), '@');
      assertEquals(".uvqHSpK", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '@';
      intArray0[1] = (-1491);
      intArray0[2] = (-1491);
      intArray0[3] = (-2619);
      intArray0[4] = (int) '@';
      intArray0[5] = (-1491);
      intArray0[6] = (int) '@';
      intArray0[7] = (-1491);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '2', Integer.MAX_VALUE, (-2619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, ' ', 7, 2);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0[4], charSequenceArray0);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 222);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("oEb-6H Lh");
      assertEquals("oEb-6H Lh", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 222);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.replace("gY", "gY", "gY", 444);
      assertEquals("gY", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("gY", (CharSequence) null, 444);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)62;
      String string1 = StringUtils.join(byteArray0, '.');
      assertEquals("-55.62", string1);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-55), (byte)62}, byteArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "gY";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = (CharSequence) "-55.62";
      charSequenceArray0[7] = (CharSequence) "gY";
      charSequenceArray0[8] = (CharSequence) "-55.62";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBefore(")/U(iP,[Ix_d{VwS54", ")/U(iP,[Ix_d{VwS54");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("hXnaq*C&Yq+qq\"G", "");
      assertEquals("hXnaq*C&Yq+qq\"G", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("hXnaq*C&Yq+qq\"G");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.substringBefore("hXnaq*C&Yq+qq\"G", "GIkz/PC");
      assertEquals("hXnaq*C&Yq+qq\"G", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(")/U(iP,[Ix_d{VwS54", "@QWBu}", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringBefore("", "hXnaq*C&Yq+qq\"G");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("", "@QWBu}", (int) (byte)62, 108);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = "?xx";
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      
      String string3 = StringUtils.truncate("Comparator should not be null.", 1, 1114111);
      assertEquals("omparator should not be null.", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = new Locale("Backup");
      assertEquals("backup", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("backup", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split(" /]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'm');
      assertEquals("mSearch and Replace array lengths don't match: m", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "mSearch and Replace array lengths don't match: m");
      assertEquals(48, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      int int5 = 1;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, (String) null, 0, 1586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^13j64H^\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "\n";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("^13j64H^\n", string3);
      assertEquals(5, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", "(oJ8/$\"2K%cAW", 10);
      assertEquals("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertNotNull(locale3);
      
      String string5 = StringUtils.left("IRx;;oyO.h0vee\f8mG", (-1));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("jIl, B1$_B'", 'I');
      assertEquals("IjIl, B1$_B'I", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^13j64H^\n", "^13j64H^\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.rightPad("3+S.RT.p", 5584, 'd');
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Threshold must not be negative", "cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Threshold must not be negative", 5584);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(string0, "Threshold must not be negative");
      assertEquals("3+S.RT.p", string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripToNull(",");
      assertEquals(",", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3+S.RT.p", (CharSequence) ",");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chop("Threshold must not be negative");
      assertEquals("Threshold must not be negativ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank("3+S.RT.p");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.difference("i\"Zs9", "codefx");
      assertEquals("codefx", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("i\"Zs9", ",");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.trimToNull(string2);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      int int1 = StringUtils.compareIgnoreCase("ta\"cnw8A", ",", true);
      assertEquals(72, int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 'd';
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 'd';
      doubleArray0[7] = (double) 0;
      String string8 = StringUtils.join(doubleArray0, 'd');
      assertEquals("0.0d0.0d0.0d0.0d100.0d0.0d100.0d0.0", string8);
      assertEquals(8, doubleArray0.length);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 100.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string8);
      
      String string9 = StringUtils.replaceFirst("@gwj);", "Threshold must not be negativ", "0.0d0.0d0.0d0.0d100.0d0.0d100.0d0.0");
      assertEquals("@gwj);", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.rightPad("\n", (-1));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.chomp("lSMwK)(Ny7");
      assertEquals("lSMwK)(Ny7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "lSMwK)(Ny7", (CharSequence) "'g,.V0DCm", 4989);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("p]");
      assertEquals("p]", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("p]", "p]", (-4));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("p]");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4);
      intArray0[1] = (-4);
      intArray0[2] = (-4);
      intArray0[3] = 275;
      intArray0[4] = (-4);
      intArray0[5] = (-4);
      intArray0[6] = (-1);
      String string1 = StringUtils.join(intArray0, 'V', (-4), (-2739));
      assertEquals("", string1);
      assertEquals(7, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {(-4), (-4), (-4), 275, (-4), (-4), (-1)}, intArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1354;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)1355;
      shortArray0[3] = (short)46;
      shortArray0[4] = (short) (-673);
      shortArray0[5] = (short)1355;
      Locale locale0 = new Locale("p]");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("p]", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("p]", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.remove("p]", 'V');
      assertEquals("p]", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "p]", 60);
      assertEquals(43, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("KI");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "p]");
      assertEquals(43, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = StringUtils.right("1ac]R3'DH;y$", 31);
      assertEquals("1ac]R3'DH;y$", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '$';
      charArray0[2] = 'S';
      charArray0[3] = '~';
      charArray0[4] = 'S';
      charArray0[5] = 'D';
      charArray0[6] = 'm';
      charArray0[7] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "1ac]R3'DH;y$", charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', '$', 'S', '~', 'S', 'D', 'm', 's'}, charArray0);
      
      String string1 = StringUtils.truncate(";BIj`lG+xV'w\"l", 31, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("d5Y(`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "1ac]R3'DH;y$");
      assertEquals(12, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ";BIj`lG+xV'w\"l", 12, 12);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate(";BIj`lG+xV'w\"l", "d5Y(`", 12);
      assertEquals(";BIj`lGd5Y(`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("qWPh`$FC", "qWPh`$FC", "5,@BN{`D@0K!>TZ@D");
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("qWPh`$FC", '$', '=');
      assertEquals("qWPh`=FC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("!RjH67m#4w1T", "qWPh`=FC", (byte)12, Integer.MAX_VALUE);
      assertEquals("!RjH67m#4w1TqWPh`=FC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("!RjH67m#4w1TqWPh`=FC");
      assertEquals("!RjH67m#4w1TqWPh`=FC", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isWhitespace("!RjH67m#4w1TqWPh`=FC");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("!RjH67m#4w1TqWPh`=FC");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.chomp("r}Ko:2");
      assertEquals("r}Ko:2", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("5,@BN{`D@0K!>TZ@D"));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("5,@BN{`D@0K!>TZ@D"));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "^h<CFWEPUsCm1C\"!");
      assertEquals("", string5);
      assertFalse(stack0.contains("^h<CFWEPUsCm1C\"!"));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("qWPh`$FC");
      assertEquals("qWPh`$FC", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.toRootUpperCase("*~!p%)");
      assertEquals("*~!P%)", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "r}Ko:2";
      charSequenceArray0[1] = (CharSequence) "r}Ko:2";
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = ':';
      charArray0[2] = '=';
      String string8 = StringUtils.join(charArray0, '1');
      assertEquals("=1:1=", string8);
      assertEquals(3, charArray0.length);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertArrayEquals(new char[] {'=', ':', '='}, charArray0);
      assertNotNull(string8);
      
      charSequenceArray0[2] = (CharSequence) "=1:1=";
      charSequenceArray0[3] = (CharSequence) "r}Ko:2";
      charSequenceArray0[4] = (CharSequence) "!RjH67m#4w1TqWPh`=FC";
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string9 = StringUtils.leftPad("\n", 2048, '=');
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.removeStart("m~0<fGVy@m~0<fGVy@m~0<fGVy@m~0<fGVy@", "The String must not be empty");
      assertEquals("m~0<fGVy@m~0<fGVy@m~0<fGVy@m~0<fGVy@", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "m~0<fGVy@m~0<fGVy@m~0<fGVy@m~0<fGVy@", (CharSequence) null, 486);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("m~0<fGVy@m~0<fGVy@m~0<fGVy@m~0<fGVy@");
      assertEquals("m~0<fgvy@m~0<fgvy@m~0<fgvy@m~0<fgvy@", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "m~0<fgvy@m~0<fgvy@m~0<fgvy@m~0<fgvy@", (CharSequence) "m~0<fGVy@m~0<fGVy@m~0<fGVy@m~0<fGVy@");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeEndIgnoreCase("ExpectedException", "Illegal range. Equal from and to will produce an empty range.");
      assertEquals("ExpectedException", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("ExpectedException", (String) null);
      assertEquals("ExpectedException", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("YNU/s)_]#2n#Y", "", 7);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((String) null);
      assertTrue(boolean1);
      assertFalse(stack0.contains(string3));
      assertFalse(boolean1 == boolean0);
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      boolean boolean2 = stack0.add((String) null);
      assertTrue(boolean2);
      assertFalse(stack0.contains(string3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string3));
      assertEquals("[null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String[] stringArray1 = StringUtils.split("u", "ExpectedException", 7);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.removeIgnoreCase("Backup", "ExpectedException");
      assertEquals("Backup", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase((String) null, "ExpectedException", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNull(string6);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Backup");
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 19);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 321);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'o');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!nCL$t1JW0(d:a:", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("G5IY^*Jm{a");
      assertEquals("G5IY^*JM{A", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase(">I4$s!:P}BB?", "V2Pr^C:O?|bzfnXQ(jM");
      assertEquals((-56), int0);
      
      String string2 = StringUtils.right((String) null, (-56));
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "G5IY^*Jm{a");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("KScOCrK2o0_K^Ip", (String) null, 0);
      assertEquals("KScOCrK2o0_K^Ip", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.rotate((String) null, 7);
      assertNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "5", (CharSequence) "KScOCrK2o0_K^Ip");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\" should have a parent context.", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.chomp("^13j64H^\n");
      assertEquals("^13j64H^", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("^13j64H^", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToNull("^13j64H^");
      assertEquals("^13j64H^", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("^13j64H^", 3463);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "yFQeRB$cL:");
      assertEquals("", string3);
      assertFalse(stack0.contains(string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string4 = StringUtils.lowerCase("K3Sj:199U;aMgn");
      assertEquals("k3sj:199u;amgn", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray1[0] = (CharSequence) "k3sj:199u;amgn";
      charSequenceArray1[1] = (CharSequence) "^13j64H^";
      charSequenceArray1[2] = (CharSequence) "^13j64H^\n";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray1);
      assertFalse(boolean2);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string5 = StringUtils.rightPad("yFQeRB$cL:", 704, "K3Sj:199U;aMgn");
      assertEquals("yFQeRB$cL:K3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3S", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray2 = new CharSequence[5];
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray0));
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray1));
      
      charSequenceArray2[0] = (CharSequence) "K3Sj:199U;aMgn";
      charSequenceArray2[1] = (CharSequence) "K3Sj:199U;aMgn";
      charSequenceArray2[2] = (CharSequence) "^13j64H^\n";
      charSequenceArray2[3] = (CharSequence) "^13j64H^";
      charSequenceArray2[4] = (CharSequence) "^13j64H^";
      boolean boolean3 = StringUtils.containsAny((CharSequence) "yFQeRB$cL:K3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3Sj:199U;aMgnK3S", charSequenceArray2);
      assertTrue(boolean3);
      assertEquals(5, charSequenceArray2.length);
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray0));
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNotSame(charSequenceArray2, charSequenceArray0);
      assertNotSame(charSequenceArray2, charSequenceArray1);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.remove((String) null, '0');
      assertNull(string1);
      
      String string2 = "gm1gVc";
      int int0 = StringUtils.compare("gm1gVc", (String) null, false);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2739);
      intArray0[1] = (-1);
      intArray0[2] = (-2739);
      String string3 = StringUtils.join(intArray0, '0', (-1), (-272));
      assertEquals("", string3);
      assertEquals(3, intArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new int[] {(-2739), (-1), (-2739)}, intArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-673);
      shortArray0[1] = (short) (-673);
      shortArray0[2] = (short) (-1615);
      shortArray0[3] = (short)1865;
      shortArray0[4] = (short) (-673);
      shortArray0[5] = (short)1865;
      shortArray0[6] = (short)1355;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'K', (-3215), 786);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3215
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("p{InCombiningDiacriticalMarks}+", "SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", 2424);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", 1491);
      assertEquals("NGTHS DON'T MATCH: SEARCH AND REPLACE ARRAY LE", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "");
      assertEquals(31, int0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("p{InCombiningDiacriticalMarks}+"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>(arrayDeque0);
      assertFalse(arrayDeque0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque1.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      Iterator<Object> iterator0 = arrayDeque1.descendingIterator();
      assertFalse(arrayDeque0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque1.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(iterator0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("p{InCombiningDiacriticalMarks}+"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator1 = arrayList0.iterator();
      assertFalse(arrayList0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator1);
      
      String string3 = StringUtils.join(iterator0, 'X');
      assertEquals("", string3);
      assertFalse(arrayDeque0.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque1.contains("p{InCombiningDiacriticalMarks}+"));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(iterator0.equals((Object)iterator1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isMixedCase("Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.join((char[]) null, 'N', 46, 32);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.center("5C#_C::RYBGGuD", 59, "5C#_C::RYBGGuD");
      assertEquals("5C#_C::RYBGGuD5C#_C::R5C#_C::RYBGGuD5C#_C::RYBGGuD5C#_C::RY", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("zR\"jZC%U5#^`-De", "<$M1p(,dedF;v");
      assertEquals("zR\"jZC%U5#^`-De", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("5C#_C::RYBGGuD", "zR\"jZC%U5#^`-De");
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertFalse(treeSet1.contains(string0));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet1);
      assertFalse(treeSet1.contains(string0));
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("zR\"jZC%U5#^`-De");
      assertTrue(boolean1);
      assertFalse(treeSet1.contains(string0));
      assertTrue(priorityQueue0.contains("zR\"jZC%U5#^`-De"));
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(treeSet1, treeSet0);
      assertEquals(1, priorityQueue0.size());
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>();
      assertFalse(priorityQueue1.contains(string0));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue1.size());
      assertNotNull(priorityQueue1);
      
      boolean boolean2 = priorityQueue1.add("");
      assertTrue(boolean2);
      assertFalse(priorityQueue1.contains(string0));
      assertTrue(priorityQueue1.contains(""));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      
      boolean boolean3 = treeSet1.add("Failed to delete temp directory ");
      assertTrue(boolean3);
      assertFalse(treeSet1.contains(""));
      assertTrue(treeSet1.contains("Failed to delete temp directory "));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(treeSet1, treeSet0);
      
      String string2 = treeSet0.floor("");
      assertFalse(treeSet0.contains(""));
      assertFalse(treeSet0.equals((Object)treeSet1));
      assertNotSame(treeSet0, treeSet1);
      assertNull(string2);
      
      String string3 = StringUtils.join((Iterable<?>) treeSet1, 'c');
      assertEquals("Failed to delete temp directory ", string3);
      assertFalse(treeSet1.contains(string0));
      assertTrue(treeSet1.contains("Failed to delete temp directory "));
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviate("", "<Ft(/]**", 55);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isMixedCase("zR\"jZC%U5#^`-De");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.substringBetween("/]", "Minimum abbreviation width is %d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "i\"Zs9", (CharSequence) "ePAr`=z!D]gQ}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("/]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Minimum abbreviation width is %d"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = new Locale("-kyEl~Fz8ZiOB,g`");
      assertEquals("-kyel~fz8ziob,g`", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("-kyel~fz8ziob,g`", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.repeat("yb*^Q", 3968);
      assertNotNull(string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains(3968));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>(arrayDeque0);
      assertFalse(arrayDeque0.contains(3968));
      assertFalse(arrayDeque1.contains(3968));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      boolean boolean2 = StringUtils.isMixedCase("yb*^Q");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("'6w%l,QzrP%;uJtuh> ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.right("Failed to get parent directory from provider", (-244));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad(">qX^+:z", (-3605), ">qX^+:z");
      assertEquals(">qX^+:z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertEquals(250, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty(">qX^+:z", "");
      assertEquals(">qX^+:z", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("ExpectedException", "org.apache.commons.lang3.ArrayUtils", 223, (-244));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isBlank("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Search and Replace array lengths don't match: ", 917);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "...");
      assertFalse(boolean0);
      
      char char0 = '~';
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '5';
      charArray0[7] = '~';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'~', '~', '~', '~', '~', '~', '5', '~'}, charArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly("\n", (String[]) null, (String[]) null);
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[3] = (CharSequence) "I!`@z4,.9dh";
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'n', 4, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.unwrap("", '2');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMANY;
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("de_DE", locale3.toString());
      assertEquals("DE", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("DEU", locale3.getISO3Country());
      assertNotNull(locale3);
      
      String string3 = locale3.getDisplayCountry();
      assertEquals("Germany", string3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("de_DE", locale3.toString());
      assertEquals("DE", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("DEU", locale3.getISO3Country());
      assertNotNull(string3);
      
      Locale locale4 = (Locale)locale2.clone();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertTrue(locale4.equals((Object)locale2));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale4);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale4.getLanguage());
      assertEquals("", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("", locale4.getISO3Country());
      assertEquals("de", locale4.toString());
      assertEquals("", locale4.getVariant());
      assertNotNull(locale4);
      
      Locale locale5 = Locale.GERMAN;
      assertFalse(locale5.equals((Object)locale0));
      assertFalse(locale5.equals((Object)locale3));
      assertFalse(locale5.equals((Object)locale1));
      assertTrue(locale5.equals((Object)locale4));
      assertNotSame(locale5, locale0);
      assertNotSame(locale5, locale3);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale4);
      assertSame(locale5, locale2);
      assertEquals("", locale5.getVariant());
      assertEquals("", locale5.getCountry());
      assertEquals("deu", locale5.getISO3Language());
      assertEquals("de", locale5.getLanguage());
      assertEquals("", locale5.getISO3Country());
      assertEquals("de", locale5.toString());
      assertNotNull(locale5);
      
      String string4 = StringUtils.unwrap("", '2');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) ';';
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) ';';
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) '2';
      floatArray0[8] = (float) ';';
      String string5 = StringUtils.join(floatArray0, '%', (int) '2', (int) '2');
      assertEquals("", string5);
      assertEquals(9, floatArray0.length);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new float[] {50.0F, 59.0F, 0.0F, 0.0F, 0.0F, 59.0F, 0.0F, 50.0F, 59.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, '7');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.unwrap("LaunchTime", 'L');
      assertEquals("LaunchTime", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.right("<$M1p(,dedFv", (-2545));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "<$M1p(,dedFv", "");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("e");
      assertEquals("E", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.left("~|X;qt;;$LEv", 3957);
      assertEquals("~|X;qt;;$LEv", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~|X;qt;;$LEv";
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[2] = "~|X;qt;;$LEv";
      stringArray0[3] = "~|X;qt;;$LEv";
      stringArray0[4] = "~|X;qt;;$LEv";
      stringArray0[5] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      stringArray0[7] = "~|X;qt;;$LEv";
      stringArray0[8] = "~|X;qt;;$LEv";
      String string1 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.overlay("org.junitpioneer.jupiter.params.FloatRange", "~|X;qt;;$LEv", 256, 3957);
      assertEquals("org.junitpioneer.jupiter.params.FloatRange~|X;qt;;$LEv", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "~|X;qt;;$LEv", "~|X;qt;;$LEv");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removePattern("org.junitpioneer.jupiter.params.FloatRange~|X;qt;;$LEv", (String) null);
      assertEquals("org.junitpioneer.jupiter.params.FloatRange~|X;qt;;$LEv", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.equalsAny("org.junitpioneer.jupiter.params.FloatRange~|X;qt;;$LEv", stringArray0);
      assertFalse(boolean2);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean3);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean4);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("~|X;qt;;$LEv", (String) null, true);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2006.8F);
      floatArray0[1] = (float) 3957;
      String string4 = StringUtils.join(floatArray0, 'n', 509, 15);
      assertEquals("", string4);
      assertEquals(2, floatArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new float[] {(-2006.8F), 3957.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.chop("w*E13k+Qd[XK");
      assertEquals("w*E13k+Qd[X", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("gm1gVc");
      assertEquals("gm1gVc", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[5], (CharSequence[]) null);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("gm1gVc", "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.leftPad("org.junitpioneer.vintage.TimeoutExtension", (-1), '9');
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.stripStart("@", "@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("Can only resolve parameter of type ", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[2], charSequenceArray0[3]);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-1566.438026404639);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      String string0 = StringUtils.join(doubleArray0, '\\');
      assertEquals("-1.0\\-1566.438026404639\\-1.0\\-1.0", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1566.438026404639), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", '\\');
      assertEquals("\\org.junitpioneer.jupiter.params.IntRange\\", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "-1.0-1566.438026404639-1.0-1.0", (String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrapIfMissing("\n", "\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("-Mg");
      assertEquals("-Mg", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Tb59O", "5KH-x", "The character ");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) null, 5255);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.removeFirst("E", "-Mg");
      assertEquals("E", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "Br~");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "i\"Zs9", charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.overlay("org.junitpioneer.jupiter.params.LongRange", "Locale must not be null", (-1940), (-1940));
      assertEquals("Locale must not be nullorg.junitpioneer.jupiter.params.LongRange", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[0], "");
      assertTrue(boolean4);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean5);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "org.junitpioneer.jupiter.params.LongRange";
      charSequenceArray1[1] = (CharSequence) "";
      String string5 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "`fa1Mrr");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      charSequenceArray1[2] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray1[3] = (CharSequence) "";
      String string6 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.LongRange", (String) null);
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      charSequenceArray1[4] = (CharSequence) "org.junitpioneer.jupiter.params.LongRange";
      charSequenceArray1[5] = (CharSequence) "Locale must not be null";
      charSequenceArray1[6] = (CharSequence) "Locale must not be nullorg.junitpioneer.jupiter.params.LongRange";
      charSequenceArray1[7] = (CharSequence) null;
      boolean boolean6 = StringUtils.isAllEmpty(charSequenceArray1);
      assertFalse(boolean6);
      assertEquals(8, charSequenceArray1.length);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      boolean boolean7 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean7);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "org.junitpioneer.jupiter.params.LongRange";
      stringArray0[2] = null;
      String string7 = StringUtils.replaceEachRepeatedly("+y", stringArray0, stringArray0);
      assertEquals("+y", string7);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.left("~|X;qt;;$LEv", 3957);
      assertEquals("~|X;qt;;$LEv", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~|X;qt;;$LEv";
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[2] = "~|X;qt;;$LEv";
      stringArray0[3] = "~|X;qt;;$LEv";
      stringArray0[4] = "~|X;qt;;$LEv";
      stringArray0[5] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      stringArray0[7] = "~|X;qt;;$LEv";
      stringArray0[8] = "~|X;qt;;$LEv";
      String string1 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("~|X;qt;;$LEv", "~|X;qt;;$LEv");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chop("JfUfCt! ~:vQv'-_F7g");
      assertEquals("JfUfCt! ~:vQv'-_F7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center(":v%>m_QpH<", 3957);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("~|X;qt;;$LEv", stringArray0);
      assertEquals(0, int0);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("~|X;qt;;$LEv", "~|X;qt;;$LEv");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.leftPad("~|X;qt;;$LEv", 0, '0');
      assertEquals("~|X;qt;;$LEv", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = ' ';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      charArray0[8] = '0';
      String string5 = StringUtils.join(charArray0, '0', 13, (-1));
      assertEquals("", string5);
      assertEquals(9, charArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new char[] {'0', '0', '0', ' ', '0', '0', '0', '0', '0'}, charArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('q', 50);
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "MP`.azPOA vKS", "\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertNotSame(serviceLoader1, serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer1);
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertNotSame(serviceLoader0, serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      boolean boolean1 = StringUtils.isAsciiPrintable("5]tPL");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("5]tPL", "5]tPL", charSequenceArray0);
      assertEquals("5]tPL", string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("aAykm^MQ");
      assertEquals("AAYKM^MQ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "5]tPL", 0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.rotate("5]tPL", 0);
      assertEquals("5]tPL", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd((String) null, "5]tPL");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("#urUu@u@MY*", "\r", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("Backup", "");
      assertEquals("Backup", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("ExpectedException", "offset cannot be negative");
      assertEquals("ExpectedException", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("YNU/s)_]#2n#Y", "", (-1792));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertFalse(stack0.contains("Backup"));
      assertTrue(stack0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean2 = stack0.add("KGl7c`Wetcji");
      assertTrue(boolean2);
      assertFalse(stack0.contains("Backup"));
      assertTrue(stack0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("Backup"));
      assertTrue(stack0.contains(""));
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String[] stringArray1 = StringUtils.split("offset cannot be negative", "u", (-1792));
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, "ExpectedException");
      assertNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("/RXd{=@UMN0cxb%", "Backup", stringArray1);
      assertEquals("/RXd{=@UMN0cxb%Backup", string5);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Backup");
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("w", "w");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.unwrap("\n", 'A');
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Extension context \"", " ");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.leftPad("\n", (-2064888120), "Search and Replace array lengths don't match: ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", 'N');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '0';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'N', '0', 'N', 'N', 'N'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.truncate("\n", 0, 12);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = new Locale("\n");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("\n", locale0.getLanguage());
      assertEquals("\n", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "d5Y(`");
      assertEquals(5, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = "':6w%l[QzrP%;uJ)uR> ";
      String string1 = StringUtils.center("':6w%l[QzrP%;uJ)uR> ", 364, "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni':6w%l[QzrP%;uJ)uR> org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("}-~", 1);
      assertEquals("}-~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*AOwlcvLZLi_ A*=\"K";
      stringArray0[1] = "}-~";
      stringArray0[2] = "}-~";
      stringArray0[4] = "}-~";
      stringArray0[5] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[6] = "}-~";
      stringArray0[7] = "':6w%l[QzrP%;uJ)uR> ";
      stringArray0[8] = "':6w%l[QzrP%;uJ)uR> ";
      String string3 = StringUtils.replaceEach("org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni':6w%l[QzrP%;uJ)uR> org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni", stringArray0, stringArray0);
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni':6w%l[QzrP%;uJ)uR> org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionorg.juni", string3);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = "ruR,WRoH\n\n";
      // Undeclared exception!
      try { 
        Charset.forName("':6w%l[QzrP%;uJ)uR> ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ':6w%l[QzrP%;uJ)uR> 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.strip("maxWith cann", " ");
      assertEquals("maxWith cann", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("maxWith cann", (-1748));
      assertEquals("maxWith cann", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '3';
      charArray0[2] = '%';
      charArray0[3] = '~';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3', '%', '~'}, charArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "maxWith cann";
      stringArray0[1] = null;
      stringArray0[2] = "maxWith cann";
      stringArray0[3] = "gP+m#$##X=";
      stringArray0[4] = null;
      stringArray0[5] = "maxWith cann";
      String string2 = StringUtils.replaceEachRepeatedly("maxWith cann", stringArray0, (String[]) null);
      assertEquals("maxWith cann", string2);
      assertEquals(6, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "maxWith cann", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p?h1?O2", (CharSequence) "p?h1?O2", 25);
      assertEquals(0, int0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("p?h1?O2"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("p?h1?O2"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '$');
      assertEquals("", string0);
      assertFalse(stack0.contains("p?h1?O2"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = (-1994091956);
      // Undeclared exception!
      StringUtils.join(shortArray0, 'H', (-1994091956), 5);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", 'd');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", "", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfterLast("", "offset cannot be negativejIl, B1$_B'");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.stripStart("Strings must not be null", "m~0<fGVy@");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = "Strings must not be null";
      String string2 = StringUtils.reverse("Strings must not be null");
      assertEquals("llun eb ton tsum sgnirtS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Strings must not be null", 2727, '_');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      // Undeclared exception!
      StringUtils.center("Illegal range. Equal from and to will produce an empty range.", 65536, "org.junitpioneer.jupiter.SystemPropertyExtension");
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", 55);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("Du=!(f#vS$e5N[~*o`", "l8O>%T#L");
      assertEquals("Du=!(f#vS$e5N[~*o`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14", 3164);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "{ O(<>#S3>xcr14", charArray0);
      assertTrue(boolean1);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("m~0<fGVy@", "m~0<fGVy@");
      assertEquals("m~0<fGVy@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("x`Lp#\"t219v5e!", '8');
      assertEquals("8x`Lp#\"t219v5e!8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("m~0<fGVy@", 'm');
      assertEquals("m~0<fGVy@", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(locale2);
      
      String string3 = locale2.getDisplayCountry();
      assertEquals("", string3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(string3);
      
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("m~0<fGVy@"));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale locale3 = (Locale)locale2.clone();
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("de", locale3.toString());
      assertNotNull(locale3);
      
      String string4 = StringUtils.lowerCase("8x`Lp#\"t219v5e!8", locale2);
      assertEquals("8x`lp#\"t219v5e!8", string4);
      assertTrue(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(string4);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'W';
      floatArray0[1] = (float) 'W';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 91;
      String string5 = StringUtils.join(floatArray0, ';', 10, 10);
      assertEquals("", string5);
      assertEquals(5, floatArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new float[] {87.0F, 87.0F, 0.0F, 10.0F, 91.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.stripStart("Strings must not be null", "m~0<fGVy@");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("x`Lp#\"t219v5e!", '8');
      assertEquals("8x`Lp#\"t219v5e!8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Strings must not be null", 'm');
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale locale2 = Locale.GERMAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertNotNull(locale2);
      
      String string3 = locale2.getDisplayCountry();
      assertEquals("", string3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertNotNull(string3);
      
      Locale locale3 = (Locale)locale2.clone();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("de", locale3.getLanguage());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertNotNull(locale3);
      
      Locale locale4 = Locale.GERMAN;
      assertTrue(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertEquals("de", locale4.toString());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("de", locale4.getLanguage());
      assertNotNull(locale4);
      
      String string4 = StringUtils.lowerCase("8x`Lp#\"t219v5e!8", locale4);
      assertEquals("8x`lp#\"t219v5e!8", string4);
      assertTrue(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertEquals("de", locale4.toString());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("de", locale4.getLanguage());
      assertNotNull(string4);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'W';
      floatArray0[1] = (float) 'W';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 10;
      floatArray0[4] = (float) 91;
      String string5 = StringUtils.join(floatArray0, ';', 10, 10);
      assertEquals("", string5);
      assertEquals(5, floatArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertArrayEquals(new float[] {87.0F, 87.0F, 0.0F, 10.0F, 91.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.unwrap("G<=VXGJ<{f^hpfpXs", '0');
      assertEquals("G<=VXGJ<{f^hpfpXs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String string0 = StringUtils.unwrap("5", 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("5", 29);
      assertEquals("              5              ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'F';
      String string3 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "              5              ");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "              5              ", "5");
      assertEquals(14, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("5");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", 29, (int) 'd');
      assertEquals("THS DON'T MATCH: ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "THS DON'T MATCH: ", 14);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.rotate("              5              ", 12);
      assertEquals("                          5  ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.unwrap("\r", "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("e");
      assertEquals("e", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("e", "e");
      assertEquals("e", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e", (CharSequence) "e");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "g4.nFh+x`JQ)wU4", (CharSequence) "e");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".XQVx*X%*a2Y8lz~", ".XQVx*X%*a2Y8lz~", 1747);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("e"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((String) null);
      assertTrue(boolean0);
      assertFalse(stack0.contains("e"));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("e"));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("e"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.trimToEmpty("/]");
      assertEquals("/]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("/]", '/');
      assertEquals("]", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "/]", 1747);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.replaceOnce("/]]f2;::]|", "", "/]]f2;::]|");
      assertEquals("/]]f2;::]|", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "/]]f2;::]|");
      assertEquals("/]]f2;::]|", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "/]]f2;::]|";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.replaceChars((String) null, '8', '8');
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny("/]]f2;::]|", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "/]]f2;::]|");
      assertEquals((-1), int2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = "6D~]yeVD2BZwI#p";
      String string1 = StringUtils.join(objectArray0, "6D~]yeVD2BZwI#p");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string2 = "RepeatFailedTestExtension";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("RepeatFailedTestExtension", 0.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=repeatfailedtestextension
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("n,e", "p^q{qWQ<rcr\"");
      assertEquals("n,e", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("n,e");
      assertEquals("n,e", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("n,e");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("Nz8n1", "Search and Replace array lengths don't match: ");
      assertEquals("Nz8n1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Nz8n1";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Nz8n1";
      charSequenceArray0[3] = (CharSequence) "Nz8n1";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "n,e";
      charSequenceArray0[6] = (CharSequence) "n,e";
      charSequenceArray0[7] = (CharSequence) "p^q{qWQ<rcr\"";
      String string3 = StringUtils.appendIfMissingIgnoreCase("org.apache.commons.lang3.StringUtils", charSequenceArray0[0], charSequenceArray0);
      assertEquals("org.apache.commons.lang3.StringUtilsNz8n1", string3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[8] = (CharSequence) "org.apache.commons.lang3.StringUtilsNz8n1";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("p^q{qWQ<rcr\"", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("", "'L3w)HST0zQjS", (CharSequence[]) null);
      assertEquals("'L3w)HST0zQjS", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("", (String) null);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate("", 0);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.stripStart("(7d+pSgG)2V{", "\norg.apache.commons.lang3.StringUtils");
      assertEquals("(7d+pSgG)2V{", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.capitalize("blank_blank_blank_201-");
      assertEquals("Blank_blank_blank_201-", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Blank_blank_blank_201-", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "blank_blank_blank_201-", (CharSequence) "blank_blank_blank_201-");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.swapCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWith("\n", "\n");
      assertTrue(boolean0);
      
      String string3 = StringUtils.reverse("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", Integer.MIN_VALUE, 'b');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("org.junitpioneer.jupiter.params.LongRange");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("\n", 1, 'b');
      assertEquals("\n", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("\n", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.truncate("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", 343, 1116);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.uncapitalize("");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.overlay("", "", 0, (-1940));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = Locale.forLanguageTag("', is neither of type Map.Entry nor an Array");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertFalse(hashSet0.contains(locale0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(list1);
      
      Locale locale1 = new Locale("C_W7Id==v3q");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("c_w7id==v3q", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("c_w7id==v3q", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertEquals("", string3);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertEquals("c_w7id==v3q", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("c_w7id==v3q", locale1.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string3);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", (-3310));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("", "C_W7Id==v3q");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("cANNOT STORE ORG.JUNITPIONEER.JU", "cANNOT STORE ORG.JUNITPIONEER.JU", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right("cANNOT STORE ORG.JUNITPIONEER.JU", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '4';
      charArray0[2] = '|';
      charArray0[3] = '[';
      charArray0[4] = 'p';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "x\"<>", charArray0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'K', '4', '|', '[', 'p'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cANNOT STORE ORG.JUNITPIONEER.JU", " 5 :[Bu!3?");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("~[D6q\"X)Ks`2M6", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, ')');
      assertEquals("", string2);
      assertEquals(0, floatArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.chop("fra6-");
      assertEquals("fra6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("fra6-", "*q_@/8u:aJER1ZuK~-", "T`2D3}A)ZfF");
      assertEquals("fra6-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "fra6-";
      charSequenceArray0[2] = (CharSequence) "fra6";
      charSequenceArray0[3] = (CharSequence) "fra6";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fra6");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.mid("fra6-", 4, 4);
      assertEquals("-", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("Object varargs must not be null");
      assertEquals("llun eb ton tsum sgrarav tcejbO", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("-", (-1050), '_');
      assertEquals("-", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.strip(" ");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(" ", charSequenceArray0[3]);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "...";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("...", string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "...");
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("...", 9, "...");
      assertEquals(".........", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(".........", "...");
      assertEquals(0.84, double0, 0.01);
      
      String string3 = StringUtils.abbreviate("...", "'e", 9);
      assertEquals("...", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) ".........", (CharSequence) "...");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (String) null, 16);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = hashSet0.add(object0);
      assertTrue(boolean1);
      assertTrue(hashSet0.contains(object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '\\');
      assertTrue(hashSet0.contains(object0));
      assertFalse(hashSet0.contains('\\'));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertNotNull(string0);
      
      Stream<Object> stream0 = hashSet0.stream();
      assertTrue(hashSet0.contains(object0));
      assertFalse(hashSet0.contains('\\'));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertNotNull(stream0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "java.lang.Object@7c84ba9d", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.center("bSFN", 59, "bSFN");
      assertEquals("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", "#|-^OB3hG?\"PS-}|t");
      assertEquals("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("#|-^OB3hG?\"PS-}|t", "bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN");
      assertFalse(boolean0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertFalse(treeSet0.contains(string1));
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean1 = priorityQueue0.add("Ih");
      assertTrue(boolean1);
      assertFalse(treeSet0.contains(string1));
      assertTrue(priorityQueue0.contains("Ih"));
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean2 = priorityQueue0.add("K_}EF");
      assertTrue(boolean2);
      assertFalse(treeSet0.contains(string1));
      assertTrue(priorityQueue0.contains("Ih"));
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, priorityQueue0.size());
      
      boolean boolean3 = treeSet0.add("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      assertTrue(boolean3);
      assertTrue(treeSet0.contains("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
      assertFalse(treeSet0.contains(string1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string2 = treeSet0.floor("OdR");
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertTrue(treeSet0.contains("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
      assertFalse(treeSet0.contains("bSFN"));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, 'c');
      assertEquals("IhcK_}EF", string3);
      assertTrue(treeSet0.contains("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
      assertFalse(treeSet0.contains("bSFN"));
      assertTrue(priorityQueue0.contains("Ih"));
      assertFalse(priorityQueue0.contains("bSFN"));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, priorityQueue0.size());
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviate("fw%00s~QiQ5kf=>", "Ih", 948);
      assertEquals("fw%00s~QiQ5kf=>", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'q');
      assertEquals("AUTOSELECT_FILTERINGqEXTENDED_FILTERINGqIGNORE_EXTENDED_RANGESqMAP_EXTENDED_RANGESqREJECT_EXTENDED_RANGES", string0);
      assertEquals(5, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.substringBefore("L+|fj9j", "p{InCombiningDiacriticalMarks}+");
      assertEquals("L+|fj9j", string0);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.abbreviate((String) null, (-2204));
      assertNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 306L;
      longArray0[1] = (long) (-2204);
      longArray0[2] = (long) '_';
      longArray0[3] = 2756L;
      longArray0[4] = (long) (short)15;
      longArray0[5] = (long) (short)4159;
      String string2 = StringUtils.join(longArray0, '_');
      assertEquals("306_-2204_95_2756_15_4159", string2);
      assertEquals(6, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {306L, (-2204L), 95L, 2756L, 15L, 4159L}, longArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd("L+|fj9j", "fxeE?#asU>aUR");
      assertEquals("L+|fj9j", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("fxeE?#asU>aUR");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.join((byte[]) null, 'I', 160, 160);
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "L+|fj9j");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("aySo,~X`,Ko7VY!");
      assertEquals("aySo,~X`,Ko7VY!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("dp", ")oHCK,o*Xes");
      assertEquals(59, int0);
      
      String string2 = StringUtils.getDigits(")oHCK,o*Xes");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.StringUtils", "M#24]");
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("cq$=s]U", "u&");
      assertEquals("cq$=s]U", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("3", "{}");
      assertEquals("{}3{}", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isBlank("{}3{}");
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat("u&", 0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(1.0, double0, 0.01);
      
      String string7 = StringUtils.wrapIfMissing(")oHCK,o*Xes", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceProvider)oHCK,o*Xesorg.junitpioneer.jupiter.params.RangeSourceProvider", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.junitpioneer.jupiter.params.RangeSourceProvider)oHCK,o*Xesorg.junitpioneer.jupiter.params.RangeSourceProvider", "", 59);
      assertEquals(114, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "{}3{}", (CharSequence) ")oHCK,o*Xes", 114);
      assertEquals(12, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.split("aySo,~X`,Ko7VY!");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("cANNOT STORE ORG.JUNITPIONEER.JU", "cANNOT STORE ORG.JUNITPIONEER.JU", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right("cANNOT STORE ORG.JUNITPIONEER.JU", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '4';
      charArray0[2] = '|';
      charArray0[3] = '[';
      charArray0[4] = 'p';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "x\"<>", charArray0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'K', '4', '|', '[', 'p'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cANNOT STORE ORG.JUNITPIONEER.JU", " 5 :[Bu!3?");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("~[D6q\"X)Ks`2M6", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "2UIf9CA8]e}";
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Failed to create custom temp directory", "Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Failed to create custom temp directory", "Failed to create custom temp directory");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((List<?>) null, "Failed to create custom temp directory", 1974, 1974);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBeforeLast("':6w%l[QzrP%;uJ)uR> ", "");
      assertEquals("':6w%l[QzrP%;uJ)uR> ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 1649, "\n");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-3041), 322);
      assertNull(string0);
      
      String string1 = StringUtils.reverse("0^l(n");
      assertEquals("n(l^0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("dLn2&ELG`0C", 4, '0');
      assertEquals("dLn2&ELG`0C", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("n(l^0");
      assertEquals("n(l^0", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("dLn2&ELG`0C", "\n");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\n";
      stringArray0[1] = "n(l^0";
      stringArray0[2] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "offset cannot be negative";
      stringArray0[6] = "0^l(n";
      stringArray0[7] = "n(l^0";
      stringArray0[8] = "\n";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("\n", string4);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 12, 5);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5]tPL", "gP+m#$##X=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.rightPad("gP+m#$##X=", 0, "");
      assertEquals("gP+m#$##X=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Spliterator<Locale.LanguageRange> spliterator0 = arrayList0.spliterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotNull(locale1);
      
      boolean boolean3 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      Locale locale2 = new Locale("Failed to delete temp directory ");
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getCountry());
      assertEquals("failed to delete temp directory ", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("failed to delete temp directory ", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "...", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("gP+m#$##X=");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join(stringArray1);
      assertEquals("gP+m#$##X=", string2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "gP+m#$##X=", (CharSequence) "gP+m#$##X=");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.wrap(";D", ";D");
      assertEquals(";D;D;D", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ";D", (CharSequence) ";D");
      assertEquals(1, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("pbaeV\".q4},=d(", ')');
      assertEquals("pbaeV\".q4},=d(", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "pbaeV\".q4},=d(";
      charSequenceArray0[3] = (CharSequence) "pbaeV\".q4},=d(";
      charSequenceArray0[4] = (CharSequence) "pbaeV\".q4},=d(";
      charSequenceArray0[5] = (CharSequence) ";D";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "pbaeV\".q4},=d(";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";D", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(0, int1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ";D", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("Vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension", 917);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Vp(>6%RURZiX[g", (CharSequence) "vp(>6%RURZiX[g", 4);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("vp(>6%RURZiX[g");
      assertEquals("vp(>6%RURZiX[g", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("])`yNbJ", "]:mIsH$ep}wKGRz", "L]pKC\"Et&FuE");
      assertEquals("])`yNbJ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("])`yNbJ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, "noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'A');
      assertEquals("0.0A-1.0", string6);
      assertEquals(2, doubleArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "vp(>6%RURZiX[g", (CharSequence) "])`yNbJ");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("])`yNbJ", "vp(>6%RURZiX[g");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(3207));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((Object) "<$M1p(,dedF;v");
      assertTrue(boolean0);
      assertTrue(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.contains('N'));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[<$M1p(,dedF;v]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertTrue(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.contains('N'));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[<$M1p(,dedF;v]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'N');
      assertEquals("<$M1p(,dedF;v", string1);
      assertTrue(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.contains('N'));
      assertTrue(string1.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[<$M1p(,dedF;v]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      String string2 = StringUtils.valueOf(charArray0);
      assertEquals("NN\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertEquals(8, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'N', 'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("<$M1p(,dedF;v", 3207);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "<$M1p(,dedF;v", charArray0);
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'N', 'N', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'V');
      assertEquals("IGNORE_EXTENDED_RANGES", string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.rotate(" ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "F&|", (CharSequence) "F&|");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.wrap("5", "5");
      assertEquals("555", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "555", (CharSequence) "555");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "5", (CharSequence) "5");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'I');
      assertEquals("", string3);
      assertEquals(0, doubleArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("555", 'c');
      assertEquals("c555c", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "c555c");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "5";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("5"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertFalse(stack0.contains("5"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "^5$Xph@^5$Xph@", 1, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 16
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'i';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">B`i<II)", charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'i'}, charArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty(">B`i<II)", supplier0);
      assertEquals(">B`i<II)", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">B`i<II)";
      charSequenceArray0[1] = (CharSequence) ">B`i<II)";
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '\\';
      longArray0[1] = (long) '/';
      longArray0[2] = (long) '\\';
      longArray0[3] = (long) 'i';
      longArray0[4] = (long) '\\';
      longArray0[5] = (long) 'i';
      longArray0[6] = (long) 'i';
      String string1 = StringUtils.join(longArray0, 'i');
      assertEquals("92i47i92i105i92i105i105", string1);
      assertEquals(7, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {92L, 47L, 92L, 105L, 92L, 105L, 105L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("dy#wbK", "92i47i92i105i92i105i105", "Minimum abbreviation width is %dcANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY");
      assertEquals("dy#wbK", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(">B`i<II)", "!w`CfPrh", "dy#wbK");
      assertEquals(">B#i<II)", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotEmpty(">B#i<II)");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "92i47i92i105i92i105i105";
      stringArray0[1] = ">B`i<II)";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints(">B`i<II)");
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {62, 66, 96, 105, 127, 60, 73, 73, 41}, intArray0);
      assertNotNull(intArray0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string5 = StringUtils.upperCase("org.apache.commons.lang3.Charsets", locale0);
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSETS", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWith(charSequenceArray0[1], "ORG.APACHE.COMMONS.LANG3.CHARSETS");
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '/', (int) (byte) (-86), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((short[]) null, '\\', 102, 6);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string3 = StringUtils.truncate("{ O(<>#S3>XCR14", 6);
      assertEquals("{ O(<>", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "{ O(<>";
      charSequenceArray0[1] = (CharSequence) "{ O(<>#S3>XCR14";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtension";
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "{ O(<>#S3>xcr14", (Supplier<CharSequence>) null);
      assertEquals("{ O(<>#S3>xcr14", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "{ O(<>#S3>xcr14";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "{ O(<>#S3>xcr14";
      charSequenceArray0[6] = (CharSequence) "";
      String string4 = StringUtils.prependIfMissing("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14", charSequenceArray0);
      assertEquals("{ O(<>#S3>xcr14", string4);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[4], 6);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.center("\u0005~ts\"I./8L,!Jg{ctoffset cannot be negative", (-2223));
      assertEquals("\u0005~ts\"I./8L,!Jg{ctoffset cannot be negative", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\u0005~ts\"I./8L,!Jg{ctoffset cannot be negative", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("wO0>~bC{pVt+!", supplier0);
      assertEquals("wO0>~bC{pVt+!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("wO0>~bC{pVt+!", "");
      assertEquals("wO0>~bC{pVt+!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[1] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[2] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[3] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[4] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[5] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "wO0>~bC{pVt+!";
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("Can only resolve parameter of type ", "9,sh20-O/(7WS8PX3&s");
      assertEquals("Can only resolve parameter of type ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("?7aYk=FM|p&S\"UXay0");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("?7aYk=FM|p&S\"UXay0", stringArray0);
      assertTrue(boolean0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfterLast("\n", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("/t");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToEmpty("gm1gVc");
      assertEquals("gm1gVc", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "gm1gVc");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("offset cannot be negativejIl, B1$_B'", "", "Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("offset cannot be negativeoffset cannot be negative", "offset cannot be negativeoffset cannot be negative");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("'/?BOR:T", "1'118'14'-83'118");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnce("'/?BOR:T", "offset cannot be negativeoffset cannot be negative", "");
      assertEquals("'/?BOR:T", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.remove("\r", "");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rightPad("", 84, "");
      assertEquals("                                                                                    ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.center("Q[", 3, "Q[");
      assertEquals("Q[Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("Q[Q");
      assertEquals("q[Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Q[Q", 3);
      assertEquals("Q[QQ[QQ[Q", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q[Q";
      stringArray0[1] = "Q[";
      stringArray0[2] = "Q[QQ[QQ[Q";
      stringArray0[3] = "Q[";
      stringArray0[4] = "q[Q";
      stringArray0[6] = "Locale must not be null";
      stringArray0[7] = "Q[";
      String string3 = StringUtils.replaceEach("Q[QQ[QQ[Q", stringArray0, stringArray0);
      assertEquals("Q[QQ[QQ[Q", string3);
      assertEquals(8, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Q[");
      assertEquals("Q[", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Q[Q", (CharSequence) "Q[");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("tPV(1O|F", "\n", (-895));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {10}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("cANNOT STORE ORG.JUNITPIONEER.JU", "cANNOT STORE ORG.JUNITPIONEER.JU", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.uncapitalize("x\"<>");
      assertEquals("x\"<>", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "x\"<>";
      charSequenceArray0[1] = (CharSequence) "x\"<>";
      boolean boolean0 = StringUtils.startsWithAny("cANNOT STORE ORG.JUNITPIONEER.JU", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("x\"<>", "cANNOT STORE ORG.JUNITPIONEER.JU", 1258);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chomp("......=z!D]gQ}", "p{InCombiningDiacriticalMarks}+");
      assertEquals("......=z!D]gQ}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("......=z!D]gQ}", "......=z!D]gQ}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("?2abz,;?67O", "Eudsg\"~J]", 0);
      assertEquals("?2abz,;?67O", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("?2abz,;?67O", "codefx", 1549);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("x\"<>", charSequenceArray0[0], 53);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.toRootLowerCase("(oJ8/$\"2K%cAW");
      assertEquals("(oj8/$\"2k%caw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray2);
      
      int int3 = StringUtils.lastOrdinalIndexOf("......=z!D]gQ}", "?2abz,;?67O", 102);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("|2Z3)p;vgF,zSP3", "d5Y(`");
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotNull(stringArray3);
      
      String string4 = StringUtils.unwrap("cANNOT STORE ORG.JUNITPIONEER.JU", "Eudsg\"~J]");
      assertEquals("cANNOT STORE ORG.JUNITPIONEER.JU", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '0';
      charArray0[2] = 'D';
      charArray0[3] = '2';
      charArray0[4] = '.';
      charArray0[5] = 'l';
      charArray0[6] = 'k';
      charArray0[7] = 'H';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "cANNOT STORE ORG.JUNITPIONEER.JU", charArray0);
      assertFalse(boolean2);
      assertEquals(8, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'h', '0', 'D', '2', '.', 'l', 'k', 'H'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("f", "cANNOT STORE ORG.JUNITPIONEER.JU", 65);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("_;|$S"));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("_;|$S"));
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("_;|$S"));
      assertTrue(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "f");
      assertEquals("", string1);
      assertFalse(stack1.contains("_;|$S"));
      assertTrue(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("1'k:.^iEA");
      assertEquals("1'k:.^iEA", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("1'k:.^iEA", 65);
      assertEquals("                            1'k:.^iEA                            ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp((String) null, "                            1'k:.^iEA                            ");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.normalizeSpace("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("Failed to delete temp directory ");
      assertEquals("Failed to delete temp directory", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("x}", (-245));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "7aTlR?=YD", "Failed to delete temp directory");
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[0], "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.left("Strings must not be null", (-203));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string8);
      
      String string9 = StringUtils.leftPad("x}", (-245));
      assertEquals("x}", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("erhl<vKE:#{B]}o");
      assertEquals(9, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      String string10 = StringUtils.repeat('o', 4080);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("ni373Sl", "", (CharSequence[]) null);
      assertEquals("ni373Sl", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("u&r}Ko:2", "mFX1^il", 53);
      assertEquals("u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string6 = locale1.toLanguageTag();
      assertEquals("ja", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(string6);
      
      Locale locale2 = Locale.TAIWAN;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertNotNull(locale2);
      
      Locale locale3 = (Locale)locale1.clone();
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale0));
      assertTrue(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertSame(locale1, locale0);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertEquals("ja", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("ja", locale3.toString());
      assertNotNull(locale3);
      
      String string7 = locale2.getExtension('d');
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertNull(string7);
      
      Locale locale4 = Locale.GERMAN;
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertEquals("", locale4.getVariant());
      assertEquals("de", locale4.getLanguage());
      assertEquals("", locale4.getISO3Country());
      assertEquals("de", locale4.toString());
      assertEquals("", locale4.getCountry());
      assertEquals("deu", locale4.getISO3Language());
      assertNotNull(locale4);
      
      String string8 = StringUtils.lowerCase("", locale0);
      assertEquals("", string8);
      assertTrue(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale4));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(string8);
      
      String string9 = StringUtils.wrapIfMissing("", 'd');
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertNotNull(string9);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "N7A>Ys");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("6");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("6", "6");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("6", string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Threshold must not be negativeThreshold must not be negative", "Threshold must not be negativeThreshold must not be negative");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray1);
      assertTrue(boolean0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.rightPad("Threshold must not be negativeThreshold must not be negative", 2361, "6");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean1 = stack0.add(locale0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(locale0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Locale locale1 = new Locale("6");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("6", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("6", locale1.getLanguage());
      assertNotNull(locale1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "6", (CharSequence) "", 2361);
      assertEquals(1, int0);
      
      String[] stringArray2 = StringUtils.split("b)~7");
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "eityFpp]Y10`");
      assertEquals(12, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.removeEndIgnoreCase("<$M1p(,dedF;v", "GB_S/N04(.");
      assertEquals("<$M1p(,dedF;v", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("M#24]", "<$M1p(,dedF;v");
      assertEquals("M#24]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.TempDirectoryCannot store ", (String) null, (-389));
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string2));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string2));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "M#24]");
      assertEquals("", string3);
      assertFalse(stack0.contains(string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("<$M1p(,dedF;v");
      assertEquals("<$M1p(,dedF;v", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "GB_S/N04(.", (CharSequence) "", (-2436));
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.chomp("Smwhpkqn,r\"Pc!$");
      assertEquals("Smwhpkqn,r\"Pc!$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Smwhpkqn,r\"Pc!$";
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.capitalize("oJw,1tA<J's..u5L");
      assertEquals("OJw,1tA<J's..u5L", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "OJw,1tA<J's..u5L";
      charSequenceArray0[1] = (CharSequence) "oJw,1tA<J's..u5L";
      charSequenceArray0[2] = (CharSequence) "oJw,1tA<J's..u5L";
      charSequenceArray0[3] = (CharSequence) "OJw,1tA<J's..u5L";
      boolean boolean0 = StringUtils.startsWithAny("OJw,1tA<J's..u5L", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "OJw,1tA<J's..u5L");
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.center("oJw,1tA<J's..u5L", 0);
      assertEquals("oJw,1tA<J's..u5L", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'G';
      charArray0[2] = 'F';
      charArray0[3] = 'N';
      charArray0[4] = '4';
      charArray0[5] = '?';
      String[] stringArray0 = StringUtils.substringsBetween("oJw,1tA<J's..u5L", "oJw,1tA<J's..u5L", "k2=5Ks/lHf`p8");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) null, "M.X{s`Z-WuUE,");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\" should have a parent context.", (CharSequence) "+");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)14;
      String string3 = StringUtils.join(byteArray0, 'c');
      assertEquals("103c89c-20c14", string3);
      assertEquals(4, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)103, (byte)89, (byte) (-20), (byte)14}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("$v`", 'c');
      assertEquals("$v`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Locale locale0 = new Locale("', is neither of type Map.Entry nor an Array");
      assertEquals("", locale0.getVariant());
      assertEquals("', is neither of type map.entry nor an array", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("', is neither of type map.entry nor an array", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 1);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "$v`", (CharSequence) "\r");
      assertEquals(3, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((short[]) null, '\\', 102, 6);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string3 = StringUtils.stripEnd("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "{ O(<>#S3>xcr14");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.join((Iterator<?>) null, "V*i8d");
      assertNull(string5);
      
      String string6 = StringUtils.trimToEmpty("V*i8d");
      assertEquals("V*i8d", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.center((String) null, 1);
      assertNull(string7);
      
      String string8 = StringUtils.chomp("V*i8d", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("V*i8d", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.right("...", 38);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "org.junitpioneer.jupiter.TempDirectoryCannot store ", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("..."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("..."));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "Comparator should not be null.");
      assertEquals("", string1);
      assertFalse(stack0.contains("Comparator should not be null."));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", (-1), "org.junitpioneer.jupiter.TempDirectoryCannot store ");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.compare("", "V*i8d?i3G", false);
      assertEquals((-9), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.toRootLowerCase("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type map.entry nor an array", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", "', is neither of type map.entry nor an array");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWith("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.defaultString("Thr");
      assertEquals("Thr", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int4 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int4);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-42.926);
      doubleArray0[1] = (double) (-9);
      doubleArray0[2] = 1360.988333366;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'I');
      assertEquals("-42.926I-9.0I1360.988333366I0.0I-1.0", string6);
      assertEquals(5, doubleArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new double[] {(-42.926), (-9.0), 1360.988333366, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("u\"_tWChvNf", ' ');
      assertEquals(" u\"_tWChvNf ", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("', is neither of type Map.Entry nor an Array", "\n");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '0');
      assertNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("BKWGn|^RqdLqZ5ZD8", string0, stringArray0);
      assertEquals("BKWGn|^RqdLqZ5ZD8", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("(oJ8/$\"2K%cAW", (String) null, 3865);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getVariant());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertNotNull(locale3);
      
      String string4 = StringUtils.left("(k`)F[Z D.6x/R&t", 4);
      assertEquals("(k`)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing(string3, 'G');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("gm1gVc", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double[] doubleArray0 = new double[3];
      String string0 = StringUtils.repeat("\n", (String) null, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", (CharSequence) "");
      assertTrue(boolean0);
      
      doubleArray0[0] = (double) (-1);
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-1);
      String string1 = StringUtils.join((double[]) null, 'L');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Locale locale0 = new Locale(" in an array of ");
      assertEquals(" in an array of ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(" in an array of ", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) " in an array of ", 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("5]tPL", "gP+m#$##X=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.rightPad("gP+m#$##X=", 0, "");
      assertEquals("gP+m#$##X=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMANY;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      boolean boolean3 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      Locale locale2 = new Locale("Failed to delete temp directory ");
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("failed to delete temp directory ", locale2.toString());
      assertEquals("failed to delete temp directory ", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "...", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("gP+m#$##X=");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join(stringArray1);
      assertEquals("gP+m#$##X=", string2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "gP+m#$##X=", (CharSequence) "gP+m#$##X=");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("{}", 27, 3368);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.defaultString("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "(oJ8/$\"2K%cAW", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string5 = StringUtils.removeIgnoreCase("u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK", "f");
      assertEquals("u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.compare("", "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.wrapIfMissing("", "q");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK";
      stringArray0[1] = null;
      stringArray0[2] = "org.junitpioneer.jupiter.params.ShortRange";
      stringArray0[3] = "";
      stringArray0[4] = "u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK";
      stringArray0[5] = "org.junitpioneer.jupiter.params.ShortRange";
      String string7 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string7);
      
      int int2 = StringUtils.countMatches((CharSequence) null, 'i');
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = StringUtils.stripStart("x!b", "x!b");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "x!b";
      stringArray0[2] = "";
      stringArray0[3] = "x!b";
      stringArray0[4] = "blank_blank_blank_20141'118'14'-83'118";
      stringArray0[5] = "";
      stringArray0[6] = "x!b";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertEquals(9, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("blank_blank_blank_20141'118'14'-83'118");
      assertEquals("blank_blank_blank_20141'118'14'-83'118", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "blank_blank_blank_20141'118'14'-83'118");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "x!b");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "x!b", (CharSequence) "x!b");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("x!b", "blank_blank_blank_20141'118'14'-83'118", stringArray0);
      assertEquals("x!b", string5);
      assertEquals(9, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("MZhDw}r", "x!b", 101, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b", "\u0005~ts\"I./8L,!Jg{ctoffset cannot be negative");
      assertEquals("<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b", "<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b";
      boolean boolean1 = StringUtils.startsWithAny("<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBeforeLast(" 1m,Lw.O", "\u0005~ts\"I./8L,!Jg{ctoffset cannot be negative");
      assertEquals(" 1m,Lw.O", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)14;
      String string2 = StringUtils.repeat("", "\n", (int) (byte)14);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = locale0.getDisplayName();
      assertEquals("Japanese", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(string3);
      
      String string4 = StringUtils.join((long[]) null, '_');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "\r");
      assertFalse(boolean0);
      
      String string5 = StringUtils.stripEnd("ative", "org.junitpioneer.jupiter.params.LongRange");
      assertEquals("ativ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension", 917);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "vp(>6%RURZiX[g", 14);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("vp(>6%RURZiX[g");
      assertEquals("vp(>6%RURZiX[g", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("])`yNbJ", "]:mIsH$ep}wKGRz", "L]pKC\"Et&FuE");
      assertEquals("])`yNbJ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("])`yNbJ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, "noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 917;
      doubleArray0[1] = (double) (-1);
      String string6 = StringUtils.remove("L]pKC\"Et&FuE", "org.apache.commons.lang3.StringUtils");
      assertEquals("L]pKC\"Et&FuE", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissing("", "", stringArray0);
      assertEquals("", string7);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      String string0 = StringUtils.removeEndIgnoreCase("M#24]", (String) null);
      assertEquals("M#24]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M#24]", "f", (int) (short)8);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "1'k:.^iEA");
      assertEquals("", string2);
      assertFalse(stack0.contains(string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.TempDirectoryCannot store ");
      assertEquals("org.junitpioneer.jupiter.TempDirectoryCannot store", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("M#24]", (int) (short)8);
      assertEquals(" M#24]  ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("Strings must not be null", "");
      assertEquals("Strings must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.substringAfter("':6w%l[QzrP%;uJ)uR> ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("org.apache.common.lang3Charsets", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha("org.apache.common.lang3Charsets");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("7U*", "7U*", "7U*", 503);
      assertEquals("7U*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence1);
      assertTrue(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("7U*", 503);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("7U*", "7U*");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("7U*");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase("u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK");
      assertEquals("U&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kk", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.startsWith(string2, "7U*");
      assertTrue(boolean3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string4 = StringUtils.defaultString("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("Locale must not be null", "}OcDoX!9C");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string6 = StringUtils.removeIgnoreCase("(oJ8/$\"2K%cAW", "7U*");
      assertEquals("(oJ8/$\"2K%cAW", string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      int int1 = StringUtils.compare("7U*", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean4 = StringUtils.isAlphanumeric("7U*");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      String string7 = StringUtils.wrapIfMissing("(oJ8/$\"2K%cAW", (String) null);
      assertEquals("(oJ8/$\"2K%cAW", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.replace("P!K?(WiPEq96<#a$*", "P!K?(WiPEq96<#a$*", "WrNXX7,", 1918);
      assertEquals("WrNXX7,", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("WrNXX7,");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("WrNXX7,");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("58H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "V3:!4/lDs7", 6, 6);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((short[]) null, '\\', 102, 6);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string3 = StringUtils.stripEnd("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.stripToEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "{ O(<>#S3>xcr14");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceAll("org.junitpioneer.vintage.TimeoutExtension", "Minimum abbreviation width is %d", "h}J}");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("{ O(<>#S3>xcr14", "offset cannot be negativejIl, B1$_B'");
      assertEquals("offset cannot be negativejIl, B1$_B'", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'i';
      charArray0[2] = '*';
      charArray0[3] = 'p';
      charArray0[4] = '&';
      String string0 = StringUtils.rightPad("offset cannot be negative", (int) '*');
      assertEquals("offset cannot be negative                 ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) '*';
      longArray0[3] = (long) 'i';
      String string1 = StringUtils.join(longArray0, '+');
      assertEquals("105+43+42+105", string1);
      assertEquals(4, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {105L, 43L, 42L, 105L}, longArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("105+43+42+105", "offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("105+43+42+105", (String) null);
      assertEquals("105+43+42+105", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("offset cannot be negative");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String string0 = StringUtils.leftPad("oEb-6H Lh", (-615), ";S[sGxH@j!5}>{8");
      assertEquals("oEb-6H Lh", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("(oJ8/$\"2K%cAW", ";S[sGxH@j!5}>{8", 50, 967);
      assertEquals("(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripEnd("org.apache.commons.lang3.StringUtils", "M#24]YDXJU<Y\rb|LwSrd");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(";S[sGxH@j!5}>{8"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      int int0 = StringUtils.getFuzzyDistance("(oJ8/$\"2K%cAW", "org.apache.commons.lang3.StringUtils", locale0);
      assertEquals(1, int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      
      String string3 = "io";
      String[] stringArray2 = StringUtils.splitByWholeSeparator("io", "(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8");
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.replacePattern("org.apache.commons.lang3.StringUtils", "org.junitpioneer.jupiter.SystemPropertyExtension", "Strings must not be null");
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray3 = new String[5];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "(oJ8/$\"2K%cAW";
      stringArray3[1] = "M@^^'";
      stringArray3[2] = "(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8";
      stringArray3[3] = "RP 7,&Gc},)0=mm|";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("org.junitpioneer.jupiter.SystemPropertyExtension", stringArray0, stringArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 188 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "The Character must not be null");
      assertEquals("The Character must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertSame(classLoader0, classLoader2);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Class<Object> class2 = Object.class;
      ServiceLoader<Object> serviceLoader2 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      String string2 = StringUtils.difference((String) null, ", Length: 0");
      assertEquals(", Length: 0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "wFUAO*hXs*t@}-}");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0", "");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string4);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string5);
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string6);
      assertEquals(3, stringArray0.length);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("98h-onpJL-AByl\"`P", (CharSequence) null, stringArray0);
      assertEquals("98h-onpJL-AByl\"`P", string7);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", "M#24]");
      assertEquals("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      String string1 = StringUtils.join((Iterable<?>) serviceLoader0, "##mQ!<OiH>kzti]");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Class<String> class1 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("The character must not be null", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertSame(class1, class0);
      assertSame(classLoader0, classLoader2);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Class<Object> class2 = Object.class;
      ServiceLoader<Object> serviceLoader2 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      String string3 = StringUtils.difference("", "qX");
      assertEquals("qX", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", "qX");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "qX");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string7);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("qX", "##mQ!<OiH>kzti]", stringArray0);
      assertEquals("qX##mQ!<OiH>kzti]", string8);
      assertEquals(0, stringArray0.length);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.unwrap("$Rt@_Al^yhh[OW`]Y", "Hc#{9[D{$j{_Tfc");
      assertEquals("$Rt@_Al^yhh[OW`]Y", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween("\r", (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string4 = "";
      String string5 = StringUtils.swapCase((String) null);
      assertNull(string5);
      
      boolean boolean3 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string6 = "PTl~E<UVGB;{c,";
      String string7 = StringUtils.defaultString("PTl~E<UVGB;{c,");
      assertEquals("PTl~E<UVGB;{c,", string7);
      assertFalse(string7.equals((Object)charSequence1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '9', (-3307), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3307
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = "eityFpp]Y10\\`";
      String string1 = "6";
      String string2 = StringUtils.trimToEmpty("6");
      assertEquals("6", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("6", "6");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("6", string4);
      assertEquals(2, stringArray0.length);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "6", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string5 = ";BIj`lG+xV'w\"l";
      // Undeclared exception!
      try { 
        StringUtils.truncate("0#1YLnuc;/M", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.strip("*");
      assertEquals("*", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'b';
      charArray0[2] = 'a';
      charArray0[3] = 'D';
      charArray0[4] = '-';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'b', 'a', 'D', '-'}, charArray0);
      
      String string1 = StringUtils.upperCase("P~BXdFRP(NKus?Ec");
      assertEquals("P~BXDFRP(NKUS?EC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("*", "");
      assertEquals(1, int0);
      
      String string2 = StringUtils.right("\r", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "*", (CharSequence) "*");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("blank_blank_blank_2014", "org.junitpioneer.jupiter.RepeatFailedTestExtension", 0);
      assertEquals("blank_blank_blank_2014", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.rotate("Threshold must not be negative", 90);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "P~BXdFRP(NKus?Ec", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean2 = StringUtils.isNotBlank("P~BXDFRP(NKUS?EC");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "*";
      charSequenceArray0[1] = (CharSequence) "*";
      charSequenceArray0[2] = (CharSequence) "P~BXdFRP(NKus?Ec";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      short short1 = (short)50;
      shortArray0[2] = (short)50;
      shortArray0[3] = (short)4159;
      shortArray0[4] = (short)15;
      String string0 = "L+|fj9j";
      String string1 = StringUtils.substringBefore("L+|fj9j", "L+|fj9j");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = "fxeE?#asU>aUR";
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("fxeE?#asU>aUR", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\r", 31);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference(" ", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string3 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "5]tPL", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.repeat('L', 0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      String string5 = StringUtils.reverseDelimited("Failed to delete temp directory ", '5');
      assertEquals("Failed to delete temp directory ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Failed to delete temp directory ", 1332);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = "z:f{%t)l~o@!}A|O4hZ";
      String string1 = StringUtils.removeStartIgnoreCase("hf$q1!Jfl'#EO3`", "z:f{%t)l~o@!}A|O4hZ");
      assertEquals("hf$q1!Jfl'#EO3`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedHashSet0.add(locale0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) list0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      boolean boolean1 = linkedHashSet0.add(locale0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(boolean1 == boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("hf$q1!Jfl'#EO3`", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '~', 0, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.stripAccents(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('I', (-1));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("=offset cannot be negative", 1774, 545);
      assertEquals("=offset cannot be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Backupgm1gVcGki=#lw`_'|");
      assertEquals("|'_`wl#=ikGcVg1mgpukcaB", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("|'_`wl#=ikGcVg1mgpukcaB");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "\n");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1774;
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) 'I';
      String string5 = StringUtils.join(doubleArray0, 'I');
      assertEquals("1774.0I72.0I73.0", string5);
      assertEquals(3, doubleArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new double[] {1774.0, 72.0, 73.0}, doubleArray0, 0.01);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("", 'B');
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("\n", "Backupgm1gVcGki=#lw`_'|");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'H';
      intArray0[1] = (-1);
      intArray0[2] = 545;
      intArray0[3] = 545;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'I', 41, 545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase("\r");
      assertEquals("\r", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence1));
      assertTrue(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.startsWith("", "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.defaultString((String) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("@=zzHL.Uj(H", "");
      assertEquals("@=zzHL.Uj(H", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@=zzHL.Uj(H", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeIgnoreCase("\r", "(oJ8/$\"2K%cAW");
      assertEquals("\r", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)charSequence1));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int1 = StringUtils.compare("\r", "3zY8");
      assertEquals((-38), int1);
      assertFalse(int1 == int0);
      
      boolean boolean4 = StringUtils.isAlphanumeric("3zY8");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      String string7 = StringUtils.wrapIfMissing("V*i8d?i3G", "@=zzHL.Uj(H");
      assertEquals("@=zzHL.Uj(HV*i8d?i3G@=zzHL.Uj(H", string7);
      assertFalse(string7.equals((Object)charSequence1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("(oJ8/$\"2K%cAW"));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string8 = StringUtils.join((Iterable<?>) vector0, 'K');
      assertEquals("", string8);
      assertFalse(vector0.contains("(oJ8/$\"2K%cAW"));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, '$');
      assertEquals("", string0);
      assertFalse(linkedList0.contains('$'));
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", 'B');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("bn}iq,('V$?", "\n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "bn}iq,('V$?", "@b!%DVO\u0003aP:b6");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Locale locale0 = new Locale(" ");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(" ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(" ", locale0.toString());
      assertNotNull(locale0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "bn}iq,('V$?", charSequenceArray0[0], 12);
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "\n", charSequenceArray0[0]);
      assertEquals(15, int3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("!8 ^>U6ydh$F5JpS");
      assertEquals("!8 ^>U6ydh$F5JpS", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "!8 ^>U6ydh$F5JpS", (CharSequence) "", 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "Threshold must not be negativeThreshold must not be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.rightPad("", 0, "i\"Zs9");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean3 = stack0.add(locale0);
      assertTrue(boolean3);
      assertTrue(stack0.contains(locale0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = new Locale("p{InCombiningDiacriticalMarks}+");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("p{incombiningdiacriticalmarks}+", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("p{incombiningdiacriticalmarks}+", locale1.toString());
      assertNotNull(locale1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("C{Yp)t?le");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1634));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      charArray0[7] = 'I';
      charArray0[8] = '4';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertEquals(0, int1);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', '4'}, charArray0);
      
      String string2 = StringUtils.replaceIgnoreCase(") }#v-QHyrO) )cDO", "", "\n");
      assertEquals(") }#v-QHyrO) )cDO", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '%', (int) (short)7, (int) (short)7);
      assertNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "", 1945);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('I', (-4185));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("PuL", "...", "Object varargs must not be null");
      assertEquals("PuL", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((short[]) null, 'I', 275, 275);
      assertNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...", 2488);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.defaultString("{5%", (String) null);
      assertEquals("{5%", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("", "Object varargs must not be null", "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      int int2 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int2);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'i';
      charArray0[2] = '*';
      charArray0[3] = 'p';
      charArray0[4] = '&';
      String string0 = StringUtils.rightPad("offset cannot be negative", 2);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("offset cannot be negative", "offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringAfter("<$M1p(,dedF;v", "]dip-2t}t");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("offset cannot be negative", stringArray1);
      assertFalse(boolean1);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("8", ',', 'C');
      assertEquals("8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("8");
      assertEquals("8", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-2073));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad("", (-2073), "8");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "D1{%8");
      assertTrue(boolean0);
      
      String string5 = StringUtils.wrapIfMissing("}Y/GiYpB)t7BFA+", "");
      assertEquals("}Y/GiYpB)t7BFA+", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("8");
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {56}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.unwrap("\n", "");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "\r");
      assertEquals("\r\n\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failedto delete tempdirectory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate("", 3003);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("...");
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("Threshold must not be negative", "Threshold must not be negative", stringArray0);
      assertEquals("Threshold must not be negative", string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string7 = StringUtils.center("Threshold must not be negative", 424, "...");
      assertEquals(".....................................................................................................................................................................................................Threshold must not be negative.....................................................................................................................................................................................................", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string8 = StringUtils.removeStartIgnoreCase("\n", "l~RK/LV$f?9./Xz");
      assertEquals("\n", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.toRootLowerCase((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.removeStart("Threshold must not be negative", "...");
      assertEquals("Threshold must not be negative", string10);
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      
      String string11 = StringUtils.truncate("b-b h'I#~*Pjn2=fS(^", 3003);
      assertEquals("b-b h'I#~*Pjn2=fS(^", string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
      
      String string12 = StringUtils.rightPad("K[n1f!G?p", 97, "b-b h'I#~*Pjn2=fS(^");
      assertEquals("K[n1f!G?pb-b h'I#~*Pjn2=fS(^b-b h'I#~*Pjn2=fS(^b-b h'I#~*Pjn2=fS(^b-b h'I#~*Pjn2=fS(^b-b h'I#~*Pj", string12);
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string4));
      assertNotNull(string12);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string13 = StringUtils.replace("ExpectedExceptionoffset cannot be negative", "Jo)8_Il#USg-X1eB>R", "7f)G", 50);
      assertEquals("ExpectedExceptionoffset cannot be negative", string13);
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string6));
      assertNotNull(string13);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.mid("\r", (-679), 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse(">_,HHP%}(vKr,2PZ");
      assertEquals("ZP2,rKv(}%PHH,_>", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, (-325), '<');
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ZP2,rKv(}%PHH,_>";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "{}";
      charSequenceArray0[6] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.chomp("h9N](#Sk3CFG~p");
      assertEquals("h9N](#Sk3CFG~p", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 2);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(",");
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid(">snw7hU", (-2177), 2);
      assertEquals(">s", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("1ax0H/<<", 'r');
      assertEquals("1ax0H/<<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ">snw7hU", (CharSequence) "1ax0H/<<", 932);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.swapCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.defaultString("}<ZkPQ:o.r2%");
      assertEquals("}<ZkPQ:o.r2%", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("", "'N52E{td?r\"a:V[O@");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "@=zzHL.Uj(H");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeIgnoreCase((String) null, "YDXJU<Y\rb|LwSrdM#24]");
      assertNull(string5);
      
      int int1 = StringUtils.compare("", "O*eqj Y^^Ul^");
      assertEquals((-12), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string6 = StringUtils.wrapIfMissing("=", "offset cannot be negative");
      assertEquals("offset cannot be negative=offset cannot be negative", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string7);
      
      boolean boolean4 = StringUtils.startsWithIgnoreCase("offset cannot be negative=offset cannot be negative", (CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "lw'63pzyi");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("\u0005~ts\"I./8L,!Jg{ct", "\n");
      assertEquals((-5), int0);
      
      String string2 = StringUtils.getDigits("??*J8Dc,P;:6");
      assertEquals("86", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("vp(>6%RURZiX[g", "86");
      assertEquals("vp(>6%RURZiX[g", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("??*J8Dc,P;:6", "Vp(>6%RURZiX[g", stringArray0);
      assertEquals("Vp(>6%RURZiX[g??*J8Dc,P;:6", string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'I');
      assertNull(stringArray1);
      
      String string6 = StringUtils.repeat("\n", " zJ`$OS=NzTY.=(", 82);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertEquals("de", locale3.toString());
      assertEquals("de", locale3.getLanguage());
      assertNotNull(locale3);
      
      String string7 = StringUtils.lowerCase("??*J8Dc,P;:6", locale0);
      assertEquals("??*j8dc,p;:6", string7);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale3));
      assertTrue(locale0.equals((Object)locale2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("Expected exception %s was not thrown.", 'I');
      assertEquals("IExpected exception %s was not thrown.I", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("??*J8Dc,P;:6", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.strip("*");
      assertEquals("*", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'b';
      charArray0[2] = 'a';
      charArray0[3] = 'D';
      charArray0[4] = '-';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'b', 'a', 'D', '-'}, charArray0);
      
      String string1 = StringUtils.upperCase("P~BXdFRP(NKus?Ec");
      assertEquals("P~BXDFRP(NKUS?EC", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.right("\r", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "*", (CharSequence) "*");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("blank_blank_blank_2014", "org.junitpioneer.jupiter.RepeatFailedTestExtension", 0);
      assertEquals("blank_blank_blank_2014", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.rotate("Threshold must not be negative", 90);
      assertEquals("Threshold must not be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "P~BXdFRP(NKus?Ec", (CharSequence) "Threshold must not be negative");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "*";
      charSequenceArray0[1] = (CharSequence) "*";
      charSequenceArray0[2] = (CharSequence) "P~BXdFRP(NKus?Ec";
      charSequenceArray0[4] = (CharSequence) "\r";
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[2]);
      assertEquals(16, int3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, '%');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "\r");
      assertFalse(boolean0);
      
      String string4 = StringUtils.trim("_P4%j?d7Cm\"zz");
      assertEquals("_P4%j?d7Cm\"zz", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N~";
      stringArray0[1] = "$[T~B,[b}xn>c";
      stringArray0[2] = "L z[>Xp;gK";
      stringArray0[3] = "...";
      stringArray0[4] = "Don't clear/set the same property more than once.";
      stringArray0[5] = "&}gE*N\"VV";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("N~", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Don't clear/set the same property more than once.", (CharSequence) "L z[>Xp;gK", 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", 3);
      assertEquals("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Don't clear/set the same property more than once.", (-1449), "(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW");
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", "(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW");
      assertEquals(143, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("...");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeStart("5555", "7U*");
      assertEquals("5555", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", "Don't clear/set the same property more than once.");
      assertEquals("(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "$[T~B,[b}xn>c", (CharSequence) "(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW(oJ8/$\"2K%cAW", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.defaultString("L z[>Xp;gK", "&}gE*N\"VV");
      assertEquals("L z[>Xp;gK", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "L z[>Xp;gK");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.center((String) null, 3, '@');
      assertNull(string7);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 0);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "...", (-170), 0);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      
      String string8 = StringUtils.stripToNull("LLLLLLLLLLL`6B}X_LLLLLLLLLLL");
      assertEquals("LLLLLLLLLLL`6B}X_LLLLLLLLLLL", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "U\"<t&YTl0IM<.Y/}J", (CharSequence) "U\"<t&YTl0IM<.Y/}J");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.leftPad("\n", (-2064888134), "Search and Replace array lengths don't match: ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeFirst("Y1\"-S$Zn", "Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("Ig;,F");
      assertEquals("Ig;,F", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ig;,F", "Threshold must not be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("\n", "I3b:{%Q`JAsU[8;T");
      assertEquals((-95), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substring("Y1\"-S$Zn", (-95));
      assertEquals("Y1\"-S$Zn", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "Y1\"-S$Zn");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("M#24]");
      assertEquals("M#24", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "M#24", (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.abbreviate("6+ZQ<MD+r'qCn1NVy", 244);
      assertEquals("6+ZQ<MD+r'qCn1NVy", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (-95);
      String string8 = StringUtils.join(longArray0, '_');
      assertEquals("78_16_-95", string8);
      assertEquals(3, longArray0.length);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertArrayEquals(new long[] {78L, 16L, (-95L)}, longArray0);
      assertNotNull(string8);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("Y1\"-S$Zn", "6+ZQ<MD+r'qCn1NVy");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string9 = StringUtils.stripEnd("nt", "78_16_-95");
      assertEquals("nt", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string10 = StringUtils.wrap("K", ")<]RHR:9QM 4");
      assertEquals(")<]RHR:9QM 4K)<]RHR:9QM 4", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.getDigits("Expected exception %s was not thrown.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'i', (-1674), (-1674));
      assertEquals("", string2);
      assertEquals(0, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Expected exception %s was not thrown.", (CharSequence) "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, '\"', (-1377), (-4727));
      assertEquals("", string3);
      assertEquals(0, floatArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", "vp(>6%RURZiX[g");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", 2);
      assertEquals("  ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "  ";
      String string6 = StringUtils.repeat("vp(>6%RURZiX[g", (-4727));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Expected exception %s was not thrown.";
      charSequenceArray0[3] = (CharSequence) "vp(>6%RURZiX[g";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "vp(>6%RURZiX[g";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '\"');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "K|^lb,S");
      assertNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("K|^lb,S", "K|^lb,S", (-404));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.removeFirst("fra6-", "fra6-");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("fra6-", "*q_@/8u:aJER1ZuK~-", "T`2D3}A)ZfF");
      assertEquals("fra6-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "T`2D3}A)ZfF";
      charSequenceArray0[1] = (CharSequence) "fra6-";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.normalizeSpace("T`2D3}A)ZfF");
      assertEquals("T`2D3}A)ZfF", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]");
      assertEquals("M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", 78);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("T`2D3}A)ZfF", string4);
      assertFalse(boolean1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.left("PZI|9B.X)='#yKfti~'", (-203));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase((String) null, "fra6-", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, (-203));
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("fra6-");
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.repeat('o', 32);
      assertEquals("oooooooooooooooooooooooooooooooo", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.substringBetween("o`0`wz@", (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("tgq?vNEBj");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.leftPad("\n", (-2064888120), "Search and Replace array lengths don't match: ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", 'N');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '0';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'N', '0', 'N', 'N', 'N'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.truncate("\n", 40, 12);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = new Locale("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "d5Y(`");
      assertEquals(5, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "Threshold must not be negativeThreshold must not be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.rightPad("", 0, "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", 0, "*LH");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string6 = StringUtils.capitalize("f");
      assertEquals("F", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rightPad("\n", (-1), "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("\n", "\r");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "Threshold must not be negativeThreshold must not be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.rightPad("", 0, "i\"Zs9");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean3 = stack0.add(locale0);
      assertTrue(boolean3);
      assertTrue(stack0.contains(locale0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertFalse(stack1.contains(locale0));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Locale locale1 = Locale.lookup(arrayList0, stack1);
      assertFalse(stack1.contains(locale0));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(locale1);
      
      String string5 = StringUtils.lowerCase("jPN4pW(8zC1SOu4", locale0);
      assertEquals("jpn4pw(8zc1sou4", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd("Object varargs must not be null", (String) null);
      assertEquals("Object varargs must not be null", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripStart("=Tt<z", "");
      assertEquals("=Tt<z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-77);
      longArray0[3] = 1610L;
      longArray0[4] = (long) (byte)7;
      longArray0[5] = (long) (byte)64;
      longArray0[6] = 0L;
      String string3 = StringUtils.join(longArray0, 'z');
      assertEquals("95z-1z-77z1610z7z64z0", string3);
      assertEquals(7, longArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {95L, (-1L), (-77L), 1610L, 7L, 64L, 0L}, longArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("E/5-fNprF'+g\"", 'z');
      assertEquals("zE/5-fNprF'+g\"z", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty("95z-1z-77z1610z7z64z0");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.toRootUpperCase("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("=Tt<z");
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {61, 84, 116, 127, 60, 122}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = StringUtils.leftPad("\n", (-2064888120), "Search and Replace array lengths don't match: ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeFirst("Y1\"-S$Zn", "Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("Ig;,F");
      assertEquals("Ig;,F", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ig;,F", "Threshold must not be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-2694L);
      longArray0[1] = (long) 'N';
      longArray0[2] = (long) 'z';
      longArray0[3] = (long) '_';
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (long) 'N';
      longArray0[7] = 1610L;
      String string4 = StringUtils.join(longArray0, 'd');
      assertEquals("-2694d78d122d95d0d0d78d1610", string4);
      assertEquals(8, longArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new long[] {(-2694L), 78L, 122L, 95L, 0L, 0L, 78L, 1610L}, longArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("Ig;,F", 'N');
      assertEquals("NIg;,FN", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNotEmpty("NIg;,FN");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.toRootUpperCase("Y1\"-S$Zn");
      assertEquals("Y1\"-S$ZN", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Y1\"-S$Zn";
      stringArray0[1] = "jIl, B1$_B'offset cannot be negative";
      stringArray0[2] = "Y1\"-S$Zn";
      stringArray0[3] = "Threshold must not be negative";
      stringArray0[4] = "-2694d78d122d95d0d0d78d1610";
      stringArray0[5] = "^13j64H^\n";
      stringArray0[6] = "...";
      stringArray0[7] = "Ig;,F";
      String string7 = StringUtils.replaceEachRepeatedly("\n", stringArray0, stringArray0);
      assertEquals("\n", string7);
      assertEquals(8, stringArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failedto delete tempdirectory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("", "^5$Xph@^5$Xph@");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWith("", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) 'H';
      doubleArray0[5] = (double) (-1447);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 'G';
      String string6 = StringUtils.join(doubleArray0, 'G');
      assertEquals("-1.0G72.0G72.0G72.0G72.0G-1447.0G-1.0G71.0", string6);
      assertEquals(8, doubleArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new double[] {(-1.0), 72.0, 72.0, 72.0, 72.0, (-1447.0), (-1.0), 71.0}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("Threshold must not be negative", 'y');
      assertEquals("yThreshold must not be negativey", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(string3, "Threshold must not be negative");
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("7U*", "7U*", "7U*", 503);
      assertEquals("7U*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence1);
      assertFalse(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("7U*", 503);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("7U*", "7U*");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("7U*");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase("u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK");
      assertEquals("U&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kk", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.startsWith(string2, "7U*");
      assertTrue(boolean3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)charSequence1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.defaultString("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("Locale must not be null", "}OcDoX!9C");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("U&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kk");
      assertEquals("", locale0.getCountry());
      assertEquals("u&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2kk", locale0.getLanguage());
      assertEquals("u&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2ku&r}ko:2kk", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "7U*", (CharSequence) "Locale must not be null", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("b)~7");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      CharSequence charSequence2 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("", (int) 'C', 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      String string7 = StringUtils.removeIgnoreCase("offset cannot be negativejIl, B1$_B'", "");
      assertEquals("offset cannot be negativejIl, B1$_B'", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlphanumeric("offset cannot be negativejIl, B1$_B'");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string8 = StringUtils.wrapIfMissing("kl YQn-o4wD?D", "");
      assertEquals("kl YQn-o4wD?D", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.toRootUpperCase((String) null);
      assertNull(string9);
      
      boolean boolean3 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "MP`.azPOA vKS", "\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("", (-1), "WP4:kGZ(,o=J*CGh`<");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[1], charSequenceArray0[2]);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.leftPad("oEb-6H Lh", (-615), ";S[sGxH@j!5}>{8");
      assertEquals("oEb-6H Lh", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-99L);
      longArray0[0] = (long) (-615);
      longArray0[2] = (long) (-615);
      longArray0[3] = (long) (-615);
      longArray0[5] = (long) 'M';
      longArray0[6] = 5460L;
      longArray0[7] = 5460L;
      longArray0[8] = 5460L;
      String string1 = StringUtils.join(longArray0, '*', (-615), (-615));
      assertEquals("", string1);
      assertEquals(9, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {(-615L), 0L, (-615L), (-615L), 0L, 77L, 5460L, 5460L, 5460L}, longArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWith("oEb-6H Lh", "oEb-6H Lh");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("oEb-6H Lh", supplier0);
      assertEquals("oEb-6H Lh", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Failed to delete temp directory ");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Failed to delete temp directory ", (CharSequence) "Threshold must not be negative", 733);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.swapCase("Cannot clear and set the following system properties at the same time: ");
      assertEquals("cANNOT CLEAR AND SET THE FOLLOWING SYSTEM PROPERTIES AT THE SAME TIME: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Failed to delete temp directory ", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceChars("cANNOT CLEAR AND SET THE FOLLOWING SYSTEM PROPERTIES AT THE SAME TIME: ", "Threshold must not be negative", "org.junitpioneer.jupiter.params.RangeSourceProvider)oHCK,o*Xes");
      assertEquals("cANNOopCLEARpANDpSEopoHEpFOLLOWINGpSYSoEMpPROPERoIESpAopoHEpSAMEpoIME:p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("aySo,~X`,Ko7VY!");
      assertEquals("aySo,~X`,Ko7VY!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("dp", ")oHCK,o*Xes");
      assertEquals(59, int0);
      
      String string2 = StringUtils.getDigits(")oHCK,o*Xes");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.StringUtils", "M#24]");
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("dp");
      assertEquals("d", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "??*J8Dc,P;:6", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string5 = StringUtils.abbreviate("dp", (int) (byte)16);
      assertEquals("dp", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '_';
      String string6 = StringUtils.join(longArray0, 'z');
      assertEquals("95", string6);
      assertEquals(1, longArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new long[] {95L}, longArray0);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("95", "M#24]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.stripEnd("d", "95");
      assertEquals("d", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceAll("$Rt3BqdG", "d", "");
      assertEquals("$Rt3BqG", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("Backup", "");
      assertEquals("Backup", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("ExpectedException", "offset cannot be negative");
      assertEquals("ExpectedException", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("YNU/s)_]#2n#Y", "", (-1792));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("!nCL$t1JW0(d:a:"));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("!nCL$t1JW0(d:a:"));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      boolean boolean2 = stack0.add("KGl7c`Wetcji");
      assertTrue(boolean2);
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("!nCL$t1JW0(d:a:"));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains("!nCL$t1JW0(d:a:"));
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals("KGl7c`Wetcji", string4);
      assertTrue(stack0.contains(string4));
      assertFalse(stack0.contains("!nCL$t1JW0(d:a:"));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern("&xZ*Y!ed4H<!@X]", "");
      assertEquals("&xZ*Y!ed4H<!@X]", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("h", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("{}", 27, 3368);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}<ZkPQ:o.r2%";
      String string3 = StringUtils.reverse(" ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.rightPad("{}", 3368, '_');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) string4;
      charSequenceArray0[5] = (CharSequence) "";
      String string5 = StringUtils.strip("\r");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(charSequenceArray0[4], "");
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = "Failed to delete temp directory ";
      String string1 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = null;
      String string4 = StringUtils.remove((String) null, 'L');
      assertNull(string4);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string5 = StringUtils.join((Iterable<?>) serviceLoader0, "");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "5]tPL", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat('L', 0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("5]tPL"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = '5';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'L', '5'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '5', (-1036), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1036
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "u&", false);
      assertEquals((-2), int0);
      
      String string0 = StringUtils.replacePattern("X7R;ELujH", "X7R;ELujH", "X7R;ELujH");
      assertEquals("X7R;ELujH", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      String string1 = StringUtils.join(intArray0, 'N', 2306, (-2));
      assertEquals("", string1);
      assertEquals(2, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {(-2), (-2)}, intArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.joinWith("", objectArray0);
      assertEquals("", string2);
      assertEquals(0, objectArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "X7R;ELujH", (-2), 6);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("u&", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("u&", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.rightPad("-b", 55);
      assertEquals("-b                                                     ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "X7R;ELujH", (CharSequence) "X7R;ELujH", (-6046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'I', 11, 11);
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.wrap(" ", '\u0005');
      assertEquals("\u0005 \u0005", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '7', 128, 128);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)0;
      shortArray0[1] = (short)0;
      short short1 = (short)50;
      shortArray0[2] = (short)50;
      shortArray0[3] = (short)4159;
      shortArray0[4] = (short)15;
      String string0 = "L+|fj9j";
      String string1 = StringUtils.substringBefore("L+|fj9j", "L+|fj9j");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = "fxeE?#asU>aUR";
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("fxeE?#asU>aUR", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.stripStart(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("l");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals("l", charSequence0);
      assertEquals(1, stringArray0.length);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 97);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)14;
      String string2 = StringUtils.repeat("", "\n", (int) (byte)14);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string3 = locale0.getDisplayName();
      assertEquals("Japanese", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string3);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertEquals("de", locale3.getLanguage());
      assertNotNull(locale3);
      
      String string4 = StringUtils.lowerCase("{QyL&Sk9Xc,/23", locale3);
      assertEquals("{qyl&sk9xc,/23", string4);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertEquals("de", locale3.getLanguage());
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("^13j64H^", '%');
      assertEquals("%^13j64H^%", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n\n\n\n\n\n\n\n\n\n\n\n\n", "{QyL&Sk9Xc,/23");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("\r", 2235);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("ir<pxJ", "ir<pxJ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("tN0", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 1114102, 1114102);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.right("1ac]R3'DH;y$", 31);
      assertEquals("1ac]R3'DH;y$", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '$';
      charArray0[2] = 'S';
      charArray0[3] = '~';
      charArray0[4] = 'S';
      charArray0[5] = 'D';
      charArray0[6] = 'm';
      charArray0[7] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "1ac]R3'DH;y$", charArray0);
      assertEquals(0, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', '$', 'S', '~', 'S', 'D', 'm', 's'}, charArray0);
      
      String string1 = StringUtils.truncate(";BIj`lG+xV'w\"l", 31, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = new Locale("1ac]R3'DH;y$");
      assertEquals("1ac]r3'dh;y$", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("1ac]r3'dh;y$", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray0 = StringUtils.split("d5Y(`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "1ac]R3'DH;y$");
      assertEquals(12, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ";BIj`lG+xV'w\"l", 12, 1);
      assertEquals("", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("(oJ8/$\"2K%cAW", "vp(>6%RURZiX[g");
      assertEquals("(oJ8/$\"2K%cAW", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.abbreviate("ePAr`=z!D]gQ}", "..[.", 11, 11);
      assertEquals("..[.z!D]gQ}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("..[.z!D]gQ}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.abbreviate("offset cannot be negative", "w1Fk", 5);
      assertEquals("ow1Fk", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("Failed to get parent directory from provider");
      assertEquals("Failed to get parent directory from provider", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("Failed to get parent directory from provider");
      assertEquals("failed to get parent directory from provider", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("o0&.eMGbVg%r$sl[", "failed to get parent directory from provider");
      assertEquals("o0&.eMGbVg%r$sl[", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Failed to get parent directory from provider");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Locale must not be null", "\r\n", "\r\n");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.chop("Timeout");
      assertEquals("Timeou", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Timeout", "Timeout", "Timeou");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, '>');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("", (int) 'C', 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      String string7 = StringUtils.join(doubleArray0, 'H');
      assertEquals("0.0H0.0", string7);
      assertEquals(2, doubleArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", '?');
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\n", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'i';
      charArray0[2] = '*';
      charArray0[3] = 'p';
      charArray0[4] = '&';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'i', '*', 'p', '&'}, charArray0);
      
      String string1 = StringUtils.rightPad("offset cannot be negative", 2);
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", "offset cannot be negative");
      assertEquals("offset cannot be negative", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringAfter("<$M1p(,dedF;v", "]dip-2t}t");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'i', '*', 'p', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Failed to delete temp directory ", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Failed to delete temp directory ");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.removeIgnoreCase("\u0005~ts\"I./8L,!Jg{ct", "");
      assertEquals("\u0005~ts\"I./8L,!Jg{ct", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.compare("\n", "\u0005~ts\"I./8L,!Jg{ct");
      assertEquals(5, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\u0005~ts\"I./8L,!Jg{ct");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("@/?D", "");
      assertEquals("@/?D", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'W');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.joinWith("gx-y/JQc6Q", stringArray0);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("*", "*", "*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "^13j64H^");
      assertEquals("^13j64H^\n^13j64H^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("^13j64H^", "Cannot store ", "^13j64H^\n^13j64H^");
      assertEquals("^13j64H^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("Cannot store ", 'z');
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.truncate((String) null, 527);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((long[]) null, '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.appendIfMissingIgnoreCase("\"*.C", "<$M1p(,dedF;v", stringArray0);
      assertEquals("\"*.C<$M1p(,dedF;v", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("(oJ8/$\"2K%cAW)/h[b", "<$M1p(,dedF;v");
      assertEquals("(oJ8/$\"2K%cAW)/h[b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("c", (String) null, (-606), 2);
      assertEquals("c", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("\"*.C<$M1p(,dedF;v", "<$M1p(,dedF;v");
      assertEquals("\"*.C<$M1p(,dedF;v", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumeric("<$M1p(,dedF;v");
      assertFalse(boolean0);
      
      try { 
        StringUtils.getBytes("", "c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(".rE;Failed to get parent directory from provider");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.getDigits("@=zzHL.Uj(H");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("@=zzHL.Uj(H");
      assertEquals("@=zzHL.Uj(H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("d1DKM66oG-d2::[", "d1DKM66oG-d2::[");
      assertEquals("d1DKM66oG-d2::[d1DKM66oG-d2::[d1DKM66oG-d2::[", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "@=zzHL.Uj(H";
      charSequenceArray0[1] = (CharSequence) "d1DKM66oG-d2::[";
      charSequenceArray0[2] = (CharSequence) "d1DKM66oG-d2::[";
      charSequenceArray0[3] = (CharSequence) "d1DKM66oG-d2::[d1DKM66oG-d2::[d1DKM66oG-d2::[";
      charSequenceArray0[4] = (CharSequence) "d1DKM66oG-d2::[d1DKM66oG-d2::[d1DKM66oG-d2::[";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "@=zzHL.Uj(H";
      stringArray0[2] = "@=zzHL.Uj(H";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "@=zzHL.Uj(H";
      stringArray0[6] = "d1DKM66oG-d2::[d1DKM66oG-d2::[d1DKM66oG-d2::[";
      stringArray0[7] = "d1DKM66oG-d2::[";
      stringArray0[8] = "d1DKM66oG-d2::[";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string3);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("@=zzHL.Uj(H", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.removeEnd("@=zzHL.Uj(H", "ysD2w8uj{Rr9NC1");
      assertEquals("@=zzHL.Uj(H", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsAny("@=zzHL.Uj(H", stringArray0);
      assertTrue(boolean2);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '0');
      assertNull(string0);
      
      int int0 = StringUtils.compare("gm1gVc", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("u\"_tWChvNf");
      assertEquals("u\"_twchvnf", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("u\"_tWChvNf", (String) null);
      assertEquals("u\"_tWChvNf", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, "u\"_twchvnf");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.defaultString("u\"_tWChvNf");
      assertEquals("u\"_tWChvNf", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.join((double[]) null, '0');
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("$d", '0');
      assertEquals("0$d0", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("u\"_tWChvNf", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.remove((String) null, '0');
      assertNull(string1);
      
      String string2 = null;
      int int0 = StringUtils.compare("gm1gVc", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootLowerCase("u\"_tWChvNf");
      assertEquals("u\"_twchvnf", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("tu$;^G7xWbBf\":E~nvp(>6%RURZiX[g", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("/]", "ePAr`=z!D]gQ}");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("B", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.wrapIfMissing("ePAr`=z!D]gQ}", (String) null);
      assertEquals("ePAr`=z!D]gQ}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.capitalize("nGuQ4~7QQZX");
      assertEquals("NGuQ4~7QQZX", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("a|bb8E\"r!ih.", supplier0);
      assertEquals("a|bb8E\"r!ih.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[1] = (CharSequence) "a|bb8E\"r!ih.";
      charSequenceArray0[2] = (CharSequence) "NGuQ4~7QQZX";
      charSequenceArray0[3] = (CharSequence) "NGuQ4~7QQZX";
      String string2 = StringUtils.prependIfMissing(" is not in the range '0' - '9'", "a|bb8E\"r!ih.", charSequenceArray0);
      assertEquals(" is not in the range '0' - '9'", string2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a|bb8E\"r!ih.", (CharSequence) " is not in the range '0' - '9'", 1585);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap("\n", '~');
      assertEquals("~\n~", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, '~');
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("?R\"rF", '_');
      assertEquals("_?R\"rF_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("_?R\"rF_", "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll(" ", "ei_", "_?R\"rF_");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 31);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.stripStart("Threshold must not be negative", (String) null);
      assertEquals("Threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) '_';
      longArray0[2] = (long) '_';
      longArray0[3] = (long) 'z';
      longArray0[4] = (long) 'z';
      String string4 = StringUtils.join(longArray0, '/');
      assertEquals("47/95/95/122/122", string4);
      assertEquals(5, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new long[] {47L, 95L, 95L, 122L, 122L}, longArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("SuEVR!t?`J", "(eLaH'*", "Threshold must not be negative");
      assertEquals("SuEVR!t?`J", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", 55);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("Du=!(f#vS$e5N[~*o`", "l8O>%T#L");
      assertEquals("Du=!(f#vS$e5N[~*o`", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14", 3164);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeStart("gm1gVcGki=#lw`_'|", "Backup");
      assertEquals("gm1gVcGki=#lw`_'|", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "gm1gVcGki=#lw`_'|", "Q]7s|VS+");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("{ O(<>#S3>XCR14");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("Illegal range. The step cannot be zero.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean2);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.upperCase("Q]7s|VS+");
      assertEquals("Q]7S|VS+", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "Du=!(f#vS$e5N[~*o`", 55);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string6 = StringUtils.rotate("{ O(<>#S3>xcr14", 3164);
      assertEquals(" O(<>#S3>xcr14{", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 281L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("281-10", string1);
      assertEquals(3, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {281L, (-1L), 0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "281-10");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "");
      assertEquals(13, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Cannot store ", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".XQVx*X%*a2Y8lz~", (String) null, 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(".XQVx*X%*a2Y8lz~"));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("^k?gG");
      assertTrue(boolean0);
      assertTrue(stack0.contains("^k?gG"));
      assertFalse(stack0.contains(".XQVx*X%*a2Y8lz~"));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[^k?gG]", stack0.toString());
      
      boolean boolean1 = stack0.add((String) null);
      assertTrue(boolean1);
      assertTrue(stack0.contains("^k?gG"));
      assertFalse(stack0.contains(".XQVx*X%*a2Y8lz~"));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[^k?gG, null]", stack0.toString());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains(".XQVx*X%*a2Y8lz~"));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains(".XQVx*X%*a2Y8lz~"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals("", string3);
      assertFalse(stack1.contains(".XQVx*X%*a2Y8lz~"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(stack1, stack0);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("!ncl$t1jw0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("/SD6Z`qU+YSo", '');
      assertEquals("/SD6Z`qU+YSo", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.rightPad("N59b", 23, ".:>M^MX@</.aN9x<H/3");
      assertEquals("N59b.:>M^MX@</.aN9x<H/3", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "N59b.:>M^MX@</.aN9x<H/3", (CharSequence) ".:>M^MX@</.aN9x<H/3", 23);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "Threshold must not be negativeThreshold must not be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.rightPad("", 127, "blank_blank_blank_2014");
      assertEquals("blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[1] = (CharSequence) "blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank";
      charSequenceArray0[2] = (CharSequence) "Threshold must not be negativeThreshold must not be negative";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.replace("", "blank_blank_blank_2014", "", 1);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", charSequenceArray0[1], charSequenceArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-343.6F);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'O', 2, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.wrap("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.repeat('I', (-1));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "?xx";
      String string4 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)14;
      String string5 = StringUtils.join(byteArray0, 'c');
      assertEquals("103c89c-20c14", string5);
      assertEquals(4, byteArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)103, (byte)89, (byte) (-20), (byte)14}, byteArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverseDelimited("$v`", 'c');
      assertEquals("$v`", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int3 = 1412;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)103;
      floatArray0[3] = (float) (byte)14;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\"', (-9), (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Threshold must not be negative", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'G', 54, (-1443));
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWith("", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      String string6 = StringUtils.removeIgnoreCase("o1okc", "");
      assertEquals("o1okc", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumeric("^5$Xph@^5$Xph@");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replacePattern("Backup", "Backup", "Backup");
      assertEquals("Backup", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("JF$", "Backup", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '@');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F&P<E|", (CharSequence) "F&P<E|");
      assertEquals(0, int0);
      
      String string0 = StringUtils.truncate("b?{Io^>Wd", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      String string0 = StringUtils.truncate("\n", (int) (byte)12);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", 937);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains((byte)12));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains((byte)12));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'u');
      assertEquals("", string1);
      assertFalse(stack0.contains((byte)12));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = '0';
      int int2 = StringUtils.indexOfAny(charSequenceArray0[6], charArray0);
      assertEquals((-1), int2);
      assertEquals(7, charArray0.length);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u', 'u', '0'}, charArray0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("\n", charSequenceArray1);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.truncate("5", 9);
      assertEquals("5", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("5", "5");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.substringBefore("*", (String) null);
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Vp(>6%RURZiX[g", (CharSequence) "vp(>6%RURZiX[g", 101);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Vp(>6%RURZiX[g", (CharSequence) "Vp(>6%RURZiX[g");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("xJZXLo_^~v>r0$H", "", 917, 11);
      assertEquals("xJZXLo_^~v>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("vp(>6%RURZiX[g", "tu$;^G7xWbBf\":E~n");
      assertEquals("vp(>6%RURZiX[g", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("vp(>6%RURZiX[g");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        StringUtils.getBytes("vp(>6%RURZiX[g", "xJZXLo_^~v>r0$H");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      try { 
        StringUtils.getBytes(">0z{9\u0002", ">0z{9\u0002");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "\n", (String) null);
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripStart("=Tt<z", "");
      assertEquals("=Tt<z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte) (-77);
      longArray0[3] = 1610L;
      longArray0[4] = (long) (byte)7;
      longArray0[5] = (long) (byte)64;
      longArray0[6] = 0L;
      String string3 = StringUtils.join(longArray0, 'z');
      assertEquals("95z-1z-77z1610z7z64z0", string3);
      assertEquals(7, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new long[] {95L, (-1L), (-77L), 1610L, 7L, 64L, 0L}, longArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("95z-1z-77z1610z7z64z0", "", "E/5-fNprF'+g\"");
      assertEquals("95z-1z-77z1610z7z64z0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty("95z-1z-77z1610z7z64z0");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.replacePattern("95z-1z-77z1610z7z64z0", "_5*Y6'hAfqBF", "");
      assertEquals("95z-1z-77z1610z7z64z0", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "95z-1z-77z1610z7z64z0", (CharSequence) "");
      assertEquals(21, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.removeStartIgnoreCase("!nCL$t1JW0(d:a:", "_5*Y6'hAfqBF");
      assertEquals("!nCL$t1JW0(d:a:", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'k';
      String string7 = StringUtils.valueOf(charArray0);
      assertEquals("zk", string7);
      assertEquals(2, charArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new char[] {'z', 'k'}, charArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.split("\n\n", (String) null, 18);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 498);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripToNull("h8.'2)<~~(7xI?Bs");
      assertEquals("h8.'2)<~~(7xI?Bs", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("h8.'2)<~~(7xI?Bs", 9992);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("h8.'2)<~~(7xI?Bs", "Locale must not be null");
      assertEquals("Locale must not be null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("  dA(xE@`.U=jRJV,?", 'v');
      assertEquals("  dA(xE@`.U=jRJV,?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "  dA(xE@`.U=jRJV,?", (CharSequence) "  dA(xE@`.U=jRJV,?", 111);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("m_&Q)dm[W(uJP9", "Minimum abbreviation width is %d", 134);
      assertEquals("m_&Q)dm[W(uJP9", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Xo3)The character ", 134, "");
      assertEquals("                                                          Xo3)The character                                                           ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ",pp_";
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("\n^cE%3j642^");
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=11 cap=12]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(11, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=11 cap=12]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\n^cE%3j642^", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "m_&Q)dm[W(uJP9", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "  dA(xE@`.U=jRJV,?", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v', 'v'}, charArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "                                                          Xo3)The character                                                           ");
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.removeEnd("Failed to delete temp directory ", "^13j64H^");
      assertEquals("Failed to delete temp directory ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("^13j64H^");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Failed to delete temp directory ", "`8c`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Object varargs must not be null", 2361, "^13j64H^");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      StringUtils.leftPad("f~", 65536, 'H');
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.rightPad("Vn8f$AlR$", 68, "Vn8f$AlR$");
      assertEquals("Vn8f$AlR$Vn8f$AlR$Vn8f$AlR$Vn8f$AlR$Vn8f$AlR$Vn8f$AlR$Vn8f$AlR$Vn8f$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.center(", '", 24, ", '");
      assertEquals(", ', ', ',, ', ', ', ', ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("org.apache.commons.lang3.StringUtils", stringArray0, stringArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("\n", "org.apache.commons.lang3.StringUtils", 111);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 111, "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffseoffset cannot be negativeoffset cannot be negativeoffset", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.capitalize("VYT,-/wA[p[q6eV");
      assertEquals("VYT,-/wA[p[q6eV", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[2] = (CharSequence) ":6";
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.TempDirectoryCannot store \n", "=i2,sv zAWR#", Integer.MIN_VALUE);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(":6", string0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.TempDirectoryCannot store \n", "E?");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("?FZgd#7d5Cxa3sU{Dh", "'R=|xdPm'O9\u0002TPHz)");
      assertEquals("'R=|xdPm'O9\u0002TPHz)?FZgd#7d5Cxa3sU{Dh'R=|xdPm'O9\u0002TPHz)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("E?");
      assertEquals("E?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("E?", "E?", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertNull(stringArray1);
      
      String string3 = StringUtils.chomp("c*", (String) null);
      assertEquals("c*", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("c*", "org.junitpioneer.jupiter.TempDirectoryCannot store \n", Integer.MIN_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      charSequenceArray0[1] = (CharSequence) "t6slUMU)o! ,.`V";
      String string1 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'f');
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "t6slUMU)o! ,.`V", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "t6slUMU)o! ,.`V", charArray0);
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.leftPad("", (-1885), 'f');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.rightPad("(oJ8/$\"2K%cAW", 3);
      assertEquals("(oJ8/$\"2K%cAW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("go]Z G`j'Ue;&z/", (String) null);
      assertEquals("go]Z G`j'Ue;&z/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("tQ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringAfter("tQ", (String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.isNumeric("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceAll(" vs 0ILx0", " vs 0ILx0", (String) null);
      assertEquals(" vs 0ILx0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWithAny(" vs 0ILx0", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removePattern(")", "");
      assertEquals(")", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.substringAfter("blank_blank_blank_201-", "blank_blank_blank_201-");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.center("]e_KJ:", (-4364), 'l');
      assertEquals("]e_KJ:", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("", 'l');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("]e_KJ:", "", true);
      assertEquals(6, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 1269);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.removeStart("]e_KJ:", "uhBm( GEeN|'S&@");
      assertEquals("]e_KJ:", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("i\"Zs9");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("i\"Zs9", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.removeEnd("gLG+Cf=1[J>BO|", (String) null);
      assertEquals("gLG+Cf=1[J>BO|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)12;
      String string0 = StringUtils.join(byteArray0, ':');
      assertEquals("37:0:12:0:37:12", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)12, (byte)0, (byte)37, (byte)12}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("qWPh`$FC", "qWPh`$FC", "5,@BN{`D@0K!>TZ@D");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("qWPh`$FC", '$', '=');
      assertEquals("qWPh`=FC", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("!RjH67m#4w1T", "u&r}Ko:2", (byte)12, Integer.MAX_VALUE);
      assertEquals("!RjH67m#4w1Tu&r}Ko:2", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("!RjH67m#4w1Tu&r}Ko:2");
      assertEquals("!RjH67m#4w1Tu&r}Ko:2", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isWhitespace("!RjH67m#4w1Tu&r}Ko:2");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("!RjH67m#4w1Tu&r}Ko:2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.chomp("r}Ko:2");
      assertEquals("r}Ko:2", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeIgnoreCase("37:0:12:0:37:12", "qWPh`$FC");
      assertEquals("37:0:12:0:37:12", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.compare("q{:g/A$[", "<^}K/4=8gw~");
      assertEquals(53, int0);
      
      String string7 = StringUtils.unwrap("FT>ePBo58#Db>5e", "Locale must not be null");
      assertEquals("FT>ePBo58#Db>5e", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAlphanumeric("FT>ePBo58#Db>5e");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string8 = StringUtils.wrapIfMissing("F!Q\"5sAL9#'<PmX", "b)");
      assertEquals("b)F!Q\"5sAL9#'<PmXb)", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Q}Y-+\"9");
      assertEquals("q}y-+\"9", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "q}y-+\"9", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.repeat('I', 15);
      assertEquals("IIIIIIIIIIIIIII", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, ".cHX", (String) null);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnce("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "`");
      assertEquals("`", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("M#24]<$M1p(,dedF;v", '=', '=');
      assertEquals("M#24]<$M1p(,dedF;v", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("org.junitpioneer.jupiter.TempDirectory", "gm1gVc", 0, (-1437));
      assertEquals("gm1gVcorg.junitpioneer.jupiter.TempDirectory", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("tu$;^G7xWbBf\":E~n");
      assertEquals("tu$;^G7xWbBf\":E~n", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace("!RjH67m#4w1T");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("tu$;^G7xWbBf\":E~n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.chomp("M#24]<$M1p(,dedF;v");
      assertEquals("M#24]<$M1p(,dedF;v", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split("`i", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1));
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.removeIgnoreCase((String) null, "`");
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string8 = StringUtils.appendIfMissingIgnoreCase("r}Ko:2", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals("r}Ko:2Aborting to protect against StackOverflowError - output of one loop is the input of another", string8);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (-1L);
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("127-1", string1);
      assertEquals(2, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {127L, (-1L)}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "Search and Replace array lengths don't match: ");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.wrap("127-1", "");
      assertEquals("127-1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat("", 4039);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("127-1", "", 0, 2520);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.wrapIfMissing("", "fy]4mtQMi|n0=1ExQ_");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", (-1451));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.getDigits("");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripAccents("");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.wrap("", "");
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertNotNull(string9);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 8);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-348));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Locale locale0 = new Locale("\n");
      assertEquals("\n", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\n", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.prependIfMissing("\n", " ", (CharSequence[]) null);
      assertEquals(" \n", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "\r");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.difference("cF&", ":6");
      assertEquals(":6", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "cF&";
      charSequenceArray0[1] = (CharSequence) "cF&";
      charSequenceArray0[2] = (CharSequence) ":6";
      charSequenceArray0[3] = (CharSequence) "cF&";
      charSequenceArray0[4] = (CharSequence) "cF&";
      charSequenceArray0[5] = (CharSequence) ":6";
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", ":6", charSequenceArray0);
      assertEquals("maxWith cannot be negative:6", string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("maxWith cannot be negative:6", "]]>}tDHs?ALjh?P");
      assertEquals("maxWith cannot be negative:6", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("RSt", "maxWith cannot be negative:6", "maxWith cannot be negative");
      assertEquals("RSt", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("\norg.junitpioneer.jupiter.TempDirectoryCannot store ");
      assertEquals(" erots tonnaCyrotceriDpmeT.retipuj.reenoiptinuj.gro\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("Locale must not be null");
      assertEquals("lOCALE MUST NOT BE NULL", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("lOCALE MUST NOT BE NULL");
      assertTrue(boolean0);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("Object varargs must not be null", ":6", charSequenceArray0);
      assertEquals(":6Object varargs must not be null", string6);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "RSt", "Cannot store ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.join((double[]) null, 'A');
      assertNull(string7);
      
      String string8 = StringUtils.remove("Object varargs must not be null", "8b|j6I,");
      assertEquals("Object varargs must not be null", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'N');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Cannot store ", (String) null);
      assertEquals("Cannot store", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) null, (-3383));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = StringUtils.join((float[]) null, 'y', 97, 97);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "...";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("...", string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "...");
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("...", 9, "...");
      assertEquals(".........", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("O6|k5h\"ikw>1LH", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " ";
      stringArray1[1] = " ";
      stringArray1[2] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      int int0 = 19;
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "...", "...");
      assertTrue(boolean0);
      
      String string1 = StringUtils.truncate("...", 19, 19);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = new Locale("d5Y(`");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("d5y(`", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("d5y(`", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "...";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "d5Y(`";
      stringArray0[4] = "";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\n";
      stringArray1[1] = "{ O(<>#S3>xcr14";
      stringArray1[2] = "";
      stringArray1[3] = "\n";
      stringArray1[4] = "...";
      stringArray1[5] = "...";
      stringArray1[6] = "j}/unS>;#!";
      stringArray1[7] = "\n";
      stringArray1[8] = "...";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("{ O(<>#S3>xcr14", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = "OxZ3^[x@b";
      String string1 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String string2 = StringUtils.join(longArray0, '');
      assertEquals("0-10", string2);
      assertEquals(3, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("", 0, '');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll((String) null, "1Z$[af>(");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "1Z$[af>(", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) " ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension", 917);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "vp(>6%RURZiX[g", 4);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("vp(>6%RURZiX[g");
      assertEquals("vp(>6%RURZiX[g", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("])`yNbJ", "]:mIsH$ep}wKGRz", "L]pKC\"Et&FuE");
      assertEquals("])`yNbJ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("])`yNbJ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, "noisnetxEnoitpecxEdetcepxE.egatniv.reenoiptinuj.gro", stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'A');
      assertEquals("0.0A-1.0", string6);
      assertEquals(2, doubleArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("L]pKC\"Et&FuE", "org.apache.commons.lang3.StringUtils");
      assertEquals("L]pKC\"Et&FuE", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "...");
      assertEquals("V...(>6%RURZ...X[", string8);
      assertEquals(3, stringArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((float[]) null, '<');
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("`;+>3}hry~>.V_o", "yNhQ4=3C8CkHj4]C<");
      assertEquals("`;+>3}hry~>.V_o", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      float[] floatArray0 = new float[3];
      String string0 = StringUtils.join(floatArray0, 'P');
      assertEquals("0.0P0.0P0.0", string0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.trim("  dA(xE@`.U=jRJV,?");
      assertEquals("dA(xE@`.U=jRJV,?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("dA(xE@`.U=jRJV,?");
      assertEquals(16, int0);
      
      HashMap<Locale.Category, Object> hashMap0 = new HashMap<Locale.Category, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Collection<Object> collection0 = hashMap0.values();
      assertFalse(collection0.contains("dA(xE@`.U=jRJV,?"));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      String string1 = StringUtils.join((Iterable<?>) collection0, "{}");
      assertEquals("", string1);
      assertFalse(collection0.contains("{}"));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int1 = StringUtils.compareIgnoreCase("Array and element cannot both be null", "\r", true);
      assertEquals(84, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "eFX37d[eM&A", 17);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('&', (-1792));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains((-1792)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.clear();
      assertFalse(arrayList0.contains((-1792)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string3 = StringUtils.join((List<?>) arrayList0, 'e', 67, 12);
      assertEquals("", string3);
      assertFalse(arrayList0.contains((-1792)));
      assertFalse(string3.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.lastOrdinalIndexOf("dA(xE@`.U=jRJV,?", "", 432);
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 12;
      floatArray0[2] = (float) 432;
      floatArray0[3] = (float) 17;
      floatArray0[4] = (float) '&';
      floatArray0[5] = (float) 67;
      floatArray0[6] = (float) 17;
      floatArray0[7] = (float) 17;
      floatArray0[8] = (float) 'e';
      String string4 = StringUtils.join(floatArray0, '&');
      assertEquals("101.0&12.0&432.0&17.0&38.0&67.0&17.0&17.0&101.0", string4);
      assertEquals(9, floatArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new float[] {101.0F, 12.0F, 432.0F, 17.0F, 38.0F, 67.0F, 17.0F, 17.0F, 101.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst("{}Cannot store ", (String) null, "org.apache.commons.lang3.StringUtils");
      assertEquals("{}Cannot store ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'M', 7, 7);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)14;
      String string3 = StringUtils.join(byteArray0, 'c');
      assertEquals("103c89c-20c14", string3);
      assertEquals(4, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)103, (byte)89, (byte) (-20), (byte)14}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("$v`", 'c');
      assertEquals("$v`", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.replaceEach("\r", stringArray0, stringArray0);
      assertEquals("\r", string5);
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("GLgxRdlvDXxob");
      assertEquals("GLgxRdlvDXxob", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceEach(" ", (String[]) null, (String[]) null);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("\r", " ");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (-1L);
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("127-1", string1);
      assertEquals(2, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {127L, (-1L)}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("127-1", '');
      assertEquals("-1127", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.wrap("Search and Replace array lengths don't match: ", ", '");
      assertEquals(", 'Search and Replace array lengths don't match: , '", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) ", 'Search and Replace array lengths don't match: , '";
      String string4 = StringUtils.wrap("{", "-1127");
      assertEquals("-1127{-1127", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[1] = (CharSequence) "-1127{-1127";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-1127";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'', ''}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[3], "{");
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "t6slUMU)o! ,.`V";
      charSequenceArray0[1] = (CharSequence) "t6slUMU)o! ,.`V";
      String string1 = StringUtils.prependIfMissingIgnoreCase("t6slUMU)o! ,.`V", "t6slUMU)o! ,.`V", charSequenceArray0);
      assertEquals("t6slUMU)o! ,.`V", string1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("t6slUMU)o! ,.`V");
      assertEquals("t6slUMU)o! ,.`V", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("rOh?YIhk~&CZ^[", "t6slUMU)o! ,.`V");
      assertEquals("rOh?YIhk~&CZ^[", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("t6slUMU)o! ,.`V", "5_YdL|2;W\"%je Z");
      assertEquals("t6slUMU)o! ,.`V", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "t6slUMU)o! ,.`V", (CharSequence) "t6slUMU)o! ,.`V");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "t6slUMU)o! ,.`V", (CharSequence) "5_YdL|2;W\"%je Z");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.wrap("gej\"-8U%aa", "Du=!(f#vS$e5N[~*o`");
      assertEquals("Du=!(f#vS$e5N[~*o`gej\"-8U%aaDu=!(f#vS$e5N[~*o`", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isBlank("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat("5_YdL|2;W\"%je Z", 0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("Du=!(f#vS$e5N[~*o`gej\"-8U%aaDu=!(f#vS$e5N[~*o`", "Du=!(f#vS$e5N[~*o`gej\"-8U%aaDu=!(f#vS$e5N[~*o`", 8, 10);
      assertEquals("Du=!(f#vDu=!(f#vS$e5N[~*o`gej\"-8U%aaDu=!(f#vS$e5N[~*o`e5N[~*o`gej\"-8U%aaDu=!(f#vS$e5N[~*o`", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "t6slUMU)o! ,.`V");
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, charSequenceArray0.length);
      
      String string8 = StringUtils.wrapIfMissing("Du=!(f#vS$e5N[~*o`", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDu=!(f#vS$e5N[~*o`Aborting to protect against StackOverflowError - output of one loop is the input of another", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      int int2 = StringUtils.lastOrdinalIndexOf("t6slUMU)o! ,.`V", "gej\"-8U%aa", (-1451));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string9 = StringUtils.getDigits((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.stripAccents("r}Ko:2");
      assertEquals("r}Ko:2", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-550L);
      longArray0[3] = (-2910L);
      longArray0[4] = 0L;
      longArray0[5] = (-880L);
      longArray0[6] = 1L;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '0', Integer.MAX_VALUE, (-1673));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("`i", "`", "`");
      assertEquals("`i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string3);
      
      String string4 = StringUtils.join((short[]) null, '5', (-2089443546), 0);
      assertNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("a~IfG0w8|", "gm1gVc");
      assertEquals("a~IfG0w8|", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("p{InCombiningDiacriticalMarks}+"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1171;
      longArray0[2] = (long) 2;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '5', (-2089443546), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'i';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">B`i<II)", charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'R', 'i'}, charArray0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string0 = StringUtils.repeat('&', 6370);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('&'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'i', 0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 12
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.trim("i dA(xE@`.U=jRJV,?");
      assertEquals("i dA(xE@`.U=jRJV,?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("i dA(xE@`.U=jRJV,?");
      assertEquals(18, int0);
      
      HashMap<Locale.Category, Object> hashMap0 = new HashMap<Locale.Category, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Collection<Object> collection0 = hashMap0.values();
      assertFalse(collection0.contains("i dA(xE@`.U=jRJV,?"));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      String string1 = StringUtils.join((Iterable<?>) collection0, "{}");
      assertEquals("", string1);
      assertFalse(collection0.contains("{}"));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("su<5e1>|psV1");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.capitalize("<Ft(/]");
      assertEquals("<Ft(/]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("eFX37d[eM&A", 99);
      assertEquals("eFX37d[eM&A                                                                                        ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "<Ft(/]", (CharSequence) "eFX37d[eM&A                                                                                        ", 99);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("...", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("su<5e1>|psV1", "su<5e1>|psV1");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.toRootLowerCase("<Ft(/]");
      assertEquals("<ft(/]", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("U", 111);
      assertEquals("U", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "<Ft(/]", (CharSequence) "U");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string6 = StringUtils.replaceOnce("i dA(xE@`.U=jRJV,?", "su<5e1>|psV1", "offset cannot be negative");
      assertEquals("i dA(xE@`.U=jRJV,?", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean3);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("', has a length less than 2", "offset cannot be negative", 3793);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      char char0 = 'N';
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.appendIfMissingIgnoreCase("\"*.C", "<$M1p(,dedF;v", stringArray0);
      assertEquals("\"*.C<$M1p(,dedF;v", string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("(oJ8/$\"2K%cAW)/h[b", "<$M1p(,dedF;v");
      assertEquals("(oJ8/$\"2K%cAW)/h[b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\"*.C", "(oJ8/$\"2K%cAW)/h[b");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("<$M1p(,dedF;v");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("<$M1p(,dedF;v", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("{ O(<>#S3>xcr14", "{ O(<>#S3>xcr14");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", 55);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{ O(<>#S3>xcr14";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = "Du=!(f#vS$e5N[~*o`";
      String string4 = "\\l8O>%T#L";
      String string5 = StringUtils.removeStartIgnoreCase("Du=!(f#vS$e5N[~*o`", "l8O>%T#L");
      assertEquals("Du=!(f#vS$e5N[~*o`", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "{ O(<>#S3>xcr14", 3164);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string6 = StringUtils.removeEndIgnoreCase("M+09cc+{C&}6XNi(jD", "  dA(");
      assertEquals("M+09cc+{C&}6XNi(jD", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEnd("_q^@0$yM9GLyF[", "{ O(<>#S3>xcr14");
      assertEquals("_q^@0$yM9GLyF[", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8HGf?", "Du=!(f#vS$e5N[~*o`", (-389));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string5));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string5));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string5));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-389));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -389
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String string0 = StringUtils.stripStart("D", "");
      assertEquals("D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = priorityQueue0.poll();
      assertEquals(0, priorityQueue0.size());
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("I^", (CharSequence) null, 1796);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '$');
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1719);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.difference("4p.$$`0:/$ty-", "4p.$$`0:/$ty-");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("P7*(?4Qf.OJvdMcI&i/", (-4083));
      assertEquals("P7*(?4Qf.OJvdMcI&i/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.TempDirectoryCannot store ", "org.junitpioneer.jupiter.TempDirectoryCannot store ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.getDigits("!+4");
      assertEquals("4", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("S;s", "offset cannot be negative");
      assertEquals("S;s", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("", "!+4");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M#24]", "!+4", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("P7*(?4Qf.OJvdMcI&i/");
      assertTrue(boolean0);
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.contains("P7*(?4Qf.OJvdMcI&i/"));
      assertEquals("[P7*(?4Qf.OJvdMcI&i/]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      
      boolean boolean1 = stack0.add("P7*(?4Qf.OJvdMcI&i/");
      assertTrue(boolean1);
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.contains("P7*(?4Qf.OJvdMcI&i/"));
      assertTrue(boolean1 == boolean0);
      assertEquals("[P7*(?4Qf.OJvdMcI&i/, P7*(?4Qf.OJvdMcI&i/]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains(string3));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.contains("P7*(?4Qf.OJvdMcI&i/"));
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertEquals("[P7*(?4Qf.OJvdMcI&i/, P7*(?4Qf.OJvdMcI&i/]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "rN");
      assertEquals("P7*(?4Qf.OJvdMcI&i/rNP7*(?4Qf.OJvdMcI&i/", string5);
      assertFalse(stack0.contains(string3));
      assertTrue(stack0.contains("P7*(?4Qf.OJvdMcI&i/"));
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(stack0, stack1);
      assertEquals("[P7*(?4Qf.OJvdMcI&i/, P7*(?4Qf.OJvdMcI&i/]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      int int0 = 0;
      String string1 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "`i";
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceIgnoreCase("`i", "`", "`");
      assertEquals("`i", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string5);
      
      String string6 = StringUtils.join((short[]) null, '5', (-2089443546), 0);
      assertNull(string6);
      
      String string7 = "a~IfG0w8|";
      String string8 = StringUtils.repeat('5', (-1));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("`"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string9 = StringUtils.join((List<?>) arrayList0, 'e', 14, 14);
      assertEquals("", string9);
      assertFalse(arrayList0.contains("`"));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "`i", (CharSequence) "a~IfG0w8|");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "`i", (-1), (-1508));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("<Ft(/]", "org.apache.commons.lang3.StringUtils", 262);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "<Ft(/]", 256);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("<F(/]", string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "-tV(CNb|<Ft(/]-tV(CNb|", "YHlVjE");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("<Ft(/]", "**");
      assertEquals("**<Ft(/]**", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("<Ft(/]", "YHlVjE", "u&r}Ko:2");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", " ", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "*", "*");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("*", (-1172), (-1172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.difference("cF&", ":6");
      assertEquals(":6", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "cF&";
      charSequenceArray0[1] = (CharSequence) "cF&";
      charSequenceArray0[2] = (CharSequence) ":6";
      charSequenceArray0[3] = (CharSequence) "cF&";
      charSequenceArray0[4] = (CharSequence) "cF&";
      charSequenceArray0[5] = (CharSequence) ":6";
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", ":6", charSequenceArray0);
      assertEquals("maxWith cannot be negative:6", string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("maxWith cannot be negative:6", "]]>}tDHs?ALjh?P");
      assertEquals("maxWith cannot be negative:6", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("6'N,my");
      assertEquals("6'N,my", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ":6", charSequenceArray0[1], 16);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '_';
      floatArray0[4] = (float) 16;
      floatArray0[6] = (float) '_';
      String string4 = StringUtils.join(floatArray0, 'g', 1412, 1412);
      assertEquals("", string4);
      assertEquals(7, floatArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new float[] {95.0F, 0.0F, 0.0F, 0.0F, 16.0F, 0.0F, 95.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "", 1412);
      assertEquals((-1), int1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("ivQ", 114, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "{ O(<>#S3>XCR14";
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", 55);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[0] = (CharSequence) "{ O(<>#S3>xcr14";
      charSequenceArray0[3] = (CharSequence) "{ O(<>#S3>XCR14";
      charSequenceArray0[4] = (CharSequence) "{ O(<>#S3>XCR14";
      boolean boolean1 = StringUtils.startsWithAny("{ O(<>#S3>XCR14", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = "\\l8O>%T#L";
      String string4 = StringUtils.removeStartIgnoreCase("Du=!(f#vS$e5N[~*o`", "l8O>%T#L");
      assertEquals("Du=!(f#vS$e5N[~*o`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "{ O(<>#S3>xcr14", 3164);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("Q]7s|VS+", "Du=!(f#vS$e5N[~*o`", charSequenceArray0);
      assertEquals("Q]7s|VS+", string5);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = "Backup";
      String string7 = StringUtils.removeStart("gm1gVcGki=#lw`_'|", "Backup");
      assertEquals("gm1gVcGki=#lw`_'|", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "gm1gVcGki=#lw`_'|", "Q]7s|VS+");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("{ O(<>#S3>XCR14");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("DefaultLocale", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      int int1 = StringUtils.indexOfAny((CharSequence) stringArray0[3], (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(9, stringArray0.length);
      assertFalse(int1 == int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'N');
      assertEquals("", string1);
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase("<Ft(/]  dA(xE@`.U=jRJV,?", locale0);
      assertEquals("<FT(/]  DA(XE@`.U=JRJV,?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("<$M1p(,dedF;v", 2);
      assertEquals("<$M1p(,dedF;v", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.mid(".naS|{", 2449, 29);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "<FT(/]  DA(XE@`.U=JRJV,?");
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("':6w%l[QzrP%;uJ)uR> ", "':6w%l[QzrP%;uJ)uR> ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.difference("cF&", ":6");
      assertEquals(":6", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "cF&";
      charSequenceArray0[1] = (CharSequence) "cF&";
      charSequenceArray0[2] = (CharSequence) ":6";
      charSequenceArray0[3] = (CharSequence) "cF&";
      charSequenceArray0[4] = (CharSequence) "cF&";
      charSequenceArray0[5] = (CharSequence) ":6";
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", ":6", charSequenceArray0);
      assertEquals("maxWith cannot be negative:6", string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("maxWith cannot be negative:6", "]]>}tDHs?ALjh?P");
      assertEquals("maxWith cannot be negative:6", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("6'N,my");
      assertEquals("6'N,my", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ":6", charSequenceArray0[1], 16);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '_';
      floatArray0[4] = (float) 16;
      floatArray0[6] = (float) '_';
      String string4 = StringUtils.mid(":6", 1412, (-2730));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string5);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("maxWith cannot be negative:6"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'I', (-217), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -217
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.prependIfMissing((String) null, "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.overlay("", "", 0, (-1940));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], "");
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Locale locale0 = Locale.forLanguageTag("', is neither of type Map.Entry nor an Array");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertFalse(hashSet0.contains(locale0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) hashSet0, locale_FilteringMode0);
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(list0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      assertFalse(hashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(list1);
      
      Locale locale1 = new Locale("C_W7Id==v3q");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("c_w7id==v3q", locale1.toString());
      assertEquals("c_w7id==v3q", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertEquals("", string3);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("c_w7id==v3q", locale1.toString());
      assertEquals("c_w7id==v3q", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(string3);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", (-3310));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("", 0, 0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      String string7 = StringUtils.firstNonEmpty(stringArray1);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.stripToNull(".NNiHCJH<");
      assertEquals(".NNiHCJH<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("NAv4iXTsEpx{0Z", 'n');
      assertEquals("nNAv4iXTsEpx{0Zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("nNAv4iXTsEpx{0Zn", "NAv4iXTsEpx{0Z");
      assertEquals("nNAv4iXTsEpx{0Zn", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("nNAv4iXTsEpx{0Zn");
      assertEquals("nNAv4iXTsEpx{0Zn", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nNAv4iXTsEpx{0Zn");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootLowerCase("nNAv4iXTsEpx{0Zn");
      assertEquals("nnav4ixtsepx{0zn", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("NAv4iXTsEpx{0Z", stringArray0);
      assertEquals("nNAv4iXTsEpx{0ZNNAv4iXTsEpx{0ZAvNAv4iXTsEpx{0Z4NAv4iXTsEpx{0ZiNAv4iXTsEpx{0ZXNAv4iXTsEpx{0ZTsNAv4iXTsEpx{0ZEpxNAv4iXTsEpx{0Z{NAv4iXTsEpx{0Z0NAv4iXTsEpx{0ZZn", string4);
      assertEquals(11, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("NAv4iXTsEpx{0Z", 'n', '8');
      assertEquals("NAv4iXTsEpx{0Z", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "nNAv4iXTsEpx{0Zn", 1093, 1093);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("nNAv4iXTsEpx{0Zn", "NAv4iXTsEpx{0Z", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.wrapIfMissing("RepeatFailedTestExtension", '8');
      assertEquals("8RepeatFailedTestExtension8", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("f#x_\"kR!8e1'<l", "");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat("Cannot store ", "nNAv4iXTsEpx{0Zn", (-3041));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string9 = StringUtils.join((Object[]) stringArray0, "f`3}");
      assertEquals("nf`3}Nf`3}Avf`3}4f`3}if`3}Xf`3}Tsf`3}Epxf`3}{f`3}0f`3}Zn", string9);
      assertEquals(11, stringArray0.length);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.isAlphanumeric("nNAv4iXTsEpx{0Zn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Cannot store "));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Cannot store ");
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("OxZ3^[x@b"));
      assertTrue(linkedList0.contains("Cannot store "));
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, "E3kFt$6XE5{BC/");
      assertEquals("Cannot store ", string1);
      assertFalse(linkedList0.contains("E3kFt$6XE5{BC/"));
      assertTrue(linkedList0.contains("Cannot store "));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Cannot store ", "-O]2U", "eFX37d[eM&A");
      assertEquals("Cannot store ", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.defaultString("OxZ3^[x@b", "u&r}Ko:2");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("+~!", "9@c`8~?;EMt>IH0", "g-~MG3Gvj7QG_");
      assertEquals("+~!", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("WW<~v=yCa");
      assertEquals("ww<~v=yca", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "+~!";
      charSequenceArray0[2] = (CharSequence) "eFX37d[eM&A";
      charSequenceArray0[3] = (CharSequence) "Cannot store ";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("7.'M=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "?xx";
      int int0 = (-3273);
      Vector<String> vector0 = null;
      try {
        vector0 = new Vector<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("6", "6");
      assertTrue(boolean0);
      
      String string0 = "";
      String string1 = StringUtils.center("6", (-2031), 'L');
      assertEquals("6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("6", 'U');
      assertEquals("6", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string3 = "h%q2?^Sp%H)ep";
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, "h%q2?^Sp%H)ep");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("v9*", "v9*", false);
      assertEquals(0, int0);
      
      String string5 = "org.junitpioneer.jupiter.TempDirectoryCannot store ";
      String string6 = StringUtils.wrap("org.junitpioneer.jupiter.TempDirectoryCannot store ", (String) null);
      assertEquals("org.junitpioneer.jupiter.TempDirectoryCannot store ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.junitpioneer.jupiter.TempDirectoryCannot store ", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.repeat('S', (-101));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("6"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'z', (-2031), 757);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2031
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Threshold must not be negative", string3);
      assertEquals(2, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("", "Threshold must not be negative", stringArray0);
      assertEquals("", string4);
      assertEquals(2, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("org.junitpioneer.jupiter.params.FloatRange", "^5$Xph@^5$Xph@", 1592);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertNotNull(locale3);
      
      String string6 = StringUtils.left("Threshold must not be negative", 1592);
      assertEquals("Threshold must not be negative", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("nb2", '/');
      assertEquals("/nb2/", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string5, "^5$Xph@^5$Xph@");
      assertFalse(boolean0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\n", "\n", 321);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.overlay("", "", 0, (-1940));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = Locale.forLanguageTag("', is neither of type Map.Entry nor an Array");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.reverse("wEcFx-w8s9`PJk>");
      assertEquals(">kJP`9s8w-xFcEw", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      assertTrue(boolean3);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.containsOnly(charSequenceArray0[6], "ctory");
      assertTrue(boolean4);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1940);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, 'H');
      assertEquals("-1940.0H0.0H0.0", string4);
      assertEquals(3, doubleArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new double[] {(-1940.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.remove("", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 498);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("bMG2", "dBD&v*\"{ov7");
      assertEquals("bMG2", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("bMG2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, ";'#UyE7]a?", 64, 64);
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'i';
      charArray0[2] = '*';
      charArray0[3] = 'p';
      charArray0[4] = '&';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'+', 'i', '*', 'p', '&'}, charArray0);
      
      String string1 = StringUtils.rightPad("offset cannot be negative", 2);
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", "offset cannot be negative");
      assertEquals("offset cannot be negative", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("pqLC8g");
      assertEquals("PQLC8G", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(".", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.removeEnd(stringArray0[2], stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("...", string0);
      assertEquals("...", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.isNumeric("...");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.unwrap(":m(l.]~^~X:", "H");
      assertEquals(":m(l.]~^~X:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      String string1 = StringUtils.join((Iterable<?>) serviceLoader0, "##mQ!<OiH>kzti]");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      serviceLoader0.reload();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      Class<String> class1 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("The character must not be null", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertSame(class1, class0);
      assertSame(classLoader0, classLoader2);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Class<Object> class2 = Object.class;
      ServiceLoader<Object> serviceLoader2 = ServiceLoader.load(class2);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      String string3 = StringUtils.difference("", "qX");
      assertEquals("qX", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("DefaultTimeZone", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDefaultTimeZoneAborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDefaultTimeZoneAborting to protect against StackOverflowError - output of one loop is the input of another", "qX");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDefaultTimeZoneAborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDefaultTimeZoneAborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherDefaultTimeZoneAborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("qX", "##mQ!<OiH>kzti]", stringArray0);
      assertEquals("qX##mQ!<OiH>kzti]", string8);
      assertEquals(1, stringArray0.length);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.unwrap("$Rt@_Al^yhh[OW`]Y", "Hc#{9[D{$j{_Tfc");
      assertEquals("$Rt@_Al^yhh[OW`]Y", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.defaultString("i\"Zs9");
      assertEquals("i\"Zs9", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "i\"Zs9", (CharSequence) "");
      assertEquals(5, int0);
      
      String string6 = StringUtils.removeIgnoreCase("':^s?V", (String) null);
      assertEquals("':^s?V", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string7 = StringUtils.wrapIfMissing("", "':^s?V");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
      
      boolean boolean4 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!ncl$t1jw0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("xJZXLo_^~v>r0$H", "!ncl$t1jw0(d:a:", (-1304), 24);
      assertEquals("xJZXLo_^~v>r0$H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotEmpty("!nCL$t1JW0(d:a:");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replace("xJZXLo_^~v>r0$H", "Strings must not be null", "xJZXLo_^~v>r0$H", (-1792));
      assertEquals("xJZXLo_^~v>r0$H", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("5UEUx}QaCg<OODribv=", "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertEquals("!nCL$t1JW0(d:a:5UEUx}QaCg<OODribv=", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("6");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      String string1 = StringUtils.removeEndIgnoreCase("6", "6");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      stringArray0[1] = "6";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("6", string2);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("^5$Xph@^5$Xph@", "6", stringArray0);
      assertEquals("6^5$Xph@^5$Xph@", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("u&r}Ko:2", "mFX1^il", 53);
      assertEquals("u&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2mFX1^ilu&r}Ko:2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("de", locale3.toString());
      assertNotNull(locale3);
      
      String string5 = StringUtils.lowerCase("N7A>Ys", locale0);
      assertEquals("n7a>ys", string5);
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("mFX1^il", '?');
      assertEquals("?mFX1^il?", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("^5$Xph@^5$Xph@", "eityFpp]Y10`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("z\"^ ?:[<yPXo", "z\"^ ?:[<yPXo");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11
         // z\"^ ?:[<yPXo
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.removeEnd("^5$Xph@", "^5$Xph@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "^5$Xph@", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "^5$Xph@";
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'k', (-2045), (-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.chomp(";z;BGHB`S25");
      assertEquals(";z;BGHB`S25", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.chomp("^cE%3j642^\n");
      assertEquals("^cE%3j642^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)12;
      String string0 = StringUtils.join(byteArray0, ':');
      assertEquals("37:0:12:0:37:12", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte)12, (byte)0, (byte)37, (byte)12}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("qWPh`$FC", "qWPh`$FC", "5,@BN{`D@0K!>TZ@D");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("qWPh`$FC", '$', '=');
      assertEquals("qWPh`=FC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("!RjH67m#4w1T", "u&r}Ko:2", (byte)12, Integer.MAX_VALUE);
      assertEquals("!RjH67m#4w1Tu&r}Ko:2", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("!RjH67m#4w1Tu&r}Ko:2");
      assertEquals("!RjH67m#4w1Tu&r}Ko:2", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isWhitespace("!RjH67m#4w1Tu&r}Ko:2");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("!RjH67m#4w1Tu&r}Ko:2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.chomp("r}Ko:2");
      assertEquals("r}Ko:2", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("&a`][p[ub", "q{:g/A$[", (int) (byte)0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.removeIgnoreCase("r}Ko:2", "F!Q\"5sAL9#'<PmX");
      assertEquals("r}Ko:2", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("/RXd{=@UMN0cxb%", "r}Ko:2", stringArray0);
      assertEquals("/RXd{=@UMN0cxb%r}Ko:2", string7);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("k&>p_0O,%,%#('?N");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("!<5yZe*,P]/I,;T4");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(list0.contains("!<5yZe*,P]/I,;T4"));
      assertEquals(2, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null, 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean2 = stack0.add("qbi\"&#i~n\"y4");
      assertTrue(boolean2);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("qbi\"&#i~n\"y4"));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[qbi\"&#i~n\"y4]", stack0.toString());
      
      boolean boolean3 = stack0.add("!<5yZe*,P]/I,;T4");
      assertTrue(boolean3);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[qbi\"&#i~n\"y4, !<5yZe*,P]/I,;T4]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains("!<5yZe*,P]/I,;T4"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[qbi\"&#i~n\"y4, !<5yZe*,P]/I,;T4]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "qbi\"&#i~n\"y4");
      assertEquals("qbi\"&#i~n\"y4qbi\"&#i~n\"y4!<5yZe*,P]/I,;T4", string0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("!<5yZe*,P]/I,;T4"));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[qbi\"&#i~n\"y4, !<5yZe*,P]/I,;T4]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("{U]^");
      assertEquals("{U]^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "qbi\"&#i~n\"y4qbi\"&#i~n\"y4!<5yZe*,P]/I,;T4", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.removePattern("y>7x-Lvl7kg\"r2JH<N", "qbi\"&#i~n\"y4");
      assertEquals("y>7x-Lvl7kg\"r2JH<N", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("#v8TGZrMG|as8cui]ol", "Object varargs must not be null");
      assertEquals("#v8TGZrMG|as8cui]ol", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("`i", "`", "`");
      assertEquals("`i", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string3);
      
      String string4 = StringUtils.join((short[]) null, '5', (-2089443546), 0);
      assertNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("a~IfG0w8|", "gm1gVc");
      assertEquals("a~IfG0w8|", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string5));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'e', (int) (short) (-1858), 2600);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1858
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("B]$zuWm9?~Mx~e=@`", "B]$zuWm9?~Mx~e=@`");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failedto delete tempdirectory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Threshold must not be negative", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("", "Failedto delete tempdirectory ");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWith("", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeIgnoreCase("o1okc", "");
      assertEquals("o1okc", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumeric("^5$Xph@^5$Xph@");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string4);
      
      String string5 = StringUtils.join((short[]) null, '!', (int) (short) (-1858), 100);
      assertNull(string5);
      
      String string6 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string6);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string7 = StringUtils.join((List<?>) stack0, '<', 10, (-890));
      assertEquals("", string7);
      assertFalse(stack0.contains(""));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(string7);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(byteArray0);
      
      String string8 = StringUtils.remove("", 'd');
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r\n", (CharSequence) null, 1043);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = "";
      char char0 = 'L';
      String string4 = StringUtils.center("", 0, 'L');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("Minimum abbreviation width is %d", 'L');
      assertEquals("Minimum abbreviation width is %d", string5);
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "\r", false);
      assertEquals(1, int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\r", 0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = (-1036);
      String string6 = StringUtils.repeat('x', (-1036));
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("\r"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripAccents("QV3+N*<[#^G-I");
      assertEquals("QV3+N*<[#^G-I", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ">-4t%", 2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.center("", 0, 'L');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)charSequence1));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("Minimum abbreviation width is %d", 'L');
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "\r", false);
      assertEquals(1, int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\r", 0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.repeat('x', (-1036));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("\r", "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string6 = StringUtils.stripEnd("h", "`_]g|.U]Y5AA/\">`GN");
      assertEquals("h", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.getDigits((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 7, "~|X;qt;;$LEv");
      assertNull(string0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "~|X;qt;;$LEv");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "bSFiN", (CharSequence) "bSFiN");
      assertEquals(1, int0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "...");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.truncate("l..", 1, 1);
      assertEquals(".", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, "bSFiN", "...");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "l..";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 1.0F;
      String string3 = StringUtils.join(floatArray0, '8');
      assertEquals("1.081.081.0", string3);
      assertEquals(3, floatArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "VM1v2u^");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = (-3201);
      String string2 = StringUtils.repeat('I', (-3201));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "@PUk(|cq_Ow; d";
      String string4 = ") 51*";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@PUk(|cq_Ow; d", ") 51*", Integer.MAX_VALUE, (-3201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F&|", (CharSequence) "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.center("\r", (-1), "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 281L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("281-10", string1);
      assertEquals(3, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {281L, (-1L), 0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", "281-10");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "");
      assertEquals(13, int0);
      
      String string3 = StringUtils.rightPad("", 13, '');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll((String) null, "1Z$[af>(");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "OxZ3^[x@b";
      String string5 = StringUtils.replaceEach("]|A^2)W=NzWv@%Jgo*b", stringArray0, stringArray0);
      assertEquals("]|A^2)W=NzWv@%Jgo*b", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, "*UMS`K**lK;7R-]", (-112));
      assertNull(string6);
      
      String string7 = StringUtils.center("{c8GEgg_Bk-_Ezvk}", (-1353), "offset cannot be negative");
      assertEquals("{c8GEgg_Bk-_Ezvk}", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '8';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)15;
      String string2 = StringUtils.join(byteArray0, '^', (int) (byte)25, (-3607));
      assertEquals("", string2);
      assertEquals(2, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)25, (byte)15}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.wrap("=o-5sWD_A", "");
      assertEquals("=o-5sWD_A", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isBlank("=o-5sWD_A");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.repeat("'L3w)HST0zQjS", 1712);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.wrapIfMissing("2WW<~v=yCa", "gej\"-8U%aa");
      assertEquals("gej\"-8U%aa2WW<~v=yCagej\"-8U%aa", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.getDigits("...");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents("u&9;U- ;F]).VGd");
      assertEquals("u&9;U- ;F]).VGd", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String string0 = StringUtils.wrap("<Ft(/]", "-tV(CNb|");
      assertEquals("-tV(CNb|<Ft(/]-tV(CNb|", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "<Ft(/]", (CharSequence) "-tV(CNb|<Ft(/]-tV(CNb|", 10);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "  dA(xE@`.U=jRJV,?", (CharSequence) "-tV(CNb|<Ft(/]-tV(CNb|");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("xJZXLo_^~v>r0$H", "Gv@p5-fF`]rYrxgP", 4079, 4618);
      assertEquals("xJZXLo_^~v>r0$H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotEmpty("<Ft(/]");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("xJZXLo_^~v>r0$H");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("\n", "\r", locale0);
      assertEquals(0, int0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.rightPad(" in an array of ", 1538, " in an array of ");
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1538;
      String string1 = StringUtils.stripEnd(string0, "");
      assertNotNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      int int0 = StringUtils.getFuzzyDistance("M#24]YDXJU<Y\rb|LwSrd", "M#24]YDXJU<Y\rb|LwSrd", locale0);
      assertEquals(58, int0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("io", string0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("M#24]YDXJU<Y\rb|LwSrd", "<J)Xb`uIjb_{.", string0);
      assertEquals("M#24]YDXJU<Y\rb|LwSrd", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " in an array of ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, "F1\"w3", "X#c{CMUKT8");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("F1\"w3", "F1\"w3", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("t`J(oSn\"7>c");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("      ", stringArray0, (String[]) null);
      assertEquals("      ", string0);
      assertEquals(11, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("      ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("      ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "t`J(oSn\"7>c", (CharSequence) "      ", 3309);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Character ust not be null", "The Character ust not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("The character must not be null", "The character must not be null", locale0);
      assertEquals(88, int0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.replacePattern("TMl&$", "TMl&$", "TMl&$");
      assertEquals("TMl&$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("e5<Naqr", "e5<Naqr", charSequenceArray0);
      assertEquals("e5<Naqr", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      longArray0[7] = 849L;
      longArray0[8] = (-1431L);
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '$', (-482), (-482));
      assertEquals("", string1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("e5<Naqr");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 138, 138);
      assertNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string1 = StringUtils.replaceEach("Strings must not be null", stringArray0, stringArray0);
      assertEquals("Strings must not be null", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.truncate((String) null, 10);
      assertNull(string2);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      boolean boolean1 = arrayList0.removeIf(predicate0);
      assertTrue(boolean1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("yj#ab,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=yj#ab,
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("9.Xfu{F]A", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.wrapIfMissing("", "offset cannot be negative");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("fy]4mtQMi|n0=1ExQ_", (-1));
      assertEquals("fy]4mtQMi|n0=1ExQ_", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "fy]4mtQMi|n0=1ExQ_", 4083);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.getDigits("vr&R0");
      assertEquals("0", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("\u00018!JE)q#>;HU;");
      assertEquals("\u00018!JE)q#>;HU;", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("1", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.join((float[]) null, 'f', (-1792), (-1234));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 1);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('4', 3);
      assertEquals("444", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(true));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "M#24]", (CharSequence) "9(+B9Iu?{9TsuJ^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("444", "444", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("5", 0);
      assertEquals("5", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'F';
      String string3 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "5");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "5", "5");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("5");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.left("5", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.rotate("5", 12);
      assertEquals("5", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("I", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeStartIgnoreCase("\r", "\n");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.substring(".", (int) 'Q');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("A[e[W~v8hn", "A[e[W~v8hn");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("A[e[W~v8hn", stringArray0);
      assertTrue(boolean0);
      assertEquals(11, stringArray0.length);
      
      String string0 = StringUtils.stripStart("A[e[W~v8hn", "A[e[W~v8hn");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("org.junitpioneer.jupiter.params.DoubleRange", "org.junitpioneer.jupiter.params.DoubleRange", 21);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultLocale!:{`#[%R/mh:ve4", "DefaultLocale!:{`#[%R/mh:ve4");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1, locale_Category2);
      assertTrue(enumSet0.contains(locale_Category2));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category2));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_Category2));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      Stream<Locale.Category> stream0 = enumSet0.stream();
      assertTrue(enumSet0.contains(locale_Category2));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(stream0);
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("FORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category2));
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("FORMAT", (String) null, "FORMAT");
      assertEquals("FORMAT", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width is %d");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrap("Minimum abbreviation width is %d", "FORMAT");
      assertEquals("FORMATMinimum abbreviation width is %dFORMAT", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertEquals(11, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.replace("\r\n", "\r\n", "\r\n");
      assertEquals("\r\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(".", ".");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("", ".", stringArray0);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ".", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("??*J8Dc,P;:6", "M#24]");
      assertEquals((-46), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = StringUtils.getDigits("??*J8Dc,P;:6");
      assertEquals("86", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("M#24]", "86");
      assertEquals("M#24]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("M#24]", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("M#24]", "86", stringArray0);
      assertEquals("M#24]", string3);
      assertEquals(1, stringArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("Locale must not be null");
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)62;
      try { 
        StringUtils.toString(byteArray0, "M#24]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart(".", ".");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("", ".", stringArray0);
      assertEquals(".", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ".", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("{}", 27, 3368);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}<ZkPQ:o.r2%";
      String string3 = StringUtils.reverse(" ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.rightPad("{}", 3368, '_');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '8');
      assertEquals("", string5);
      assertEquals(0, charArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1));
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-8), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst(":=Cu(yR5AXL23kSNGK", ":=Cu(yR5AXL23kSNGK");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // :=Cu(yR5AXL23kSNGK
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.trim("3ksbc]B}");
      assertEquals("3ksbc]B}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("3ksbc]B}", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.reverseDelimited("GB_S/N04(.", 'j');
      assertEquals("GB_S/N04(.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'I';
      charArray0[7] = 'j';
      charArray0[8] = 'j';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[6], charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j', 'j', 'I', 'j', 'j'}, charArray0);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "+p!", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("AvJ[f7s~}jb]IG<7rM");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", (-5477));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("J$=la6.4", (-1131));
      assertEquals("J$=la6.4", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.defaultString("\r", "Search and Replace array lengths don't match: ");
      assertEquals("\r", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce("", "", "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "?xx";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "?xx";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string6 = StringUtils.lowerCase("\r");
      assertEquals("\r", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      charSequenceArray0[8] = (CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      int int1 = StringUtils.indexOfAny((CharSequence) stringArray0[3], (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(9, stringArray0.length);
      assertFalse(int1 == int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'N');
      assertEquals("", string1);
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      int int2 = StringUtils.indexOfAny((CharSequence) "<$M1p(,dedF;v", charArray0);
      assertEquals((-1), int2);
      assertEquals(8, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      
      String string2 = StringUtils.wrap("<$M1p(,dedF;v", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another<$M1p(,dedF;vAborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 34);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("OxZ3^[x@b"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Cannot store ");
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("OxZ3^[x@b"));
      assertTrue(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, "E3kFt$6XE5{BC/");
      assertEquals("Cannot store ", string1);
      assertFalse(linkedList0.contains("OxZ3^[x@b"));
      assertTrue(linkedList0.contains("Cannot store "));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("OxZ3^[x@b", "9(+B9Iu?{9TsuJ^", true);
      assertEquals(54, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "E3kFt$6XE5{BC/", (-1792));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat('&', (-995));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains((-995)));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.join((List<?>) arrayList0, 'J', 102, (-1792));
      assertEquals("", string3);
      assertFalse(arrayList0.contains("Cannot store "));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "9(+B9Iu?{9TsuJ^", (CharSequence) "eFX37d[eM&A");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("9(+B9Iu?{9TsuJ^", "", 542);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("5]tPL", 0, 'L');
      assertEquals("5]tPL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.join((List<?>) null, "", (-970), 3);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("", 3);
      assertEquals("   ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, '!');
      assertEquals("Threshold must not be negative", string5);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add("5]tPL");
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Failed to delete temp directory ", "", (-1355));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.leftPad((String) null, (-950), 't');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z=d'[j{";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("z=d'[j{", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("p]");
      assertEquals("p]", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("p]", "p]", (-4));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("p]");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4);
      intArray0[1] = (-4);
      intArray0[2] = (-4);
      intArray0[3] = 275;
      intArray0[4] = (-4);
      int int1 = StringUtils.countMatches((CharSequence) "p]", 'r');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = "bn}iq,('V$?";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p]", "m~0<fGVy@m~0<fGVy@m~0<fGVy@m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.leftPad("W=Y7<6PTA2^H)5>", 1096, " ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("W=Y7<6PTA2^H)5>", (String) null, 5075);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(string3, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("", (String) null, (String) null);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.repeat((String) null, (-3798));
      assertNull(string6);
      
      int int1 = 108;
      String string7 = StringUtils.overlay((String) null, ",8u0SY", 108, 100);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", (int) 'd');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWith("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.defaultString("i\"Zs9");
      assertEquals("i\"Zs9", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "i\"Zs9", (CharSequence) "");
      assertEquals(5, int0);
      
      String string5 = StringUtils.removeIgnoreCase("':^s?V", "");
      assertEquals("':^s?V", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.compare("", "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string6 = StringUtils.replace("':^s?V", "", "u&", 100);
      assertEquals("':^s?V", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = "Search and Replace array leng";
      String string1 = "ZH +z't}";
      String string2 = StringUtils.toRootUpperCase("ZH +z't}");
      assertEquals("ZH +Z'T}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("ZH +z't}");
      assertFalse(boolean0);
      
      String string3 = "u\"_tWChvNf";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ZH +z't}", "u\"_tWChvNf", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("e");
      assertEquals("e", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e", "e");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("e");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootUpperCase("e");
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '*';
      charArray0[2] = '\"';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "E", charArray0);
      assertFalse(boolean1);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'W', '*', '\"'}, charArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("E");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("p+K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)8;
      int int0 = StringUtils.compareIgnoreCase("l", "l");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("l");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("l", (-766), '_');
      assertEquals("l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("org.junitpioneer.jupiter.params.DoubleRange", "Kwe~>eJ%@boH&_A");
      assertEquals("org.junitpioneer.jupiter.params.DoubleRange", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Kwe~>eJ%@boH&_A");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.params.DoubleRange");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l";
      charSequenceArray0[1] = (CharSequence) "l";
      charSequenceArray0[2] = (CharSequence) "l";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string2 = StringUtils.defaultString("org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals("org.junitpioneer.jupiter.params.DoubleRange", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.repeat('I', (-3201));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("'L3w)HST0zQjS", "2n=Kp5", "");
      assertEquals("'L3w)HST0zQjS", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "?xx");
      assertEquals(3, int0);
      
      String string4 = StringUtils.defaultString("", "Search and Replace array lengths don't match: ");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce("...", "\r", "");
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.center("!IDt&#!OraNAxaW=n\"", 2, ']');
      assertEquals("!IDt&#!OraNAxaW=n\"", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "!IDt&#!OraNAxaW=n\"", (CharSequence) "!IDt&#!OraNAxaW=n\"", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("8", '?', 'C');
      assertEquals("8", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("8");
      assertEquals("8", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "8", 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("}3-fES(3D", (String) null, (String) null);
      assertEquals("}3-fES(3D", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("}3-fES(3D");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      String string7 = StringUtils.join(doubleArray0, 'H');
      assertEquals("0.0H0.0", string7);
      assertEquals(2, doubleArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string7);
      
      String string8 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "I:oL-O");
      assertEquals("org.apache.commons.lang3.StringUtils", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.center((String) null, 2817, "_E>*S {g>M");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.abbreviate(")5M2c?PH]Qa9%QUorg.junitpioneer.jupiter.params.ShortRange", (String) null, (-522), (-522));
      assertEquals(")5M2c?PH]Qa9%QUorg.junitpioneer.jupiter.params.ShortRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", " ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("!nCL$t1JW0(d:a:", "!ncl$t1jw0(d:a:", (CharSequence[]) null);
      assertEquals("!nCL$t1JW0(d:a:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      assertEquals("!nCL$t1JW0(d:a:", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("!ncl$t1jw0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("!nCL$t1JW0(d:a:!ncl$t1jw0(d:a:!nCL$t1JW0(d:a:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.replacePattern((String) null, "\r", "q!sw9gKz$.#_Z3SH");
      assertNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "M@^^'";
      stringArray0[1] = "q!sw9gKz$.#_Z3SH";
      stringArray0[2] = "!ncl$t1jw0(d:a:";
      stringArray0[3] = "q!sw9gKz$.#_Z3SH";
      stringArray0[4] = "q!sw9gKz$.#_Z3SH";
      stringArray0[5] = "M@^^'";
      stringArray0[6] = "\n";
      stringArray0[7] = "q!sw9gKz$.#_Z3SH";
      String string5 = StringUtils.replaceEach("Backup", stringArray0, stringArray0);
      assertEquals("Backup", string5);
      assertEquals(8, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("q!sw9gKz$.#_Z3SH");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.appendIfMissing("!ncl$t1jw0(d:a:", "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertEquals("!ncl$t1jw0(d:a:!nCL$t1JW0(d:a:", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("{16A#4%9#urUu@u@MY*");
      assertEquals("{16A#4%9#urUu@u@MY*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "{16A#4%9#urUu@u@MY*", '@');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)64;
      String string0 = StringUtils.removeEnd(",[QG2G)", "A@|2eJ4R%G2");
      assertEquals(",[QG2G)", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "The type must not be null", (-15));
      assertNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("The type must not be null"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string1 = stack0.push(",[QG2G)");
      assertEquals(",[QG2G)", string1);
      assertFalse(stack0.contains("The type must not be null"));
      assertTrue(stack0.contains(",[QG2G)"));
      assertTrue(string1.equals((Object)string0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[,[QG2G)]", stack0.toString());
      assertEquals(1, stack0.size());
      assertNotNull(string1);
      
      boolean boolean0 = stack0.add("u&");
      assertTrue(boolean0);
      assertFalse(stack0.contains("The type must not be null"));
      assertTrue(stack0.contains(",[QG2G)"));
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[,[QG2G), u&]", stack0.toString());
      
      boolean boolean1 = stack0.add(") 51*");
      assertTrue(boolean1);
      assertFalse(stack0.contains("The type must not be null"));
      assertTrue(stack0.contains(",[QG2G)"));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[,[QG2G), u&, ) 51*]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("The type must not be null"));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("The type must not be null"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "maxWith cannot be negative");
      assertEquals("", string2);
      assertFalse(stack1.contains("The type must not be null"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("HacFr");
      assertEquals("HacFr", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",[QG2G)", (CharSequence) null, (-2616));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("-tV(CNb|");
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {45, 116, 86, 40, 67, 78, 98, 124}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Y<Ft(/]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "{16A#4%9#urUu@u@MY*", '@');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.repeat("", "", (-193));
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("de", locale3.toString());
      assertNotNull(locale3);
      
      String string5 = StringUtils.left("en ", 1592);
      assertEquals("en ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("F!Q\"5sAL9#'<PmXb)", '~');
      assertEquals("~F!Q\"5sAL9#'<PmXb)~", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("F!Q\"5sAL9#'<PmXb)", "en ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '[');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 47);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.leftPad("\n", (-2064888120), "Search and Replace array lengths don't match: ");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", 'N');
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeFirst("Y1\"-S$Zn", "Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Y1\"-S$Zn");
      assertEquals("Y1\"-S$Zn", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("Ig;,F");
      assertEquals("Ig;,F", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ig;,F", "Threshold must not be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$bD\"=t>Ym\"%mc8";
      stringArray0[1] = "$bD\"=t>Ym\"%mc8";
      stringArray0[2] = "P1T!Xwy>3";
      stringArray0[3] = "\n";
      String string4 = StringUtils.replaceEach("$bD\"=t>Ym\"%mc8", stringArray0, stringArray0);
      assertEquals("$bD\"=t>Ym\"%mc8", string4);
      assertEquals(4, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("u&", (-2064888120));
      assertEquals("u&", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("$bD\"=t>Ym\"%mc8");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Y1\"-S$Zn", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("org", (-2069), 'N');
      assertEquals("org", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.prependIfMissingIgnoreCase("{;oO)|GEoObNb#y[6", "{;oO)|GEoObNb#y[6", (CharSequence[]) null);
      assertEquals("{;oO)|GEoObNb#y[6", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2358);
      shortArray0[1] = (short) (-2987);
      shortArray0[2] = (short) (-1048);
      shortArray0[3] = (short)256;
      shortArray0[4] = (short)56;
      shortArray0[5] = (short)3;
      String string1 = StringUtils.join(shortArray0, 'A');
      assertEquals("-2358A-2987A-1048A256A56A3", string1);
      assertEquals(6, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short) (-2358), (short) (-2987), (short) (-1048), (short)256, (short)56, (short)3}, shortArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("xi}8MG", "-2358A-2987A-1048A256A56A3", "Cannot store org.junitpioneer.jupiter.TempDirectory");
      assertEquals("xi}8MG", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Cannot store org.junitpioneer.jupiter.TempDirectory", "nIbDPU");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "xi}8MG");
      assertNull(string3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) (short) (-1048);
      doubleArray0[2] = (double) 'A';
      doubleArray0[3] = (double) (short) (-2358);
      doubleArray0[4] = (double) (short)3;
      doubleArray0[5] = (-1.0);
      String string4 = StringUtils.join(doubleArray0, 'z');
      assertEquals("65.0z-1048.0z65.0z-2358.0z3.0z-1.0", string4);
      assertEquals(6, doubleArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new double[] {65.0, (-1048.0), 65.0, (-2358.0), 3.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("Locale must not be null");
      assertEquals("Locale must not be null", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.chomp("\r\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("7U*");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.swapCase("u&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2Ku&r}Ko:2KK");
      assertEquals("U&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kU&R}kO:2kk", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("Locale must not be null", "}OcDoX!9C");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeIgnoreCase("(oJ8/$\"2K%cAW", "7U*");
      assertEquals("(oJ8/$\"2K%cAW", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("7U*", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.wrapIfMissing("(oJ8/$\"2K%cAW", (String) null);
      assertEquals("(oJ8/$\"2K%cAW", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", (-237));
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("rsxG6,!j^?bzV2r", "rsxG6,!j^?bzV2r");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootLowerCase("\n^13j64H^");
      assertEquals("\n^13j64h^", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeStartIgnoreCase("\n", (String) null);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " ", 1524);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "t`J(\"7>c", 3309);
      assertNull(stringArray0);
      
      String string0 = StringUtils.unwrap("Strings must not be nullMinimum abbreviation width with offset is %d", "\n");
      assertEquals("Strings must not be nullMinimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Strings must not be nullMinimum abbreviation width with offset is %d", (String) null);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = (-1091);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "\n", 3309, (-1091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'm');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("I8GcYb", "I8GcYb");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("7U*", "7U*", "7U*", 503);
      assertEquals("7U*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)string0));
      assertNotNull(charSequence1);
      
      String string2 = StringUtils.repeat("7U*", 503);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("7U*", "7U*");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("7U*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 503;
      doubleArray0[1] = (double) 503;
      String string4 = StringUtils.join(doubleArray0, 'v');
      assertEquals("503.0v503.0", string4);
      assertEquals(2, doubleArray0.length);
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new double[] {503.0, 503.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace("\r");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      String string3 = StringUtils.join((byte[]) null, 'E');
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("QcC*GHYJa\"", '-');
      assertEquals("QcC*GHYJa\"", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceEach("r?UP?.u,V}iU(-mpW99", stringArray0, stringArray0);
      assertEquals("r?UP?.u,V}iU(-mpW99", string5);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllUpperCase("org.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)14;
      String string3 = StringUtils.join(byteArray0, 'c');
      assertEquals("103c89c-20c14", string3);
      assertEquals(4, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)103, (byte)89, (byte) (-20), (byte)14}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("$v`", 'c');
      assertEquals("$v`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string5 = StringUtils.uncapitalize("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "");
      assertTrue(boolean0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("Ft(/]", "Ft(/]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 5
         // Ft(/]
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      String string1 = StringUtils.abbreviate(",pp_", "<$M1p(,dedF;v", 3207);
      assertEquals(",pp_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 0, " vs ");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(9, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.capitalize("pEFrrMr");
      assertEquals("PEFrrMr", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.removePattern("org.junitpionee.jupiter.params.FloatRange", "org.junitpionee.jupiter.params.FloatRange");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("??*J8Dc,P;:6", "M#24]");
      assertEquals((-46), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = StringUtils.getDigits("??*J8Dc,P;:6");
      assertEquals("86", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("offset cannot be negative", "86");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("offset cannot be negative", "M#24]");
      assertEquals("offset cannot be negative", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("??*J8Dc,P;:6", "offset cannot be negative", (-389));
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string2));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertTrue(boolean0);
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      
      boolean boolean1 = stack0.add("KGl7c`Wetcji");
      assertTrue(boolean1);
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains("KGl7c`Wetcji"));
      assertTrue(boolean1 == boolean0);
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains("KGl7c`Wetcji"));
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals("KGl7c`Wetcji", string3);
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.contains("KGl7c`Wetcji"));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[, KGl7c`Wetcji]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("y>7x-Lvl7kg\"r2JH<N");
      assertEquals("y>7x-Lvl7kg\"r2JH<N", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "KGl7c`Wetcji", (CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.removePattern("offset cannot be negative", "F;>V");
      assertEquals("offset cannot be negative", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.removeEndIgnoreCase("<$M1p(,dedF;v", "GB_S/N04(.");
      assertEquals("<$M1p(,dedF;v", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("<$M1p(,dedF;v", stringArray0[0]);
      assertEquals("<$M1p(,dedF;v", string2);
      assertEquals(9, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.TempDirectoryCannot store ", (String) null, (-389));
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "<$M1p(,dedF;v");
      assertEquals("", string3);
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty(stringArray0[0]);
      assertEquals("", string4);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase("<$M1p(,dedF;v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("!<5yZe*,P]/I,;T4");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(list0.contains("!<5yZe*,P]/I,;T4"));
      assertEquals(2, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean2 = linkedList0.add("Extension context \"");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "i7&aI6qjt(Jl6s~");
      assertEquals("i7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"", string0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(linkedList0.contains(string0));
      assertEquals(3, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.join(list0, "!<5yZe*,P]/I,;T4", 122, 0);
      assertEquals("", string1);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(linkedList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, linkedList0.size());
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "!<5yZe*,P]/I,;T4";
      charSequenceArray0[1] = (CharSequence) "Extension context \"";
      String string2 = StringUtils.rightPad("Extension context \"", 122);
      assertEquals("Extension context \"                                                                                                       ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "Extension context \"                                                                                                       ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "i7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"";
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'P');
      assertEquals("!<5yZe*,P]/I,;T4PExtension context \"PExtension context \"                                                                                                       PPi7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"P", string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) "!<5yZe*,P]/I,;T4PExtension context \"PExtension context \"                                                                                                       PPi7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"P";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string4 = StringUtils.substring("", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.wrap("\r", "");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3766);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase(">B`i<II)", "dy#wbK", true);
      assertEquals((-38), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'i';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ">B`i<II)", charArray0);
      assertEquals(0, int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\\', 'i'}, charArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty(">B`i<II)", supplier0);
      assertEquals(">B`i<II)", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">B`i<II)";
      charSequenceArray0[1] = (CharSequence) ">B`i<II)";
      int int2 = StringUtils.lastIndexOfAny(">B`i<II)", charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Gt!m>i");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(">B`i<II)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) ">B`i<II)", 2428);
      assertEquals((-1), int3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("...", charSequenceArray0[0]);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...", "Gt!m>i");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.toRootLowerCase("', has a length less than 2");
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("?%r%", (-1451));
      assertEquals("%?%r", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      String string4 = StringUtils.replaceOnce(">B`i<II)", "", "P%st");
      assertEquals(">B`i<II)", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "?%r%", 0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Y6!LA)0<,-*wy7x", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad((String) null, 3, '%');
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Y6!LA)0<,-*wy7x", (CharSequence) null, 13);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("ii}n(", "ii}n(");
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      String string2 = StringUtils.join(charArray0, '%');
      assertEquals("%%%%%%%", string2);
      assertEquals(4, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'%', '%', '%', '%'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", "i\"Zs9");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "i\"Zs9");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.startsWith("", "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.toRootLowerCase("org.junitpioneer.jupiter.TempDirectoryCannot store ");
      assertEquals("org.junitpioneer.jupiter.tempdirectorycannot store ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate(":6", 108);
      assertEquals(":6", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = "<P~8qH1JAC>y@xw7";
      String string7 = StringUtils.replaceOnce("<P~8qH1JAC>y@xw7", "'C", "qM!LJ.xxMw*afY'xR");
      assertEquals("<P~8qH1JAC>y@xw7", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean4);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("j9G'#ozBvX_UqI-D ", "'L3w)HST0zQjS", 0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'd', 0, 2400);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2400
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, 'L');
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("i7&aI6qjt(Jl6s~");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("i7&aI6qjt(Jl6s~"));
      assertEquals(1, linkedList0.size());
      
      String string0 = StringUtils.rightPad("m", 18);
      assertEquals("m                 ", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[1];
      String string1 = StringUtils.join(objectArray0, ',');
      assertEquals("", string1);
      assertEquals(1, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "m";
      boolean boolean1 = linkedList0.add("M#24]");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("i7&aI6qjt(Jl6s~"));
      assertFalse(linkedList0.contains("m"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      charSequenceArray0[1] = (CharSequence) "Extension context \"";
      charSequenceArray0[3] = (CharSequence) "m";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{INCOMBININGDIACRITICALMARKS}+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'r';
      longArray0[3] = (long) 'r';
      longArray0[4] = 0L;
      longArray0[5] = (long) 14;
      longArray0[6] = (long) 0;
      String string3 = StringUtils.join(longArray0, 'r', 0, (-277));
      assertEquals("", string3);
      assertEquals(7, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {(-1L), 0L, 114L, 114L, 0L, 14L, 0L}, longArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("\r");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "\r");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("1", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '3', 796, 796);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      char char0 = '?';
      char char1 = 'C';
      String string3 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      char[] charArray0 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 46);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = "^!1)}&K";
      String string6 = StringUtils.stripStart("", "hr<CE~(s^-'F<_N18");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int2 = 2578;
      String string7 = StringUtils.join((Object[]) null, 'C', (-1), (-1));
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith(" @>>I*So/ZdbY1", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes(" \n", charset0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)10}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '8';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)15;
      String string2 = StringUtils.join(byteArray0, '^', (int) (byte)25, (-3607));
      assertEquals("", string2);
      assertEquals(2, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)25, (byte)15}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray1 = StringUtils.getBytes("...", charset0);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(byteArray1);
      
      String string3 = StringUtils.replaceIgnoreCase("", "", "org.junitpioneer.jupiter.RepeatFailedTestExtension=NzWv@%Jgo*b", (-1361));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)7;
      byte byte0 = (byte)79;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)16;
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("??*J8Dc,P;:6u&", (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String string0 = StringUtils.repeat("<{t(]", 3693);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      // Undeclared exception!
      StringUtils.repeat(",.>qi\" iqK0q3{;l)<", 1114111);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "M#24]", 422);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("??*J8Dc,P;:6", "M#24]");
      assertEquals((-46), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string0 = StringUtils.getDigits("??*J8Dc,P;:6");
      assertEquals("86", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("offset cannot be negative", "86");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("M#24]", string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("M#24]", "M#24]", stringArray0);
      assertEquals("M#24]", string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("M#24]", 'I');
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.repeat("M#24]", "M#24]", 53);
      assertEquals("M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]M#24]", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("de", locale3.toString());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertNotNull(locale3);
      
      String string5 = StringUtils.lowerCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", locale3);
      assertEquals("@defaultlocale can only be used with language tag if language, country, and variant are not set", string5);
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("de", locale3.toString());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("M#24]", 'I');
      assertEquals("IM#24]I", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("IM#24]I", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      String string1 = StringUtils.removeEnd("org.junitpioneer.jupiter.RepeatFailedTestExtension", "=NzWv@%Jgo*b");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8nsLwpo(o4Y@!@6M<", "<$M1p(,dedF;v", (-4925));
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("<$M1p(,dedF;v"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.insertElementAt("<$M1p(,dedF;v", 0);
      assertTrue(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertEquals("[<$M1p(,dedF;v]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("<$M1p(,dedF;v"));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.add("=NzWv@%Jgo*b");
      assertTrue(boolean0);
      assertFalse(stack1.contains("<$M1p(,dedF;v"));
      assertTrue(stack1.contains("=NzWv@%Jgo*b"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[=NzWv@%Jgo*b]", stack1.toString());
      
      boolean boolean1 = stack0.add("8nsLwpo(o4Y@!@6M<");
      assertTrue(boolean1);
      assertTrue(stack0.contains("<$M1p(,dedF;v"));
      assertFalse(stack0.contains(string1));
      assertFalse(stack0.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stack0, stack1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[<$M1p(,dedF;v, 8nsLwpo(o4Y@!@6M<]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("<$M1p(,dedF;v"));
      assertTrue(stack1.contains("=NzWv@%Jgo*b"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[=NzWv@%Jgo*b]", stack1.toString());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "8nsLwpo(o4Y@!@6M<");
      assertEquals("=NzWv@%Jgo*b", string2);
      assertFalse(stack1.contains("8nsLwpo(o4Y@!@6M<"));
      assertTrue(stack1.contains(string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[=NzWv@%Jgo*b]", stack1.toString());
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("=NzWv@%Jgo*b");
      assertEquals("=NzWv@%Jgo*b", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs must not be nullObject varargs must not be nullQ.sxgFc", "");
      assertEquals("Object varargs must not be nullObject varargs must not be nullQ.sxgFc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "Minimum abbreviation width with offset is %d3lmDT~*");
      assertEquals("Minimum abbreviation width with offset is %d3lmDT~*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("z*&HXk)NXeTd.");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertEquals(11, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1634));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase(") }#v-QHyrO) )cDO", "", "\n");
      assertEquals(") }#v-QHyrO) )cDO", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '%', (int) (short)7, (int) (short)7);
      assertNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "", 1945);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.truncate("+5&O*M8l;z", 2040, 26);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.capitalize("Backup");
      assertEquals("Backup", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Backup", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, 'd');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 11);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("\n\";z;_;9;;", "");
      assertEquals("\n\";z;_;9;;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("\n\";z;_;9;;");
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      String string4 = treeSet0.floor("");
      assertFalse(treeSet0.contains(""));
      assertNull(string4);
      
      String string5 = StringUtils.join((Iterable<?>) stack0, 'd');
      assertEquals("", string5);
      assertFalse(stack0.contains(""));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string7 = StringUtils.abbreviate((String) null, " k[B* QGW", 11);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "B.U^ D]ZZ^r*g";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("<{t(]");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("KQZ/eO>z.x4]'", "KQZ/eO>z.x4]'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.stripStart("Strings must not be null", "m~0<fGVy@");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("Strings must not be null");
      assertEquals("llun eb ton tsum sgnirtS", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Strings must not be null", 2727, '_');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}<ZkPQ:o.r2%";
      charSequenceArray0[1] = (CharSequence) "6";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.swapCase("llun eb ton tsum sgnirtS");
      assertEquals("LLUN EB TON TSUM SGNIRTs", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string2, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string4 = StringUtils.replaceChars("bte", "A", "\"");
      assertEquals("bte", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("5ik>&v`s*v}s", "5ik>&v`s*v}s");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1610L;
      longArray0[1] = 1610L;
      String string3 = StringUtils.join(longArray0, '_');
      assertEquals("1610_1610", string3);
      assertEquals(2, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {1610L, 1610L}, longArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "Failed to delete temp directory ", "u~/Lum(`\u001BX%@tM");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty("u~/Lum(`\u001BX%@tM");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      String string5 = StringUtils.lowerCase("?FZgd#7d5Cxa3sU{D", locale0);
      assertEquals("?fzgd#7d5cxa3su{d", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("{}", 27, 3368);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}<ZkPQ:o.r2%";
      String string3 = StringUtils.reverse(" ");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.rightPad("{}", 3368, '_');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) string4;
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBefore("\n", " ");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.substringBefore("!F{`#[%R/_h/ve4", "!F{`#[%R/_h/ve4");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.center(", '", 24, "9.Xfu{F]A");
      assertEquals("9.Xfu{F]A9, '9.Xfu{F]A9.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9.Xfu{F]A", (CharSequence) ", '", 24);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric(".=rt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 108, 'd');
      assertEquals("p{InCombiningDiacriticalMarks}+ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("p{InCombiningDiacriticalMarks}+", "^nEnEO;[oA");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("The Character must not be null", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("LtU)5QpHq~G4C;3yC[", "LtU)5QpHq~G4C;3yC[");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("iX0/|^jkhApwA+)xj", "", (-2804));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.join((Iterable<?>) null, 'j');
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("Cannot store org.junitpioneer.jupiter.TempDirectory");
      assertEquals("cANNOT STORE ORG.JUNITPIONEER.JUPITER.tEMPdIRECTORY", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.startsWith((CharSequence) null, "LtU)5QpHq~G4C;3yC[");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.defaultString((String) null);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "The Character must not be null");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.removeIgnoreCase("K<+CqMo#[/k\bSA}", (String) null);
      assertEquals("K<+CqMo#[/k\bSA}", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int1 = StringUtils.compare("@/?D", "r<|<");
      assertEquals((-50), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("K<+CqMo#[/k\bSA}");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string8 = StringUtils.wrapIfMissing("\n", "");
      assertEquals("\n", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "p{InCombiningDiacriticalMarks}+dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", charArray0);
      assertEquals(0, int2);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'j', 'd', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'g';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'E';
      charArray1[1] = 'E';
      charArray1[2] = 'E';
      charArray1[3] = 'g';
      charArray1[4] = '2';
      charArray1[6] = ' ';
      charArray1[7] = 'E';
      charArray1[8] = 'E';
      String string0 = StringUtils.join(charArray1, '2');
      assertEquals("E2E2E2g222\u00002 2E2E", string0);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', 'E', 'E', 'g', '2', '\u0000', ' ', 'E', 'E'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst("maxWith cannot be negative", "offset cannot be negative", "offset cannot be negative");
      assertEquals("maxWith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("R{~;=,@BXx3lMnj -", 0);
      assertEquals("R{~;=,@BXx3lMnj -", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.defaultString("{cT>8tsnE/*6L<D");
      assertEquals("{cT>8tsnE/*6L<D", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "{cT>8tsnE/*6L<D", 99, 99);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("!<5yZe*,P]/I,;T4");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      List<String> list0 = linkedList0.subList(0, 0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(list0.contains("!<5yZe*,P]/I,;T4"));
      assertEquals(2, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean2 = linkedList0.add("Extension context \"");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("Extension context \""));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "i7&aI6qjt(Jl6s~");
      assertEquals("i7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"", string0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(linkedList0.contains("i7&aI6qjt(Jl6s~"));
      assertEquals(3, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.join(list0, "!<5yZe*,P]/I,;T4", 122, 0);
      assertEquals("", string1);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(linkedList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, linkedList0.size());
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Extension context \"", 122);
      assertEquals("Extension context \"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumeric("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "!<5yZe*,P]/I,;T4", 7, (-3162));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '1');
      assertEquals("", string0);
      assertFalse(hashSet0.contains('1'));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("e5<Naqr", "e5<Naqr", charSequenceArray0);
      assertEquals("e5<Naqr", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "e5<Naqr", (CharSequence) "e5<Naqr", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("bYVV", 2, 5);
      assertEquals("VV", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("?S|", "?S|");
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsAny("?S|", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isNumeric(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.capitalize("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>xcr14", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("{ O(<>#S3>xcr14");
      assertEquals("{ O(<>#S3>XCR14", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{ O(<>#S3>xcr14");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "{ O(<>#S3>XCR14";
      String string2 = StringUtils.substring("org.junitpioneer.vintage.TimeoutExtension", 55);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{ O(<>#S3>xcr14";
      charSequenceArray0[3] = (CharSequence) "{ O(<>#S3>XCR14";
      charSequenceArray0[4] = (CharSequence) "{ O(<>#S3>XCR14";
      boolean boolean1 = StringUtils.startsWithAny("{ O(<>#S3>XCR14", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = "\\l8O>%T#L";
      String string4 = StringUtils.removeStartIgnoreCase("Du=!(f#vS$e5N[~*o`", "l8O>%T#L");
      assertEquals("Du=!(f#vS$e5N[~*o`", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "{ O(<>#S3>xcr14", 3164);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("Q]7s|VS+", "Du=!(f#vS$e5N[~*o`", charSequenceArray0);
      assertEquals("Q]7s|VS+", string5);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = "Backup";
      String string7 = StringUtils.removeStart("gm1gVcGki=#lw`_'|", "Backup");
      assertEquals("gm1gVcGki=#lw`_'|", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "gm1gVcGki=#lw`_'|", "Q]7s|VS+");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("{ O(<>#S3>XCR14");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("DefaultLocale", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks+";
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks+", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("Array element ", charSequenceArray0[1], charSequenceArray0);
      assertEquals("Array element p{InCombiningDiacriticalMarks+", string0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[1]);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '!');
      assertEquals("", string0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.difference("\n", "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.leftPad("wcQq4M7_BTd{[~1", 7, "wcQq4M7_BTd{[~1");
      assertEquals("wcQq4M7_BTd{[~1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.substring("", 3368, 27);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad((String) null, 3368, "~%5J1w| hj'3) Y");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isNumeric("}<ZkPQ:o.r2%");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "}<ZkPQ:o.r2%", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("~%5J1w| hj'3) Y", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.stripAccents("}<ZkPQ:o.r2%");
      assertEquals("}<ZkPQ:o.r2%", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "~%5J1w| hj'3) Y";
      String string4 = StringUtils.join(objectArray0, "N]");
      assertEquals("N]~%5J1w| hj'3) Y", string4);
      assertEquals(2, objectArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.strip("*");
      assertEquals("*", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      int int0 = 1404;
      String string1 = StringUtils.repeat("*", 1404);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("", "              5              Search and Replace array lengths don't match: ");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("i\"Zs9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.swapCase("              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWith(string1, (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.leftPad("i\"Zs9", 1404, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 3505, "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.swapCase("`eA(PToq");
      assertEquals("`Ea(ptOQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "`Ea(ptOQ", (-771));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "`eA(PToq";
      boolean boolean0 = StringUtils.equalsAny("`eA(PToq", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("`Ea(ptOQ", "z5&-<", "");
      assertEquals("`Ea(ptOQ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNull(string2);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) null;
      String string4 = StringUtils.reverseDelimited("Expected exception %s was not thrown.", 'p');
      assertEquals("tion %s was not thrown.pected excepEx", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray1[1] = (CharSequence) "tion %s was not thrown.pected excepEx";
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) null;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertFalse(priorityQueue0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      charSequenceArray1[5] = (CharSequence) "`Ea(ptOQ";
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray1);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string5 = StringUtils.leftPad("`eA(PToq", (-771), "offset cannot be negative");
      assertEquals("`eA(PToq", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '.', 8192, 145);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("pi", "ExceptionWasThrown", "ExceptionWasThrown", 1646);
      assertEquals("pi", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("z?<LZ\"RhWI\"Xh", 4101);
      assertEquals("z?<LZ\"RhWI\"Xh", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'v');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      int int0 = StringUtils.compareIgnoreCase("1", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.normalizeSpace("9(+B9Iu?{9TsuJ^");
      assertEquals("9(+B9Iu?{9TsuJ^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'L', 1, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 29
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("aySo,~X`,Ko7VY!");
      assertEquals("aySo,~X`,Ko7VY!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("dp", ")oHCK,o*Xes");
      assertEquals(59, int0);
      
      String string2 = StringUtils.getDigits(")oHCK,o*Xes");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.StringUtils", "M#24]");
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("??*J8Dc,P;:6", "u&");
      assertEquals("??*J8Dc,P;:6", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "dp", (-389));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("org.apache.commons.lang3.StringUtils"));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      assertTrue(stack0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(stack0.contains("M#24]"));
      assertFalse(stack0.isEmpty());
      assertEquals("[org.apache.commons.lang3.StringUtils]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      
      boolean boolean1 = stack0.add("");
      assertTrue(boolean1);
      assertTrue(stack0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(stack0.contains("M#24]"));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[org.apache.commons.lang3.StringUtils, ]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertFalse(stack1.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals("", string5);
      assertFalse(stack1.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(stack1, stack0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = StringUtils.mid("5", 29, 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 29);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.substring("w", (-2822), 322);
      assertEquals("w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Strings must not be null", 160, 1726);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("org.junitpioneer.jupiter.TempDirectoryCannot store ", "Strings must not be null");
      assertEquals(".junitpioneer.jupiter.TempDirectoryCannot store ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid("org.junitpioneer.vintage.ExpectedExceptionExtension", 1696, 4);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      String string2 = StringUtils.join(charArray0, 'r');
      assertEquals("rrr", string2);
      assertEquals(2, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'r', 'r'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{INCOMBININGDIACRITICALMARKS}+", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "'L3w)HST0zQjS");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween((String) null, "org.apache.commons.lang3.StringUtils", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 281L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("281-10", string1);
      assertEquals(3, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {281L, (-1L), 0L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("Cannot store ");
      assertEquals("Cannot store ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.wrap("Cannot store ", "Cannot store ");
      assertEquals("Cannot store Cannot store Cannot store ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.repeat("Cannot store Cannot store Cannot store ", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("OxZ3^[x@b", "");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.wrapIfMissing("Cannot store ", "org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectoryCannot store org.junitpioneer.jupiter.TempDirectory", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "org.junitpioneer.jupiter.TempDirectoryCannot store org.junitpioneer.jupiter.TempDirectory", (-2236));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.getDigits("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceOnceIgnoreCase("", "org.junitpioneer.jupiter.TempDirectoryCannot store org.junitpioneer.jupiter.TempDirectory", "281-10");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("T'v%fOF]HB!z=ICp");
      assertEquals("t'v%fOF]HB!z=ICp", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.removeStart("  dA(xE@`.U=jRJV,?", "<Ft(/]");
      assertEquals("  dA(xE@`.U=jRJV,?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("  dA(xE@`.U=jRJV,?");
      assertEquals(18, int0);
      
      int int1 = StringUtils.compareIgnoreCase("E#4>0OU.k#+T8", "<Ft(/]");
      assertEquals(41, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("<Ft(/]");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("Kwe~>eJ%@boH&_A", 0, 'u');
      assertEquals("Kwe~>eJ%@boH&_A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("<Ft(/]", "Kwe~>eJ%@boH&_A");
      assertEquals("<Ft(/]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.defaultString("\r", "Search and Replace array lengths don't match: ");
      assertEquals("\r", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("", "", "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "?xx";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "?xx";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string5 = StringUtils.lowerCase("\r");
      assertEquals("\r", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      charSequenceArray0[8] = (CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '8';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)15;
      String string2 = StringUtils.join(byteArray0, '^', (int) (byte)25, (-3607));
      assertEquals("", string2);
      assertEquals(2, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)25, (byte)15}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = "";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("...", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("1D)A Z4Q?", 1841, '8');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = "eityFpp]Y10\\`";
      int int0 = StringUtils.compare("eityFpp]Y10`", "eityFpp]Y10`", true);
      assertEquals(0, int0);
      
      String string1 = "I!`@z4,.9dh";
      // Undeclared exception!
      try { 
        StringUtils.unwrap("I!`@z4,.9dh", "I!`@z4,.9dh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.removeStart("6n0QOrlN^ao]+", "6n0QOrlN^ao]+");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = "!nCL$t1JW0(d:a:";
      String string1 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("xJZXLo_^~v>r0$H", "", (-1304), 24);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.abbreviate("*", "", (-1704));
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "", 270, 270);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = "Extension context \"";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("i7&aI6qjt(Jl6s~");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("i7&aI6qjt(Jl6s~"));
      assertFalse(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, "i7&aI6qjt(Jl6s~");
      assertEquals("i7&aI6qjt(Jl6s~", string1);
      assertTrue(linkedList0.contains(string1));
      assertFalse(linkedList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = "m";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "m", (-1792), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1792
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = enumSet0.contains(iterator0);
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, "wIuuHmlv{x?o");
      assertEquals("FORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "", (-1), 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", 109);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(109));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = stack0.add(object0);
      assertTrue(boolean0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains(object0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains(object0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, '@');
      assertFalse(stack0.contains(""));
      assertTrue(stack0.contains(object0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotNull(string1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.center("\"%Q:63ZN$`})Z6", 0);
      assertEquals("\"%Q:63ZN$`})Z6", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-2903), (-2903));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 4984);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate("", (int) 'C', 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      String string7 = StringUtils.join(doubleArray0, 'H');
      assertEquals("0.0H0.0", string7);
      assertEquals(2, doubleArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string7);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = '?';
      String string8 = StringUtils.valueOf(charArray0);
      assertEquals("HHHCCC?", string8);
      assertEquals(7, charArray0.length);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertArrayEquals(new char[] {'H', 'H', 'H', 'C', 'C', 'C', '?'}, charArray0);
      assertNotNull(string8);
      
      String string9 = StringUtils.center("]F/IqJZ", 52);
      assertEquals("                      ]F/IqJZ                       ", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, (-42));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "c7qL9$PXGTtj'<,DAR'", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 1130);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'k', (-2045), (-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String string0 = StringUtils.substring("hm<</?@I", (-858));
      assertEquals("hm<</?@I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("junit");
      assertEquals("junit", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Failed to delete temp directory ", (String) null);
      assertEquals("Failed to delete temp directory ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("Failed to delete temp directory ", "\"WHt]*iMUSkmE");
      assertEquals("Failed to delete temp directory ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("org.junitpioneer.jupiter.TempDirectoryCannot store ", 4796);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", "E");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("\"WHt]*iMUSkmE");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.substringAfter("", "E");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Failed to delete temp directory ");
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring((String) null, 4796);
      assertNull(string8);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) string4;
      charSequenceArray0[2] = (CharSequence) "\"WHt]*iMUSkmE";
      int int0 = StringUtils.lastIndexOfAny("\"WHt]*iMUSkmE", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.rotate("maxWith cannot be negative", 1502);
      assertEquals("h cannot be negativemaxWit", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("^cE%3j642^\n");
      assertEquals("^CE%3J642^\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.abbreviate("!Q#\"{Dji0c8cU7)", "!Q#\"{Dji0c8cU7)", 1471, 1471);
      assertEquals("!Q#\"{Dji0c8cU7)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" in an array of ");
      assertEquals("in an array of", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9&Z(|DD[tTe{&'7", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "fG@X#y?Rrbf_t", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("9&Z(|DD[tTe{&'7");
      assertEquals("9&Z(|DD[tTe{&'7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String[] stringArray0 = new String[1];
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'C', 111, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.joinWith("Df)4,H3 CCf", stringArray0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.joinWith("\n", stringArray0);
      assertEquals("\n", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.stripStart("Comparator should not be null.", "Comparator should not be null.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "\n", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.reverseDelimited("", 'q');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.center("bSFN", 59, "bSFN");
      assertEquals("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", "#|-^OB3hG?\"PS-}|t");
      assertEquals("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("bSFN"));
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertFalse(treeSet0.contains("bSFN"));
      assertFalse(priorityQueue0.contains("bSFN"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("Ih");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(priorityQueue0.contains("Ih"));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(1, priorityQueue0.size());
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "K_}EF";
      charSequenceArray0[1] = (CharSequence) "bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN";
      String string2 = StringUtils.valueOf(charArray0);
      assertEquals("", string2);
      assertEquals(0, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN";
      boolean boolean1 = StringUtils.equalsAny("bSFNbSFNbSFNbSFNbSFNbSFNbSFbSFNbSFNbSFNbSFNbSFNbSFNbSFNbSFN", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 59;
      String string3 = StringUtils.join(floatArray0, ':');
      assertEquals("59.0:0.0:59.0", string3);
      assertEquals(3, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new float[] {59.0F, 0.0F, 59.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = '\"';
      charArray0[4] = '<';
      charArray0[5] = 'L';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'m', 'y', 'y', '\"', '<', 'L'}, charArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-311));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = "^!1)}&K";
      String string3 = StringUtils.stripStart("^!1)}&K", "Minimum abbreviation width with offset is %d");
      assertEquals("^!1)}&K", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'm';
      objectArray0[1] = (Object) "Minimum abbreviation width with offset is %d";
      String string4 = StringUtils.join(objectArray0, '}', 2578, (-1));
      assertEquals("", string4);
      assertEquals(2, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", objectArray0);
      assertEquals("mMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", string5);
      assertEquals(2, objectArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\\', (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "7Yp'|qHT\"g`XV0Y+");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripEnd((String) null, "\n");
      assertNull(string0);
      
      String string1 = StringUtils.repeat('E', 863);
      assertEqualsstring1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("@?@<eOypCL36<%}hRTE", (Supplier<String>) null);
      assertEquals("@?@<eOypCL36<%}hRTE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("wO0>~bC{pVt+!", supplier0);
      assertEquals("wO0>~bC{pVt+!", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("wO0>~bC{pVt+!", "");
      assertEquals("wO0>~bC{pVt+!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[1] = (CharSequence) "wO0>~bC{pVt+!";
      String string2 = StringUtils.replaceOnce("wO0>~bC{pVt+!", "", "wO0>~bC{pVt+!");
      assertEquals("wO0>~bC{pVt+!", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[3] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[4] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[5] = (CharSequence) "wO0>~bC{pVt+!";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "wO0>~bC{pVt+!";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("9.Xf!{F]A");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      String string0 = StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      assertEquals("~|X;qt;;$LEv", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("JfUfCt! ~:vQv'-_F7g");
      assertEquals("JfUfCt! ~:vQv'-_F7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("JfUfCt! ~:vQv'-_F7");
      assertEquals("JfUfCt! ~:vQv'-_F7", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[0], stringArray0);
      assertEquals((-1), int0);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(stringArray0[8], stringArray0[3]);
      assertEquals(9, stringArray0.length);
      assertNull(stringArray1);
      
      String string3 = StringUtils.leftPad(stringArray0[8], 0, '0');
      assertEquals(9, stringArray0.length);
      assertNull(string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation width is %d");
      assertEquals(10, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "...", "...");
      assertTrue(boolean0);
      
      String string1 = StringUtils.truncate("...", 19, 19);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = new Locale("d5Y(`");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("d5y(`", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("d5y(`", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("2UIf9CA8]e}", locale0);
      assertEquals("2uif9ca8]e}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("d5y(`", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("d5y(`", locale0.getLanguage());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceOnceIgnoreCase("org.junitpioneer.jupiter.params.Range", "Failed to create default temp directory", "Failed to create default temp directory");
      assertEquals("org.junitpioneer.jupiter.params.Range", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      String string2 = StringUtils.replaceChars("ZTpGDS$eVXZfzk7", ';', ';');
      assertEquals("ZTpGDS$eVXZfzk7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "ZTpGDS$eVXZfzk7";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ';';
      longArray0[1] = (long) ';';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) ';';
      longArray0[6] = (long) ';';
      longArray0[7] = (long) ';';
      longArray0[8] = (long) ';';
      String string3 = StringUtils.join(longArray0, '!');
      assertEquals("59!59!59!59!59!59!59!59!59", string3);
      assertEquals(9, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {59L, 59L, 59L, 59L, 59L, 59L, 59L, 59L, 59L}, longArray0);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "59!59!59!59!59!59!59!59!59";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[2], 0, 322);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.removeFirst("Strings must not be null", " ");
      assertEquals("Stringsmust not be null", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.right(" /]", 5);
      assertEquals(" /]", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int2 = StringUtils.compareIgnoreCase("!xN~\"4&nVmd$6Id", (String) null, false);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "`qR=:$n4&S7");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("`qR=:$n4&S7", "\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replacePattern("\r", "\r", "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("\r"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", " ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", "", 371);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceFirst("\r", "\r", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(10, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("S!0<pz6F~L]5pu_@u v");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("!nCL$t1JW0(d:a:", "!ncl$t1jw0(d:a:", (CharSequence[]) null);
      assertEquals("!nCL$t1JW0(d:a:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("!nCL$t1JW0(d:a:");
      assertEquals("!nCL$t1JW0(d:a:", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      assertEquals("!nCL$t1JW0(d:a:", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[4] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!ncl$t1jw0(d:a:", charArray0);
      assertEquals(0, int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'4', '4', 'f', '\u0000', 'f'}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "!nCL$t1JW0(d:a:", "+p!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "!nCL$t1JW0(d:a:", charArray0);
      assertTrue(boolean2);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'4', '4', 'f', '\u0000', 'f'}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 2928);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.replaceChars((String) null, (String) null, "&7l:7w6k.");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "&7l:7w6k.";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[4], 108);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf(charSequenceArray0[5], charSequenceArray0[5], 3136);
      assertEquals((-1), int2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean4 = StringUtils.equalsAny(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean4);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("&7l:7w6k."));
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string3 = StringUtils.upperCase("rQ_!F9grk2", locale0);
      assertEquals("RQ_!F9GRK2", string3);
      assertTrue(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)58;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFD\uFFFDQ:G4:", string4);
      assertEquals(7, byteArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-105), (byte)81, (byte)58, (byte)71, (byte)52, (byte)58}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.isAlpha("\uFFFD\uFFFDQ:G4:");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase(">B`i<II)", "dy#wbK", true);
      assertEquals((-38), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'i';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ">B`i<II)", charArray0);
      assertEquals(0, int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\\', 'i'}, charArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty(">B`i<II)", supplier0);
      assertEquals(">B`i<II)", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">B`i<II)";
      charSequenceArray0[1] = (CharSequence) ">B`i<II)";
      int int2 = StringUtils.lastIndexOfAny(">B`i<II)", charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Gt!m>i");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(">B`i<II)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) ">B`i<II)", 2428);
      assertEquals((-1), int3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("...", charSequenceArray0[0]);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...", "Gt!m>i");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.toRootLowerCase("', has a length less than 2");
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("U", (-1451));
      assertEquals("U", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2");
      assertEquals(0, int4);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      
      String string4 = StringUtils.replaceOnce(">B`i<II)", "", "P%st");
      assertEquals(">B`i<II)", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "U", 0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'q');
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("7U*", "7U*", "7U*", 503);
      assertEquals("7U*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "7U*", (CharSequence) "7U*");
      assertEquals("7U*", charSequence1);
      assertFalse(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string0));
      assertNotNull(charSequence1);
      
      String string2 = StringUtils.repeat("7U*", 503);
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("7U*", "7U*");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("7U*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(charSequence1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(arrayList0);
      assertFalse(arrayList0.contains(charSequence1));
      assertFalse(arrayDeque0.contains(503));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, "7U*");
      assertEquals("", string4);
      assertFalse(arrayList0.contains(charSequence1));
      assertFalse(arrayDeque0.contains(503));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "7U*");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.unwrap(string2, "ok-XBEdv6");
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertNotNull(string5);
      
      String string6 = StringUtils.join((long[]) null, 's', 3, (-575));
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("7U*");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {55, 85, 42}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("e5<Naqr", "e5<Naqr", charSequenceArray0);
      assertEquals("e5<Naqr", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 2320L;
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      longArray0[7] = 849L;
      longArray0[8] = (-1431L);
      String string1 = StringUtils.join(longArray0, 'd', 2, 2);
      assertEquals("", string1);
      assertEquals(9, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 2320L, 0L, 1L, 1L, 1L, 849L, (-1431L)}, longArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "...";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("...", string1);
      assertEquals(19, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "...", "/jE&:DN|J 4$vGAJNR              5              Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.truncate("...", 19, 2487);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = new Locale("d5Y(`");
      assertEquals("", locale0.getISO3Country());
      assertEquals("d5y(`", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("d5y(`", locale0.toString());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "/jE&:DN|J 4$vGAJNR              5              Search and Replace array lengths don't match: ", (CharSequence) "/jE&:DN|J 4$vGAJNR              5              Search and Replace array lengths don't match: ", 13);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("...");
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "...");
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.stripToNull("l}'2d<5NLthTfM");
      assertEquals("l}'2d<5NLthTfM", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("l}'2d<5NLthTfM", "              5              Search and Replace array lengths don't match: /jE&:DN|J 4$vGAJNR", "...");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "CRqp&t?le", (CharSequence) "CRqp&t?le", Integer.MAX_VALUE);
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("CRqp&t?le");
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {67, 82, 113, 112, 38, 116, 63, 108, 101}, intArray0);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.removeStart("Comparator should not be null.\u0002org.junitpioneer.jupiter.psrams.RangeSourceProvider\u0002", "CRqp&t?le");
      assertEquals("Comparator should not be null.\u0002org.junitpioneer.jupiter.psrams.RangeSourceProvider\u0002", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-931);
      shortArray0[2] = (short)260;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 's', (int) (short)5, 2721);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T'v%fOF]HB!z=ICp", (CharSequence) "T'v%fOF]HB!z=ICp", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9.Xfu{F]A";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("9.Xfu{F]A", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.right("...", 19);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "...", "...");
      assertTrue(boolean0);
      
      String string1 = StringUtils.truncate("...", 19, 19);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "d5Y(`";
      Locale locale0 = new Locale("d5Y(`");
      assertEquals("", locale0.getISO3Country());
      assertEquals("d5y(`", locale0.toString());
      assertEquals("d5y(`", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      char char0 = 'N';
      String[] stringArray0 = new String[9];
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      String string0 = StringUtils.removeEndIgnoreCase(stringArray0[2], "GB_S/N04(.");
      assertEquals(9, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd("M#24]", string0);
      assertEquals("M#24]", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      int int0 = (-389);
      Locale locale0 = new Locale("org.apache.commons.lang3.CharUtils");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("org.apache.commons.lang3.charutils", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.apache.commons.lang3.charutils", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) null, (-462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "88kh?`a~VWWBP;_7z", " be aegaCive");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(31, int0);
      
      String string1 = StringUtils.repeat((String) null, "?xx", 23);
      assertNull(string1);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.abbreviate(" be aegaCive", (int) (byte)17, 23);
      assertEquals(" be aegaCive", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" be aegaCive", "88kh?`a~VWWBP;_7z");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd(" be aegaCive", (String) null);
      assertEquals(" be aegaCive", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "!nCL$t1JW0(d:a:";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("!nCL$t1JW0(d:a:", string2);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(";TiBo-uqqHWF", "", stringArray0);
      assertEquals(";TiBo-uqqHWF", string3);
      assertEquals(3, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("!nCL$t1JW0(d:a:", "", 1592);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getVariant());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.toString());
      assertNotNull(locale3);
      
      String string5 = StringUtils.left("", (-317));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("_[$]kG(", '\"');
      assertEquals("\"_[$]kG(\"", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("=Tt<z", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("\n", " ", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      assertEquals("<$M1p(,dedF;v", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      stringArray0[3] = "<$M1p(,dedF;v";
      stringArray0[4] = "<$M1p(,dedF;v";
      stringArray0[5] = "<$M1p(,dedF;v";
      stringArray0[6] = "<$M1p(,dedF;v";
      stringArray0[7] = "<$M1p(,dedF;v";
      stringArray0[8] = "<$M1p(,dedF;v";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("<$M1p(,dedF;v", string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("<$M1p(,dedF;v", "<$M1p(,dedF;v", stringArray0);
      assertEquals("<$M1p(,dedF;v", string2);
      assertEquals(9, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 'I');
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.repeat("<$M1p(,dedF;v", "]N{gZiSw 7y=6b)", Integer.MIN_VALUE);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      String string4 = StringUtils.lowerCase("<$M1p(,dedF;v", locale0);
      assertEquals("<$m1p(,dedf;v", string4);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("<$M1p(,dedF;v", "<$m1p(,dedf;v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", 'W');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Locale locale0 = new Locale("9");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("9", locale0.toString());
      assertEquals("9", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("9", locale0);
      assertEquals("9", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("9", locale0.toString());
      assertEquals("9", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("maxWith cannot be negative", "maxWith cannot be negative", 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '8';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)15;
      String string2 = StringUtils.join(byteArray0, '^', (int) (byte)25, (-3607));
      assertEquals("", string2);
      assertEquals(2, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)25, (byte)15}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.rightPad("Array element ", (int) (byte)25, '8');
      assertEquals("Array element 88888888888", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^kEaP,xGE`";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string5 = StringUtils.replaceEach("^kEaP,xGE`", stringArray0, stringArray0);
      assertEquals("^kEaP,xGE`", string5);
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("^kEaP,xGE`", "", (-112));
      assertEquals("^kEaP,xGE`", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.center((String) null, 20, "m0-Q$>pqmve");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!ncl$t1jw0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("xJZXLo_^~v>r0$H", "!ncl$t1jw0(d:a:", (-1304), 24);
      assertEquals("xJZXLo_^~v>r0$H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotEmpty("!nCL$t1JW0(d:a:");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replace("<2A /=Crhum`UA[>Ym", "Strings must not be null", "xJZXLo_^~v>r0$H", (-1792));
      assertEquals("<2A /=Crhum`UA[>Ym", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("<2A /=Crhum`UA[>Ym");
      assertEquals("<2A /=CRHUM`UA[>YM", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.length("!ncl$t1jw0(d:a:");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Threshold must not be negative", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("z=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.swapCase("Threshold must not be negative");
      assertEquals("tHRESHOLD MUST NOT BE NEGATIVE", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("Threshold must not be negative", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.TempDirectory");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("4^*W>)", "org.junitpioneer.jupiter.TempDirectory", 2018);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeIgnoreCase("Threshold must not be negative", "Ju,8)^$3w_>|VA#");
      assertEquals("Threshold must not be negative", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3870);
      intArray0[1] = 2018;
      intArray0[2] = 2018;
      intArray0[3] = (-1);
      intArray0[4] = 2018;
      intArray0[5] = 2018;
      String string4 = StringUtils.join(intArray0, '\"');
      assertEquals("-3870\"2018\"2018\"-1\"2018\"2018", string4);
      assertEquals(6, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new int[] {(-3870), 2018, 2018, (-1), 2018, 2018}, intArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("F", "", stringArray1);
      assertEquals("F", string5);
      assertEquals(1, stringArray1.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d");
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.leftPad("3T@h@^HIhEo", 11);
      assertEquals("3T@h@^HIhEo", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = "C\\F$wiker";
      String string1 = StringUtils.stripAccents("CF$wiker");
      assertEquals("CF$wiker", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "CF$wiker";
      charSequenceArray0[1] = (CharSequence) "CF$wiker";
      charSequenceArray0[2] = (CharSequence) "CF$wiker";
      String string2 = StringUtils.appendIfMissingIgnoreCase("CF$wiker", "CF$wiker", charSequenceArray0);
      assertEquals("CF$wiker", string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "R{~;=,@BXx3lMnj -";
      int int0 = 2;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("...", "R{~;=,@BXx3lMnj -", 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.isNotBlank(charBuffer0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      String string1 = StringUtils.difference("", "?9r[Z2<31yG07");
      assertEquals("?9r[Z2<31yG07", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("?9r[Z2<31yG07", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.replaceChars("", "", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("?9r[Z2<31yG07", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      double double1 = StringUtils.getJaroWinklerDistance(charBuffer0, "]T]k06");
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, charArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2522;
      intArray0[1] = 399;
      intArray0[2] = 22;
      intArray0[3] = 102;
      intArray0[4] = 2581;
      intArray0[5] = 44;
      intArray0[6] = (-2);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '6', 520, 1706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 520
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("NAv4iXTsEpx{0Z", 'n');
      assertEquals("nNAv4iXTsEpx{0Zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("nNAv4iXTsEpx{0Zn", "NAv4iXTsEpx{0Z");
      assertEquals("nNAv4iXTsEpx{0Zn", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("RepeatFailedTestExtension", "nNAv4iXTsEpx{0Zn");
      assertEquals("RepeatFailedTestExtension", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("RepeatFailedTestExtension");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootLowerCase("nNAv4iXTsEpx{0Zn");
      assertEquals("nnav4ixtsepx{0zn", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("NAv4iXTsEpx{0Z", stringArray0);
      assertEquals("RepeatNAv4iXTsEpx{0ZFailedNAv4iXTsEpx{0ZTestNAv4iXTsEpx{0ZExtension", string4);
      assertEquals(4, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("NAv4iXTsEpx{0Z", 'n', '8');
      assertEquals("NAv4iXTsEpx{0Z", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "nNAv4iXTsEpx{0Zn", 1093, 1093);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("RepeatFailedTestExtension", "NAv4iXTsEpx{0Z", 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.wrapIfMissing("RepeatFailedTestExtension", '8');
      assertEquals("8RepeatFailedTestExtension8", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("f#x_\"kR!8e1'<l", "");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat("Cannot store ", "RepeatFailedTestExtension", (-3041));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      Locale locale3 = Locale.GERMAN;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertNotNull(locale3);
      
      String string9 = StringUtils.lowerCase("8RepeatFailedTestExtension8", locale3);
      assertEquals("8repeatfailedtestextension8", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertEquals("", locale3.getCountry());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("de", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertNotNull(string9);
      
      String string10 = StringUtils.wrapIfMissing("nnav4ixtsepx{0zn", '7');
      assertEquals("7nnav4ixtsepx{0zn7", string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("NAv4iXTsEpx{0Z", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceChars("gVdYEU ", "", "myo{PH");
      assertEquals("gVdYEU ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "");
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('E', 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("oEb-6H Lh", "\r", "X_A");
      assertEquals("oEb-6H Lh", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "oEb-6H Lh");
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      String string3 = StringUtils.join(doubleArray0, 'E');
      assertEquals("-1.0", string3);
      assertEquals(1, doubleArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("!nCL$t1JW0(d:a:", '(');
      assertEquals("(!nCL$t1JW0(d:a:(", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "-1.0");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "?xx";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("?xx", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertFalse(stack0.contains(0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "TasGGu@r4", 1, 790);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 790
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "{ <1ZBGe<I9{70>C");
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("`i", "p{InCombiningDiacriticalMarks}+", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertEquals("`", string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("`i", "`", "`");
      assertEquals("`i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '5', 0, 1171);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("/t", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("/t", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "`i", (CharSequence) "/t", 170);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.replaceIgnoreCase("Aborting to p", "", "`i", 10);
      assertEquals("Aborting to p", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertEquals("\r", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertEquals("\r", charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.swapCase("\r");
      assertEquals("\r", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence1));
      assertTrue(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'s', 's'}, charArray0);
      
      String string4 = StringUtils.truncate(";BIj`lG+xV'w\"l", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertNotNull(string4);
      
      Locale locale0 = new Locale("d5Y(`");
      assertEquals("", locale0.getCountry());
      assertEquals("d5y(`", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("d5y(`", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.join((Object[]) null, "R!", 1, Integer.MAX_VALUE);
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("LaunchTime", "\r");
      assertEquals("LaunchTime", string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string7 = StringUtils.join((Iterator<?>) listIterator0, ':');
      assertEquals("", string7);
      assertFalse(linkedList0.contains(""));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence1));
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "R!", (CharSequence) "\r");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1972, 1972);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.substringBetween("r9.6L9IEg t", "r9.6L9IEg t");
      assertNull(string0);
      
      String string1 = StringUtils.getIfEmpty("Strings must not be null", (Supplier<String>) null);
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.wrap("5", "5");
      assertEquals("555", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "555", (CharSequence) "555");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "5", (CharSequence) "5");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.join((char[]) null, '=');
      assertNull(string1);
      
      String string2 = StringUtils.wrap("", "m~0<fGVy@m~0<fGVy@");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull(" ");
      assertNull(string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      String string4 = StringUtils.wrapIfMissing((String) null, "\n");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfter((String) null, "Nvs?W");
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      String string6 = StringUtils.trimToEmpty("Z{Imt#:q");
      assertEquals("Z{Imt#:q", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.substring("WF~JjMe_8'sxP|[", 0);
      assertEquals("WF~JjMe_8'sxP|[", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(0));
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.iterator();
      assertFalse(treeSet0.contains(0));
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, 'O');
      assertEquals("", string8);
      assertFalse(treeSet0.contains(0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("U\"<t&YTl0IM<.Y/}J", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "_}w0(-Ol,2,", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence) "");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.defaultString("Search and Replace array lengths don't match: ", "Jv9DH8Q");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("{}", "ExpectedException", "'L3w)HST0zQjS");
      assertEquals("{}", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("xJZXLo_^~v>r0$H");
      assertEquals("xjzxlo_^~v>r0$h", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.repeat('I', (-1));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      int int3 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string3 = StringUtils.join(objectArray0, "", 0, (-1));
      assertEquals("", string3);
      assertEquals(3, objectArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int4 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int4);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.reverse("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int5 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int5);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray1);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string5 = StringUtils.replaceChars("\n", "", "\n");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceChars("", 'w', 'w');
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfEmpty("org.junitpioneer.jupiter.params.FloatRange", supplier0);
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      int int6 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.FloatRange", (CharSequence) "", 1925);
      assertEquals((-1), int6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Threshold must not be negative", "", charSequenceArray0);
      assertEquals("Threshold must not be negative", string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("d1DKM66oG-d2::[");
      assertEquals("D1DKM66oG-d2::[", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "D1DKM66oG-d2::[");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAny("d1DKM66oG-d2::[", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("ysD2w8uj{Rr9NC1", "Threshold must not be negative", "d1DKM66oG-d2::[");
      assertEquals("ysD2w8uj{Rr9NC1", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Failed to delete temp directory ";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "ysD2w8uj{Rr9NC1";
      boolean boolean2 = StringUtils.equalsAny("Failed to delete temp directory ", charSequenceArray1);
      assertTrue(boolean2);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.chomp("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissing(" ", (CharSequence) null, charSequenceArray0);
      assertEquals(" ", string2);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "ThrehoPd must not be negative", (CharSequence) "q*o6d jzP}DF0qz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing(" The character must not be null", " The character must not be null", (CharSequence[]) null);
      assertEquals(" The character must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(" The character must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "SO";
      String string0 = StringUtils.prependIfMissingIgnoreCase("SO", "SO", charSequenceArray0);
      assertEquals("SO", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String string0 = StringUtils.getDigits("<$M1p(,dedF;v");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<$M1p(,dedF;v", "1");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("<$M1p(,dedF;v", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("YMIhw7Pt+KN@", "YMIhw7Pt+KN@", "YMIhw7Pt+KN@");
      assertEquals("YMIhw7Pt+KN@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.substring("w-byGe`jng", 1903, 1903);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("r..Q[r..Q[", 1903, "hh");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertEquals(250, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Character must not be null", "The Character must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("The Character must not be null", "The Character must not be null");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceEach("0>0>0>00>0>0>0", stringArray0, stringArray0);
      assertEquals("0>0>0>00>0>0>0", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "0>0>0>00>0>0>0", (CharSequence) "The Character must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "\n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, "", (-1), (-1));
      assertEquals("", string0);
      assertFalse(stack0.contains(""));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 't');
      assertEquals("\nt", string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "\nt";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add("Extension context \"");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("Extension context \""));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "i7&a6qjt(Jl6~~");
      assertEquals("i7&a6qjt(Jl6~~i7&a6qjt(Jl6~~Extension context \"", string0);
      assertFalse(linkedList0.contains("i7&a6qjt(Jl6~~"));
      assertTrue(linkedList0.contains("Extension context \""));
      assertEquals(3, linkedList0.size());
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Extension context \"");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("i7&a6qjt(Jl6~~i7&a6qjt(Jl6~~Extension context \"", "i7&a6qjt(Jl6~~");
      assertEquals(0.84, double0, 0.01);
      
      String string1 = StringUtils.unwrap("!<5yZe*,P]/I,;T4", "i7&a6qjt(Jl6~~i7&a6qjt(Jl6~~Extension context \"");
      assertEquals("!<5yZe*,P]/I,;T4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substring(" ", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate("RDq] +zmJv H](.4", (-1));
      assertEquals("Dq] +zmJv H](.4R", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'g';
      charArray0[2] = ' ';
      charArray0[3] = 'H';
      charArray0[4] = '%';
      charArray0[5] = ';';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, 0, 496);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'v');
      assertEquals("<$M1p(,dedF;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("<$M1p(,dedF;v", 'v');
      assertEquals("v<$M1p(,dedF;v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Object varargs must not be null", 'v');
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = ']';
      charArray0[2] = 'v';
      String string3 = StringUtils.truncate("Object varargs must not be null", (int) 's', (int) 's');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Object varargs must not be null", "<$M1p(,dedF;");
      assertEquals(0.37, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("?7aYk=FM|p&S\"UXay0");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("Don't clear/set the same property more than once.", 's');
      assertEquals("sDon't clear/set the same property more than once.s", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(stringArray0);
      assertEquals("?7aYk=FM|p&S\"UXay0", string1);
      assertEquals(15, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "?7aYk=FM|p&S\"UXay0", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(15, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("sDon't clear/set the same property more than once.s", 's');
      assertEquals("sDon't clear/set the same property more than once.s", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithAny("?7aYk=FM|p&S\"UXay0", stringArray0);
      assertTrue(boolean1);
      assertEquals(15, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("6d]z|w", ':');
      assertEquals(":6d]z|w:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = "NAv4iXTsEpx{0Z";
      char char0 = 'n';
      String string1 = StringUtils.wrapIfMissing("NAv4iXTsEpx{0Z", 'n');
      assertEquals("nNAv4iXTsEpx{0Zn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("nNAv4iXTsEpx{0Zn", "NAv4iXTsEpx{0Z");
      assertEquals("nNAv4iXTsEpx{0Zn", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "RepeatFailedTestExtension";
      String string4 = StringUtils.stripStart("RepeatFailedTestExtension", "nNAv4iXTsEpx{0Zn");
      assertEquals("RepeatFailedTestExtension", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("RepeatFailedTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.toRootLowerCase("nNAv4iXTsEpx{0Zn");
      assertEquals("nnav4ixtsepx{0zn", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'n';
      char char1 = '7';
      int int0 = 0;
      int int1 = 1093;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '7', 0, 1093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceFirst("\r", "\r", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.removeFirst("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("5M P=1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.removeFirst("6", "6");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '|', (int) (short)5, 311);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.center("", 0, 'B');
      assertEquals("", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1970);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-297);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)322;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short) (-1232);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'B', (int) (short)0, (int) (short)322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("e");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Cannot store "));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Cannot store ");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("Cannot store "));
      assertFalse(linkedList0.contains("OxZ3^[x@b"));
      assertEquals(1, linkedList0.size());
      
      int int0 = StringUtils.compareIgnoreCase("E3kFt$6XE5{BC/", "OxZ3^[x@b");
      assertEquals((-10), int0);
      
      String string1 = StringUtils.trim("Cannot store ");
      assertEquals("Cannot store", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("Cannot store");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("o", charset0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", "Backup", "9\"*6X}U'TW}@)!J-:/", (-1361));
      assertEquals("maxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, "!nCL$t1JW0(d:a:");
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("org.apache.commons.lang3.Charsets", "Yo){");
      assertEquals("org.apache.commons.lang3.Charsets", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("Yo){");
      assertEquals(4, int0);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.Charsets", "gm1gVc");
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("!nCL$t1JW0(d:a:");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("org.apache.commons.lang3.Charsets", charset0);
      assertEquals(33, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.Charsets", "...", "9\"*6X}U'TW}@)!J-:/", 4);
      assertEquals("org.apache.commons.lang3.Charsets", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.removeStart(" ", "\n");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase("ePAr`=z!D]gQ}", "");
      assertEquals("ePAr`=z!D]gQ}", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "ePAr`=z!D]gQ}");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny("ePAr`=z!D]gQ}", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int2 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);
      assertEquals((-1), int2);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, '|');
      assertEquals("", string1);
      assertFalse(stack0.contains(""));
      assertTrue(string1.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.removeStart("  dA(xE@`.U=jRJV,?", "<Ft(/]");
      assertEquals("  dA(xE@`.U=jRJV,?", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("  dA(xE@`.U=jRJV,?");
      assertEquals(18, int0);
      
      int int1 = StringUtils.compareIgnoreCase("E#4>0OU.k#+T8", "Locale must not be null");
      assertEquals((-7), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("<Ft(/]");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("Kwe~>eJ%@boH&_A", 0, 'u');
      assertEquals("Kwe~>eJ%@boH&_A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("<Ft(/]", "Kwe~>eJ%@boH&_A");
      assertEquals("<Ft(/]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "  dA(xE@`.U=jRJV,?", "L");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "  dA(xE@`.U=jRJV,?", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "':6w%l[QzrP%;uJtuR> ";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("':6w%l[QzrP%;uJtuR> ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '7');
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean2 = linkedList0.add("!<5yZe*,P]/I,;T4");
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, linkedList0.size());
      
      boolean boolean3 = linkedList0.add("Extension context \"");
      assertTrue(boolean3);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, linkedList0.size());
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "i7&aI6qjt(Jl6s~");
      assertEquals("i7&aI6qjt(Jl6s~i7&aI6qjt(Jl6s~!<5yZe*,P]/I,;T4i7&aI6qjt(Jl6s~Extension context \"", string0);
      assertTrue(linkedList0.contains("!<5yZe*,P]/I,;T4"));
      assertFalse(linkedList0.contains("i7&aI6qjt(Jl6s~"));
      assertEquals(4, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Extension context \"", 122);
      assertEquals("Extension context \"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "!<5yZe*,P]/I,;T4", 7, 7);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("Z*b#");
      assertEquals("Z*b#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Xj@Olny_vP91Xj@Olny_vP91", "Ow8-rP3y,svO");
      assertEquals("Xj@Olny_vP91Xj@Olny_vP91", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.removeEnd("..p.", "J#2J:L0{ycH3zx4");
      assertEquals("..p.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.getDigits("<$M1p(,dedF;v");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<$M1p(,dedF;v", "1");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("<$M1p(,dedF;v", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.stripStart("<$M1p(,dedF;v", "<$M1p(,dedF;v");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("vp(>6%RURZiX[g"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("vp(>6%RURZiX[g"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(".V=S");
      assertTrue(boolean1);
      assertFalse(linkedList0.contains("vp(>6%RURZiX[g"));
      assertTrue(linkedList0.contains(".V=S"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      String string1 = "i7&a6qjt(Jl6~~";
      boolean boolean2 = linkedList0.add(" ");
      assertTrue(boolean2);
      assertFalse(linkedList0.contains("vp(>6%RURZiX[g"));
      assertTrue(linkedList0.contains(".V=S"));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, linkedList0.size());
      
      String string2 = StringUtils.join((Iterable<?>) linkedList0, (String) null);
      assertEquals(".V=S ", string2);
      assertFalse(linkedList0.contains(string2));
      assertTrue(linkedList0.contains(".V=S"));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, linkedList0.size());
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAllLowerCase(".V=S");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("-tV(CNb|");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "x@", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.getDigits("I7e<qK");
      assertEquals("7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.getDigits("...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string1));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.chomp(", ", ", ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(")5M2c?PH]Qa9%QUTx~N", ")5M2c?PH]Qa9%QUTx~N");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceChars(" ", "", " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "=rx^M+;p#S/", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = enumSet0.contains(class0);
      assertFalse(boolean0);
      assertEquals(2, enumSet0.size());
      
      String string0 = StringUtils.join(iterator0, "n\n");
      assertEquals("DISPLAYn\nFORMAT", string0);
      assertEquals(2, enumSet0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("offsetlm(nnot be negativeoffset cannot be negative");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.apache.common.lang3Charsets");
      assertEquals("org.apache.common.lang3Charsets", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("&R# |a");
      assertEquals("&R#|a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("zg6xc#$A_G*oBJ_(Ax");
      assertEquals("zg6xc#$A_G*oBJ_(Ax", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "zg6xc#$A_G*oBJ_(Ax", (CharSequence) "zg6xc#$A_G*oBJ_(Ax");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.right("%,", Integer.MAX_VALUE);
      assertEquals("%,", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "%,";
      String string1 = StringUtils.chop("%,");
      assertEquals("%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "%";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("%,", "%");
      assertEquals("%,", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = StringUtils.unwrap("", ";)uTV");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween(";)uTV", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ";)uTV";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'd';
      String string2 = StringUtils.join(charArray0, '2');
      assertEquals("k2d", string2);
      assertEquals(2, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'k', 'd'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("5miJaE", 'N');
      assertEquals("5miJaE", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5miJaE";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("org.junitpioneer.jupiter.TempDirectory"));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack stack1 = (Stack)stack0.clone();
      assertFalse(stack0.contains("org.junitpioneer.jupiter.TempDirectory"));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], (char[]) null);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.equalsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "5miJaE");
      assertEquals("5miJaE5miJaEorg.junitpioneer.jupiter.TempDirectory5miJaEorg.junitpioneer.jupiter.TempDirectory5miJaEorg.junitpioneer.jupiter.TempDirectory", string1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "^13j64H^");
      assertEquals("^13j64H^\n^13j64H^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.replacePattern("\n", "Backup", "\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEach("0#1YLnuc;/M", stringArray0, stringArray0);
      assertEquals("0#1YLnuc;/M", string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("M@^^'");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("Backup");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isNumericSpace("^13j64H^");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("T'v%fOF]HB!z=ICp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "Don't clear/set the same property more than once.");
      assertNull(string0);
      
      String string1 = StringUtils.reverse("p{InCombiningDiacriticalMarks}+");
      assertEquals("+}skraMlacitircaiDgninibmoCnI{p", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Don't clear/set the same property more than once.");
      assertEquals("don't clear/set the same property more than once.", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.swapCase("Don't clear/set the same property more than once.");
      assertEquals("dON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceChars("~{", "dON'T CLEAR/SET THE SAME PROPERTY MORE THAN ONCE.", "#duX+");
      assertEquals("~{", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars((String) null, '[', '[');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '8';
      String string2 = StringUtils.join(charArray0, 'V', (-528), (-528));
      assertEquals("", string2);
      assertEquals(2, charArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'X', '8'}, charArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.left("", (-3518));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Threshold must not be negative", "");
      assertEquals("Threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceChars(" ", ',', ',');
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("\r", "\r", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("2onQ8qJ5}m}e^nEf M");
      assertEquals("2ONQ8QJ5}M}E^NEF M", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "2ONQ8QJ5}M}E^NEF M", (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("_;|$S", "_;|$S", (-2151));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", " vs ", "N$@$GP-g?(CF zNZ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Cannot clear and set the following system properties at the same time: ", (String) null, (String) null);
      assertEquals("Cannot clear and set the following system properties at the same time: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.common.lang3Charsets", "org.apache.common.lang3Charsets");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("<$M1p(,dedFv", "<$M1p(,dedFv", "<$M1p(,dedFv");
      assertEquals("<$M1p(,dedFv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.replaceIgnoreCase(" ", "\n", "\n");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", '?', 'C');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("}3-fES(3D", (String) null, (String) null);
      assertEquals("}3-fES(3D", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("}3-fES(3D");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      String string7 = StringUtils.join(doubleArray0, 'H');
      assertEquals("0.0H0.0", string7);
      assertEquals(2, doubleArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string7);
      
      String string8 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "I:oL-O");
      assertEquals("org.apache.commons.lang3.StringUtils", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("              5              Search and Replace array lengths don't match: ");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("              5              Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertEquals("              5              Search and Replace array lengths don't match: ", string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "              5              Search and Replace array lengths don't match: ", (CharSequence) "              5              Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "              5              Search and Replace array lengths don't match: ", (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("F+-a", stringArray0, stringArray0);
      assertEquals("F+-a", string0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "F+-a", "070707070");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.stripStart("lL6=DuPv-<", ", ");
      assertEquals("lL6=DuPv-<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)37;
      StringUtils.join(byteArray0, '$');
      StringUtils.replaceOnce("-121$12$37", (String) null, "5,@BN{`D@0K!>TZ@D");
      StringUtils.replaceChars("5,@BN{`D@0K!>TZ@D", '$', '$');
      StringUtils.overlay("F!Q\"5sAL9#'<PmX", "-121$12$37", (byte)37, (byte)37);
      Locale.getISOLanguages();
      StringUtils.stripEnd("-121$12$37", "5,@BN{`D@0K!>TZ@D");
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayScript(locale1);
      locale0.getUnicodeLocaleKeys();
      StringUtils.getFuzzyDistance("-121$12$37", "F!Q\"5sAL9#'<PmX-121$12$37", locale0);
      StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null");
      String string0 = StringUtils.join((long[]) null, '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripEnd("\r", " ");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 0);
      StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 14);
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string0);
      
      StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "");
      String string1 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "", "");
      StringUtils.join((short[]) null, '5', 0, 1171);
      String string2 = StringUtils.replaceIgnoreCase("/t", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("/t", string2);
      
      StringUtils.repeat("/t", "Gv@p5-fF`]rYrxgP", 1171);
      Locale locale0 = Locale.JAPANESE;
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      String string3 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.ordinalIndexOf("\r", " ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.wrapIfMissing("\n", "\r");
      assertEquals("\r\n\r", string0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = StringUtils.join(longArray0, '>');
      assertNotNull(string0);
      assertEquals("0>0>0>0", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("0>0>0>0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripToNull("\n");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      StringUtils.unwrap("5", 'd');
      String string0 = StringUtils.substringBefore("5", "5");
      assertEquals("", string0);
      
      String string1 = StringUtils.center("5", 29);
      assertEquals("              5              ", string1);
      
      StringUtils.split((String) null, "");
      String string2 = StringUtils.wrapIfMissing("              5              ", "Minimum abbreviation width with offset is %d");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      String string3 = StringUtils.replacePattern("Minimum abbreviation width with offset is %d              5              Minimum abbreviation width with offset is %d", " is not in the range '0' - '9'", "");
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceEach("TPZcQzMD", (String[]) null, (String[]) null);
      assertEquals("TPZcQzMD", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" is not in the range '0' - '9'");
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      StringUtils.wrapIfMissing((String) null, "9#ipZug'5%'62V ");
      StringUtils.wrap("4$Z", ",~366,q4iD");
      StringUtils.indexOfDifference((CharSequence) ",~366,q4iD4$Z,~366,q4iD", (CharSequence) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      StringUtils.indexOfAny((CharSequence) ",~366,q4iD", charArray0);
      StringUtils.wrapIfMissing("4knq5tM&\"v", (String) null);
      StringUtils.split("4$Z");
      StringUtils.substringAfter("4$Z", "9#ipZug'5%'62V ");
      StringUtils.splitPreserveAllTokens("Xo3)The character ");
      String string0 = StringUtils.trimToEmpty("");
      StringUtils.substring((String) null, (-1226));
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.iterator();
      String string1 = StringUtils.join(iterator0, 'y');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = StringUtils.stripStart("<Ft(/]", "<Ft(/]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) stringUtils0;
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!F{`#[%R/_h/ve4", "!F{`#[%R/_h/ve4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.capitalize("sr");
      assertEquals("Sr", string0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.capitalize("u");
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.capitalize("!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      assertEquals("!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:", string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("JMt= H+", "1jbY5~");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "'6w%l,QzrP%;uJtuh> ", (CharSequence) "'6w%l,QzrP%;uJtuh> ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.containsNone((CharSequence) " ", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(stringArray0);
      assertEquals(54, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("9z^qV+YmQ^x7K@A{", "9z^qV+YmQ^x7K@A{", "9z^qV+YmQ^x7K@A{");
      assertEquals("9z^qV+YmQ^x7K@A{", string0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'H');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("9&Z(|DD[tTe{&'7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.repeat("\r", 8198);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M#24]");
      StringUtils.prependIfMissingIgnoreCase((String) null, "M#24]", stringArray0);
      StringUtils.normalizeSpace((String) null);
      char char0 = 'f';
      StringUtils.reverseDelimited((String) null, '#');
      StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      StringUtils.containsOnly((CharSequence) "M#24]", (String) null);
      StringUtils.capitalize((String) null);
      StringUtils.substringBefore("M#24]", (String) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, (String) null, 2, 2952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2952
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      StringUtils.replaceAll("", "", "");
      StringUtils.isAlphaSpace("");
      StringUtils.split("", "", 0);
      String string0 = StringUtils.removeIgnoreCase((String) null, "{s!A~|${nV5#K^swT~F");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = "eityFpp]Y10\\`";
      StringUtils.trimToEmpty("6");
      char char0 = '?';
      StringUtils.removeEndIgnoreCase("6", "6");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6";
      StringUtils.firstNonBlank(stringArray0);
      String string1 = "^5$Xph@^5$Xph@";
      StringUtils.prependIfMissingIgnoreCase("^5$Xph@^5$Xph@", "6", stringArray0);
      String string2 = "mFX1^il";
      StringUtils.repeat("u&r}Ko:2", "mFX1^il", 53);
      Locale locale0 = Locale.JAPANESE;
      locale0.toLanguageTag();
      Locale locale1 = Locale.TAIWAN;
      locale1.clone();
      // Undeclared exception!
      try { 
        locale0.getExtension('?');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: ?
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("G~O},AH=h4WD0!>^", stringArray0, stringArray0);
      assertEquals("G~O},AH=h4WD0!>^", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("G~O},AH=h4WD0!>^", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.repeat("Extension context \"", 1404);
      assertNotNull(string0);
      
      StringUtils.substringBetween("i\"Zs9", "Threshold must not be negative");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "i\"Zs9", (CharSequence) "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean0);
      
      StringUtils.isNumericSpace("Threshold must not be negative");
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.TempDirectory");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.swapCase("Threshold must not be negative");
      assertEquals("tHRESHOLD MUST NOT BE NEGATIVE", string1);
      
      StringUtils.startsWith("Extension context \"", "Threshold must not be negative");
      String string2 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Extension context \"", (CharSequence) string0);
      String string3 = StringUtils.removeIgnoreCase("b&TueZ!bs", "org.apache.commons.lang3.StringUtils");
      assertEquals("b&TueZ!bs", string3);
      
      int int0 = StringUtils.compare("Threshold must not be negative", "i");
      assertEquals((-21), int0);
      
      StringUtils.isAlphanumeric("':^s?V");
      String string4 = StringUtils.wrapIfMissing("0ILx0", " vs ");
      assertEquals(" vs 0ILx0 vs ", string4);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "B");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.repeat("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      int int0 = StringUtils.compare("B", "              5              Search and Replace array lengths don't match: ");
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringBefore("", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.rightPad("5", 0, 'd');
      assertEquals("5", string0);
      
      String string1 = StringUtils.substringBefore("5", "5");
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replacePattern("M#24]<$M1p(,dedF;v", "5", "XYO>2p+");
      assertEquals("M#24]<$M1p(,dedF;v", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("XYO>2p+", "5");
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replace((String) null, "M#24]<$M1p(,dedF;v", "u&", 0);
      assertNull(string3);
      
      String string4 = StringUtils.center("The Array must not be null", 0, 'd');
      assertEquals("The Array must not be null", string4);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)37;
      String string0 = StringUtils.join(byteArray0, '$');
      String string1 = StringUtils.replaceOnce("-121$12$37", (String) null, "5,@BN{`D@0K!>TZ@D");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.replaceChars("5,@BN{`D@0K!>TZ@D", 'a', 'a');
      String string2 = StringUtils.overlay("F!Q\"5sAL9#'<PmX", "-121$12$37", (byte)37, (byte)37);
      assertEquals("F!Q\"5sAL9#'<PmX-121$12$37", string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isWhitespace("-121$12$37");
      boolean boolean1 = StringUtils.isNumeric("F!Q\"5sAL9#'<PmX-121$12$37");
      assertTrue(boolean1 == boolean0);
      
      StringUtils.chomp((String) null);
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (int) (byte)12);
      assertNull(stringArray0);
      
      String string4 = StringUtils.removeIgnoreCase("\n", "5,@BN{`D@0K!>TZ@D");
      assertEquals("\n", string4);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.overlay((String) null, (String) null, (-1169), 6);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", "75/q(.dJ^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      StringUtils.stripToNull("Z");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Z";
      StringUtils.join((Iterable<?>) null, '7');
      charSequenceArray0[1] = (CharSequence) null;
      StringUtils.firstNonEmpty(charSequenceArray0);
      StringUtils.indexOfIgnoreCase((CharSequence) "Extension context \"", (CharSequence) "Z");
      String string0 = StringUtils.substringBetween("Z", ".G|1");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.uncapitalize("|oK<#9W`");
      assertEquals("|oK<#9W`", string0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      int[] intArray0 = new int[18];
      StringUtils.join(intArray0, '\u001F');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      int[] intArray0 = new int[1];
      StringUtils.join(intArray0, '\u001F');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Locale must not be null";
      stringArray0[1] = "Locale must not be null";
      String string0 = StringUtils.replaceEach("Locale must not be null", stringArray0, stringArray0);
      assertEquals("Locale must not be null", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      StringUtils.prependIfMissingIgnoreCase("!nCL$t1JW0(d:a:", "!ncl$t1jw0(d:a:", (CharSequence[]) null);
      StringUtils.normalizeSpace("!nCL$t1JW0(d:a:");
      StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      StringUtils.split("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "Search and Replace array lengths don't match: ", 6);
      StringUtils.stripStart("7GpU6N", " vs ");
      String[] stringArray0 = StringUtils.substringsBetween(">ub", "55", "7GpU6N");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      assertEquals("Vp(>6%RURZiX[g", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string1);
      
      String[] stringArray0 = StringUtils.split("Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension", 917);
      StringUtils.indexOf((CharSequence) "Vp(>6%RURZiX[g", 256);
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertEquals("V(>6%RURZX[", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", "V(>6%RURZX[");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = '.';
      charArray0[2] = 'Y';
      String string3 = StringUtils.join(charArray0, '.');
      assertEquals("r...Y", string3);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.split("\r");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "z=d'[j{";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("z=d'[j{", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = StringUtils.join(longArray0, '>');
      assertEquals("0>0>0>0", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0>0>0>0", "0>0>0>0");
      int int0 = StringUtils.lastIndexOfAny("0>0>0>0", stringArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "f3s|SN<,W }@:n:>=";
      stringArray0[1] = "f3s|SN<,W }@:n:>=";
      stringArray0[2] = "f3s|SN<,W }@:n:>=";
      stringArray0[3] = "f3s|SN<,W }@:n:>=";
      stringArray0[4] = "f3s|SN<,W }@:n:>=";
      stringArray0[5] = "f3s|SN<,W }@:n:>=";
      stringArray0[6] = ", Length: 0";
      String string0 = StringUtils.replaceEach("f3s|SN<,W }@:n:>=", stringArray0, stringArray0);
      assertEquals("f3s|SN<,W }@:n:>=", string0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      StringUtils.uncapitalize("aySo,~X`,Ko7VY!");
      StringUtils.join((long[]) null, '`');
      StringUtils.wrap((String) null, '`');
      StringUtils.isNotEmpty("dp");
      StringUtils.toRootUpperCase(")oHCK,o*Xes");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aNsp.";
      stringArray0[1] = "aySo,~X`,Ko7VY!";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.StringUtils", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".");
      String[] stringArray1 = StringUtils.splitByCharacterType(".");
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(".", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.lastIndexOfAny("p{InCombiningDiac}iticalMarks+", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String string0 = StringUtils.left("<{t(]", 17);
      assertEquals("<{t(]", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("<{t(]", "<{t(]");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      
      StringUtils stringUtils0 = new StringUtils();
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      assertEquals(1, int2);
      
      String string2 = StringUtils.left((String) null, (-1));
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("", "\n");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.LF;
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = StringUtils.left("6F]43hJs;jowF`Nu", 1);
      assertEquals("6", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "6", (CharSequence) "6F]43hJs;jowF`Nu");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("U\"<t&YnTl0IM<.Y/}J", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.tringUtils", "org.apache.commons.lang3.tringUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Extension context \"", "Extension context \"");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("D", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.left("\r", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.left("~|X;qt;;$LEv", 52);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~|X;qt;;$LEv";
      stringArray0[1] = "~|X;qt;;$LEv";
      stringArray0[2] = "~|X;qt;;$LEv";
      stringArray0[3] = "~|X;qt;;$LEv";
      stringArray0[4] = "~|X;qt;;$LEv";
      stringArray0[5] = "~|X;qt;;$LEv";
      stringArray0[6] = "~|X;qt;;$LEv";
      stringArray0[7] = "~|X;qt;;$LEv";
      stringArray0[8] = "~|X;qt;;$LEv";
      StringUtils.replaceEach("~|X;qt;;$LEv", stringArray0, stringArray0);
      boolean boolean0 = StringUtils.equalsIgnoreCase("~|X;qt;;$LEv", "~|X;qt;;$LEv");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("JfUfCt! ~:vQv'-_F7g");
      assertEquals("JfUfCt! ~:vQv'-_F7", string1);
      
      String string2 = StringUtils.stripAccents(":v%>m_QpH<");
      assertEquals(":v%>m_QpH<", string2);
      
      int int0 = StringUtils.lastIndexOfAny("~|X;qt;;$LEv", stringArray0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.split("~|X;qt;;$LEv", "~|X;qt;;$LEv");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.leftPad("~|X;qt;;$LEv", 0, '0');
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      short[] shortArray0 = new short[5];
      String string0 = StringUtils.join(shortArray0, '7');
      assertNotNull(string0);
      assertEquals("070707070", string0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-838);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)50;
      shortArray0[3] = (short)4159;
      shortArray0[4] = (short)15;
      shortArray0[5] = (short) (-1593);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'H');
      assertEquals("-838H0H50H4159H15H-1593H0H0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      StringUtils.indexOfAny((CharSequence) "org.apache.common.lang3Charsets", "org.apache.common.lang3Charsets");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '{', 0, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = StringUtils.difference("cF&", ":6");
      assertEquals(":6", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "cF&";
      charSequenceArray0[1] = (CharSequence) "cF&";
      charSequenceArray0[2] = (CharSequence) ":6";
      charSequenceArray0[3] = (CharSequence) "cF&";
      charSequenceArray0[4] = (CharSequence) "cF&";
      charSequenceArray0[5] = (CharSequence) ":6";
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", ":6", charSequenceArray0);
      String string2 = StringUtils.strip("maxWith cannot be negative:6", "]]>}tDHs?ALjh?P");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("6'N,my");
      assertEquals("6'N,my", string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '_';
      charArray0[2] = 'W';
      charArray0[3] = 'k';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "maxWith cannot be negative", charArray0);
      assertFalse(boolean0);
      
      StringUtils.indexOfIgnoreCase((CharSequence) ":6", charSequenceArray0[1], 16);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) 'k';
      floatArray0[2] = (float) 'W';
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) 16;
      floatArray0[5] = (float) '_';
      floatArray0[6] = (float) '_';
      String string4 = StringUtils.join(floatArray0, 'g', 1412, 1412);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "", 1412);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("ThreshoPd must not be negative", (CharSequence[]) null);
      String string0 = StringUtils.appendIfMissingIgnoreCase("ThreshoPd must not be negative", "! -kD9bc", (CharSequence[]) null);
      assertEquals("ThreshoPd must not be negative! -kD9bc", string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "ThreshoPd must not be negative! -kD9bc", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("K", "K");
      String string0 = StringUtils.appendIfMissingIgnoreCase("K", "PWniEXF:1fMC<1PY?r4EDufX_xkY8*{", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("K", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("PWniEXF:1fMC<1PY?r4EDufX_xkY8*{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      StringUtils.wrap("", "");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 127);
      StringUtils.contains((CharSequence) "", (CharSequence) "");
      StringUtils.uncapitalize((String) null);
      StringUtils.getLevenshteinDistance((CharSequence) "_}w0(-Ol,2,", (CharSequence) "<$M1p(,dedF;v(oJ8/$\"2K%cAW)/h[b");
      StringUtils.defaultString("Jv9DH8Q", (String) null);
      StringUtils.strip("De)1Z<(8W>");
      StringUtils.lowerCase((String) null);
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.split(">;(>TwW5F)FzAY6pUI");
      StringUtils.defaultString((String) null, "");
      String string0 = StringUtils.substringBefore((String) null, "maxWith cannot be negative");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "<$M1p(,dedF;v", 3207);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<$M1p(,dedF;v";
      stringArray0[1] = "<$M1p(,dedF;v";
      stringArray0[2] = "<$M1p(,dedF;v";
      String string0 = "\\l8O>%T#L";
      StringUtils.removeStartIgnoreCase("l8O>%T#L", "cq$=s]Uu&");
      StringUtils.ordinalIndexOf("<$M1p(,dedF;v", "<$M1p(,dedF;v", 3164);
      String string1 = null;
      StringUtils.appendIfMissingIgnoreCase((String) null, "<$M1p(,dedF;v", stringArray0);
      StringUtils.removeStart("gm1gVc", "l8O>%T#L");
      String string2 = "";
      StringUtils.indexOfAny((CharSequence) "l8O>%T#L", "");
      StringUtils.isAlphanumeric((CharSequence) null);
      // Undeclared exception!
      try { 
        StringUtils.upperCase("Q]7s|VS+", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.lowerCase("^5$Xph@");
      assertNotNull(string0);
      assertEquals("^5$xph@", string0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-468);
      intArray0[1] = 0;
      intArray0[2] = 1649;
      intArray0[3] = (-921);
      intArray0[4] = 647;
      intArray0[5] = 0;
      String string0 = StringUtils.join(intArray0, 'A');
      assertNotNull(string0);
      assertEquals("-468A0A1649A-921A647A0", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-468A0A1649A-921A647A0", "TLyz:(+yU;!NV>Bx;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("Illegal range. The step cannot be zero....", "Illegal range. The step cannot be zero....", charSequenceArray0);
      assertEquals("Illegal range. The step cannot be zero....", string0);
      
      boolean boolean0 = StringUtils.isNumeric("Illegal range. The step cannot be zero....");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      StringUtils.chop("*");
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      Class<String> class0 = String.class;
      ServiceLoader.load(class0);
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.rightPad("zHC\"nqe#/TP ", 110, "*");
      assertEquals("zHC\"nqe#/TP **************************************************************************************************", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'P';
      charArray0[2] = '(';
      int int0 = StringUtils.indexOfAny((CharSequence) "zHC\"nqe#/TP **************************************************************************************************", charArray0);
      assertEquals(10, int0);
      
      StringUtils.indexOf((CharSequence) "*", (-1), (-1526));
      String string1 = StringUtils.stripAccents("9t>w9*");
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "zHC\"nqe#/TP **************************************************************************************************", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      
      StringUtils.replaceChars("ha;LM&A}::DFyrB.PE4", "9t>w9*", "zHC\"nqe#/TP **************************************************************************************************");
      StringUtils.stripAccents((String) null);
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "zHC\"nqe#/TP **************************************************************************************************", (CharSequence) "ha;LM&A}::DFyrB.PE4");
      assertEquals(110, int1);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.indexOfAny((CharSequence) "", "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.appendIfMissing("DK?V]w7~=g]", "DK?V]w7~=g]", stringArray0);
      assertEquals("DK?V]w7~=g]", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("DK?V]w7~=g]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '?', 'C');
      StringUtils.uncapitalize("");
      StringUtils.normalizeSpace((String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte) (-20);
      StringUtils.join(byteArray0, '1');
      StringUtils.reverseDelimited("", ';');
      StringUtils.normalizeSpace("");
      StringUtils.isAllUpperCase("141351141141891-201-201891-20");
      StringUtils.join((double[]) null, 'C', 10, 56);
      Charset charset0 = Charset.defaultCharset();
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = "_u";
      StringUtils.stripAccents("_u");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "_u", (CharSequence) "_u");
      String string1 = "";
      String string2 = "(>k:+K|uP0dBIu3";
      StringUtils.defaultIfBlank("", "(>k:+K|uP0dBIu3");
      String string3 = "org.apache.commons.lang3.CharUtils";
      StringUtils.lowerCase("org.apache.commons.lang3.CharUtils");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.appendIfMissing("Pr_!&C4w", "_u", charSequenceArray0);
      StringUtils.contains((CharSequence) "org.apache.commons.lang3.charutils", 102);
      StringUtils.endsWithIgnoreCase("(>k:+K|uP0dBIu3", "(>k:+K|uP0dBIu3");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 102;
      char char0 = '(';
      StringUtils.join(doubleArray0, '(', Integer.MAX_VALUE, 2657);
      String string4 = "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)";
      StringUtils.indexOfAny((CharSequence) "", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 102;
      char char1 = '6';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray1, '6', 0, 2657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      StringUtils.isAlphanumericSpace("Timeout");
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "Timeout");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "/<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)16;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      StringUtils.getDigits("Failed to delete temp directory ");
      String string0 = StringUtils.trimToEmpty("Threshold must not be negative");
      String string1 = StringUtils.chomp("Threshold must not be negative", "Threshold must not be negative");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String string2 = StringUtils.stripStart("Threshold must not be negative", (String) null);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceAll("\n", (String) null, "offset cannot be negativejIl, B1$_B'");
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      String string4 = StringUtils.difference("\n^13j64H^", "\n");
      String string5 = StringUtils.substringAfterLast("", "Failed to delete temp directory ");
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceOnce("", " is not in the range '0' - '9'", "3/?j");
      assertTrue(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.leftPad("oEb-6H Lh", (-615), ";S[sGxH@j!5}>{8");
      assertEquals("oEb-6H Lh", string0);
      
      String string1 = StringUtils.overlay("(oJ8/$\"2K%cAW", ";S[sGxH@j!5}>{8", 50, 967);
      assertNotNull(string1);
      assertEquals("(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8", string1);
      
      Locale.getISOLanguages();
      StringUtils.stripEnd("org.apache.commons.lang3.StringUtils", "M#24]YDXJU<Y\rb|LwSrd");
      Locale locale0 = Locale.PRC;
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      int int0 = StringUtils.getFuzzyDistance("(oJ8/$\"2K%cAW", "org.apache.commons.lang3.StringUtils", locale0);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("io", "(oJ8/$\"2K%cAW;S[sGxH@j!5}>{8");
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("org.junitpioneer.jupiter.SystemPropertyExtension", "org.apache.commons.lang3.StringUtils", "oEb-6H Lh");
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.SystemPropertyExtension", "M#24]YDXJU<Y\rb|LwSrd");
      assertEquals(0.21, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      double double0 = StringUtils.getJaroWinklerDistance(" ", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.difference("", " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("<$M1p(,dedF;v", "<$M1p(,dedF;v");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "r9.6L9IEg t", (CharSequence) "r9.6L9IEg t", 10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      StringUtils.removeEnd("Search and Replace array lengths don't match: ", "\n");
      StringUtils.isAlpha("Search and Replace array lengths don't match: ");
      StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: ", 'N');
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '0';
      charArray0[2] = 'N';
      StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "bn}iq,('V$?");
      StringUtils.leftPad("Search and Replace array lengths don't match: ", (-7), "\n");
      StringUtils.getJaroWinklerDistance("\n", "Search and Replace array lengths don't match: ");
      String string0 = "Backupgm1gVcGki=#lw`_'|";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Backupgm1gVcGki=#lw`_'|", "Backupgm1gVcGki=#lw`_'|", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 24
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String string0 = StringUtils.join(doubleArray0, 'J');
      assertNotNull(string0);
      assertEquals("0.0J0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      StringUtils.difference("4p.$$`0:/$ty-", "4p.$$`0:/$ty-");
      String string0 = "P7*(?4Qf.OJvdMcI&i/";
      StringUtils.substring("P7*(?4Qf.OJvdMcI&i/", (-4083));
      String string1 = "<]DmBfGT";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'Z', 5, 800);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("!<5yZe*,P]/I,;T4");
      linkedList0.add((String) null);
      linkedList0.subList(0, 0);
      String string0 = StringUtils.replaceChars("a\"", "TkS2$ZOW$_#os", "$");
      assertEquals("a\"", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "Locale must not be null");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$";
      objectArray0[1] = (Object) "TkS2$ZOW$_#os";
      objectArray0[2] = (Object) "a\"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "a\"";
      String string1 = StringUtils.join(objectArray0, '\"');
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("<$M1p(,dedF;v", 'N');
      StringUtils stringUtils0 = new StringUtils();
      String string1 = StringUtils.replaceIgnoreCase("<$M1p(,dedF;v", "Thr", "?xx");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n");
      String string2 = StringUtils.repeat("<$M1p(,dedF;v", (String) null, (int) (byte)118);
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayName();
      StringUtils.join((long[]) null, 'N');
      String string3 = StringUtils.CR;
      boolean boolean0 = StringUtils.containsIgnoreCase("\r", "\n");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripEnd("<$M1p(,dedF;v", "(Kt9h7~eurw-W#78,ip");
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Stack<Locale> stack0 = new Stack<Locale>();
      String string0 = StringUtils.chop("\r\n");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "T) mnWm$|C\"#gcHNa$";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "*";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      boolean boolean1 = StringUtils.isAllEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("6", "6");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("m~0<fGVy@", "m~0<fGVy@");
      assertEquals("m~0<fGVy@", string0);
      
      String string1 = StringUtils.wrapIfMissing("x`Lp#\"t219v5e!", '8');
      assertEquals("8x`Lp#\"t219v5e!8", string1);
      
      StringUtils.unwrap("m~0<fGVy@", 'm');
      Locale locale0 = Locale.JAPANESE;
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = 'S';
      charArray0[4] = 'm';
      charArray0[5] = 'd';
      charArray0[6] = '8';
      charArray0[7] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "m~0<fGVy@", charArray0);
      assertEquals(1, int0);
      
      StringUtils.truncate((String) null, 1, 1);
      double double0 = StringUtils.getJaroWinklerDistance(";BIj`lG+xV'w\"l", "m~0<fGVy@");
      assertEquals(0.46, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = StringUtils.stripEnd("I8GYb", "I8GYb");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '`');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.chomp("^13j64H^\n");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.endsWithAny("^13j64H^", charSequenceArray0);
      StringUtils.isAllEmpty(charSequenceArray0);
      String string1 = StringUtils.trimToNull("^13j64H^");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("^13j64H^", 3463);
      Stack<String> stack0 = new Stack<String>();
      ListIterator<String> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, "yFQeRB$cL:");
      String string3 = StringUtils.difference("#k", "@~N");
      assertEquals("@~N", string3);
      
      String string4 = StringUtils.chop("^13j64H^\n");
      String string5 = StringUtils.replaceOnce("^13j64H^", "org.junitpioneer.jupiter.TempDirectory", "Minimum abbreviation width is %d");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      boolean boolean1 = StringUtils.containsIgnoreCase("\n", "\n");
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.stripStart("\r", "z@q#");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String string0 = StringUtils.chop("JfUfCt! ~:vQv'-_F7g");
      assertNotNull(string0);
      assertEquals("JfUfCt! ~:vQv'-_F7", string0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.difference(" ", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "\n", "Vrgn4_W:a&oFq\"T2i");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'c');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "5";
      int int0 = StringUtils.lastIndexOfAny("5", charSequenceArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("XYO>2p+");
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid("5", 0, 1696);
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      StringUtils.replaceOnce("<$M1p(,dedF;v", "<$M1p(,dedF;v", "<$M1p(,dedF;v");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "<$M1p(,dedF;v";
      StringUtils.normalizeSpace("<$M1p(,dedF;v");
      StringUtils.containsOnly((CharSequence) "<$M1p(,dedF;v", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '|';
      charArray0[2] = 'b';
      charArray0[3] = 'x';
      charArray0[4] = '`';
      charArray0[5] = '+';
      charArray0[6] = 'L';
      StringUtils.containsNone((CharSequence) "+p!", charArray0);
      StringUtils.getLevenshteinDistance((CharSequence) "<$M1p(,dedF;v", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      StringUtils.substringAfterLast("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", (String) null);
      CharBuffer.wrap(charArray0, 2, 2);
      StringUtils.isMixedCase("+p!");
      Locale locale0 = Locale.FRANCE;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      String string0 = StringUtils.mid("q:U/ng?", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("9&Z(|DD[tTe{&'7", "9&Z(|DD[tTe{&'7", "9&Z(|DD[tTe{&'7");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // 9&Z(|DD[tTe{&'7
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", 0, (-1452));
      String string1 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "}<ZkPQ:o.r2%");
      assertEquals("g.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("}<ZkPQ:o.r2%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("}<ZkPQ:o.r2%", 0, 0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils.substringBeforeLast("^13j64H^", "^13j64H^");
      StringUtils.toCodePoints("");
      int int0 = 73;
      StringUtils.lastIndexOf((CharSequence) "^13j64H^", 73);
      StringUtils.split("0#1YLnuc;/M", "^13j64H^");
      StringUtils.wrapIfMissing("\n", "org.junitpioneer.jupiter.TempDirectoryCannot store ");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      StringWriter stringWriter0 = new StringWriter();
      int int1 = (-1651);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", (-1651), 769);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("!nCL$t1JW0(d:a:", "!ncl$t1jw0(d:a:", (CharSequence[]) null);
      assertEquals("!nCL$t1JW0(d:a:", string1);
      
      String string2 = StringUtils.normalizeSpace("!nCL$t1JW0(d:a:");
      String string3 = StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      
      StringUtils.containsAny((CharSequence) "!nCL$t1JW0(d:a:", (CharSequence[]) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[3] = '4';
      charArray0[4] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!ncl$t1jw0(d:a:", charArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "+p!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.capitalize("d1DKM66oG-d2::[");
      assertEquals("D1DKM66oG-d2::[", string1);
      
      String string2 = StringUtils.wrap("", "D1DKM66oG-d2::[");
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("d1DKM66oG-d2::[", charSequenceArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      charSequenceArray1[0] = (CharSequence) "Failed to delete temp directory ";
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "D1DKM66oG-d2::[";
      boolean boolean2 = StringUtils.equalsAny("Failed to delete temp directory ", charSequenceArray1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      String string0 = StringUtils.upperCase("QaCR}57VWY*", locale0);
      assertNotNull(string0);
      assertEquals("QACR}57VWY*", string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.removeStart("!nCL$t1JW0(d:a:", "!nCL$t1JW0(d:a:");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "!nCL$t1JW0(d:a:", (-1792));
      assertEquals((-1), int0);
      
      StringUtils.removeIgnoreCase("", "|\"f|JeQ0V+u.=ahN[");
      String string1 = StringUtils.removeIgnoreCase("", "!|BmX9[(o7um&");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "|\"f|JeQ0V+u.=ahN[");
      boolean boolean1 = StringUtils.startsWithAny("!nCL$t1JW0(d:a:", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBeforeLast("QB", "");
      assertEquals("QB", string2);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.replaceAll("", "", "");
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      StringUtils.isAllEmpty((CharSequence[]) null);
      String string2 = StringUtils.overlay("", "", 0, (-1940));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.startsWithAny("", (CharSequence[]) null);
      Locale locale0 = Locale.forLanguageTag("', is neither of type Map.Entry nor an Array");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) hashSet0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale locale1 = new Locale("C_W7Id==v3q");
      locale0.getDisplayVariant(locale1);
      Locale.getISOLanguages();
      String string3 = StringUtils.upperCase("", locale0);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.rightPad("", (-3310));
      String string5 = StringUtils.mid("", 0, 0);
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.mid("\n", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      StringUtils.rightPad("", 0, 'd');
      StringUtils.substringBefore("", "");
      StringUtils.repeat("[g-X:b4Vo/X1", 0);
      StringUtils.substringBetween("", "i\"Zs9");
      StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      StringUtils.isNumericSpace("");
      StringUtils.split("", "", 0);
      StringUtils.join((Iterable<?>) null, 'j');
      StringUtils.swapCase("");
      StringUtils.startsWith((CharSequence) null, "[g-X:b4Vo/X1");
      StringUtils.defaultString("i\"Zs9");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "i\"Zs9", (CharSequence) null);
      StringUtils.removeIgnoreCase("':^s?V", (String) null);
      StringUtils.compare((String) null, "");
      StringUtils.isAlphanumeric("");
      String string0 = StringUtils.wrapIfMissing((String) null, "':^s?V");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      StringUtils.rightPad("", 0, 'd');
      StringUtils.substringBefore("", "");
      StringUtils.repeat("", 11);
      StringUtils.substringBetween("", "i\"Zs9");
      StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      StringUtils.isNumericSpace("");
      String[] stringArray0 = StringUtils.split("");
      StringUtils.join((Object[]) null, '!');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("...");
      StringUtils.isAllEmpty(stringArray0);
      int int0 = StringUtils.lastOrdinalIndexOf("", (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      boolean boolean1 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String string0 = StringUtils.remove("!8 ^>U6ydh$F5JpS>", 'I');
      assertEquals("!8 ^>U6ydh$F5JpS>", string0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.removePattern("%A", "%A");
      assertEquals("", string0);
      
      String string1 = StringUtils.center((String) null, (-615), '');
      assertNull(string1);
      
      StringUtils.leftPad("s2T%R@Mxi0", (-615), ";S[sGxH@j!5}>{8");
      int int0 = StringUtils.ordinalIndexOf(";S[sGxH@j!5}>{8", "%A", 12);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("%A", "M#24]<$M1p(,dedF;v", "s2T%R@Mxi0");
      assertEquals("%A", string2);
      
      StringUtils.split((String) null, 'z');
      String string3 = StringUtils.truncate("0{", 211);
      assertEquals("0{", string3);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils.unwrap("5", 'd');
      StringUtils.substringBefore("5", "5");
      StringUtils.center("5", 29);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      StringUtils.removeStart("Search and Replace array lengths don't match: ", "              5              ");
      StringUtils.indexOfAny((CharSequence) "              5              ", "5");
      StringUtils.isAlphanumeric("5");
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      StringUtils.center("9RH|r'Iq@# c@!dBbO", 14, "Search and Replace array lengths don't match: ");
      StringUtils.indexOfAny((CharSequence) "5", (CharSequence[]) stringArray0);
      StringUtils.substringAfterLast("9RH|r'Iq@# c@!dBbO", "\n^13j64H^");
      StringUtils.startsWithIgnoreCase("org.junitpioneer.jupiter.params.RangeSourceProvider", "");
      StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match: ", "");
      String string0 = StringUtils.join((List<?>) null, 'p', 2201, 29);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "FrzlpI", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@n`L4'O;M\"ne7H> ", " ");
      assertEquals(" @n`L4'O;M\"ne7H> ", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I{V#+C\"+-7HO=SsG", (String) null);
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals("I{V#+C\"+-7HO=SsG", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("MqJ;8Ft'},k7C#?tp", "");
      assertEquals("MqJ;8Ft'},k7C#?tp", string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      StringUtils.contains((CharSequence) "9&ZE(|DD[tTe{&'7", 57);
      StringUtils.repeat('P', 17);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.contains((CharSequence) "9&ZE(|DD[tTe{&'7", (CharSequence) "9&ZE(|DD[tTe{&'7");
      StringUtils.containsNone((CharSequence) "PPPPPPPPPPPPPPPPP", "9&ZE(|DD[tTe{&'7");
      StringUtils.isAlphanumericSpace("PPPPPPPPPPPPPPPPP");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) "PPPPPPPPPPPPPPPPP";
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) "9&ZE(|DD[tTe{&'7";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '>', 17, 606);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 2739);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      StringUtils.capitalize("!8 ^>U6ydh$F5JpS");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("Illegal range. The step cannot be zero.", "!8 ^>U6ydh$F5JpS");
      StringUtils.isNumeric("!8 ^>U6ydh$F5JpS");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.normalizeSpace("M\"p.utrx");
      StringUtils.wrapIfMissing("Search and Replace array lengths don't match: io1", "Search and Replace array lengths don't match: ");
      StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      StringUtils.normalizeSpace(",bZs");
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "M\"p.utrx", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" u=`&", " u=`&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, '?', 25, (int) (byte)25);
      String string1 = StringUtils.center("Array and element cannot both be null", (int) (byte)25, 'r');
      assertEquals("Array and element cannot both be null", string1);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.remove("The character must not be null", 'r');
      assertEquals("The chaacte must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtils.join(iterator0, "ot!fO7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      StringUtils.wrap("", "");
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils stringUtils0 = new StringUtils();
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "\r", (CharSequence) "");
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "\r");
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "");
      StringUtils.isNumericSpace("");
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.EMPTY;
      StringUtils.join((double[]) null, 'e');
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)charSequence0));
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad("v!", (-1), "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("v!", string2);
      
      String string3 = StringUtils.substring("Search and Replace array lengths don't match: ", 671);
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("^134H^\n", "^134H^\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastOrdinalIndexOf("\n", "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.repeat('$', (-788));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      String string0 = StringUtils.join((List<?>) stack0, 'L', 10, 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "...");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Search and Replace array lengths don't match: ", 917);
      StringUtils.contains((CharSequence) null, (CharSequence) "...");
      StringUtils.abbreviate("ePAr`=z!D]gQ}", "...", 11, 11);
      StringUtils.removeStart("...=z!D]gQ}", "...");
      StringUtils.isNumeric((CharSequence) null);
      try { 
        StringUtils.getBytes("k4({< c", "...=z!D]gQ}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Y3[jey");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Y3[jey", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Array and element cannot both be null", "Array and element cannot both be null");
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = "Failed to delete temp directory ";
      StringUtils.getDigits("Failed to delete temp directory ");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      StringUtils.endsWithIgnoreCase("Failed to delete temp directory ", "Failed to delete temp directory ");
      StringUtils.center("5]tPL", 0, 'L');
      String string1 = null;
      StringUtils.remove((String) null, 'L');
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      StringUtils.join((Iterable<?>) serviceLoader0, "");
      StringUtils.compareIgnoreCase("", (String) null, true);
      StringUtils.contains((CharSequence) "5]tPL", 0);
      StringUtils.repeat('L', 0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '5', (-1036), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1036
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      String string0 = StringUtils.join((Iterable<?>) stack0, "HVtjA");
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "HVtjA", 21);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "', has a leng; less than 2", 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("8_", "8_");
      assertEquals("8_", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "\r");
      assertNotNull(charSequence0);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\r", (CharSequence) null);
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      String string2 = StringUtils.wrapIfMissing("\r", (String) null);
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("\r", (CharSequence) null);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("", 0, 'L');
      assertEquals("", string3);
      
      String string4 = StringUtils.remove("Minimum abbreviation width is %d", 'L');
      assertEquals("Minimum abbreviation width is %d", string4);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      String string5 = StringUtils.join((Iterable<?>) serviceLoader0, (String) null);
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("\r", "\r", false);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\r", 0);
      assertTrue(boolean2 == boolean0);
      
      StringUtils.repeat('x', (-1036));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string6 = StringUtils.join((List<?>) arrayList0, 'L', 1346, 53);
      assertNotNull(string6);
      
      StringUtils.contains((CharSequence) "", (CharSequence) null);
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", (-5233));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.substringBetween("\n", "\r", "\r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "D");
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) charBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.defaultString("TqY rF\"@");
      assertEquals("TqY rF\"@", string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The Character must not be null", "The Character must not be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      StringUtils.substringBetween("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "org.apache.commons.lang3.StringUtils");
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultString("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "");
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      Locale locale0 = new Locale("Locale must not be null#|-^OB3hG?\"AS-}|t");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "CRqp&t?le", (CharSequence) "CRqp&t?le");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceIgnoreCase("Locale must not be null#|-^OB3hG?\"AS-}|t", "9ws>a;}3fa2{o!", "9ws>a;}3fa2{o!", 0);
      assertEquals("Locale must not be null#|-^OB3hG?\"AS-}|t", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "CRqp&t?le", (CharSequence) "Locale must not be null#|-^OB3hG?\"AS-}|t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      StringUtils.stripEnd("", "");
      StringUtils.isAlphaSpace("");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringUtils.isNotBlank(charBuffer0);
      StringUtils.difference("", "?9r[Z2<31yG07");
      StringUtils.containsIgnoreCase("?9r[Z2<31yG07", "");
      StringUtils.stripAccents("");
      StringUtils.getJaroWinklerDistance("?9r[Z2<31yG07", "");
      StringUtils.trimToNull("");
      double double0 = StringUtils.getJaroWinklerDistance(charBuffer0, "]T]k06");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      StringUtils.remove("^5$Xph@", "^5$Xph@");
      StringUtils.equals((CharSequence) "^5$Xph@", (CharSequence) "");
      StringUtils.reverse((String) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "^5$Xph@";
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'k', (-2045), (-482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.repeat('I', (-1));
      String string1 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.join((short[]) null, '%', (-819), 1945);
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (int) (short)7);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.removeFirst("", (String) null);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize("Object varargs must not be null");
      assertEquals("object varargs must not be null", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      String string0 = StringUtils.reverse("JFZshw|o$.I</]e");
      assertEquals("e]/<I.$o|whsZFJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("j");
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '\'');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String string0 = StringUtils.trimToNull("CU,brG(Em%XrOqqy|%v");
      assertNotNull(string0);
      assertEquals("CU,brG(Em%XrOqqy|%v", string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("aySo,~X`,Ko7VY!");
      assertEquals("aySo,~X`,Ko7VY!", string1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short) (-58);
      String string2 = StringUtils.join(shortArray0, '<', 0, (int) (short) (-58));
      assertNotNull(string2);
      
      StringUtils.defaultIfBlank("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      String string3 = StringUtils.reverse("aySo,~X`,Ko7VY!");
      assertEquals("!YV7oK,`X~,oSya", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("codefx", "!YV7oK,`X~,oSya", "[wv@v*r%M;", 0);
      assertEquals("codefx", string4);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("!nCL$t1JW0(d:a:");
      assertEquals("!ncl$t1jw0(d:a:", string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("!nCL$t1JW0(d:a:", "!ncl$t1jw0(d:a:", (CharSequence[]) null);
      assertEquals("!nCL$t1JW0(d:a:", string1);
      
      String string2 = StringUtils.normalizeSpace("!nCL$t1JW0(d:a:");
      String string3 = StringUtils.reverseDelimited("!nCL$t1JW0(d:a:", '4');
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[4] = 'f';
      StringUtils.indexOfAnyBut((CharSequence) "!ncl$t1jw0(d:a:", charArray0);
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "!nCL$t1JW0(d:a:", "+p!");
      assertFalse(boolean0);
      
      StringUtils.substringBeforeLast("!nCL$t1JW0(d:a:", "' B>A># R7");
      int int0 = StringUtils.compare((String) null, "[=e", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "+p!", (CharSequence) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      int int0 = StringUtils.compare("              5              Search and Replace array lengths don't match: ", "              5              Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.removeAll(" ", " ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      char[] charArray0 = new char[18];
      StringUtils.join(charArray0, '\u0000');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("9&Z(|DD[tTe{&'7");
      assertEquals("9&Z(|DD[tTe{&'7", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      int int0 = StringUtils.compare("eityFpp]Y10`", "eityFpp]Y10`", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("6");
      assertEquals("6", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '?';
      charArray0[2] = '=';
      charArray0[3] = ',';
      charArray0[4] = '[';
      charArray0[5] = '%';
      charArray0[6] = 'R';
      String string1 = StringUtils.join(charArray0, 'R');
      assertEquals("/R?R=R,R[R%RR", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("2uzlo ph ", "2uzlo ph ");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      StringUtils.defaultIfBlank((CharSequence) "dy#wbK", (CharSequence) "dy#wbK");
      StringUtils.containsAny((CharSequence) "dy#wbK", (char[]) null);
      StringUtils.upperCase("");
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.params.LongRange", "");
      assertEquals(41, int0);
      
      String string0 = StringUtils.right("Arguments cannot both be null", 7);
      assertEquals("be null", string0);
      
      StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      String string1 = StringUtils.abbreviateMiddle("{ O(<>#S3>xcr14", "@5<9#u-2E{", 614);
      assertEquals("{ O(<>#S3>xcr14", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("blank_blank_blank_2014");
      StringUtils.rotate((String) null, (-168));
      int int1 = StringUtils.indexOf((CharSequence) "gm1gVc", (CharSequence) "blank_blank_blank_2014");
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNotBlank("org.junitpioneer.jupiter.params.LongRange");
      assertFalse(boolean1 == boolean0);
      
      StringUtils.replaceChars("\" should have a parent context.", '%', '%');
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "{ O(<>#S3>xcr14", (CharSequence) "\" should have a parent context.");
      assertEquals(29, int2);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.right("njFqq]3+vWh", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "njFqq]3+vWh", "p{InCombiningDiacriticalMarks+");
      boolean boolean1 = StringUtils.isAlphanumericSpace("p{InCombiningDiacriticalMarks+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      StringUtils.join(longArray0, '');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      StringUtils.rightPad("", 0, '');
      StringUtils.removeAll((String) null, "1Z$[af>(");
      StringUtils.isAlphanumericSpace((CharSequence) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "OxZ3^[x@b";
      StringUtils.replaceEach("]|A^2)W=NzWv@%Jgo*b", stringArray0, stringArray0);
      StringUtils.normalizeSpace("Cannot store ");
      StringUtils.isAllUpperCase("0-10");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      StringUtils.replacePattern("Threshold must not be negative", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must not be negative", "Threshold must not be negative");
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replace("Threshold must not be negative", "org.junitpioneer.jupiter.TempDirectory", "Threshold must not be negative", (-4510));
      assertEquals("Threshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String string0 = StringUtils.strip("Cannot store ", "OxZ3^[x@b");
      assertEquals("Cannot store ", string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 281L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, '');
      assertEquals("281-10", string1);
      
      StringUtils.stripEnd("", "281-10");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "");
      assertEquals(13, int0);
      
      StringUtils.indexOfDifference((CharSequence) "Cannot store ", (CharSequence) "");
      String string2 = StringUtils.wrap("Cannot store ", "Cannot store ");
      assertEquals("Cannot store Cannot store Cannot store ", string2);
      
      StringUtils.isBlank("");
      String string3 = StringUtils.repeat("Cannot store Cannot store Cannot store ", 0);
      assertNotNull(string3);
      
      StringUtils.getJaroWinklerDistance("OxZ3^[x@b", "");
      String string4 = StringUtils.wrapIfMissing("Cannot store ", "org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectoryCannot store org.junitpioneer.jupiter.TempDirectory", string4);
      
      StringUtils.lastOrdinalIndexOf("", "org.junitpioneer.jupiter.TempDirectoryCannot store org.junitpioneer.jupiter.TempDirectory", (-2236));
      String string5 = StringUtils.getDigits("");
      assertEquals("", string5);
      
      String string6 = StringUtils.stripAccents("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String string0 = StringUtils.removeStart("io1", "Search and Replace array lengths don't match: ");
      assertEquals("io1", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", ".M,3w6^G");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat(';', (-1));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      String string0 = StringUtils.join(byteArray0, '6', (int) (byte)0, (int) (byte) (-87));
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("Fx[lbO%Nj_t99${R]*", "");
      StringUtils.containsAny((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Fx[lbO%Nj_t99${R]*", (CharSequence) "Fx[lbO%Nj_t99${R]*");
      assertEquals(0, int0);
      
      String string2 = StringUtils.chop("Fx[lbO%Nj_t99${R]*");
      assertEquals("Fx[lbO%Nj_t99${R]", string2);
      
      StringUtils.isNotBlank("Fx[lbO%Nj_t99${R]");
      String string3 = StringUtils.difference("", "Fx[lbO%Nj_t99${R]*");
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Fx[lbO%Nj_t99${R]*", "Fx[lbO%Nj_t99${R]*");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Fx[lbO%Nj_t99${R]*", "Fx[lbO%Nj_t99${R]");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.trimToNull("]T]k06");
      assertEquals("]T]k06", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) (byte) (-87);
      doubleArray0[2] = (double) (byte) (-87);
      doubleArray0[3] = (double) (byte)108;
      doubleArray0[4] = (double) (byte) (-87);
      doubleArray0[5] = (double) '6';
      doubleArray0[6] = (double) '6';
      String string5 = StringUtils.join(doubleArray0, '6');
      assertEquals("54.06-87.06-87.06108.06-87.0654.0654.0", string5);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      String string1 = StringUtils.abbreviateMiddle("5", "\" should have a parent context.", 0);
      assertEquals("5", string1);
      
      String string2 = StringUtils.stripStart("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", ", ");
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "\r";
      StringUtils.isNoneEmpty(charSequenceArray0);
      String string1 = StringUtils.leftPad("", (-1), 'B');
      String string2 = StringUtils.replaceIgnoreCase("", "\n", "?xx");
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) " ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)14;
      String string3 = StringUtils.join(byteArray0, 'c');
      assertEquals("103c89c-20c14", string3);
      
      String string4 = StringUtils.reverseDelimited("$v`", 'c');
      assertEquals("$v`", string4);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-20);
      String string5 = StringUtils.join(shortArray0, 's', 24, (int) (short) (-934));
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      StringUtils.reverseDelimited("5miJaE", 'N');
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "5miJaE";
      StringUtils.lastIndexOf((CharSequence) "5miJaE", (CharSequence) null);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("o", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      StringUtils.substringBetween("_;|$S", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      StringUtils.upperCase((String) null);
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("_;|$S", "_;|$S", (-2151));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'l';
      charArray0[2] = 't';
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      StringUtils.trimToEmpty("e");
      StringUtils.unwrap("e", "e");
      StringUtils.replaceIgnoreCase("", "", "");
      StringUtils.countMatches((CharSequence) "", '/');
      StringUtils.splitByWholeSeparatorPreserveAllTokens("ll.", "IN0c.");
      StringUtils.isNumeric("e");
      StringUtils.indexOfIgnoreCase((CharSequence) "e", (CharSequence) "");
      StringUtils.normalizeSpace("");
      StringUtils.wrapIfMissing("", "IN0c.");
      StringUtils.isAllLowerCase("e");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ll.", 90, (-1686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      char[] charArray0 = new char[18];
      String string0 = StringUtils.join(charArray0, '\u0000');
      String string1 = StringUtils.leftPad("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 9);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.FRANCE;
      int int0 = StringUtils.compareIgnoreCase("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("':6w%l[QzrP%;uJtuR> ");
      assertEquals(14, stringArray0.length);
      
      String string0 = StringUtils.chomp("\r\r");
      assertEquals("\r", string0);
      
      int int0 = StringUtils.compareIgnoreCase("\r", "':6w%l[QzrP%;uJtuR> ");
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("HXOeKJ,8H", "HXOeKJ,8H", 51);
      assertEquals("HXOeKJ,8H", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("HXOeKJ,8H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("NYZ.u}Y:}p");
      boolean boolean1 = StringUtils.isAlphaSpace("NYZ.u}Y:}p");
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:", (CharSequence) "!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("\r\r", "!nCL$t1JW0(::");
      assertEquals("!nCL$t1JW0(::\r\r!nCL$t1JW0(::", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.strip("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      StringUtils.getDigits("Failed to delete temp directory ");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.capitalize("d1DKM66oG-d2::[");
      assertEquals("D1DKM66oG-d2::[", string0);
      
      StringUtils.wrap("", "D1DKM66oG-d2::[");
      StringUtils.equalsAny("d1DKM66oG-d2::[", charSequenceArray0);
      StringUtils.isAllEmpty(charSequenceArray0);
      int int0 = StringUtils.indexOfAny((CharSequence) "D1DKM66oG-d2::[", "d1DKM66oG-d2::[");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Failed to delete temp directory ");
      String[] stringArray0 = StringUtils.split("Illegal range. The step cannot be zero.");
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("d1DKM66oG-d2::[");
      assertEquals("D1DKM66OG-D2::[", string1);
      
      StringUtils.indexOf((CharSequence) "D1DKM66oG-d2::[", 3);
      String string2 = StringUtils.rotate("ysD2w8uj{Rr9NC1", 0);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("Illegal range. The step cannot be zero.", "nd*@@");
      assertEquals("Illegal range. The step cannot be zero.", string3);
      
      String string4 = StringUtils.strip("d1DKM66oG-d2::[", "Failed to create custom temp directory");
      assertEquals("1DKM66oG-d2::[", string4);
      
      String string5 = StringUtils.center("d1DKM66oG-d2::[", 3);
      assertEquals("d1DKM66oG-d2::[", string5);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      StringUtils.removeEnd("V*i8d?i3G@=zzHL.Uj(H", "V*i8d?i3G@=zzHL.Uj(H");
      StringUtils.equals((CharSequence) "", (CharSequence) "V*i8d?i3G@=zzHL.Uj(H");
      StringUtils.abbreviate("??*J8Dc,P;:6u&", (int) (byte)16);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-38);
      longArray0[1] = 1579L;
      longArray0[2] = (long) (byte)64;
      longArray0[4] = (long) (byte)64;
      StringUtils.join((byte[]) null, 'm', (int) (byte) (-38), (int) (byte)16);
      StringUtils.indexOf((CharSequence) "??*J8Dc,P;:6u&", (CharSequence) null);
      StringUtils.isNotBlank("V*i8d?i3G@=zzHL.Uj(H");
      StringUtils.upperCase("!5w");
      StringUtils.getLevenshteinDistance((CharSequence) "??*J8Dc,P;:6u&", (CharSequence) "??*J8Dc,P;:6u&");
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      StringUtils.containsOnly((CharSequence) "!5w", charArray0);
      StringUtils.indexOf((CharSequence) "V*i8d?i3G@=zzHL.Uj(H", (CharSequence) "!5w");
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "!5W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "");
      assertEquals(1, int0);
      
      int int1 = StringUtils.ordinalIndexOf("\n", "\r", (-1));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.upperCase("              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "^cE%3j642^\n", (CharSequence) "^cE%3j642^\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rotate("\r", (-1));
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("\n", (String) null, (-1));
      assertNotNull(string1);
      assertEquals("\n", string1);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      StringUtils.wrap("", "");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.containsAny((CharSequence) "\n", (char[]) null);
      StringUtils.upperCase("\n");
      String string0 = "`OGDom\\frKLOY]}z2`";
      StringUtils.compareIgnoreCase("", "`OGDom\frKLOY]}z2`");
      StringUtils.right("", (-1326));
      StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      StringUtils.abbreviateMiddle("blank_blank_blank_2014", "m2pC5", (-576));
      StringUtils.isAllLowerCase("blank_blank_blank_2014");
      StringUtils.rotate("t^,i", (-2985));
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      StringUtils.isNotBlank("");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "5", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      String string0 = StringUtils.strip("*");
      assertEquals("*", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'b';
      charArray0[2] = 'a';
      charArray0[3] = 'D';
      charArray0[4] = '-';
      StringUtils.containsAny((CharSequence) "*", charArray0);
      String string1 = StringUtils.upperCase("P~BXdFRP(NKus?Ec");
      assertEquals("P~BXDFRP(NKUS?EC", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      String string2 = StringUtils.right("\r", 0);
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "*", (CharSequence) "*");
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("blank_blank_blank_2014", "org.junitpioneer.jupiter.RepeatFailedTestExtension", 0);
      assertEquals("blank_blank_blank_2014", string3);
      
      StringUtils.isAllLowerCase("*");
      String string4 = StringUtils.rotate("Threshold must not be negative", 90);
      assertEquals("Threshold must not be negative", string4);
      
      StringUtils.indexOf((CharSequence) "P~BXdFRP(NKus?Ec", (CharSequence) "Threshold must not be negative");
      boolean boolean0 = StringUtils.isNotBlank("");
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "*";
      charSequenceArray0[1] = (CharSequence) "*";
      charSequenceArray0[2] = (CharSequence) "P~BXdFRP(NKus?Ec";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "Threshold must not be negative";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEach("+beq,s7/1", stringArray0, stringArray0);
      assertEquals("+beq,s7/1", string0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.difference("':6w%l[QzrP%;uJtuR> ", "':6w%l[QzrP%;uJtuR> ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#]_P[=tnZCv";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, ',', 1499, 3491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)37;
      String string0 = StringUtils.join(byteArray0, '$');
      assertEquals("-121$12$37", string0);
      
      StringUtils.replaceOnce("-121$12$37", (String) null, "5,@BN{`D@0K!>TZ@D");
      String string1 = StringUtils.replaceChars("5,@BN{`D@0K!>TZ@D", 'a', 'a');
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("F!Q\"5sAL9#'<PmX", "-121$12$37", (byte)37, (byte)37);
      assertEquals("F!Q\"5sAL9#'<PmX-121$12$37", string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isWhitespace("-121$12$37");
      assertFalse(boolean0);
      
      StringUtils.isNumeric("F!Q\"5sAL9#'<PmX-121$12$37");
      StringUtils.chomp((String) null);
      StringUtils.join((short[]) null, 'z');
      String string4 = StringUtils.replaceIgnoreCase("5,@BN{`D@0K!>TZ@D", "Cannot store org.junitpioneer.jupiter.TempDirectory", "nIbDPU");
      assertTrue(string4.equals((Object)string1));
      
      StringUtils.startsWithIgnoreCase("-121$12$37", "5,@BN{`D@0K!>TZ@D");
      StringUtils.removeStartIgnoreCase("u&", (String) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-121);
      doubleArray0[1] = (double) (byte)12;
      doubleArray0[2] = (double) (byte)37;
      doubleArray0[3] = (double) (byte)12;
      doubleArray0[4] = (double) 'a';
      String string5 = StringUtils.join(doubleArray0, '$');
      assertNotNull(string5);
      assertEquals("-121.0$12.0$37.0$12.0$97.0", string5);
      
      String string6 = StringUtils.strip("Locale must not be null");
      assertNotNull(string6);
      assertEquals("Locale must not be null", string6);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.strip("maxWith cann", "maxWith cann");
      char[] charArray0 = new char[4];
      charArray0[1] = '3';
      StringUtils.truncate("", 8, 8);
      Locale locale0 = new Locale("Backup");
      String[] stringArray0 = StringUtils.split("}c@kh{kmqu*^cu");
      String string1 = StringUtils.wrap("", '/');
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(46, int0);
      
      StringUtils.join((Object[]) stringArray0, "maxWith cann", 1114111, 1);
      String string2 = StringUtils.stripEnd("maxWith cann", "...");
      assertEquals("maxWith cann", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " /]", 1);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      boolean boolean1 = StringUtils.containsAny((CharSequence) "maxWith cann", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.overlay("r@Vrd?CVo4g", (String) null, (-995), (-1));
      assertEquals("r@Vrd?CVo4g", string3);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.overlay("pL DA /5&P", "\r", 113, 2301);
      assertEquals("pL DA /5&P\r", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "pL DA /5&P\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)37;
      String string0 = StringUtils.join(byteArray0, '$');
      String string1 = StringUtils.replaceOnce("-121$12$37", (String) null, "5,@BN{`D@0K!>TZ@D");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.replaceChars("5,@BN{`D@0K!>TZ@D", 'a', 'a');
      String string2 = StringUtils.overlay("F!Q\"5sAL9#'<PmX", "-121$12$37", (byte)37, (byte)37);
      assertEquals("F!Q\"5sAL9#'<PmX-121$12$37", string2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      String string3 = StringUtils.stripEnd("-121$12$37", "5,@BN{`D@0K!>TZ@D");
      assertEquals("-121$12$37", string3);
      
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleKeys();
      StringUtils.getFuzzyDistance("-121$12$37", "F!Q\"5sAL9#'<PmX-121$12$37", locale0);
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Strings must not be null", "Strings must not be null");
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.replacePattern("]|A^2)W", "Qzg#*]$<o+|1c", "RP 7,&Gc},)0=mm|");
      assertEquals("]|A^2)W", string4);
      
      String string5 = StringUtils.replaceEach(":6", stringArray0, (String[]) null);
      assertEquals(":6", string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("-121$12$37");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.center("D", 1295);
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "D", (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Failed to delete temp directory ", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int0);
      
      StringUtils.join((byte[]) null, '?', (-1846), 0);
      String string1 = StringUtils.center("^5$Xph@^5$Xph@", (int) (byte)25, 'r');
      assertEquals("rrrrr^5$Xph@^5$Xph@rrrrrr", string1);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      StringUtils.chop("Timeout");
      StringUtils.substringsBetween("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Timeou");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Timeou", (CharSequence) "Timeout", 602);
      StringUtils.isAllEmpty((CharSequence[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      StringUtils.indexOfAny((CharSequence) "Timeou", charArray0);
      StringUtils.countMatches((CharSequence) "Timeou", (CharSequence) "Timeout");
      StringUtils.isAlpha("Timeou");
      String string0 = StringUtils.substringBetween("Pj|r+e(]%?p2YlV", "Timeou");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.capitalize("oJw,1tA<J's..u5L");
      assertEquals("OJw,1tA<J's..u5L", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("OJw,1tA<J's..u5L");
      assertEquals(16, intArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray0 = StringUtils.split("oJw,1tA<J's..u5L", "-A");
      StringUtils.indexOf((CharSequence) "OJw,1tA<J's..u5L", 2);
      String string1 = StringUtils.stripStart("0#1YLnuc;/M", "0#1YLnuc;/M");
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviateMiddle("m9Zm[A=Ld", " ", 5);
      assertEquals("m9 Ld", string3);
      
      StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      String string4 = StringUtils.defaultIfBlank("x%", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals("x%", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.RepeatFailedTestExtension", (CharSequence) "");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = StringUtils.capitalize("vp(>6%RURZiX[g");
      String string1 = StringUtils.replaceIgnoreCase("Vp(>6%RURZiX[g", "Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      String[] stringArray0 = StringUtils.split("Vp(>6%RURZiX[g", "org.junitpioneer.vintage.ExpectedExceptionExtension", 917);
      assertEquals(3, stringArray0.length);
      
      StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) "vp(>6%RURZiX[g", 4);
      String string2 = StringUtils.normalizeSpace("vp(>6%RURZiX[g");
      assertEquals("vp(>6%RURZiX[g", string2);
      
      String string3 = StringUtils.capitalize("Vp(>6%RURZiX[g");
      assertTrue(string3.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = '_';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Vp(>6%RURZiX[g", charArray0);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Vp(>6%RURZiX[g", (CharSequence) "6'N,my", (-1));
      assertEquals((-1), int0);
      
      StringUtils.join((float[]) null, 'x', 85, (-1));
      String string4 = StringUtils.abbreviateMiddle("org.junitpioneer.vintage.ExpectedExceptionExtension", (String) null, (-1));
      assertTrue(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) null, (-592));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.leftPad("", (-1), 'l');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("4{?lIC4#2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.overlay("\n", "", (-1), (-1));
      assertEquals("\n", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("\\u", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      String string1 = StringUtils.center("", 24, "");
      assertNotNull(string1);
      assertEquals("                        ", string1);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = StringUtils.join(byteArray0, ')');
      assertEquals("0)0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String string0 = StringUtils.wrap("5", "5");
      assertEquals("555", string0);
      
      StringUtils.indexOfDifference((CharSequence) "555", (CharSequence) "555");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "5", (CharSequence) "5", (-1792));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("555");
      StringUtils.equals((CharSequence) null, (CharSequence) null);
      String string2 = StringUtils.removeEndIgnoreCase("55", "");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd("55", "55");
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "", (-1));
      assertEquals(1, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      stack0.add("Strings must not be null");
      stack0.add("");
      stack0.add("");
      stack0.listIterator();
      String[] stringArray1 = StringUtils.split("55", "@QWBu}", 216);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.removeIgnoreCase("Ysy", "1)2?H?-,@aikk");
      assertEquals("Ysy", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("^", "YNU/s)_]#2n#Y", (CharSequence[]) null);
      assertEquals("^YNU/s)_]#2n#Y", string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("|n5Wkj=g0}");
      assertEquals(1, stringArray2.length);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 804);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      StringUtils.leftPad("<$M1p(,dedF;v", (-776), "SX1+{X{");
      String string0 = StringUtils.overlay("SX1+{X{", "p]", 967, (-3925));
      assertEquals("p]", string0);
      
      Locale.getISOLanguages();
      String string1 = StringUtils.stripEnd("(oJ8/$\"2K%cAW", "px");
      assertEquals("(oJ8/$\"2K%cAW", string1);
      
      Locale locale0 = Locale.PRC;
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      String string2 = StringUtils.substringBefore("!L@", "?H");
      assertEquals("!L@", string2);
      
      StringUtils.getFuzzyDistance("(oJ8/$\"2K%cAW", "!L@", locale0);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("M#24]YDXJU<Y\rb|LwSrd", "<$M1p(,dedF;v");
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("org.junitpioneer.jupiter.params.DoubleRange", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "(oJ8/$\"2K%cAW");
      assertEquals("org.junitpioneer.jupiter.params.DoubleRange", string3);
      
      String[] stringArray1 = StringUtils.split("px", '');
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.truncate("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 0);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.abbreviateMiddle("", "", (-1));
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.center("Threshold must not be negative", (-1));
      assertEquals("Threshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", (-3698), 2639);
      StringUtils.containsIgnoreCase("Search and Replace array lengths don't match: ", (CharSequence) null);
      StringUtils.isAlpha("Search and Replace array lengths don't match: ");
      StringUtils.isNoneEmpty((CharSequence[]) null);
      StringUtils.appendIfMissingIgnoreCase("^XKjDZ={+e)2ky", "^XKjDZ={+e)2ky", (CharSequence[]) null);
      StringUtils.replace("^XKjDZ={+e)2ky", "^XKjDZ={+e)2ky", "[.WF");
      StringUtils.toRootLowerCase("\norg.apache.commons.lang3.StringUtils");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("8r<i", "^XKjDZ={+e)2ky");
      StringUtils.strip("!nCL$t1JW0(d:a:!nCL$t1JW0(d:a:");
      String string0 = StringUtils.abbreviate((String) null, "6>\"thDC38ELI&3WZr", 4, (-3698));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.rightPad("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      StringUtils.abbreviateMiddle("", "", 0);
      StringUtils.length("");
      String string0 = "VrjPth=`JA";
      StringUtils.overlay("VrjPth=`JA", "%d3'$M/:`", 0, 0);
      StringUtils.indexOf((CharSequence) "%d3'$M/:`", (CharSequence) "VrjPth=`JA", (-675));
      StringUtils.isAlphaSpace("");
      StringUtils.isAlpha("");
      StringUtils.center("%d3'$M/:`", 160);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)29;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '^', (-1), 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      String string0 = StringUtils.upperCase("6");
      assertEquals("6", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("6", "Qw},Yee<Q*('}ok#", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "6", (CharSequence) "6", 27);
      StringUtils.isAllEmpty((CharSequence[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      int int1 = StringUtils.indexOfAny((CharSequence) "Qw},Yee<Q*('}ok#", charArray0);
      assertEquals((-1), int1);
      
      StringUtils.indexOf((CharSequence) " vs ", (-1), 2525);
      StringUtils.stripAccents(" vs ");
      StringUtils.containsAny((CharSequence) " vs ", (CharSequence[]) null);
      String string1 = StringUtils.replaceChars(" ,.m&cVKgy1fW\"z1aW\n", "6", (String) null);
      assertEquals(" ,.m&cVKgy1fW\"z1aW\n", string1);
      
      String string2 = StringUtils.stripAccents("^13j64H^");
      assertEquals("^13j64H^", string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "6", (CharSequence) "6");
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      StringUtils.unwrap("5", 'd');
      String string0 = StringUtils.substringBefore("5", "5");
      assertEquals("", string0);
      
      String string1 = StringUtils.center("5", 29);
      assertEquals("              5              ", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'F';
      String string2 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "              5              ");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "              5              ", "5");
      assertEquals(14, int0);
      
      StringUtils.isAlphanumeric("5");
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ");
      StringUtils.isNoneEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string3 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string3);
      
      String string4 = StringUtils.truncate("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", 29, (int) 'd');
      assertEquals("THS DON'T MATCH: ", string4);
      
      StringUtils.indexOf((CharSequence) "THS DON'T MATCH: ", 14);
      String string5 = StringUtils.replaceChars("(ORi:z%,e=}L.8Q&t^Strings must not be null", ")]dJoGmzUKPk58jbU76", "5");
      assertEquals("(ORi:%,e=}L.Q&t^Strings ust nt e null", string5);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.replaceChars("\r", "\n", " ");
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Search and Replace array lengths don't match: ", 'o');
      assertNotNull(string0);
      assertEquals("n't match: oSearch and Replace array lengths d", string0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.left("", 0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("8", '?', 'C');
      String string3 = StringUtils.uncapitalize("8");
      assertTrue(string3.equals((Object)string2));
      
      StringUtils.indexOf((CharSequence) "", (-2073));
      StringUtils.join((Object[]) null);
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "D1{%8");
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("}Y/GiYpB)t7BFA+", "");
      assertEquals("}Y/GiYpB)t7BFA+", string4);
      
      int[] intArray0 = StringUtils.toCodePoints("8");
      assertArrayEquals(new int[] {56}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      String string0 = StringUtils.swapCase("              5              Search and Replace array lengths don't match: ");
      assertEquals("              5              sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOf((CharSequence) " ", (-1));
      boolean boolean0 = StringUtils.startsWith("", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "5Xa.^TezO]vodzbto>", (CharSequence) "5Xa.^TezO]vodzbto>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      String string0 = StringUtils.replaceChars("5M P=t", "5M P=t", "Locale must not be null");
      assertEquals("Locale", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Locale", (CharSequence) "Locale");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      String string0 = StringUtils.getDigits("Failed to delete temp directory ");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Threshold must not be negative", "", charSequenceArray0);
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.capitalize("d1DKM66oG-d2::[");
      assertEquals("D1DKM66oG-d2::[", string2);
      
      String string3 = StringUtils.wrap("", "D1DKM66oG-d2::[");
      assertTrue(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAny("d1DKM66oG-d2::[", charSequenceArray0);
      String string4 = StringUtils.replaceOnceIgnoreCase("ysD2w8uj{Rr9NC1", "Threshold must not be negative", "d1DKM66oG-d2::[");
      assertEquals("ysD2w8uj{Rr9NC1", string4);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      charSequenceArray1[0] = (CharSequence) "Failed to delete temp directory ";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "ysD2w8uj{Rr9NC1";
      charSequenceArray1[3] = (CharSequence) "D1DKM66oG-d2::[";
      boolean boolean2 = StringUtils.equalsAny("Failed to delete temp directory ", charSequenceArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      String string0 = StringUtils.replaceChars("5M P=1", "5M P=1", "5M P=1");
      assertEquals("5M P=1", string0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.reverseDelimited("\r", '3');
      assertNotNull(string1);
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      String string0 = StringUtils.swapCase("`eA(PToq");
      StringUtils.indexOf((CharSequence) "`Ea(ptOQ", (-771));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "`eA(PToq";
      boolean boolean0 = StringUtils.equalsAny("`eA(PToq", charSequenceArray0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("`Ea(ptOQ", "z5&-<", "");
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.ITALIAN;
      StringUtils.lowerCase((String) null, locale0);
      StringUtils.toRootLowerCase((String) null);
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      charSequenceArray1[0] = (CharSequence) null;
      String string2 = StringUtils.reverseDelimited("Expected exception %s was not thrown.", 'p');
      assertEquals("tion %s was not thrown.pected excepEx", string2);
      assertNotNull(string2);
      
      charSequenceArray1[1] = (CharSequence) "tion %s was not thrown.pected excepEx";
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) null;
      charSequenceArray1[5] = (CharSequence) "`Ea(ptOQ";
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'N';
      intArray0[1] = (-2174);
      String string0 = StringUtils.join(intArray0, '#');
      assertEquals("78#-2174", string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "78#-2174");
      assertNull(string1);
      
      StringUtils.lastIndexOf((CharSequence) null, 50);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "78#-2174";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.lowerCase((String) null, locale0);
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissingIgnoreCase("LjtOrf`+1ctBy9J", "LjtOrf`+1ctBy9J", charSequenceArray0);
      assertEquals("LjtOrf`+1ctBy9J", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "LjtOrf`+1ctBy9J", charSequenceArray0[1], 90);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.remove("78#-2174", '8');
      assertEquals("7#-2174", string3);
  }
}
