/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:04:21 GMT 2025
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailablePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FailablePredicate_ESTest extends FailablePredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.truePredicate();
      FailablePredicate<Object, Throwable> failablePredicate1 = failablePredicate0.or(failablePredicate0);
      assertFalse(failablePredicate1.equals((Object)failablePredicate0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Object, Throwable> failablePredicate1 = failablePredicate0.and(failablePredicate0);
      FailablePredicate<Object, Throwable> failablePredicate2 = failablePredicate1.or(failablePredicate0);
      assertFalse(failablePredicate2.equals((Object)failablePredicate0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.truePredicate();
      // Undeclared exception!
      try { 
        failablePredicate0.or((FailablePredicate<? super Object, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Object, Throwable> failablePredicate1 = failablePredicate0.and(failablePredicate0);
      FailablePredicate<Object, Throwable> failablePredicate2 = failablePredicate0.and(failablePredicate1);
      assertNotSame(failablePredicate1, failablePredicate2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.falsePredicate();
      FailablePredicate<Object, Throwable> failablePredicate1 = failablePredicate0.negate();
      assertFalse(failablePredicate1.equals((Object)failablePredicate0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FailablePredicate<Object, Throwable> failablePredicate0 = FailablePredicate.truePredicate();
      // Undeclared exception!
      try { 
        failablePredicate0.and((FailablePredicate<? super Object, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
