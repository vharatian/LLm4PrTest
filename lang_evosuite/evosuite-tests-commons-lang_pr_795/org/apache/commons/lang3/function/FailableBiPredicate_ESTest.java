/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:56:03 GMT 2025
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.function.FailableBiPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FailableBiPredicate_ESTest extends FailableBiPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate1 = failableBiPredicate0.negate();
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate2 = failableBiPredicate0.or(failableBiPredicate1);
      assertFalse(failableBiPredicate2.equals((Object)failableBiPredicate1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      // Undeclared exception!
      try { 
        failableBiPredicate0.or((FailableBiPredicate<? super Throwable, ? super Throwable, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      // Undeclared exception!
      try { 
        failableBiPredicate0.and((FailableBiPredicate<? super Throwable, ? super Throwable, Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate1 = failableBiPredicate0.and(failableBiPredicate0);
      assertFalse(failableBiPredicate1.equals((Object)failableBiPredicate0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.falsePredicate();
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate1 = failableBiPredicate0.negate();
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate2 = failableBiPredicate0.and(failableBiPredicate1);
      assertFalse(failableBiPredicate2.equals((Object)failableBiPredicate0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FailableBiPredicate<Throwable, Throwable, Throwable> failableBiPredicate0 = FailableBiPredicate.truePredicate();
      assertNotNull(failableBiPredicate0);
  }
}
