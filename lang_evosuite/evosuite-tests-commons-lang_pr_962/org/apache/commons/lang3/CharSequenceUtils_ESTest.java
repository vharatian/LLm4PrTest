/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:26:21 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.lang3.CharSequenceUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSequenceUtils_ESTest extends CharSequenceUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(0);
      stringBuilder0.appendCodePoint(0);
      stringBuilder0.deleteCharAt(0);
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, true, 0, stringBuilder1, 0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, true, 877, charBuffer0, 3118, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = CharSequenceUtils.regionMatches("true", false, 40, "PU", 40, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1107);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(771, true);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder1, charBuffer0, 550);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      Object object0 = new Object();
      stringBuilder0.insert(1, object0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, "PU", 0);
      assertEquals((-1), int0);
      assertEquals(27, charBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("LKi{hI4Z");
      int int0 = CharSequenceUtils.lastIndexOf("LKi{hI4Z", stringBuffer0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder1, charBuffer0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = CharSequenceUtils.lastIndexOf("ObectvaXargs must8not^benull", "", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(1114111);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, 65536, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, 65536, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = CharSequenceUtils.indexOf(stringBuffer0, stringBuilder0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = CharSequenceUtils.indexOf(charBuffer0, stringBuilder0, (-543));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer('x');
      stringBuffer0.appendCodePoint(65536);
      char[] charArray0 = new char[14];
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      stringBuffer1.reverse();
      int int0 = CharSequenceUtils.indexOf(stringBuffer1, 65536, Integer.MIN_VALUE);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65582);
      int int0 = CharSequenceUtils.indexOf(stringBuffer1, 65546, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65608);
      stringBuffer0.append(true);
      int int0 = CharSequenceUtils.indexOf(stringBuffer1, 65615, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = CharSequenceUtils.indexOf(stringBuilder0, 0, 1434);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = CharSequenceUtils.indexOf(stringBuffer0, 65536, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CharSequence charSequence0 = CharSequenceUtils.subSequence(stringBuilder0, 0);
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      stringBuilder0.insert(2, true);
      CharSequence charSequence0 = CharSequenceUtils.subSequence(stringBuilder0, 2);
      assertEquals("true", charSequence0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, stringBuilder0, 305);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      int int0 = CharSequenceUtils.indexOf(stringBuilder0, charBuffer0, 2059);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      stringBuilder0.appendCodePoint(1);
      int int0 = CharSequenceUtils.indexOf(stringBuilder0, 1, (-4540));
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      CharSequenceUtils.toCharArray(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[11];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(charBuffer0, 1496);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequenceUtils.regionMatches((CharSequence) null, true, (-13), (CharSequence) null, (-13), (-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65528);
      // Undeclared exception!
      CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 65528);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      // Undeclared exception!
      CharSequenceUtils.lastIndexOf(charBuffer0, 4842, 65536);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      stringBuilder0.insert(2, true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      stringBuilder0.deleteCharAt(4);
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf(charBuffer0, 1, 4081);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf((CharSequence) null, (-2463), (-2463));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1114111);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer0.append('2');
      // Undeclared exception!
      try { 
        CharSequenceUtils.lastIndexOf(charBuffer1, 52, 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1114084);
      // Undeclared exception!
      CharSequenceUtils.indexOf(charBuffer0, 1114084, (-3267));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, 1740, 1740);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Pu0@4DhbUS");
      stringBuilder0.reverse();
      boolean boolean0 = CharSequenceUtils.regionMatches("Pu0@4DhbUS", true, 1, stringBuilder0, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("/");
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, (Object) null);
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, false, 1, stringBuilder1, 2, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, true);
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder1, false, 1, stringBuilder0, 1, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(":/kf");
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, true, 2, stringBuilder0, 619, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      stringBuilder0.insert(2, true);
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, true, 2, "PU", 1, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, false, 1858, stringBuilder0, 1858, (-1952));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("7!8i@uyxB8D6");
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, true, 76, "7!8i@uyxB8D6", (-3659), 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("/");
      boolean boolean0 = CharSequenceUtils.regionMatches(stringBuilder0, false, (-1571), stringBuilder0, 2, 1354);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = CharSequenceUtils.regionMatches("/", true, 2, "/", 322, 1354);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = CharSequenceUtils.toCharArray("PU");
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = CharSequenceUtils.toCharArray(stringBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("7r0@&5kab3r24Sf~");
      stringBuilder0.insert(4, 335.8753761062688);
      char[] charArray0 = CharSequenceUtils.toCharArray(stringBuilder0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, "7r0@&5kab3r24Sf~", 1114111);
      assertEquals((-1), int0);
      assertEquals(33, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(108);
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, "Cannot store ", 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(65595);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65595);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer1, stringBuffer0, 65595);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      Object object0 = new Object();
      stringBuilder0.insert(1, object0);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, stringBuilder0, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1456);
      int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, (-663));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer0, "", 117);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("/");
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, "/", 322);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = CharSequenceUtils.lastIndexOf((CharSequence) null, stringBuilder0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, stringBuilder0, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = CharSequenceUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-2388));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(65595);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65595);
      stringBuffer0.insert(1, 65595);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer1, 65595, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(65595);
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65595);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuffer1, 65595, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, 1114111, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Obectvarargs must not benull");
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, 32, 32);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PU");
      StringBuilder stringBuilder1 = stringBuilder0.insert(2, true);
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder1, 1, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("7r0@&5kab3r24Sf~");
      int int0 = CharSequenceUtils.lastIndexOf(stringBuilder0, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = CharSequenceUtils.lastIndexOf("/", 3081, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("/");
      int int0 = CharSequenceUtils.indexOf("/", stringBuilder0, 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharSequenceUtils.indexOf((CharSequence) null, (CharSequence) null, (-2463));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(65615);
      int int0 = CharSequenceUtils.indexOf(stringBuffer1, 65615, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = CharSequenceUtils.indexOf(stringBuilder0, 1114137, 1114137);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1456);
      int int0 = CharSequenceUtils.indexOf(charBuffer0, 3835, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = CharSequenceUtils.indexOf("/", 211, (-2260));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = CharSequenceUtils.indexOf(stringBuilder0, 1114111, 731);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CharSequence charSequence0 = CharSequenceUtils.subSequence((CharSequence) null, 3315);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("/");
      // Undeclared exception!
      try { 
        CharSequenceUtils.subSequence(stringBuilder0, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharSequenceUtils charSequenceUtils0 = new CharSequenceUtils();
  }
}
