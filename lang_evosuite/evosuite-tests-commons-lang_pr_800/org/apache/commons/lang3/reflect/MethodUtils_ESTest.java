/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:36:15 GMT 2025
 */

package org.apache.commons.lang3.reflect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Set;
import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.reflect.MethodUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class MethodUtils_ESTest extends MethodUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, false);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "toString", classArray0);
      Object object0 = MethodUtils.invokeMethod((Object) method0, true, "getParameters0", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertNull(object0);
      assertEquals(1, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getParameterCount", classArray0);
      Object object0 = MethodUtils.invokeMethod((Object) method0, true, "toGenericString", (Object[]) classArray0, (Class<?>[]) classArray0);
      assertEquals("public int java.lang.reflect.Method.getParameterCount()", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "getEnclosingConstructor", (Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, true, "registerNatives");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getDeclaringClass", (Object[]) null, (Class<?>[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "toString", (Object[]) null, (Class<?>[]) null);
      assertEquals("class java.lang.reflect.Method", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getSigners", (Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getName", (Class<?>[]) null);
      Object object0 = MethodUtils.invokeMethod((Object) method0, "getName", (Object[]) null);
      assertEquals("getName", object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "getDeclaringClass");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0, false, false);
      Object object0 = MethodUtils.invokeExactMethod((Object) class0, "getGenericSuperclass", (Object[]) methodArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = MethodUtils.invokeExactMethod((Object) "toString", "toString");
      assertEquals("toString", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingMethod(class0, "() on object: ", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Method method0 = MethodUtils.getMatchingMethod(class0, "invoke", classArray0);
      assertEquals(129, method0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertNotNull(method1);
      assertEquals("invoke", method1.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getParameterCount", classArray0);
      method0.setAccessible(true);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
      assertEquals("public int java.lang.reflect.Method.getParameterCount()", method1.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "k", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      try { 
        MethodUtils.invokeStaticMethod(class0, "Null or blank methodName not allowed.", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: Null or blank methodName not allowed.() on class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, "invoke", (Object[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) classUtils_Interfaces0, true, "toString", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "hnvoke", true, "", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeMethod((Object) class0, false, "getDeclaredConstructor", (Object[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, true, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeMethod((Object) "hnvoke", false, "hnvoke", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: hnvoke() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) classUtils_Interfaces0, true, "", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "wait", false, "wait");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, true, "toString");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "format", false, "format");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      try { 
        MethodUtils.invokeMethod((Object) method0, "invoke", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, (String) null, objectArray0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "intern";
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod(objectArray0[0], "intern", objectArray0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, "getDeclaredMethod", objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "wait", "wait");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) classArray0[0], "The annotation class must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "equals", "equals");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: equals() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, (String) null, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "() on object: ", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "toString", objectArray0, (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getAnnotatedExceptionTypes", (Class<?>[]) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = method0.getDeclaredAnnotationsByType(class1);
      try { 
        MethodUtils.invokeExactMethod((Object) class1, "notify", (Object[]) annotationArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "APa%MRPgU^yA#", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      try { 
        MethodUtils.invokeExactMethod((Object) "getParameterCoun'", "getParameterCoun'", (Object[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getParameterCoun'() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactMethod((Object) class0, "notifyAll");
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, "!tgdtmH* ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs((Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.getVarArgs(classArray0, classArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      // Undeclared exception!
      try { 
        MethodUtils.getOverrideHierarchy((Method) null, classUtils_Interfaces0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 5);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(classArray0[1], class0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "", (Class<?>[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null or blank methodName not allowed.
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(classArray0[2], "/'('KZ!+U)49c@nbfT", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAnnotation((Method) null, class0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(classArray0[0], "equals", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class1, false, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      assertTrue(method0.isVarArgs());
      assertNotNull(method0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "equals", classArray0);
      assertNotNull(method0);
      assertEquals("equals", method0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toString", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "getClass", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, ",>8r*l.", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ,>8r*l.() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getAnnotatedReturnType", (Class<?>[]) null);
      Object object0 = MethodUtils.invokeExactMethod((Object) method0, "getAnnotatedReturnType", (Object[]) null, (Class<?>[]) null);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "getGenericParameterTypes", "getGenericParameterTypes", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getGenericParameterTypes() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class1, true, true);
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeMethod((Object) class0, true, ",>8r*l.", (Object[]) methodArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: ,>8r*l.() on object: java.lang.Class
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "wait", (Class<?>[]) null);
      try { 
        MethodUtils.invokeMethod((Object) method0, true, "wait", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getModifiers", classArray0);
      try { 
        MethodUtils.invokeMethod((Object) method0, false, "equals", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: equals() on object: java.lang.reflect.Method
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "equals", true, "equals", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsWithAnnotation(classArray0[0], class0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getAccessibleMethod(class0, "getAnnotatedExceptionTypes", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, true);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toString", (Class<?>[]) null);
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class0, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Method method0 = MethodUtils.getMatchingMethod(class0, "hasRealParameterData", (Class<?>[]) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, false, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getModifiers", classArray0);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = MethodUtils.getAnnotation(method0, class1, true, false);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      List<Method> list0 = MethodUtils.getMethodsListWithAnnotation(class0, class0, true, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 0);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "getModifiers", classArray0);
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.EXCLUDE;
      Set<Method> set0 = MethodUtils.getOverrideHierarchy(method0, classUtils_Interfaces0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Method method0 = MethodUtils.getMatchingMethod(class0, "equals", classArray0);
      assertFalse(method0.isBridge());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) "equals", true, "equals");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such method: equals() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingMethod(class0, "getModifiers", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      classArray0[2] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "invoke", (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      try { 
        MethodUtils.invokeMethod((Object) class0, "getDeclaredConstructor", (Object[]) classArray0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 3);
      classArray0[2] = class0;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "invoke", classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) "invoke", "format");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 9);
      try { 
        MethodUtils.invokeMethod((Object) "intern", "intern", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: intern() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[7] = object0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      classArray0[4] = classArray0[0];
      classArray0[5] = classArray0[4];
      classArray0[7] = classArray0[5];
      Object[] objectArray1 = MethodUtils.getVarArgs(objectArray0, classArray0);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "getDeclaredConstructor";
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) class0, "getDeclaredConstructor", objectArray0, (Class<?>[]) classArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 1);
      Object[] objectArray0 = MethodUtils.getVarArgs(classArray0, classArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, "lastIndexOf", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: lastIndexOf() on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Class<Method> class0 = Method.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, "toString", (Object[]) null, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) "getGenericParameterTypes", "getGenericParameterTypes");
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: getGenericParameterTypes() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, "No such accessible method: ", (Object[]) null);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: No such accessible method: () on class: java.lang.annotation.Annotation
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = MethodUtils.invokeMethod((Object) "intern", true, "intern");
      assertEquals("intern", object0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        MethodUtils.getMethodsListWithAnnotation(class0, (Class<? extends Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The annotation class must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Object object1 = MethodUtils.invokeExactMethod(object0, "toString", objectArray0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      try { 
        MethodUtils.invokeMethod((Object) "class java.lang.reflect.Method", "yb+a", objectArray0);
        fail("Expecting exception: NoSuchMethodException");
      
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: yb+a() on object: java.lang.String
         //
         verifyException("org.apache.commons.lang3.reflect.MethodUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, "toString");
      assertEquals("class java.lang.reflect.Method", object0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeMethod((Object) "intern", true, "intern", objectArray0);
      assertEquals("intern", object0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = MethodUtils.getMethodsWithAnnotation(class0, class0);
      assertEquals(0, methodArray0.length);
  }
}
