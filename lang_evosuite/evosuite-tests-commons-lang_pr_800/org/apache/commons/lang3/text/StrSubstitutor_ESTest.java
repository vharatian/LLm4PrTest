/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:45:44 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import org.apache.commons.lang3.text.StrLookup;
import org.apache.commons.lang3.text.StrMatcher;
import org.apache.commons.lang3.text.StrSubstitutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StrSubstitutor_ESTest extends StrSubstitutor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('E');
      char[] charArray0 = new char[23];
      charArray0[2] = '$';
      charArray0[3] = 'E';
      String string0 = strSubstitutor1.replace(charArray0);
      assertEquals("\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("]7nCxwg/`f{lBRbheA", (String) null).when(strLookup0).toString();
      doReturn((String) null, (String) null).when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", "Variable prefix matcher must not be null.", "]7nCxwg/`f{lBRbheA", "+'2\"aRhI1Y-M P5C=?", "Variable prefix matcher must not be null.").when(strMatcher0).toString();
      doReturn(7, 115, 7, (-3708), 7).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n', strMatcher0);
      char[] charArray0 = new char[9];
      strSubstitutor0.replace(charArray0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "]7nCxwg/`f{lBRbheA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strLookup0).toString();
      doReturn("").when(strLookup0).lookup(anyString());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matCher must not be null.", "", "", "", "").when(strMatcher0).toString();
      doReturn(7, 115, 7, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher1).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      StrSubstitutor strSubstitutor1 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) "LhCZN{f#4BoX&rWVE+");
      assertEquals("", string0);
      
      strSubstitutor0.setValueDelimiter(",|pPpP^k{{O[S");
      strSubstitutor0.replace("Threshold must not be negative");
      assertEquals('w', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      String string0 = strSubstitutor0.replace("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", 9, 32);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals(" of type %s must reference an En", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '', strMatcher0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix("UY+fk+}|hdw87h");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '+');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix("");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "oT*-$l#I+6De(-", "", '>');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariableSuffix('>');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariableSuffix('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "}!Hxd*oCjS.2V", "hGKPfBqy}H");
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix("#");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix("rn=!\"Hc|NW.");
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "oT*-$l#I+6De(-", "", '>');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setVariablePrefix('#');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '+');
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setVariablePrefix('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter(",|pPpP^k{{O[S");
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "C5[4'?pz+5t~", "2$C<Ej ;^l7ryu{tE");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter((String) null);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.setValueDelimiter('I');
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.setValueDelimiter('$');
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[3];
      String string0 = strSubstitutor0.replace(charArray0, 0, 1);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("\u0000", string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, "RQ1u?SI.'y", "RQ1u?SI.'y");
      char[] charArray0 = new char[6];
      String string0 = strSubstitutor0.replace(charArray0, 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("Variable suffix must not be null.");
      strSubstitutor0.replace(stringBuffer0, 9, 9);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "V;w", "V;w", 'V');
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0, 0, 0);
      assertEquals('V', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer("+N3bCiG`c/Pz\"r");
      strSubstitutor0.replace(stringBuffer0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) null, properties0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace((Object) "", properties0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, String>) hashMap0, "", "doesn't match any regular expression.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) stringBuffer0, (Map<String, String>) hashMap0, "DefaultLocale", "DefaultLocale");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) null, (Map<String, String>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = StrSubstitutor.replace((Object) "<", (Map<String, Object>) hashMap0);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "c-KFWl25_r8ZS", "#", 'W', "c-KFWl25_r8ZS");
      strSubstitutor0.replace((Object) "#");
      assertEquals('W', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "c-KFWl25_r8ZS", "", 'V', "c-KFWl25_r8ZS");
      String string0 = strSubstitutor0.replace((Object) "");
      assertNotNull(string0);
      assertEquals('V', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0);
      StringBuffer stringBuffer0 = new StringBuffer("XS8Ma0/9^x");
      String string0 = strSubstitutor0.replace((CharSequence) stringBuffer0, 9, 1);
      assertNotNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "V;w", "V;w", 'V');
      String string0 = strSubstitutor0.replace((CharSequence) "V;w", 0, 0);
      assertEquals('V', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "oT*-$l#I+6De(-", "", '>');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      
      strSubstitutor0.setPreserveEscapes(true);
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "9l", "9l");
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('$', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "org.apache.commons.lang3.text.StrMatcher$CharMatcher", "Minimum abbreviation width with offset is %d", 'a', "org.apache.commons.lang3.text.StrSubstitutor");
      char char0 = strSubstitutor0.getEscapeChar();
      assertEquals('a', char0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(22, 22, 22, 22).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'L');
      StringBuilder stringBuilder0 = new StringBuilder("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, 22, 36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of ave blank key or vlue: { key=\"7s\",v(: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn((-31), (-31)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder(44);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }").when(strLookup0).toString();
      doReturn("Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }", "Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }", "Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }", "Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }", "Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }").when(strMatcher0).toString();
      doReturn(17, 17, 17, 17).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '\"', strMatcher0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Reprt entCies can't have blan%ke or`ve: { keyi\"7s\",v(%uW=\"%\" }: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn((-31)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7', strMatcher0);
      strSubstitutor0.setVariableSuffix('5');
      StringBuilder stringBuilder0 = new StringBuilder('7');
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0F);
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer").when(strLookup0).toString();
      doReturn("org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn(7, 7, 7, 7).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '6', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lng3.tex'.StrBuilder$StrBuilderTokenizer");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0, 7, (int) '$');
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of che.commons.lng3.tex'.StrBuilder$Str: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(strLookup0).toString();
      doReturn("org.junitpioneer.jupiter.params.FloatRange").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", "nW/>BW,", (String) null, "www").when(strMatcher0).toString();
      doReturn(7, 115, (-4129), 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher1).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("Threshold must not be negative");
      strSubstitutor0.replaceIn(stringBuffer1);
      Object object0 = new Object();
      Properties properties0 = new Properties();
      String string0 = StrSubstitutor.replace(object0, properties0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(34, 34, 34, 34).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'E', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("@DefaultLocale can only be used with language tag if language, country, and variant are not set", (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7');
      char[] charArray0 = new char[3];
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", "Variable prefix matcher must not be null.", "]7nCxwg/`f{lBRbheA").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n', strMatcher0);
      char[] charArray0 = new char[12];
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n', strMatcher0);
      char[] charArray0 = new char[9];
      strSubstitutor0.setVariableSuffix('\u0000');
      strSubstitutor0.replace(charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer").when(strLookup0).toString();
      doReturn("org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn(8, 8, 8, 8).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'A', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrBuildec$StrBuilderTokenizer");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 8, 13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of he.commons.la: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("LG*G~`DHi5j;L;").when(strMatcher0).toString();
      doReturn((-8862402)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("LG*G~`DHi5j;L;", "org.apache.commons.lang3.text.StrTokenizer").when(strMatcher1).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher1).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher1, 'w', strMatcher1);
      StringBuffer stringBuffer0 = new StringBuffer("B");
      // Undeclared exception!
      strSubstitutor0.replace(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn((-3), (-3)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, ':', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }").when(strMatcher0).toString();
      doReturn(7, 7, 7, 7).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn((-5), (-5)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'W', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", 8, 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn((-5)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'W', strMatcher0);
      strSubstitutor0.setVariableSuffix(')');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", 8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("'Qi0]h'Ygn'", "'Qi0]h'Ygn'", "'Qi0]h'Ygn'").when(strMatcher0).toString();
      doReturn((-897), (-897)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'J', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("'Qi0]h'Ygn'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(strLookup0).toString();
      doReturn("", "cNL8`j").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matCher must not be null.", "cNL8`j", "cNL8`j", "", "").when(strMatcher0).toString();
      doReturn(7, 115, 7, (-3077)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("$11$", "F tB%]JMET?s", (String) null).when(strMatcher1).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      strSubstitutor0.replace((CharSequence) "LhCZN{f#4BoX&rWVE+");
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Threshold must not be negative");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(34, 34, 34, 34).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'I', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      Object object1 = properties0.put(object0, object0);
      // Undeclared exception!
      try { 
        StrSubstitutor.replace(object1, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, Object>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("cR.tommns.lng3uex'aQr", "cR.tommns.lng3uex'aQr", "cR.tommns.lng3uex'aQr").when(strMatcher0).toString();
      doReturn((-15), (-15)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "cR.tommns.lng3uex'aQr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(13, 13, 13, 13).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '|', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "Report entries can't have blank xey or vlue: { k?y=\"7s\",v(lue=\"%s\" }", 13, 36);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of s can't have blank xey or vlue: { k?: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '%', strMatcher0);
      strSubstitutor0.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace((CharSequence) "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Reprt entCies can't have blan%ke or`vle: { keyi\"7s\",v(%uW=\"%\" }", "Reprt entCies can't have blan%ke or`vle: { keyi\"7s\",v(%uW=\"%\" }").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      strSubstitutor0.setVariablePrefix('\'');
      strSubstitutor0.replace((CharSequence) "Reprt entCies can't have blan%ke or`vle: { keyi\"7s\",v(%uW=\"%\" }");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("'Qi0]h'Ygn'", "'Qi0]h'Ygn'").when(strMatcher0).toString();
      doReturn((-26)).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, ':', strMatcher0);
      strSubstitutor0.setVariableSuffix(':');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "'Qi0]h'Ygn'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, 'h', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (String) null, (String) null, '#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, '3', (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0, (String) null, (String) null, '^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "w^slT0.Mu=", "", '*');
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix("");
      assertEquals('*', strSubstitutor1.getEscapeChar());
      assertFalse(strSubstitutor1.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("AF1^X)h4-Ozc").when(strLookup0).toString();
      doReturn("AF1^X)h4-Ozc").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", "Jo[(\"9#\"}q[3{3zE", (String) null, (String) null).when(strMatcher0).toString();
      doReturn(7, 115, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher1).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      String string0 = strSubstitutor0.replace((CharSequence) "LhCZN{f#4BoX&rWVE+");
      assertEquals("AF1^X)h4-Ozc", string0);
      assertNotNull(string0);
      assertEquals('w', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer").when(strMatcher0).toString();
      doReturn(0, 0, 0, 0, 0).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '7', strMatcher0);
      strSubstitutor0.replace((CharSequence) "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "85PBF", "85PBF", ' ', "org.junitpioneer.jupiter.IssueExtension");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0, 0, 0);
      assertEquals(' ', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        strSubstitutor0.replaceIn(stringBuilder0, (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(34, 34, 34, 34).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'I', strMatcher0);
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((Object) "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace((CharSequence) "", (-5), (-5));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '5', strMatcher0);
      char char0 = strSubstitutor0.getEscapeChar();
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '_', strMatcher0);
      strSubstitutor0.setEscapeChar('N');
      assertEquals('N', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = StrSubstitutor.replace((Object) "", (Map<String, String>) hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrLookup<String> strLookup0 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "w^slT0.Mu=", "", '*');
      StrLookup<String> strLookup1 = (StrLookup<String>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      strSubstitutor0.setVariableResolver(strLookup1);
      assertEquals('*', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0);
      String string0 = strSubstitutor0.replace((Object) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertNull(string0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.isEnableSubstitutionInVariables();
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariableSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, (StrMatcher) null, '4', strMatcher0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable suffix matcher must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.setVariablePrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrSubstitutor strSubstitutor0 = null;
      try {
        strSubstitutor0 = new StrSubstitutor(strLookup0, (StrMatcher) null, (StrMatcher) null, '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix matcher must not be null.
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(13, 13, 13, 13).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, '%');
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", 13, 41);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Infinite loop in property interpolation of s can't have blank key or vlue: { key=\"7s: 
         //
         verifyException("org.apache.commons.lang3.text.StrSubstitutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariableSuffix('$');
      strSubstitutor0.setVariablePrefix('%');
      char[] charArray0 = new char[6];
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[5] = '$';
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals("\u0000\u0000%%\u0000$", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('$');
      StrSubstitutor strSubstitutor2 = strSubstitutor0.setVariablePrefix('$');
      strSubstitutor1.setValueDelimiter((String) null);
      char[] charArray0 = new char[5];
      charArray0[2] = '$';
      charArray0[4] = '$';
      String string0 = strSubstitutor2.replace(charArray0);
      assertEquals('$', strSubstitutor2.getEscapeChar());
      assertEquals("\u0000\u0000$\u0000$", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix('Q');
      StrSubstitutor strSubstitutor2 = strSubstitutor0.setVariablePrefix('$');
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[2] = 'Q';
      strSubstitutor2.replace(charArray0);
      assertTrue(strSubstitutor2.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("JF)", "JF)").when(strMatcher0).toString();
      doReturn(7).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher0);
      char[] charArray0 = new char[9];
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefix('w');
      strSubstitutor1.setEnableSubstitutionInVariables(true);
      strSubstitutor0.replace(charArray0);
      assertTrue(strSubstitutor0.isEnableSubstitutionInVariables());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariablePrefix('y');
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'y';
      strSubstitutor0.setPreserveEscapes(true);
      strSubstitutor0.replace(charArray0);
      assertTrue(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("]7nCxwg/`f{lBRbheA", "]7nCxwg/`f{lBRbheA").when(strLookup0).toString();
      doReturn((String) null, "k6+)4J&>2W").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matcher must not be null.", "Variable prefix matcher must not be null.", "]7nCxwg/`f{lBRbheA", "+'2\"aRhI1Y-M P5C=?", "Variable prefix matcher must not be null.").when(strMatcher0).toString();
      doReturn(7, 115, 7, 2700, 36).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'n', strMatcher0);
      char[] charArray0 = new char[9];
      strSubstitutor0.replace(charArray0);
      StringBuilder stringBuilder0 = new StringBuilder("Variable prefix matcher must not be null.");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuilder0);
      assertEquals("k6+)4J&>2W", stringBuilder0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null, (int) '$', (int) '$');
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, (int) '$', (-2112278996));
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);
      assertFalse(boolean0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0);
      assertFalse(boolean0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((CharSequence) null, 63, 63);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((CharSequence) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((StringBuffer) null, 627, 627);
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(stringBuffer0, 17, (-60));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((StringBuffer) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = strSubstitutor0.replace(stringBuffer0);
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      String string0 = strSubstitutor0.replace((char[]) null, (int) '$', (int) '$');
      assertNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strSubstitutor0.replace(charArray0, 810, 810);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 810
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((char[]) null);
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      char[] charArray0 = new char[0];
      String string0 = strSubstitutor0.replace(charArray0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertNotNull(string0);
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace("", 0, 0);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).toString();
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }").when(strMatcher0).toString();
      doReturn(34, 34, 34, 34, 2809).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'I', strMatcher0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }");
      strSubstitutor0.replace("u=");
      boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 34, 34);
      assertFalse(boolean0);
      
      String string0 = strSubstitutor0.replace("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", 24, 40);
      assertEquals("Report entries can't have blank key or vlue: { key=\"7s\",v(lue=\"%s\" }", string0);
      assertEquals('I', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null, (int) '$', (int) '$');
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      // Undeclared exception!
      try { 
        strSubstitutor0.replace("", (int) '$', (int) '$');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrLookup<Object> strLookup0 = (StrLookup<Object>) mock(StrLookup.class, new ViolatedAssumptionAnswer());
      doReturn("").when(strLookup0).toString();
      doReturn("").when(strLookup0).lookup(anyString());
      StrMatcher strMatcher0 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn("Variable prefix matCher must not be null.", "", "", "").when(strMatcher0).toString();
      doReturn(7, 115).when(strMatcher0).isMatch(any(char[].class) , anyInt() , anyInt() , anyInt());
      StrMatcher strMatcher1 = mock(StrMatcher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(strMatcher1).toString();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, strMatcher0, strMatcher0, 'w', strMatcher1);
      String string0 = strSubstitutor0.replace("Threshold must not be negative");
      assertEquals('w', strSubstitutor0.getEscapeChar());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.replace((String) null);
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("C5[4'?pz+5t~", object0);
      String string0 = StrSubstitutor.replace((Object) "C5[4'?pz+5t~", properties0);
      assertEquals("C5[4'?pz+5t~", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrSubstitutor.replace((Object) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      boolean boolean0 = strSubstitutor0.isPreserveEscapes();
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor.replace((Object) strSubstitutor0, (Map<String, String>) hashMap0, "Th$eshol[ must not be negative", "Th$eshol[ must not be negative");
      assertFalse(strSubstitutor0.isPreserveEscapes());
      assertEquals('$', strSubstitutor0.getEscapeChar());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StrSubstitutor.replaceSystemProperties("${");
      assertNotNull(string0);
      assertEquals("${", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      strSubstitutor0.setVariableSuffix('<');
      String string0 = strSubstitutor0.replace((CharSequence) "@(vs${Q6H0>\"4it<+l");
      assertEquals('$', strSubstitutor0.getEscapeChar());
      assertEquals("@(vs${Q6H0>\"4it<+l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrSubstitutor strSubstitutor0 = new StrSubstitutor();
      StrSubstitutor strSubstitutor1 = strSubstitutor0.setValueDelimiter('$');
      strSubstitutor0.setVariableSuffix('L');
      StrSubstitutor strSubstitutor2 = strSubstitutor1.setVariablePrefix('E');
      char[] charArray0 = new char[23];
      charArray0[4] = 'E';
      charArray0[6] = '$';
      charArray0[7] = 'L';
      String string0 = strSubstitutor2.replace(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals('$', strSubstitutor2.getEscapeChar());
      assertNotNull(string0);
      assertFalse(strSubstitutor2.isPreserveEscapes());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "?", "?", 'M', "?");
      assertEquals('M', strSubstitutor0.getEscapeChar());
      assertFalse(strSubstitutor0.isPreserveEscapes());
  }
}
