/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:23:31 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 416.76498F;
      floatArray0[1] = (-3227.026F);
      floatArray0[2] = 1495.9F;
      floatArray0[3] = 992.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {416.76498F, (-3227.026F), 1495.9F, 992.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {416.76498F, (-3227.026F), 1495.9F, 992.0F, 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, (float[]) null);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {416.76498F, (-3227.026F), 1495.9F, 992.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {416.76498F, (-3227.026F), 1495.9F, 992.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {416.76498F, (-3227.026F), 1495.9F, 992.0F, 0.0F}, floatArray2, 0.01F);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-938L));
      assertNotNull(long0);
      assertEquals((-938L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(2, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-938L), (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('i');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('h');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('h', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('i', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('i');
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('i', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('m');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('m', (char)character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0, (int) (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      short[] shortArray0 = new short[7];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2145), 6);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short) (-2145);
      doubleArray0[2] = (double) (short) (-2145);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (-1735.3779);
      doubleArray0[5] = (double) (short) (-2145);
      double[] doubleArray1 = ArrayUtils.insert(6, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-2145.0), (-2145.0), 6.0, (-1735.3779), (-2145.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-2145);
      intArray0[3] = (int) (short) (-2145);
      intArray0[4] = (int) (short) (-2145);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 3228;
      intArray0[8] = 6;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3228, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.valueOf((-328));
      assertNotNull(integer0);
      assertEquals((-328), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      long[] longArray0 = new long[9];
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 934L;
      floatArray0[1] = (float) 934L;
      floatArray0[2] = 2796.0F;
      floatArray0[3] = (float) 934L;
      floatArray0[4] = 100.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {934.0F, 934.0F, 2796.0F, 934.0F, 100.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 97;
      intArray0[1] = 3687;
      intArray0[2] = 3687;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3687);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {97, 3687, 3687}, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short) (-2088);
      shortArray0[2] = (short)380;
      shortArray0[3] = (short)1035;
      shortArray0[4] = (short)552;
      shortArray0[2] = (short) (-15115);
      shortArray0[6] = (short)48;
      shortArray0[7] = (short) (-284);
      shortArray0[8] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)1, 4, 1);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1072, (short)552, (short) (-15115), (short)1035, (short) (-2088), (short)0, (short)48, (short) (-284), (short)1}, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1836L);
      longArray0[2] = 2274L;
      longArray0[3] = (-815L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1836L), 2274L, (-815L)}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1836L);
      doubleArray0[2] = (double) 2274L;
      doubleArray0[3] = (double) (-815L);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1327.65));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1836.0), 2274.0, (-815.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1836.0), 2274.0, (-815.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2274L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) (-815L);
      doubleArray2[3] = (double) 2274L;
      doubleArray2[4] = (-1327.65);
      doubleArray2[5] = (-1327.65);
      doubleArray2[6] = (-1327.65);
      doubleArray2[7] = (double) 2274L;
      doubleArray2[8] = (-1327.65);
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, (-1327.65));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(10, doubleArray3.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1327.65), 2274.0, 0.0, (-815.0), 2274.0, (-1327.65), (-1327.65), (-1327.65), 2274.0, (-1327.65)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {2274.0, 0.0, (-815.0), 2274.0, (-1327.65), (-1327.65), (-1327.65), 2274.0, (-1327.65)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)71;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)66, (byte)5, (byte)71}, byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)5, (byte)71}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1368));
      assertNotNull(integer0);
      assertEquals((-1368), (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt(6);
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6, mutableInt0.intValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals(6L, mutableInt0.longValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6, mutableInt0.intValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = new Integer[2];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(integerArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertEquals(1, integerArray2.length);
      assertEquals(1, intArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray1.equals((Object)integerArray2));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = new boolean[8];
      MockRandom mockRandom0 = new MockRandom(1318L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      integerArray0[2] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 116.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1352.746F);
      floatArray0[5] = 1336.09F;
      floatArray0[6] = (-708.9F);
      floatArray0[7] = 1.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {116.0F, 0.0F, (-1.0F), (-1.0F), (-1352.746F), 1336.09F, (-708.9F), 1.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short)79;
      Short short1 = new Short((short)79);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)79, (short)short1);
      
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)79}, shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {116.0F, 0.0F, (-1.0F), (-1.0F), (-1352.746F), 1336.09F, (-708.9F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, 0.0F, (-1.0F), (-1.0F), (-1352.746F), 1336.09F, (-708.9F), 1.0F, 1.0F}, floatArray2, 0.01F);
      
      float[] floatArray3 = ArrayUtils.addAll(floatArray2, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(18, floatArray3.length);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {116.0F, 0.0F, (-1.0F), (-1.0F), (-1352.746F), 1336.09F, (-708.9F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, 0.0F, (-1.0F), (-1.0F), (-1352.746F), 1336.09F, (-708.9F), 1.0F, 1.0F}, floatArray2, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)2, (byte)61, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Integer integer0 = new Integer(76);
      assertNotNull(integer0);
      assertEquals(76, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Integer integer1 = new Integer(53);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(53, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      Integer integer2 = Integer.getInteger("~d>$IH!D :|~;,Gs~)", 0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer2);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Integer integer3 = new Integer(76);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(76, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer3, integer0);
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Integer integer4 = new Integer(579);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(579, (int)integer4);
      
      Integer integer5 = new Integer(90);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(90, (int)integer5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry4);
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry8;
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry8);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry8);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry8);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry8));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(abstractMap_SimpleImmutableEntryArray0);
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray0.equals((Object)abstractMap_SimpleImmutableEntryArray1));
      assertNotNull(map0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 76;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 76.0, 3530, 2521.873990336894);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {76.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-1219L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3277.1005;
      doubleArray0[2] = 3277.1005;
      doubleArray0[3] = 3277.1005;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3277.1005, 0.0, 3277.1005, 3277.1005}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 100.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3277.1005, 0.0, 3277.1005, 3277.1005}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (-6792);
      shortArray0[3] = (short) (-6792);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((double) (short) (-6792), (-4994.0));
      assertNotNull(doubleStream0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-6792);
      intArray0[1] = 3687;
      intArray0[2] = (int) (short) (-6792);
      intArray0[3] = (int) (short) (-6792);
      intArray0[4] = (int) (short) (-6792);
      intArray0[5] = (int) (short) (-6792);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short) (-6792));
      assertEquals("{0, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-6792), 3687, (-6792), (-6792), (-6792), (-6792)}, intArray0);
      
      ArrayUtils.swap(shortArray0, (-6792), 6, (int) (short) (-6792));
      assertEquals(14, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = '>';
      charArray0[2] = '(';
      charArray0[3] = ')';
      charArray0[4] = 'F';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, intArray1.length);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {'x', '>', '(', ')', 'F', 'B', 'B'}, charArray1);
      assertArrayEquals(new char[] {'x', '>', '(', ')', 'F', 'B', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = 'x';
      charArray0[2] = '*';
      charArray0[3] = ';';
      charArray0[4] = '3';
      charArray0[5] = 'R';
      charArray0[6] = '2';
      ArrayUtils.shift(charArray0, (-1054), 3810, 1376);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {';', '3', 'R', '2', '^', 'x', '*'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = ')';
      charArray0[2] = '8';
      charArray0[3] = ':';
      charArray0[4] = '^';
      charArray0[5] = '2';
      charArray0[6] = ']';
      charArray0[7] = 'W';
      ArrayUtils.shift(charArray0, 2, (int) (short)65, (-76));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'g', ')', ']', 'W', '8', ':', '^', '2'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'g', ')', ']', 'W', '8', ':', '^', '2'}, charArray0);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)65);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 2;
      floatArray2[1] = (float) '2';
      floatArray2[2] = (float) 'g';
      floatArray2[3] = (float) (-76);
      floatArray2[4] = (float) '^';
      floatArray2[5] = (float) '^';
      floatArray2[6] = (float) '8';
      ArrayUtils.shift(floatArray2, (-76), (-102), 2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {2.0F, 50.0F, 103.0F, (-76.0F), 94.0F, 94.0F, 56.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer1;
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(978.99534479493);
      assertNotNull(double0);
      assertEquals(978.99534479493, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(316.07343425245);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(316.07343425245, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {978.99534479493, 978.99534479493, 316.07343425245}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, doubleArray0[2]);
      assertEquals(3, doubleArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (-1);
      longArray0[2] = (-31L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 79;
      longArray0[5] = (long) (-1);
      longArray0[8] = (long) '4';
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)98);
      assertNotNull(byte0);
      assertEquals((byte)98, (byte)byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.valueOf("|j'm:%KgzG:,b=;*QgL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|j'm:%KgzG:,b=;*QgL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      char[] charArray0 = new char[7];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.contains(charArray0, '~');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      Float[] floatArray1 = new Float[1];
      ArrayUtils.swap((Object[]) floatArray1, 1, 1);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 2144314398);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)35);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)35, (int) (byte)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte)35);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-878);
      intArray0[4] = (int) '|';
      intArray0[5] = 0;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.insert(0, arrayUtils0.EMPTY_INT_ARRAY, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, (-878), 124, 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-878), 124, 0, (-1)}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1313.3283));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, objectArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 3232;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-2926);
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      int int0 = ArrayUtils.indexOf(intArray0, 2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 3232, 2, 2, (-2926), 2, 2, 2}, intArray0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = '_';
      charArray0[2] = '/';
      charArray0[3] = 'f';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '/');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', ' ', '_', '/', 'f'}, charArray1);
      assertArrayEquals(new char[] {' ', '_', '/', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (-1155L);
      longArray0[2] = (-101L);
      longArray0[3] = (-1336L);
      longArray0[4] = 1L;
      longArray0[5] = (-2549L);
      longArray0[6] = (-1L);
      longArray0[7] = 7L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, (-1155L), (-101L), (-1336L), 1L, (-2549L), (-1L), 7L}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-1155L);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-1155.0F), 1.0F, (-1155.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1155.0F)}, floatArray0, 0.01F);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, (-1155L), (-101L), (-1336L), 1L, (-2549L), (-1L), 7L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, (-2146350406), 42, (int) (byte) (-46));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '3';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[1] = 'x';
      charArray1[2] = '@';
      charArray1[3] = '3';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x', '@', '@', '@', '3'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'x', '@', '3'}, charArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'x', '@', '@', '@', '3'}, charArray0);
      assertFalse(boolean1);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(480.139814243787);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(480.1398F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (byte) (-46));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-46.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[3]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-46.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(1.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(3331.6475F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals(3331.6475F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(2457.528879);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals(2457.5288F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 7.0, (double) doubleArray1[0]);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 0, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-39);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)93);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)98, (byte)125, (byte)93, (byte) (-39)}, byteArray0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)125;
      doubleArray0[1] = (double) (byte)93;
      doubleArray0[2] = (double) (byte) (-39);
      doubleArray0[3] = (double) (byte)98;
      doubleArray0[4] = (double) (byte) (-39);
      doubleArray0[5] = (double) (byte) (-39);
      doubleArray0[6] = (double) (byte)93;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-39.0), (int) (byte) (-39));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {125.0, 93.0, (-39.0), 98.0, (-39.0), (-39.0), 93.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2724);
      intArray0[1] = 1067;
      intArray0[2] = (-14);
      intArray0[3] = (-2724);
      intArray0[4] = (-2724);
      intArray0[5] = (-14);
      ArrayUtils.shift(intArray0, (-14), 1067, 1067);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1067, (-14), (-2724), (-2724), (-14), (-2724)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2767), (int) integerArray0[1]);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-130L);
      longArray0[1] = (-130L);
      longArray0[2] = (-130L);
      longArray0[3] = (-439L);
      longArray0[4] = (-130L);
      longArray0[5] = (-130L);
      longArray0[6] = (-130L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-130L), (-130L), (-130L), (-439L), (-130L), (-130L), (-130L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short) (-1)}, shortArray0);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)6, (short) (-1)}, shortArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)6;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (-594);
      intArray0[5] = (int) (short)6;
      intArray0[6] = (int) (short)6;
      intArray0[7] = (int) (short) (-1);
      intArray0[8] = (int) (short) (-1);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-594);
      intArray1[1] = (int) (short) (-1);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(7, intArray2.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-594), (-1)}, intArray1);
      assertArrayEquals(new int[] {6, (-1), (-1), 6, 6, (-1), (-1)}, intArray2);
      assertArrayEquals(new int[] {(-1), 6, (-1), (-1), (-594), 6, 6, (-1), (-1)}, intArray0);
      
      int[] intArray3 = ArrayUtils.addFirst(intArray1, 85);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray3.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {(-594), (-1)}, intArray1);
      assertArrayEquals(new int[] {85, (-594), (-1)}, intArray3);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 1, 15, 1224);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-340);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1224;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-340)}, intArray0);
      assertArrayEquals(new int[] {1224}, intArray1);
      assertArrayEquals(new int[] {(-340)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      MutableInt mutableInt0 = new MutableInt(1155);
      assertEquals(1155, (int)mutableInt0.toInteger());
      assertEquals(1155, (int)mutableInt0.getValue());
      assertEquals(1155.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1155, mutableInt0.intValue());
      assertEquals(1155L, mutableInt0.longValue());
      assertEquals((short)1155, mutableInt0.shortValue());
      assertEquals("1155", mutableInt0.toString());
      assertEquals((byte) (-125), mutableInt0.byteValue());
      assertEquals(1155.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(1155, (int)mutableInt0.toInteger());
      assertEquals(1155, (int)mutableInt0.getValue());
      assertEquals(1155.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1155, mutableInt0.intValue());
      assertEquals(1155L, mutableInt0.longValue());
      assertEquals((short)1155, mutableInt0.shortValue());
      assertEquals("1155", mutableInt0.toString());
      assertEquals((byte) (-125), mutableInt0.byteValue());
      assertEquals(1155.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      assertEquals(1155, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MIN_VALUE, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(90);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(90, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2237);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2237, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals(1155, (int)mutableInt0.toInteger());
      assertEquals(1155, (int)mutableInt0.getValue());
      assertEquals(1155.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1155, mutableInt0.intValue());
      assertEquals(1155L, mutableInt0.longValue());
      assertEquals((short)1155, mutableInt0.shortValue());
      assertEquals("1155", mutableInt0.toString());
      assertEquals((byte) (-125), mutableInt0.byteValue());
      assertEquals(1155.0F, mutableInt0.floatValue(), 0.01F);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1155, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      assertEquals(9, integerArray0.length);
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(Integer.MIN_VALUE, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.getInteger("E-0%OS+7L5g*5nt");
      assertNull(integer7);
      
      integerArray0[7] = null;
      Integer integer8 = mutableInt0.getValue();
      assertEquals(1155, (int)mutableInt0.toInteger());
      assertEquals(1155, (int)mutableInt0.getValue());
      assertEquals(1155.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1155, mutableInt0.intValue());
      assertEquals(1155L, mutableInt0.longValue());
      assertEquals((short)1155, mutableInt0.shortValue());
      assertEquals("1155", mutableInt0.toString());
      assertEquals((byte) (-125), mutableInt0.byteValue());
      assertEquals(1155.0F, mutableInt0.floatValue(), 0.01F);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      assertEquals(1155, (int)integer8);
      
      integerArray0[8] = integer8;
      int[] intArray0 = new int[0];
      Integer[] integerArray1 = ArrayUtils.removeAll(integerArray0, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) (int)integerArray0[8];
      doubleArray0[2] = (double) 1155;
      doubleArray0[3] = (double) (int)integerArray0[3];
      doubleArray0[4] = 858.593441;
      doubleArray0[5] = (double) Integer.MIN_VALUE;
      doubleArray0[6] = (double) (int)integerArray0[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2237.0, 1155.0, 1155.0, 2237.0, 858.593441, (-2.147483648E9), (-2.147483648E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-67);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-67), 2794);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)95}, byteArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-67);
      intArray0[1] = 2794;
      intArray0[2] = (int) '\u0000';
      intArray0[3] = (int) (byte)95;
      intArray0[4] = 17;
      intArray0[5] = (int) '\u0000';
      intArray0[6] = (int) (byte)95;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte) (-67), (-2126634291));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-67), 2794, 0, 95, 17, 0, 95}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 95);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 95, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {','}, charArray0);
      assertArrayEquals(new char[] {','}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)731, (-209));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'I';
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = ' ';
      Character character1 = Character.valueOf(' ');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals(' ', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertFalse(char0 == char1);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char1));
      assertNotNull(character2);
      assertEquals('I', (char)character2);
      
      characterArray0[2] = (Character) char1;
      Character character3 = new Character('U');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('U', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('j');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('j', (char)character4);
      
      characterArray0[3] = character4;
      char char2 = '=';
      Character character5 = Character.valueOf('=');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('=', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('=');
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)char2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertNotNull(character6);
      assertEquals('=', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char2);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char1));
      assertTrue(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      assertEquals('=', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)731;
      shortArray0[1] = (short)731;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)731, (short)731}, shortArray0);
      assertArrayEquals(new short[] {(short)731, (short)731}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 84);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1492);
      shortArray0[1] = (short) (-1492);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1492), (short) (-1492)}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-1492);
      floatArray0[1] = (float) (short) (-1492);
      floatArray0[2] = (float) (short) (-1492);
      floatArray0[3] = (float) (short) (-1492);
      floatArray0[4] = (float) (short) (-1492);
      floatArray0[5] = (-267.336F);
      floatArray0[6] = (float) (short) (-1492);
      floatArray0[7] = (float) (short) (-1492);
      floatArray0[8] = (float) (short) (-1492);
      ArrayUtils.swap(floatArray0, (-2596), 0, (-2596));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1492.0F), (-1492.0F), (-1492.0F), (-1492.0F), (-1492.0F), (-267.336F), (-1492.0F), (-1492.0F), (-1492.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-1492), 0, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1492), (short) (-1492)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MIN_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MIN_VALUE, (int)integer1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = Integer.MIN_VALUE;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 105.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {105.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 105.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 105.0F;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 5.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {105.0, 0.0, 105.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2907;
      shortArray0[1] = (short)714;
      shortArray0[2] = (short)395;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2907);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2907, (short)714, (short)395}, shortArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1972.0));
      assertNotNull(double0);
      assertEquals((-1972.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1972.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1972.0), (-1972.0)}, doubleArray1, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "V*1QzdmvGkt#dJD";
      stringArray0[2] = "";
      stringArray0[3] = ", Length: ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-3175));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-3175);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3175.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-3175);
      doubleArray0[1] = (double) (-3175.0F);
      doubleArray0[2] = (double) (-3175.0F);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-1188.20307);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-3175.0F);
      doubleArray0[8] = (double) (short) (-3175);
      ArrayUtils.swap(doubleArray0, (-1), (-1), (-1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3175.0), (-3175.0), (-3175.0), (-1.0), (-1188.20307), (-1.0), (-1.0), (-3175.0), (-3175.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(12, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1072);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = new Integer((int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1195);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1195;
      shortArray2[1] = (short)0;
      shortArray2[2] = (short)1195;
      shortArray2[3] = (short)0;
      shortArray2[4] = (short)0;
      shortArray2[5] = (short)0;
      shortArray2[6] = (short)1195;
      shortArray2[7] = (short)0;
      shortArray2[8] = (short)1195;
      boolean boolean0 = ArrayUtils.isSorted(shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1195, (short)0, (short)1195, (short)0, (short)0, (short)0, (short)1195, (short)0, (short)1195}, shortArray2);
      assertFalse(boolean0);
      
      short[] shortArray3 = ArrayUtils.addFirst(shortArray1, (short)0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray3.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)1195;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (int)integerArray0[2];
      floatArray0[8] = (float) (short)0;
      ArrayUtils.shift(floatArray0, (int) (short)0, 2146726158, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1195.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 563);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(9, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray3);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float float0 = new Float((float) (short) (-2));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)10;
      Float float0 = new Float((float) (short) (-2));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1605.4639F);
      floatArray0[1] = (float) (short) (-2);
      floatArray0[2] = (float) (byte)10;
      floatArray0[3] = (float) (short) (-2);
      floatArray0[4] = (float) (byte)10;
      floatArray0[5] = (-3089.0F);
      floatArray0[6] = (float) (byte)10;
      ArrayUtils.shift(floatArray0, (int) (short) (-2), 313, (int) (short) (-2));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) float0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2), (int) (short) (-2));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (-97.0F));
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F), (-97.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {10.0F, (-2.0F), 10.0F, (-3089.0F), 10.0F, (-1605.4639F), (-2.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'f';
      charArray0[2] = 'r';
      charArray0[3] = '';
      charArray0[4] = ',';
      charArray0[5] = 'B';
      charArray0[6] = 'v';
      charArray0[7] = 'Z';
      charArray0[8] = '7';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'W', 'f', 'r', '', ',', 'B', 'v', 'Z', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-8), (int) (byte)9);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-95), (byte)9, (byte)39, (byte)6, (byte) (-1), (byte) (-126), (byte)12, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte) (-95), (byte)9, (byte)39, (byte)6, (byte) (-1), (byte) (-126), (byte)12, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[14];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2519.386824186701));
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1478);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      short[] shortArray2 = ArrayUtils.removeAll(shortArray1, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-5399L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5399L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 0L, (-5399L), 0L}, longArray1);
      
      ArrayUtils.shift((short[]) null, 1974, (-4043), (-4043));
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-5399L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 0L, (-5399L), 0L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-5399L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 0L, (-5399L), 0L}, longArray1);
      assertArrayEquals(new long[] {(-5399L), 0L, (-5399L), 0L}, longArray3);
      
      int[] intArray1 = new int[8];
      intArray1[0] = (-4043);
      intArray1[1] = (-4043);
      intArray1[2] = (-4043);
      intArray1[3] = 10;
      intArray1[4] = (-4043);
      intArray1[5] = 1974;
      intArray1[6] = (-4043);
      intArray1[7] = (-4043);
      ArrayUtils.shift(intArray1, 10, 762, (-4043));
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-4043), (-4043), (-4043), 10, (-4043), 1974, (-4043), (-4043)}, intArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-2393));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 17;
      int int1 = 2;
      ArrayUtils.reverse(intArray0, 17, 2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 17;
      longArray0[1] = (long) 17;
      int int2 = ArrayUtils.indexOf(longArray0, 17L);
      assertEquals(2, longArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {17L, 17L}, longArray0);
      assertEquals(0, int2);
      
      int int3 = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-469L);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-469L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-469L), (-1L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 236.0F;
      floatArray0[1] = 113.83676F;
      ArrayUtils.shift(floatArray0, 2, 2, 649);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {236.0F, 113.83676F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {236.0F, 113.83676F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {236.0F, 113.83676F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {236.0F, 113.83676F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {236.0F, 113.83676F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-29);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-29));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Float float0 = new Float((float) (short) (-2));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2.0F), (-2.0F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(18, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Float float0 = new Float((float) (short) (-2));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1605.4639F);
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (short) (-2);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (-3089.0F);
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (short) (-2), 313, (int) (short) (-2));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, (-3089.0F), 0.0F, (-1605.4639F), 10.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, (-3089.0F), 0.0F, (-1605.4639F), 10.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, (-3089.0F), 0.0F, (-1605.4639F), 10.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, (-3089.0F), 0.0F, (-1605.4639F), 10.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2.0F), 0.0F, (-3089.0F), 0.0F, (-1605.4639F), 10.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 313);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 313, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 771.78246409);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, 0, 2, 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)0, (byte)119, (byte)0, (byte)103, (byte)103, (byte)103, (byte)103, (byte)103, (byte)103}, byteArray1);
      
      Character character0 = new Character('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 43, 43, 1553);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)8;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      int int1 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-70);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      int int2 = (-1362);
      // Undeclared exception!
      try { 
        ArrayUtils.reverse(byteArray0, (-1362), Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)8, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false, false}, booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)8;
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(17, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false, false}, booleanArray0));
      assertArrayEquals(new int[] {8}, intArray0);
      
      boolean[] booleanArray3 = ArrayUtils.remove(booleanArray1, 8);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertEquals(17, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.insert((-77), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray2 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1217));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.insert((-1217), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = ArrayUtils.insert((-1420), arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2782.84), (-5699));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = BitSet.valueOf(byteArray0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, byteArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = bitSet0.toByteArray();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)249);
      assertNotNull(short0);
      assertEquals((short)249, (short)short0);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)249;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) int0;
      ArrayUtils.shift(floatArray0, 2);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 249.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray1 = ArrayUtils.remove(integerArray0, 0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-625));
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2779);
      doubleArray0[1] = (double) (-2779);
      doubleArray0[2] = (double) (-2779);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2779.0), (-2779.0), (-2779.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 2;
      ArrayUtils.reverse(floatArray0, (-1), 707);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 8.0F, 2.14748365E9F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      ArrayUtils.shift(longArray0, 3979, 3979, (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 5091L;
      longArray0[1] = 635L;
      longArray0[2] = 1L;
      longArray0[3] = 52L;
      longArray0[4] = 2747L;
      longArray0[5] = 0L;
      longArray0[6] = (-1528L);
      ArrayUtils.shift(longArray0, 0, 0, 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {5091L, 635L, 1L, 52L, 2747L, 0L, (-1528L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2146350411), 9, (int) (byte) (-46));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-46);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-46);
      doubleArray0[3] = (double) (-46);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (-46);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) (-46);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-46), (int) (byte)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, (-46.0), (-46.0), 2.0, 0.0, (-46.0), 2.0, (-46.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-46);
      longArray0[1] = (long) (-2146350411);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-46);
      longArray0[4] = (long) (-2146350411);
      longArray0[5] = 0L;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (-782L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-46L), (-2146350411L), 0L, (-46L), (-2146350411L), 0L, 0L, (-782L)}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2779);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-2779);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      ArrayUtils.shift(longArray0, 1, (-1), 31);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2779L), 0L, 0L, (-2779L), (-1L), (-1L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2779L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = 88.0F;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-2779L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2779.0F), 0.0F, 1.0F, (-1.0F), 88.0F, (-1.0F), (-2779.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(782);
      assertNotNull(integer0);
      assertEquals(782, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1502);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1502, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1201);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1201, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1201, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(256);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(256, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1365);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(1365, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-171));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-171), (int)integer6);
      
      integerArray0[6] = integer6;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(1201);
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      Character character1 = new Character('v');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('v', (char)character1);
      
      Character character2 = Character.valueOf('$');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('$', (char)character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '%');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, 2, 1377, 36);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Long long0 = new Long((-1128L));
      assertNotNull(long0);
      assertEquals((-1128L), (long)long0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)85;
      ArrayUtils.swap(byteArray0, (int) (short)2, 305, 305);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)109, (byte)85}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      char[] charArray0 = Character.toChars(0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1896);
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 544.31326);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray1, 0.01);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1621.1589932650463), (-2757.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)32);
      assertNotNull(byte0);
      assertEquals((byte)32, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)78);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)78, (byte)byte1);
      
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)78, (byte)32, (byte)32, (byte)32, (byte)32}, byteArray1);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-1896), 12);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-1896.0), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, 8, 623);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 623;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) 623;
      longArray0[5] = (long) 623;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 623L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 623L, 623L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 623L, 0L, 623L, 623L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[1];
      byteArray0[1] = (byte)0;
      ArrayUtils.shift(doubleArray0, (-724));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-724);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (-724);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (-724);
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (-724);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2225), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-724L), 0L, 0L, (-724L), 0L, 0L, (-724L), 0L, (-724L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short short1 = new Short((short) (-670));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-670), (short)short1);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-504);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1105;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-504), 0, 1105, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      ArrayUtils.shift((short[]) null, 2, (int) (byte)0, 97);
      int[] intArray0 = new int[3];
      intArray0[0] = 2529;
      intArray0[1] = (int) 'S';
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2529, 83, 2}, intArray0);
      assertArrayEquals(new int[] {2529, 83, 2}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-4043);
      longArray0[1] = (long) 'S';
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) '8';
      longArray0[6] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-4043L), 83L, 2L, 2L, 2L, 56L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-4043L), 83L, 2L, 2L, 2L, 56L, 0L}, longArray2);
      assertArrayEquals(new long[] {(-4043L), 83L, 2L, 2L, 2L, 56L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (byte) (-16), (-324), (-324));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, (int[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      ArrayUtils.shift(doubleArray0, (-4411));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)78;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)70, (byte)10, (byte)78}, byteArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (-2441.5894F));
      assertNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements((float[]) null, floatArray0);
      assertEquals(0, floatArray0.length);
      assertNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)78;
      doubleArray1[1] = (double) (byte)70;
      doubleArray1[2] = (double) (byte)70;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) (byte)70;
      doubleArray1[5] = (double) (byte)78;
      doubleArray1[6] = 525.173598;
      doubleArray1[7] = (double) (byte)70;
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.1, 1538.23);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {78.0, 70.0, 70.0, (-1.0), 70.0, 78.0, 525.173598, 70.0}, doubleArray1, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)35);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)35, (byte)byte1);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer(65);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(65, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(65, (int)integer2);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'q';
      charArray0[2] = '>';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'r', 'q', '>'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)1, (byte)0, (byte)0}, byteArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1883.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1883.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), (-1883.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F), (-1883.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-206.0);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-1110.489F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-206.0), 0.0, (-1110.489013671875)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2178;
      shortArray0[3] = (short)0;
      ArrayUtils.swap(shortArray0, 0, (-1303), 1365);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2178, (short)0}, shortArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-206.0), 0.0, (-1110.489013671875)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-1), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)78, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      
      Double double0 = new Double((short)78);
      assertNotNull(double0);
      assertEquals(78.0, (double)double0, 0.01);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte)0;
      ArrayUtils.swap(byteArray0, (-2982), 117, (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)29, (byte) (-13), (byte)7, (byte)17, (byte)21, (byte) (-78), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)8, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf("Zp^`UE1E/8^\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-61.0));
      assertNotNull(double0);
      assertEquals((-61.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-215.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-215.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2535.598854);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2535.598854, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-215.0));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-215.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-178.2168));
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-178.2168), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2535.598854);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals(2535.598854, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-61.0), (-215.0), 2535.598854, (-215.0), (-178.2168), 2535.598854}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-61.0), (-215.0), 2535.598854, (-215.0), (-178.2168), 2535.598854}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-4000), 42, (-3089));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      charArray0[3] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'o', 'U', '5', 'f'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-1), 294, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)0, 137);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'G';
      charArray0[2] = '&';
      charArray0[3] = '$';
      charArray0[4] = 'B';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.remove(charArray0, (int) (byte)0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'X', 'G', '&', '$', 'B', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'G', '&', '$', 'B', 'Y'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      org.evosuite.runtime.Random.setNextRandom((byte)8);
      Character[] characterArray0 = new Character[8];
      char char0 = '/';
      Character character0 = new Character('/');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('/', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('4');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('4', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('y');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      assertEquals('y', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('/', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('/', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character0);
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character5));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character5));
      assertNotNull(character6);
      assertEquals('/', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf((char) character4);
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character5));
      assertTrue(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertNotNull(character7);
      assertEquals('/', (char)character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'/', '/', '4', 'y', '/', '/', '/', '/'}, charArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (-2362), (int) character4, (-2134998277));
      assertEquals(8, characterArray0.length);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character7));
      assertTrue(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character5));
      assertTrue(character4.equals((Object)character5));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character6));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character7));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'/', '/', '4', 'y', '/', '/', '/', '/'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf("Zp^`UE1E/8^\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'U');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'U'}, charArray1);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'U';
      charArray2[1] = 'U';
      charArray2[2] = 'U';
      charArray2[3] = '<';
      charArray2[4] = 'B';
      charArray2[5] = 'U';
      charArray2[6] = 'U';
      charArray2[7] = 'U';
      charArray2[8] = 'U';
      char[] charArray3 = ArrayUtils.add(charArray2, 2, '2');
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertEquals(10, charArray3.length);
      assertEquals(9, charArray2.length);
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'U', 'U', '2', 'U', '<', 'B', 'U', 'U', 'U', 'U'}, charArray3);
      assertArrayEquals(new char[] {'U', 'U', 'U', '<', 'B', 'U', 'U', 'U', 'U'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2L;
      longArray0[1] = 3767L;
      longArray0[2] = (-2218L);
      ArrayUtils.swap(longArray0, 2, 2, (-2060));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2L, 3767L, (-2218L)}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2102708448);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3767L;
      ArrayUtils.swap(floatArray0, 2102708448, (-1), 2102708448);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3767.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1110.489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.shuffle(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray0, (-1110.489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-7));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (byte) (-7);
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2055), (int) (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-7), (short)0, (short) (-7), (short)0}, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1727;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-7);
      intArray0[3] = (int) (short) (-7);
      intArray0[4] = (int) (byte) (-7);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1727, 0, (-7), (-7), (-7)}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = 3277.1005;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(3277.1005);
      assertNotNull(float0);
      assertEquals(3277.1006F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3277.1006F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(Double.NaN);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(Float.NaN, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(Float.NaN);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(Float.NaN, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(3277.1005);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(3277.1006F, (float)float5, 0.01F);
      
      Float float6 = new Float((float) floatArray0[1]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotNull(float6);
      assertEquals(3277.1006F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((float) floatArray0[1]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotNull(float7);
      assertEquals(3277.1006F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[3]);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3277.1006F, 3277.1006F, 1.0F, Float.NaN, Float.NaN, Float.NaN, 3277.1006F, 3277.1006F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.remove(floatArray1, 0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {3277.1006F, 3277.1006F, 1.0F, Float.NaN, Float.NaN, Float.NaN, 3277.1006F, 3277.1006F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3277.1006F, 1.0F, Float.NaN, Float.NaN, Float.NaN, 3277.1006F, 3277.1006F}, floatArray2, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-120);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, (byte) (-120));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)121, (byte)2, (byte) (-120)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)121, (byte) (-120), (byte)2, (byte) (-120)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[0];
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'A';
      charArray0[2] = 'd';
      charArray0[3] = ']';
      charArray0[4] = 'e';
      charArray0[5] = ']';
      charArray0[6] = '>';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ']';
      charArray1[1] = '>';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'', 'A', 'd', ']', 'e', ']', '>'}, charArray0);
      assertArrayEquals(new char[] {']', '>'}, charArray1);
      assertArrayEquals(new char[] {'', 'A', 'd', 'e', ']'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'i';
      charArray0[2] = 'z';
      charArray0[3] = ':';
      charArray0[4] = 'p';
      charArray0[5] = '`';
      charArray0[6] = 'e';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '{';
      charArray1[1] = '{';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(6, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'{', 'i', 'z', ':', 'p', '`', 'e'}, charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray1);
      assertArrayEquals(new char[] {'i', 'z', ':', 'p', '`', 'e'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 84);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1576.115653589));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-2004), 91, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, 2146718244, (int) (short) (-3652));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)3, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, (-372), 0, (int) (byte)3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(3814);
      assertNotNull(integer0);
      assertEquals(3814, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1119);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1651;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 1651;
      doubleArray0[3] = (double) 4363;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-563);
      doubleArray0[6] = (double) 1119;
      doubleArray0[7] = (double) 4363;
      doubleArray0[8] = (double) 1119;
      ArrayUtils.shift(doubleArray0, 1651);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-563.0), 1119.0, 4363.0, 1119.0, 1651.0, 14.0, 1651.0, 4363.0, (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)67}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 4363, 16);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift((int[]) null, 1651, 1496, 4363);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1496;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1496.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1496.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(3111);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3111, (int)integer1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2029.2435F);
      floatArray0[1] = (float) (short) (-1);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (int) (byte)0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      booleanArray2[7] = (boolean) boolean0;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(7, booleanArray3.length);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray3));
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 97L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 97L;
      doubleArray0[1] = (double) 97;
      doubleArray0[2] = (double) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (-724));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, (-1.0), 97.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 110.53701F);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, stringArray0.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1110.489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(19, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 7);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 7;
      longArray0[1] = 0L;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 7;
      longArray0[6] = (long) 7;
      longArray0[7] = (long) 7;
      longArray0[8] = 491L;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 2440L);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(9, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {7L, 0L, 7L, 7L, 7L, 7L, 7L, 7L, 491L}, longArray0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 7;
      longArray1[1] = 491L;
      longArray1[2] = 2440L;
      longArray1[3] = 379L;
      longArray1[4] = 491L;
      longArray1[5] = 491L;
      longArray1[6] = (long) 7;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 2440L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {7L, 491L, 2440L, 379L, 491L, 491L, 7L}, longArray1);
      assertArrayEquals(new long[] {2440L}, longArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-2348.0F);
      floatArray0[2] = (float) 10;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (-1605.4639F);
      floatArray0[7] = (float) 10;
      ArrayUtils.shift(floatArray0, (-938), 2143239609, 2566);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F, (-1605.4639F), 10.0F, 0.0F, (-2348.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F, (-1605.4639F), 10.0F, 0.0F, (-2348.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F, (-1605.4639F), 10.0F, 0.0F, (-2348.0F)}, floatArray0, 0.01F);
      
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F, (-1605.4639F), 10.0F, 0.0F, (-2348.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {10.0F, 0.0F, 0.0F, 0.0F, (-1605.4639F), 10.0F, 0.0F, (-2348.0F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-938));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -938, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Integer integer0 = new Integer(83);
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(83, object0);
      
      Double double0 = new Double(83);
      assertNotNull(double0);
      assertEquals(83.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, int0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double1;
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) integer0;
      ArrayUtils.swap(objectArray0, 2, 1, 512);
      assertEquals(6, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '}', 14);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 57);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 57;
      floatArray0[1] = (float) 57;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 57;
      floatArray0[4] = (float) 57;
      floatArray0[5] = (float) 57;
      floatArray0[6] = (float) 57;
      ArrayUtils.swap(floatArray0, (-76), 3326, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {57.0F, 57.0F, 0.0F, 57.0F, 57.0F, 57.0F, 57.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3078);
      assertNotNull(integer0);
      assertEquals(3078, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[7] = boolean0;
      booleanArray1[8] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2078L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2078L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2078L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      Short short0 = new Short((byte)103);
      assertNotNull(short0);
      assertEquals((short)103, (short)short0);
      
      Short short1 = new Short((short)37);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)37, (short)short1);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("org.junitpioneer.jupiter.StopwatchExtension");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("org.junitpioneer.jupiter.StopwatchExtension");
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("");
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("");
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) 97;
      floatArray0[2] = (float) 97;
      floatArray0[3] = (float) (byte)11;
      floatArray0[4] = 2025.009F;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (byte)11;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {97.0F, 97.0F, 97.0F, 11.0F, 2025.009F, 2.0F, 11.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      shortArray0[2] = (short)2;
      intArray0[3] = (int) (byte)11;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {2, 2, 0, 11}, intArray0);
      assertFalse(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 54, 1114);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 11}, intArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.swap(byteArray0, 5267, 2, 2);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)0}, byteArray0);
      
      ArrayUtils.shift(intArray0, (int) (short)2, 2, (-2146274479));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 0, 11}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'H');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68}, byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom(1439);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      ArrayUtils.swap(charArray0, (-354), (int) (byte)0, (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(charArray0, 1, 1, (-2692));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      Integer integer0 = new Integer(91);
      assertNotNull(integer0);
      assertEquals(91, (int)integer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-363);
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) (short) (-363);
      objectArray0[4] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (int) (short) (-363));
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[19];
      floatArray0[0] = (float) (short) (-363);
      floatArray0[1] = (float) 91;
      ArrayUtils.swap(floatArray0, 2, (-524), 91);
      assertEquals(19, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 2, (-1), (int) (short) (-363));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-519));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-363), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-363), (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      ArrayUtils.shift(charArray0, (-327), 1853, (-327));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1392);
      shortArray0[1] = (short) (-821);
      shortArray0[2] = (short)2389;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1795));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1392), (short) (-821), (short)2389}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short)2389, (-2146905745), (-327));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1392), (short) (-821), (short)2389}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 1, (-1968));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1392);
      intArray0[1] = (int) (short)2389;
      intArray0[2] = (int) '\u0000';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2389, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 928, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 2);
      assertNull(floatArray0);
      
      Boolean[] booleanArray2 = new Boolean[12];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray2[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray2[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray2[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray2[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray2[4] = boolean4;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(12, booleanArray3.length);
      assertEquals(12, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-20);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-20)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean5 = new Boolean("");
      assertFalse(boolean5);
      
      ArrayUtils.shift(booleanArray1, (-1245), 0, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      Integer integer0 = new Integer(91);
      assertNotNull(integer0);
      assertEquals(91, (int)integer0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-363);
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) (short) (-363);
      objectArray0[4] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (int) (short) (-363));
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-363);
      floatArray0[1] = (float) 91;
      ArrayUtils.swap(floatArray0, 2, (-524), (-2145146885));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-363.0F), 91.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-363.0F), 91.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 91;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-2145146885);
      longArray0[3] = (long) 91;
      longArray0[4] = (long) 2;
      int[] intArray0 = new int[6];
      intArray0[0] = (-524);
      intArray0[1] = 856;
      intArray0[2] = (int) (short) (-363);
      intArray0[3] = 3027;
      intArray0[4] = (int) (short) (-363);
      intArray0[5] = (-2145146885);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3027, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)63;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)63, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-41)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte) (-41));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (byte)0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = new BitSet(294);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(320, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)78);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)78, (byte)byte1);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = byte1;
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = byte1;
      Byte byte2 = new Byte((byte)118);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)118, (byte)byte2);
      
      byteArray1[5] = byte2;
      byteArray1[6] = byte1;
      byteArray1[7] = byte1;
      byteArray1[8] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)78, (byte)0, (byte)0, (byte)78, (byte)118, (byte)78, (byte)78, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)29501;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1252);
      ArrayUtils.shift(shortArray0, (int) (short) (-1252), (int) (short)2, (int) (short)16);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)29501, (short)16, (short)2, (short)1, (short) (-1252)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[7] = 1298L;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 1, (-3490));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, (-3490));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(3, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1812));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-1), 294, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertEquals(9, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byte byte2 = (byte)35;
      Byte byte3 = new Byte((byte)35);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)35, (byte)byte3);
      
      ArrayUtils.shift(byteArray0, (-105), 0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)35;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 5;
      intArray0[3] = 1136;
      intArray0[4] = (-105);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {35, 0, 5, 1136, (-105)}, intArray0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(3111);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3111, (int)integer1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3111;
      doubleArray0[1] = (-2737.600576719645);
      doubleArray0[2] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-66), (double) (short) (-2178));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3111.0, (-2737.600576719645), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1), 7);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      char[] charArray0 = ArrayUtils.insert(44, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, objectArray0);
      assertSame(integerArray1, objectArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(1, objectArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(objectArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(3111, object0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(83, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, (-28), (-28));
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2485.5613F);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 118, 1, (-480));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, true}, booleanArray0));
      
      Integer integer0 = new Integer(118);
      assertNotNull(integer0);
      assertEquals(118, (int)integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, true}, booleanArray0));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-862L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-862L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-862.0));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-862.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      ArrayUtils.swap((short[]) null, 863, 2146246530, 15);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-862.0)}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short) (-3158));
      assertNotNull(short0);
      assertEquals((short) (-3158), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)215);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)215, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)215);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)215, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)57);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)57, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[1]);
      assertEquals(5, shortArray0.length);
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)215, (short)short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3158), (short)215, (short)215, (short)57, (short)215}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert((-1), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      int int0 = 1643;
      ArrayUtils.shift(doubleArray0, 1643);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {82.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 82.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'K';
      charArray0[4] = '|';
      charArray0[5] = 'R';
      charArray0[6] = 'h';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'K', '|', 'R', 'h'}, charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'K', '|', 'R', 'h'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)249);
      assertNotNull(short0);
      assertEquals((short)249, (short)short0);
      
      Integer integer0 = new Integer((-506));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-506), (int)integer0);
      
      Integer integer1 = new Integer((-387));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-387), (int)integer1);
      
      Integer integer2 = new Integer(1136);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1136, (int)integer2);
      
      Integer integer3 = new Integer((-506));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-506), (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.insert(int0, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 803, (int) (byte)0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) 803;
      doubleArray0[4] = (double) (-1);
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.1, 83.0, 803.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1545));
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-1545)}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1545);
      floatArray0[1] = (float) (short) (-1545);
      floatArray0[2] = (float) (short) (-1545);
      floatArray0[3] = (float) (short) (-1545);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (short) (-1545);
      floatArray0[6] = (float) (short) (-1545);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1545.0F), (-1545.0F), (-1545.0F), (-1545.0F), Float.NaN, (-1545.0F), (-1545.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1545.0F), (-1545.0F), (-1545.0F), (-1545.0F), Float.NaN, (-1545.0F), (-1545.0F), (-1.0F)}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2083, 2858);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2858);
      assertNotNull(integer0);
      assertEquals(2858, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2997));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2997), (int)integer1);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-1));
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(978.9953447949297);
      assertNotNull(double0);
      assertEquals(978.9953447949297, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.7);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(316.07343425245);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(316.07343425245, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {978.9953447949297, 0.7, 316.07343425245}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '4');
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {978.9953447949297, 0.7, 316.07343425245}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (-31L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 79;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) '4';
      int int2 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(9, longArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new long[] {0L, (-1L), (-31L), (-1L), 79L, (-1L), 0L, 0L, 52L}, longArray0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)50;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = ArrayUtils.insert((-954), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0);
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      int int0 = 1;
      int int1 = ArrayUtils.lastIndexOf(charArray0, '2', 1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(0, int1);
      
      Integer[] integerArray0 = new Integer[8];
      try { 
        Integer.valueOf("rq@j[6;T?`h");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rq@j[6;T?`h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Integer integer0 = Integer.getInteger("igH i?J");
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 142);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) 0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 68);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '4';
      charArray0[2] = 'E';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'S');
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'9', '4', 'E'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(1777.769F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1777.769F, (float)float1, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      floatArray0[3] = 1777.769F;
      floatArray0[4] = 1777.769F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean3);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(216);
      assertNotNull(integer0);
      assertEquals(216, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) integer0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (short)454);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {454.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-363);
      intArray0[1] = (int) 'S';
      intArray0[2] = (int) (short) (-363);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-363), 83, (-363)}, intArray0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (short)454);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', (-1778));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      Integer[] integerArray0 = new Integer[20];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1390));
      assertEquals(20, integerArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-125);
      intArray0[1] = (int) 'r';
      intArray0[3] = (int) (byte) (-125);
      intArray0[4] = (int) 'r';
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-1390);
      ArrayUtils.shift(intArray0, (-828), 1926, 1047);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-125), 114, 0, (-1390), (-125), 114, 0}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(363);
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 1926;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-125);
      doubleArray0[5] = (double) (-828);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1926, (int) (byte)0, (-119.49764763429336));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-125.0), 0.0, 1926.0, 0.0, (-125.0), (-828.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (double) (-1390));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-125.0), 0.0, 1926.0, 0.0, (-125.0), (-828.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (-484);
      Double double0 = new Double((-484.0F));
      assertNotNull(double0);
      assertEquals((-484.0), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (double) 2394;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1161.1513746816), 2394);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, (-1.0), 2394.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 2);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)112);
      assertNull(byteArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_uPFwamD+H";
      stringArray0[1] = "Fo)VW3sy|LJl0K]v";
      stringArray0[2] = "@a";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      ArrayUtils.shift(charArray0, (-1896), (-75), (-1896));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, 39, (int) (byte) (-28), (-75));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-322));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-28);
      floatArray0[1] = (-1558.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-75));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-28.0F), (-1558.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 0.0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {4, 0}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '|';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) '|';
      floatArray1[1] = (float) 4;
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {4.0F, 4.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {124.0F, 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {4.0F, 4.0F, 124.0F, 4.0F}, floatArray2, 0.01F);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {4, 0}, intArray1);
      assertArrayEquals(new int[] {4, 0, 0}, intArray2);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 124.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[4] = (byte)16;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 132);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)0, (byte)0, (byte)0, (byte)124}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1897.0223228326875);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1897.0223228326875}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1179), 1642);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      Character character1 = new Character('y');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('y', (char)character1);
      
      Character character2 = Character.valueOf('9');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('9', (char)character2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1179));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[7] = 1298L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)54;
      Short short0 = new Short((short)54);
      assertNotNull(short0);
      assertEquals((short)54, (short)short0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = (Object) (short)54;
      ArrayUtils.shift(objectArray0, (int) (short)54);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)54;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {54.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1695, 1695);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Long long0 = new Long((-345L));
      assertNotNull(long0);
      assertEquals((-345L), (long)long0);
      
      Long long1 = new Long((-345L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-345L), (long)long1);
      
      Long long2 = new Long(1365);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1365L, (long)long2);
      
      Long[] longArray0 = new Long[9];
      Long long3 = new Long((-706L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-706L), (long)long3);
      
      longArray0[0] = long3;
      longArray0[1] = long0;
      longArray0[2] = long2;
      longArray0[3] = long1;
      longArray0[4] = long2;
      longArray0[5] = long1;
      longArray0[6] = long1;
      longArray0[7] = long1;
      longArray0[8] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-706L), (-345L), 1365L, (-345L), 1365L, (-345L), (-345L), (-345L), (-345L)}, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (long)longArray0[7];
      doubleArray0[1] = (double) 1365;
      doubleArray0[2] = (double) 1695;
      doubleArray0[3] = (double) (long)longArray0[7];
      doubleArray0[4] = (double) 1365;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 1695);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-345.0), 1365.0, 1695.0, (-345.0), 1365.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-345.0), 1365.0, (-345.0), 1365.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)longArray0[4];
      floatArray0[1] = (float) (long)longArray0[1];
      floatArray0[2] = (float) (-706L);
      floatArray0[3] = (float) (long)longArray0[3];
      floatArray0[4] = (float) (long)longArray0[5];
      floatArray0[5] = (float) (long)longArray0[2];
      ArrayUtils.shift(floatArray0, (-938), 1365, 8);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-345.0F), 1365.0F, 1365.0F, (-345.0F), (-706.0F), (-345.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      long[] longArray0 = new long[2];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray2 = ArrayUtils.insert((int) (byte) (-1), byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray2);
      
      ArrayUtils.reverse((boolean[]) null, Integer.MAX_VALUE, (-2306));
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Y');
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, (long) (-1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      ArrayUtils.shift(longArray0, (-1056), (-1056), (-1105));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3111;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertArrayEquals(new int[] {2394, 3111}, intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2875.88F;
      floatArray0[2] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2394);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 2875.88F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2875.88F, 1.0F}, floatArray1, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(boolean2);
      
      ArrayUtils.shift(booleanArray1, (-2), 55, (-1618));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1070);
      assertNotNull(integer0);
      assertEquals(1070, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 492;
      Integer integer1 = new Integer(492);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(492, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      int int1 = (-100);
      Integer integer2 = Integer.getInteger("}U4c%^'WJ<S5W~&b", (-100));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-100), (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1238);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        bitSet0.flip((-2146576387));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2146576387
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-33));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2499.873175));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2499.873175)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2499.873175)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2499.873175)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(3347);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(3347, (int)integer3);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (byte)0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "[Mw");
      assertSame(integerArray0, integerArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3668;
      intArray0[1] = (int) 'S';
      intArray0[2] = 3668;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 121;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = 3347;
      ArrayUtils.swap(intArray0, 4018, (-2819), (-2819));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {3668, 83, 3668, 0, 121, 0, 3347}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'G';
      charArray0[2] = 'a';
      charArray0[3] = 'n';
      charArray0[4] = '!';
      charArray0[5] = '9';
      ArrayUtils.shift(charArray0, 1, 1, 1422);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'z', 'G', 'a', 'n', '!', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-328), 1853, (-328));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = 3277.1005;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(2, int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 2965.66041514344, 2, 3277.1005);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2.147483647E9, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_CHAR_ARRAY, '&');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      short[] shortArray0 = new short[3];
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-3090));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2969.4F), (int) (short)1136);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-306);
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) (short)1136;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (-1);
      longArray0[6] = (long) (short) (-3090);
      longArray0[7] = (long) 'J';
      longArray0[8] = (long) (short)1136;
      int int1 = ArrayUtils.indexOf(longArray0, (long) 'J', (-1));
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-306L), 74L, 1136L, 1136L, (-1L), 0L, (-3090L), 74L, 1136L}, longArray0);
      assertEquals(1, int1);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Float[] floatArray2 = new Float[8];
      Float float0 = new Float((float) (short) (-306));
      assertNotNull(float0);
      assertEquals((-306.0F), (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((double) (short)1136);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1136.0F, (float)float1, 0.01F);
      
      floatArray2[1] = float1;
      Float float2 = new Float((double) 74L);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(74.0F, (float)float2, 0.01F);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) (short)1136);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1136.0F, (float)float3, 0.01F);
      
      floatArray2[3] = float3;
      Float float4 = new Float((float) (-1));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray2[4] = float4;
      Float float5 = new Float((-1.0F));
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals((-1.0F), (float)float5, 0.01F);
      
      floatArray2[5] = float5;
      Float float6 = new Float((-375.31623329));
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotNull(float6);
      assertEquals((-375.31622F), (float)float6, 0.01F);
      
      floatArray2[6] = float6;
      Float float7 = new Float((double) (short) (-3090));
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals((-3090.0F), (float)float7, 0.01F);
      
      floatArray2[7] = float7;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {(-306.0F), 1136.0F, 74.0F, 1136.0F, (-1.0F), (-1.0F), (-375.31622F), (-3090.0F)}, floatArray3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[3];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean3);
      
      ArrayUtils.swap(floatArray0, (-35), 1, 2223);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-35);
      doubleArray0[2] = (double) 1442.41F;
      doubleArray0[3] = (double) (-35);
      boolean boolean4 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new double[] {1.0, (-35.0), 1442.4100341796875, (-35.0)}, doubleArray0, 0.01);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, (-3363), (int) (byte)0, (-1384));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)89, (-2203));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1446);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1446, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)34;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)9);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)126, (byte)88, (byte) (-66), (byte)9, (byte)34}, byteArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte)126);
      assertNotNull(integer0);
      assertEquals(126, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, (int) (byte)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\u0000');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Long long0 = new Long('\u0000');
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2485.5613F);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 'a';
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) 'a';
      floatArray0[5] = (float) ' ';
      ArrayUtils.shift(floatArray0, (-480));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2485.5613F), 0.0F, 97.0F, 97.0F, 97.0F, 32.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      ArrayUtils.swap(longArray0, 2, 2, 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1153.559445509), 68, (double) (byte)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer((byte)0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 1.0F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 0L, 1L}, longArray0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short)454;
      Integer integer0 = new Integer(91);
      assertNotNull(integer0);
      assertEquals(91, (int)integer0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-363);
      objectArray0[1] = (Object) (short)454;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) (short) (-363);
      objectArray0[4] = (Object) integer0;
      Object object0 = ArrayUtils.get(objectArray0, (-2145146885));
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, (int) (short) (-363));
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)454;
      floatArray0[1] = (float) 91;
      ArrayUtils.swap(floatArray0, 2, (-524), (-2145146885));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {454.0F, 91.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      ArrayUtils.shift(charArray0, (-1896), (-75), (-1896));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'i', 'i', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 39, (int) (byte) (-28), (-75));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1463));
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', 'i', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) (-1463));
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray1, 'i');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'i', 'i', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'i', 'i', '\u0000'}, charArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)454;
      shortArray0[1] = (short)454;
      shortArray0[2] = (short)454;
      shortArray0[3] = (short)454;
      shortArray0[4] = (short)454;
      shortArray0[5] = (short)454;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)454, (short)454, (short)454, (short)454, (short)454, (short)454}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)454;
      ArrayUtils.swap(doubleArray0, 1, 52);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {454.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true, true}, booleanArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'P';
      charArray0[1] = 'O';
      charArray0[2] = 'p';
      charArray0[3] = '[';
      charArray0[4] = '&';
      charArray0[5] = 'b';
      charArray0[6] = '{';
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'P', 'O', 'p', '[', '&', 'b', '{'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)7;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 'a';
      longArray0[4] = 1L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 7L, 0L, 97L, 1L}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7L;
      double[] doubleArray1 = ArrayUtils.insert(3, doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf("Zp^`UE1E/8^\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(shortArray1, (Random) mockRandom1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[2], (int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertEquals(0, int0);
      
      BitSet bitSet0 = new BitSet(261);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(320, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (int)integerArray0[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'o';
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      Byte byte2 = new Byte((byte)60);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)60, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = 34L;
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) integerArray0[1]);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L, 0L, 0L, 34L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L, 0L, 34L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 1527L;
      longArray0[2] = (long) 2394;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1253L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 1527L, 2394L}, longArray0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableInt1.subtract(3999);
      assertEquals((byte)97, mutableInt1.byteValue());
      assertEquals("-3999", mutableInt1.toString());
      assertEquals((-3999), (int)mutableInt1.toInteger());
      assertEquals((-3999.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3999), (int)mutableInt1.getValue());
      assertEquals((-3999.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-3999L), mutableInt1.longValue());
      assertEquals((short) (-3999), mutableInt1.shortValue());
      assertEquals((-3999), mutableInt1.intValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(5);
      assertEquals(5L, mutableInt2.longValue());
      assertEquals(5.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)5, mutableInt2.shortValue());
      assertEquals(5, mutableInt2.intValue());
      assertEquals(5, (int)mutableInt2.toInteger());
      assertEquals((byte)5, mutableInt2.byteValue());
      assertEquals(5.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(5, (int)mutableInt2.getValue());
      assertEquals("5", mutableInt2.toString());
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      int int1 = mutableInt0.addAndGet((Number) 1527L);
      assertEquals(1527L, mutableInt0.longValue());
      assertEquals(1527, mutableInt0.intValue());
      assertEquals("1527", mutableInt0.toString());
      assertEquals((short)1527, mutableInt0.shortValue());
      assertEquals(1527, (int)mutableInt0.toInteger());
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals(1527.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1527, (int)mutableInt0.getValue());
      assertEquals(1527.0, mutableInt0.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(int1 == int0);
      assertEquals(1527, int1);
      
      MutableInt mutableInt3 = new MutableInt(2394);
      assertEquals(2394, mutableInt3.intValue());
      assertEquals(2394L, mutableInt3.longValue());
      assertEquals((byte)90, mutableInt3.byteValue());
      assertEquals(2394.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)2394, mutableInt3.shortValue());
      assertEquals("2394", mutableInt3.toString());
      assertEquals(2394, (int)mutableInt3.toInteger());
      assertEquals(2394, (int)mutableInt3.getValue());
      assertEquals(2394.0, mutableInt3.doubleValue(), 0.01);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertNotNull(mutableInt3);
      
      Integer integer1 = mutableInt3.toInteger();
      assertEquals(2394, mutableInt3.intValue());
      assertEquals(2394L, mutableInt3.longValue());
      assertEquals((byte)90, mutableInt3.byteValue());
      assertEquals(2394.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)2394, mutableInt3.shortValue());
      assertEquals("2394", mutableInt3.toString());
      assertEquals(2394, (int)mutableInt3.toInteger());
      assertEquals(2394, (int)mutableInt3.getValue());
      assertEquals(2394.0, mutableInt3.doubleValue(), 0.01);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableInt3, mutableInt2);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2394, (int)integer1);
      
      ArrayUtils.reverse(longArray0, (-44), 101);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2394L, 1527L, 0L}, longArray0);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer((-3329));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-3329), (int)integer3);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(205.2927383364);
      assertNotNull(double0);
      assertEquals(205.2927383364, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-73.6266395));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-73.6266395), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double2 = new Double(1527L);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1527.0, (double)double2, 0.01);
      
      doubleArray0[4] = doubleArray0[1];
      Double double3 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(205.2927383364, (double)double3, 0.01);
      
      doubleArray0[5] = double3;
      Double double4 = new Double((double) doubleArray0[4]);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-73.6266395), (double)double4, 0.01);
      
      doubleArray0[6] = double4;
      Double double5 = new Double(1077.2);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals(1077.2, (double)double5, 0.01);
      
      doubleArray0[7] = double5;
      Double double6 = new Double(1527L);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotNull(double6);
      assertEquals(1527.0, (double)double6, 0.01);
      
      doubleArray0[8] = double6;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1394);
      shortArray0[1] = (short) (-822);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)420;
      shortArray0[4] = (short) (-441);
      shortArray0[5] = (short)512;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, intArray0.length);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-1394), (short) (-822), (short) (-1), (short)420, (short) (-441), (short)512}, shortArray0);
      assertArrayEquals(new short[] {(short) (-822), (short) (-1), (short)420, (short) (-441), (short)512}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-898.16046859098));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) 0.0;
      Object object0 = ArrayUtils.get(objectArray0, (-709));
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, 16);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 152;
      ArrayUtils.swap(floatArray0, 2748, 926, 710);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {152.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2223;
      doubleArray2[1] = (double) 2223;
      doubleArray2[2] = (double) (-709);
      doubleArray2[3] = (-186.531705);
      doubleArray2[4] = (double) 710;
      doubleArray2[5] = (double) (-709);
      doubleArray2[6] = 2039.2732164585;
      doubleArray2[7] = (double) 2748;
      doubleArray2[8] = (-898.16046859098);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2223.0, 2223.0, (-709.0), (-186.531705), 710.0, (-709.0), 2039.2732164585, 2748.0, (-898.16046859098)}, doubleArray2, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-1394), object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0}, byteArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      ArrayUtils.swap(doubleArray0, 1, (-1394));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-45), Integer.MAX_VALUE, (double) (byte) (-45));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-45);
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 731;
      intArray0[5] = (int) (byte) (-45);
      intArray0[6] = (int) (byte) (-45);
      intArray0[7] = 1;
      int int1 = ArrayUtils.indexOf(intArray0, 731);
      assertEquals(8, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-45), (-1), 1, Integer.MAX_VALUE, 731, (-45), (-45), 1}, intArray0);
      assertEquals(4, int1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-45);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte) (-45);
      shortArray0[4] = (short) (byte) (-45);
      shortArray0[5] = (short) (byte) (-45);
      shortArray0[6] = (short) (byte) (-45);
      shortArray0[7] = (short) (byte) (-45);
      shortArray0[8] = (short) (byte) (-45);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-66));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-45), (short)13, (short) (-1), (short) (-45), (short) (-45), (short) (-45), (short) (-45), (short) (-45), (short) (-45)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-45), (short)13, (short) (-1), (short) (-45), (short) (-45), (short) (-45), (short) (-45), (short) (-45), (short) (-45)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'H';
      charArray0[3] = 'Q';
      charArray0[4] = '>';
      charArray0[5] = '*';
      ArrayUtils.shift(charArray0, 0, 814, 0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'H', 'Q', '>', '*'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-28);
      ArrayUtils.swap(byteArray0, int0, (int) (byte) (-66), (int) (byte) (-28));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-28)}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-2146615591));
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P', 'l', 'H', 'Q', '>', '*'}, charArray1);
      assertArrayEquals(new char[] {'P', 'l', 'H', 'Q', '>', '*'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-28));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) int0);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 2023, 2023);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, 613.7087120748224);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1770);
      floatArray0[1] = (float) 2023;
      floatArray0[2] = (float) 2023;
      floatArray0[3] = (float) 2023;
      floatArray0[4] = (float) 2023;
      floatArray0[5] = (float) 2023;
      ArrayUtils.shift(floatArray0, 2023, 2, 8192);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1770.0F), 2023.0F, 2023.0F, 2023.0F, 2023.0F, 2023.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 11, 9);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1294), (double) (-1294));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1294, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1218.47186822742));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1568.3658));
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)90;
      shortArray0[2] = (short)29521;
      shortArray0[3] = (short)3262;
      shortArray0[4] = (short) (-709);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)31;
      shortArray0[7] = (short)26569;
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)29521);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)97, (short)90, (short)29521, (short)3262, (short) (-709), (short) (-1), (short)31, (short)26569, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)97, (short)90, (short)3262, (short) (-709), (short) (-1), (short)31, (short)26569, (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1775);
      doubleArray0[3] = 1821.9614533255417;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1775);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1775), (-1775.0));
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1775.0), 1821.9614533255417, 0.0, (-1775.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 4042, (-1));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.removeAllOccurrences(integerArray0, (Integer) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-371L);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 8192;
      longArray0[3] = (-371L);
      longArray0[4] = (long) (byte)0;
      int int0 = ArrayUtils.indexOf(longArray0, (-704L), 85);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-371L), 0L, 8192L, (-371L), 0L}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '{';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'F';
      charArray0[5] = '>';
      charArray0[6] = '{';
      charArray0[7] = 'R';
      charArray0[8] = '[';
      char[] charArray1 = ArrayUtils.insert((int) (byte)0, charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '{', '[', '[', 'F', '>', '{', 'R', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((byte[]) null, (-2146350411), (int) (byte)49, (int) (byte)50);
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 324, (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      
      shortArray0[4] = short1;
      try { 
        Short.valueOf("", (int) (byte) (-46));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -46 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '$';
      charArray0[2] = 'W';
      charArray0[3] = '{';
      charArray0[4] = 'U';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'h', '$', 'W', '{', 'U'}, charArray0);
      assertArrayEquals(new char[] {'h', 'h', '$', 'W', '{', 'U', '$', 'W', '{', 'U'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 57.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {57.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 69);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 57.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {57.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1266;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)2372;
      shortArray0[3] = (short)1072;
      shortArray0[4] = (short) (-18089);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-22);
      shortArray0[7] = (short)518;
      shortArray0[8] = (short)1370;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1266, (short)83, (short)2372, (short)1072, (short) (-18089), (short) (-1), (short) (-22), (short)518, (short)1370}, shortArray1);
      assertArrayEquals(new short[] {(short)1266, (short)83, (short)2372, (short)1072, (short) (-18089), (short) (-1), (short) (-22), (short)518, (short)1370}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1L);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray2, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1), (-1), 118);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      int int1 = ArrayUtils.hashCode((Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '?';
      ArrayUtils.shift(charArray0, (-1), (-1), 118);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'N', '?'}, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 15;
      intArray0[1] = (-1);
      intArray0[2] = (-22);
      intArray0[3] = (int) 'N';
      intArray0[4] = 264;
      intArray0[5] = (-2092);
      intArray0[6] = (int) '?';
      intArray0[7] = (-1);
      intArray0[8] = (-2472);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(264, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 264, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-75.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-75.0), (double)double1, 0.01);
      
      Double double2 = new Double((short)0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double(4.0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(4.0, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double4 = new Double(4.0);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(4.0, (double)double4, 0.01);
      
      doubleArray0[0] = double4;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 6;
      intArray0[2] = 1;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 1;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 16;
      intArray0[7] = 1;
      intArray0[8] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 3754);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 6, 1, 0, 1, 0, 16, 1, 0}, intArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)987);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(14);
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Integer integer1 = new Integer((short)987);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(987, (int)integer1);
      
      Integer integer2 = new Integer((short)987);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(987, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)41);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray1);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short)987, (short)0, (short)0}, shortArray0);
      
      Integer integer3 = Integer.getInteger(".*{[0-9]+}.*");
      assertNull(integer3);
      
      short[] shortArray2 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray1);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[3] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[4] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[5] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[6] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[7] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[8] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger("j)");
      assertNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer2);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 0, 59);
      assertNull(shortArray0);
      
      Double double0 = new Double((-1359.48));
      assertNotNull(double0);
      assertEquals((-1359.48), (double)double0, 0.01);
      
      Double double1 = new Double(0.1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      
      Double double2 = new Double((-1359.48));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1359.48), (double)double2, 0.01);
      
      Double double3 = new Double(59);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(59.0, (double)double3, 0.01);
      
      Double double4 = new Double(430.9764);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(430.9764, (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double3;
      doubleArray0[4] = double4;
      doubleArray0[5] = double3;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2770.85));
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.1, (-1359.48), (-1359.48), 59.0, 430.9764, 59.0, (-1359.48), (-1359.48), 430.9764}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((short[]) null, (-3785), 0, (-164));
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[1] = 60;
      intArray0[5] = 92;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2388);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 60, 0, 0, 0, 92, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 60, 0, 0, 0, 92, 0, 0, 0, 0}, intArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 92, 60);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 5116L;
      longArray0[1] = 0L;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 5116L;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 0);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, "c{HGJz;c");
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3111;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertArrayEquals(new int[] {2394, 3111}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 3111;
      integerArray0[1] = (Integer) 3111;
      integerArray0[2] = (Integer) 3111;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      Integer integer0 = Integer.getInteger("", 1238);
      assertNotNull(integer0);
      assertEquals(1238, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integerArray0[2]);
      assertEquals(3, integerArray0.length);
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(3111, object0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertArrayEquals(new int[] {2394, 3111}, intArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1114.63685339842);
      doubleArray0[1] = (double) 1238;
      doubleArray0[2] = (double) object0;
      doubleArray0[3] = (double) (int)integerArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2286.0), (int) integerArray0[0], (double) 2394);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertArrayEquals(new double[] {(-1114.63685339842), 1238.0, 3111.0, 3111.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      ArrayUtils.swap(charArray0, (-354), (int) (byte)0, (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) '@';
      floatArray0[4] = (float) '@';
      floatArray0[5] = (float) 'a';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F, 97.0F, 32.0F, 64.0F, 64.0F, 97.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1827));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1827), (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 49;
      Integer integer2 = new Integer(49);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(49, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(49);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(49, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1827));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-1827), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1795));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals((-1795), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1827));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals((-1827), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1827));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertNotNull(integer7);
      assertEquals((-1827), (int)integer7);
      
      integerArray0[7] = integer7;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1795), 88).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1775);
      doubleArray0[3] = 1821.9614533255417;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1775);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1775), (-1775.0));
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1775.0), 1821.9614533255417, 0.0, (-1775.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-1));
      assertNull(intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)2411;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2339), (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2411, (short)0, (short)0, (short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1775.0), 121, 3688.55164949961);
      assertEquals(10, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1775.0), 1821.9614533255417, 0.0, (-1775.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (-1), 342);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (-793), (-793), (-1));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      Short short0 = new Short((short)5042);
      assertNotNull(short0);
      assertEquals((short)5042, (short)short0);
      
      Integer integer0 = new Integer((short)249);
      assertNotNull(integer0);
      assertEquals(249, (int)integer0);
      
      Integer integer1 = new Integer((-2731));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2731), (int)integer1);
      
      Integer[] integerArray0 = ArrayUtils.insert(2618, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-5399L);
      longArray0[1] = 97L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5399L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-5399L));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 0, 324);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-5399L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray1);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(324);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(324, (int)integer1);
      
      Integer integer2 = new Integer(2147144500);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2147144500, (int)integer2);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = integer1;
      Integer[] integerArray1 = ArrayUtils.insert(0, (Integer[]) null, integerArray0);
      assertEquals(7, integerArray0.length);
      assertNull(integerArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-888);
      shortArray2[1] = (short)5;
      shortArray2[2] = (short)39;
      shortArray2[3] = (short) (-297);
      Short[] shortArray3 = ArrayUtils.toObject(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(4, shortArray2.length);
      assertEquals(4, shortArray3.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short) (-888), (short)5, (short)39, (short) (-297)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      ArrayUtils.shift(charArray0, (-1896), (-75), (-1896));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, 39, (int) (byte) (-28), (-75));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-322));
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'w';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'h');
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w'}, charArray1);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-28));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'w'}, charArray1);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)126);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 39;
      longArray0[2] = (-2L);
      longArray0[3] = (long) 'h';
      longArray0[4] = (long) (char)characterArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) characterArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 236.0F;
      ArrayUtils.shift(floatArray0, 2, 2, 649);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {236.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {236.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {236.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {236.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {236.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 142);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 142;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, 142.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-421.0F);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (-2146099835), 2, 523);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-421.0F), 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-421.0F), 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-421.0F), 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)0, 523);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)54;
      int int0 = new Short((short)54);
      assertEquals((short)54, int0);
      
      char[] charArray0 = new char[5];
      longArray0[4] = (long) 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = 'b';
      charArray0[4] = '|';
      ArrayUtils.shuffle(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'g', 'n', 'b', '|', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) 'n';
      ArrayUtils.shift(objectArray0, (-4115), (short)54, 0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 2216L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1298L, 0L, 0L, 0L, 103L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1298L, 0L, 0L, 0L, 103L, 0L, 0L, 0L}, longArray1);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      ArrayUtils.swap(charArray0, (-354), (int) (byte)0, (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) '@';
      floatArray0[4] = (float) '@';
      floatArray0[5] = (float) 'a';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F, 97.0F, 32.0F, 64.0F, 64.0F, 97.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1827));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1827), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(49);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(49, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(49);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(49, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1827));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-1827), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1795));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-1795), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1827));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals((-1827), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1827));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals((-1827), (int)integer7);
      
      integerArray0[7] = integer7;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      boolean boolean1 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(8, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1350, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2078;
      doubleArray0[1] = 120.49764763429336;
      doubleArray0[2] = (double) (-2286);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 2078;
      doubleArray0[6] = (double) 620;
      doubleArray0[7] = (double) (-2286);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2286.0), (double) (-2286));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2078.0, 120.49764763429336, (-2286.0), 4.0, 0.0, 2078.0, 620.0, (-2286.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = ArrayUtils.insert(2078, byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3111;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3111);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertArrayEquals(new int[] {3111, 3111}, intArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3111;
      longArray0[1] = (long) 3111;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3111L, 3111L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1518;
      shortArray0[1] = (short)557;
      shortArray0[2] = (short) (-2038);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1518, (short)557, (short) (-2038)}, shortArray0);
      
      ArrayUtils.shift(longArray0, (int) (short)1518);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3111L, 3111L}, longArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1518, (short)557, (short) (-2038)}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 0, (-1329));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2788.56668093));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {75.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {75.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 0, 0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = (float) 'K';
      floatArray0[3] = (float) 'K';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {75.0F, 75.0F, 75.0F, 75.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-755);
      shortArray0[1] = (short)45;
      shortArray0[2] = (short) (-30086);
      shortArray0[3] = (short)1722;
      shortArray0[4] = (short)2811;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)2178;
      shortArray0[7] = (short)2261;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)76);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-755), (short)45, (short) (-30086), (short)1722, (short)2811, (short)7, (short)2178, (short)2261}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short) (-755), (short)45, (short) (-30086), (short)1722, (short)2811, (short)7, (short)2178, (short)2261}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)454;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)454, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.swap((double[]) null, 0, 1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)454;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (short)454;
      longArray0[3] = (long) (short)454;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (short)454;
      longArray0[7] = (long) (short)454;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {454L, 1L, 454L, 454L, 0L, 1L, 454L, 454L}, longArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0, (int) (short)454);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2253), (-3636));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Float float0 = new Float((double) (short)4);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)4;
      floatArray0[3] = (float) (short)4;
      floatArray0[4] = (float) 294;
      floatArray0[5] = (float) (short)4;
      floatArray0[6] = (float) (short) (-2253);
      floatArray0[7] = (float) (short)4;
      ArrayUtils.shift(floatArray0, (-1621), 0, (-4011));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 4.0F, 4.0F, 294.0F, 4.0F, (-2253.0F), 4.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 4.0F, 4.0F, 294.0F, 4.0F, (-2253.0F), 4.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 4.0F, 4.0F, 294.0F, 4.0F, (-2253.0F), 4.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-98);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (-4125));
      assertEquals(2, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)54, (byte) (-98)}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1000), 951);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = 'V';
      Integer integer0 = new Integer(2050);
      assertNotNull(integer0);
      assertEquals(2050, (int)integer0);
      
      Integer integer1 = new Integer((byte)3);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) 'J';
      Integer integer2 = new Integer((-1669));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1669), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(11, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(83);
      assertEquals(83.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(83, mutableInt0.intValue());
      assertEquals("83", mutableInt0.toString());
      assertEquals(83.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)83, mutableInt0.shortValue());
      assertEquals((byte)83, mutableInt0.byteValue());
      assertEquals(83, (int)mutableInt0.getValue());
      assertEquals(83, (int)mutableInt0.toInteger());
      assertEquals(83L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) integer0);
      assertEquals((-1967), (int)mutableInt0.toInteger());
      assertEquals((-1967.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1967), mutableInt0.intValue());
      assertEquals((-1967L), mutableInt0.longValue());
      assertEquals((short) (-1967), mutableInt0.shortValue());
      assertEquals("-1967", mutableInt0.toString());
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals((-1967), (int)mutableInt0.getValue());
      assertEquals((-1967.0), mutableInt0.doubleValue(), 0.01);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((byte)3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(4403L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(4403L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(4403L);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(4403L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1334L));
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3L, 4403L, 4403L}, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2050;
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "long");
      assertEquals(11, objectArray0.length);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) long2;
      objectArray1[1] = (Object) long0;
      objectArray1[2] = (Object) 'J';
      objectArray1[3] = (Object) 'V';
      Integer integer3 = new Integer((-1319));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1319), (int)integer3);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer((-1018));
      assertNotNull(integer0);
      assertEquals((-1018), (int)integer0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt((-2146099835));
      assertEquals((byte) (-123), mutableInt0.byteValue());
      assertEquals("-2146099835", mutableInt0.toString());
      assertEquals((-2146099835), (int)mutableInt0.getValue());
      assertEquals((-2146099835L), mutableInt0.longValue());
      assertEquals((-2146099835), (int)mutableInt0.toInteger());
      assertEquals((-2.14609984E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short)7557, mutableInt0.shortValue());
      assertEquals((-2146099835), mutableInt0.intValue());
      assertEquals((-2.146099835E9), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) integer0);
      assertEquals((-2146098817L), mutableInt0.longValue());
      assertEquals((-2146098817), mutableInt0.intValue());
      assertEquals((-2146098817), (int)mutableInt0.toInteger());
      assertEquals((-2146098817), (int)mutableInt0.getValue());
      assertEquals("-2146098817", mutableInt0.toString());
      assertEquals((byte)127, mutableInt0.byteValue());
      assertEquals((-2.14609882E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2.146098817E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((short)8575, mutableInt0.shortValue());
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2206L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146099835);
      intArray0[1] = (-31);
      intArray0[2] = (-2146099835);
      intArray0[3] = (-31);
      intArray0[4] = (-31);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 9, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2146099835), (-31), (-2146099835), (-31), (-31)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (-4125);
      shortArray0[2] = (short)43;
      shortArray0[3] = (short) (-284);
      shortArray0[4] = (short) (-5812);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)10;
      shortArray0[7] = (short)470;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short)43, (int) (short) (-5812));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) (short)10;
      doubleArray0[3] = (-75.0);
      doubleArray0[4] = (double) (short)470;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 591.85549, (double) (short) (-5812));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 10.0, (-75.0), 470.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((boolean[]) null, (-1581), (-1), (int) (short)10);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), 36, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      ArrayUtils.reverse(byteArray0, 2023, 2023);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)124;
      doubleArray0[3] = (double) 2023;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)124;
      doubleArray0[7] = (double) (byte)124;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 63.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 124.0, 2023.0, (-1.0), (-1.0), 124.0, 124.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 124.0, 2023.0, (-1.0), (-1.0), 124.0, 124.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY, (-2145852943), (-714));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = new Character('D');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('D', (char)character1);
      
      Character character2 = Character.valueOf('u');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('u', (char)character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-148.998));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-148.998)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1775);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1775);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = 1821.9614533255417;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-45), (int) (byte) (-45));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 1413.436);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, false}, booleanArray0));
      
      boolean boolean4 = ArrayUtils.isNotEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1775);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1775);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = 1821.9614533255417;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-45), (int) (byte) (-45));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 1413.436);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-1775.0), 0.0, 0.0, (-1775.0), 0.0, 1821.9614533255417}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[6] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean3 = ArrayUtils.isNotEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.shift((long[]) null, 102, 70, 1940);
      char[] charArray2 = ArrayUtils.subarray(charArray0, 366, 1940);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-601);
      floatArray0[1] = (-855.766F);
      floatArray0[2] = (float) (-601);
      floatArray0[3] = 656.8984F;
      floatArray0[4] = (float) (-601);
      floatArray0[5] = (float) 70;
      floatArray0[6] = (float) (-2146889435);
      floatArray0[7] = (float) (-2146889435);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-601.0F), (-855.766F), (-601.0F), 656.8984F, (-601.0F), 70.0F, (-2.14688947E9F), (-2.14688947E9F)}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-855.766F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-601.0F), (-855.766F), (-601.0F), 656.8984F, (-601.0F), 70.0F, (-2.14688947E9F), (-2.14688947E9F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 101);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      ArrayUtils.shift(charArray0, (-327), 1853, (-327));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Integer integer0 = new Integer((-2342));
      assertNotNull(integer0);
      assertEquals((-2342), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short) (-2342), mutableInt0.shortValue());
      assertEquals((-2342.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-2342), (int)mutableInt0.getValue());
      assertEquals((-2342.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2342), mutableInt0.intValue());
      assertEquals("-2342", mutableInt0.toString());
      assertEquals((-2342), (int)mutableInt0.toInteger());
      assertEquals((-2342L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((-2342));
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      
      int int0 = mutableInt0.addAndGet((Number) integer0);
      assertEquals((short) (-2342), mutableInt0.shortValue());
      assertEquals((-2342.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-2342), (int)mutableInt0.getValue());
      assertEquals((-2342.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2342), mutableInt0.intValue());
      assertEquals("-2342", mutableInt0.toString());
      assertEquals((-2342), (int)mutableInt0.toInteger());
      assertEquals((-2342L), mutableInt0.longValue());
      assertEquals((-2342), int0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((short) (-2342), mutableInt0.shortValue());
      assertEquals((-2342.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-2342), (int)mutableInt0.getValue());
      assertEquals((-2342.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2342), mutableInt0.intValue());
      assertEquals("-2342", mutableInt0.toString());
      assertEquals((-2342), (int)mutableInt0.toInteger());
      assertEquals((-2342L), mutableInt0.longValue());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2342), (int)integer1);
      
      Integer integer2 = new Integer((-2342));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-2342), (int)integer2);
      
      Integer integer3 = new Integer(1500);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1500, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1500, (int)integer4);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertEquals((short) (-2342), mutableInt0.shortValue());
      assertEquals((-2342.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-2342), (int)mutableInt0.getValue());
      assertEquals((-2342.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2342), mutableInt0.intValue());
      assertEquals("-2342", mutableInt0.toString());
      assertEquals((-2342), (int)mutableInt0.toInteger());
      assertEquals((-2342L), mutableInt0.longValue());
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer4));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertEquals((short) (-2342), mutableInt0.shortValue());
      assertEquals((-2342.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-38), mutableInt0.byteValue());
      assertEquals((-2342), (int)mutableInt0.getValue());
      assertEquals((-2342.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2342), mutableInt0.intValue());
      assertEquals("-2342", mutableInt0.toString());
      assertEquals((-2342), (int)mutableInt0.toInteger());
      assertEquals((-2342L), mutableInt0.longValue());
      assertFalse(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer4));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      Integer integer5 = new Integer((-2342));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-2342), (int)integer5);
      
      Integer integer6 = new Integer(1853);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(1853, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (Object) integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, 281L);
      assertNull(longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement((long[]) null, (-2501L));
      assertNull(longArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1775), (int) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(12, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = 'V';
      Integer integer0 = new Integer(2050);
      assertNotNull(integer0);
      assertEquals(2050, (int)integer0);
      
      Integer integer1 = new Integer((byte)3);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) 'J';
      Integer integer2 = new Integer((-1669));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1669), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(11, objectArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(83);
      assertEquals(83, (int)mutableInt0.toInteger());
      assertEquals("83", mutableInt0.toString());
      assertEquals(83, (int)mutableInt0.getValue());
      assertEquals(83, mutableInt0.intValue());
      assertEquals((byte)83, mutableInt0.byteValue());
      assertEquals(83.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(83.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)83, mutableInt0.shortValue());
      assertEquals(83L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) integer0);
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals((-1967), (int)mutableInt0.toInteger());
      assertEquals((-1967), (int)mutableInt0.getValue());
      assertEquals((short) (-1967), mutableInt0.shortValue());
      assertEquals((-1967L), mutableInt0.longValue());
      assertEquals((-1967), mutableInt0.intValue());
      assertEquals((-1967.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1967.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1967", mutableInt0.toString());
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((byte)3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(4403L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(4403L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(4403L);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(4403L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1334L));
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3L, 4403L, 4403L}, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2050;
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1254), 170);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2050, 80, 80}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1136;
      ArrayUtils.shift(shortArray0, 45);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 285;
      floatArray0[1] = (float) (short) (-306);
      floatArray0[2] = (float) 285;
      floatArray0[3] = (float) 45;
      floatArray0[4] = (float) (short)456;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, (int) (short)456);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {285.0F, (-306.0F), 285.0F, 45.0F, 456.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 45;
      longArray0[1] = (long) '\'';
      longArray0[2] = (long) (short) (-3090);
      longArray0[3] = (long) (short) (-306);
      longArray0[4] = (long) '\'';
      longArray0[5] = (long) 45;
      longArray0[6] = (long) '\"';
      longArray0[7] = (long) '\'';
      longArray0[8] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, 3998L, (-3775));
      assertEquals(9, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {45L, 39L, (-3090L), (-306L), 39L, 45L, 34L, 39L, (-1L)}, longArray0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)1136;
      doubleArray0[1] = (double) 285;
      doubleArray0[2] = (double) 3998L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 39L;
      ArrayUtils.shift(doubleArray0, (-2502), (int) (byte)0, (-1));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1136.0, 285.0, 3998.0, (-1.0), 39.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)5;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)5}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)5}, shortArray1);
      
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = (long) (short)5;
      longArray1[2] = (long) 2663;
      longArray1[3] = (long) 2663;
      longArray1[4] = (long) (short)5;
      longArray1[6] = (-27L);
      long[] longArray2 = ArrayUtils.insert((int) (short)5, longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(13, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 5L, 2663L, 2663L, 5L, 0L, (-27L), 0L}, longArray1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-760));
      assertNotNull(integer0);
      assertEquals((-760), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2663);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2663, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2145636850));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-2145636850), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1073741823), Integer.MAX_VALUE);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) integerArray0[0]);
      assertEquals(1, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = Byte.valueOf((byte) (-37));
      assertNotNull(byte0);
      assertEquals((byte) (-37), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-118));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-118), (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)2, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-37));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-37), (byte)byte3);
      
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-118), (byte)2, (byte) (-37)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(1704);
      assertNotNull(integer0);
      assertEquals(1704, (int)integer0);
      
      Integer integer1 = new Integer(83);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(83, (int)integer1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      Integer integer2 = new Integer(160);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(160, (int)integer2);
      
      Object object2 = ArrayUtils.get(objectArray0, 160, (Object) integer2);
      assertEquals(1, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(object2);
      assertEquals(160, object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object2);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)integer1));
      assertNotNull(bitSet0);
      
      Integer integer3 = new Integer((-1918));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1918), (int)integer3);
      
      Integer integer4 = new Integer(160);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)object2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(160, (int)integer4);
      
      Integer integer5 = new Integer(83);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)object2));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(83, (int)integer5);
      
      Integer[] integerArray1 = ArrayUtils.insert(160, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, (-2146350411), 162, (-1022));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 34, 162);
      assertNull(longArray1);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Short short1 = new Short((byte) (-46));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-46), (short)short1);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3309);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-46), (short) (-46)}, shortArray1);
      
      int[] intArray1 = ArrayUtils.insert(117, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = new Integer(3081);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3081, (int)integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      boolean boolean1 = ArrayUtils.isEquals(integer2, integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3081;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2839.96693650205);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3081.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3081.0}, doubleArray1, 0.01);
      
      Integer integer4 = new Integer((-2100));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2100), (int)integer4);
      
      Integer integer5 = Integer.getInteger("Cannot store ", integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = ArrayUtils.isSorted(integerArray0, comparator0);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (-1558.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1558.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[4] = (byte)16;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 132);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)0, (byte)0, (byte)0, (byte)124}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY, 81, (-3112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character character1 = new Character('|');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('|', (char)character1);
      
      Character character2 = Character.valueOf('<');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('<', (char)character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1203.86263818991;
      doubleArray0[1] = (double) 81;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)16);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {16.0, 1203.86263818991, 81.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1203.86263818991, 81.0, (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2516L;
      longArray0[1] = 2248L;
      longArray0[2] = (-5399L);
      int int0 = ArrayUtils.indexOf(longArray0, (-5399L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2516L, 2248L, (-5399L)}, longArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', '\u0000'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = (double) 121;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 127;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)0, 41);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {121.0, 121.0, 10.0, 83.0, 10.0, 0.0, 127.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 10);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {10, 10}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\"';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\'', '\"'}, charArray0);
      assertArrayEquals(new char[] {'\'', '\"'}, charArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)456;
      shortArray0[1] = (short)1136;
      ArrayUtils.shift(shortArray0, 13);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)456, (short)1136, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0, 285);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '\"';
      longArray0[1] = (long) (short) (-3090);
      longArray0[2] = (long) '\"';
      longArray0[3] = (long) (short) (-306);
      longArray0[4] = (long) 285;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) '\"';
      longArray0[7] = (long) 1;
      longArray0[8] = (long) (short)456;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-3090), 1);
      assertEquals(9, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {34L, (-3090L), 34L, (-306L), 285L, 0L, 34L, 1L, 456L}, longArray0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      ArrayUtils.shift(shortArray0, 117, (-1), (-1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146905745);
      intArray0[1] = (-2146758635);
      intArray0[2] = 1;
      intArray0[3] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, (-2146758635), 1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2146905745), (-2146758635), 1, 1}, intArray0);
      assertEquals(1, int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = (boolean) boolean1;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 1769);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray1.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true}, booleanArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[3];
      boolean boolean1 = ArrayUtils.isSameType(objectArray0[1], objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean3);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 0, (-903));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-903), 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2757);
      Integer integer0 = Integer.getInteger("\"G.6", (-241));
      assertNotNull(integer0);
      assertEquals((-241), (int)integer0);
      
      Integer integer1 = new Integer((-241));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-241), (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByKey();
      assertSame(comparator2, comparator0);
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 5);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry0, (-2757));
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = new BitSet(0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((char[]) null);
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1715));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-127));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = ':';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'd');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'d', 'F', ':', 'F', 'F', 'F', 'F'}, charArray1);
      assertArrayEquals(new char[] {'F', ':', 'F', 'F', 'F', 'F'}, charArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) 'F';
      doubleArray0[3] = (double) 97L;
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) 'F';
      doubleArray0[6] = (double) ':';
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {70.0, (-1.0), 70.0, 97.0, (-1.0), 70.0, 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {70.0, (-1.0), 70.0, 97.0, (-1.0), 70.0, 58.0}, doubleArray1, 0.01);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new long[] {97L, 97L}, longArray2);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (float) 97);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {97.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-95);
      intArray0[1] = (-95);
      intArray0[2] = (-95);
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-95), (-95), (-95)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 6, (-95));
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-95);
      doubleArray0[1] = (double) 1592;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 5037.2262261735;
      doubleArray0[4] = (double) 91;
      doubleArray0[5] = (double) (-95);
      ArrayUtils.shift((short[]) null, 91, 2440, 2);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.shift(doubleArray0, (-2146713821), 12, 1119);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1592.0, 91.0, 5037.2262261735, 91.0, (-95.0), 0.0, (-95.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-1418), (-3933));
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean3);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3933);
      intArray1[1] = (-22);
      intArray1[2] = (-22);
      intArray1[3] = (-3933);
      intArray1[4] = (-1418);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, (-2034), (-3933));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2034, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = Float.valueOf(1777.769F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1777.769F, (float)float1, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      floatArray0[3] = 1777.769F;
      floatArray0[4] = 1777.769F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1777.769F;
      floatArray1[1] = 1777.769F;
      floatArray1[2] = 1859.096F;
      floatArray1[3] = 1777.769F;
      floatArray1[4] = 1777.769F;
      floatArray1[5] = 1777.769F;
      floatArray1[6] = 1777.769F;
      floatArray1[7] = 1777.769F;
      floatArray1[8] = 1777.769F;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 1694.0426F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 1859.096F, 1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 1859.096F, 1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F, 1777.769F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)929);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, 2147107581);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147107581, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = 1L;
      longArray0[3] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, (long) 2, Integer.MAX_VALUE);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 1L, 2L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) 2L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2L, 1665, 5709.38);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.7, 2.0}, doubleArray0, 0.01);
      assertEquals(1, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-50.52971), 1, (-50.52971));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.7, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2906, (int) (short)2906);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2906, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.getInteger("", 8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)2906);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2906, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)2906, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short)2906;
      longArray0[2] = (long) (short)2906;
      longArray0[3] = (long) (short)2906;
      longArray0[4] = 0L;
      longArray0[5] = (long) (-1135);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2906L, 2906L, 2906L, 0L, (-1135L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 653, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2906L, 2906L, 2906L, 0L, (-1135L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'K';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'K', '\u0000'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '-';
      longArray0[2] = (long) 'K';
      ArrayUtils.shift(longArray0, (-38), 22, 3022);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {75L, 63L, 45L}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-126);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-126)}, byteArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte)103, 3022);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {75L, 63L, 45L}, longArray0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer(3315);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3315, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertEquals("3315", string0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1), (int) (short)0);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Short[] shortArray2 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'S');
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, (-170.3972163179231));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1), (-970));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-2617), (-2617));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      int int0 = (-2472);
      ArrayUtils.reverse((short[]) null, 16, (-2472));
      int int1 = (-1092);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1092);
      intArray0[1] = (int) (short)454;
      int int2 = 1;
      ArrayUtils.swap(intArray0, 1, 454, (-1092));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1092), 454}, intArray0);
      
      int int3 = (-1658);
      Integer integer0 = new Integer((-1658));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertNotNull(integer0);
      assertEquals((-1658), (int)integer0);
      
      Integer integer1 = new Integer((-483));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int3));
      assertNotNull(integer1);
      assertEquals((-483), (int)integer1);
      
      int int4 = 2260;
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 2260);
      assertNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1092);
      int int5 = ArrayUtils.lastIndexOf(doubleArray0, 2460.0, (-1), (-6.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertArrayEquals(new double[] {1.0, (-1092.0)}, doubleArray0, 0.01);
      assertEquals((-1), int5);
      
      Integer integer2 = Integer.getInteger("zV2S\"m69PAU");
      assertNull(integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)80);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, (-1814L), (int) (byte)80);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2L, 2L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)80;
      doubleArray0[1] = (-1029.5);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2L, 2, (double) (-1814L));
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {80.0, (-1029.5)}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1L);
      doubleArray1[3] = (-2400.0);
      doubleArray1[4] = (double) (byte)80;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (byte)80;
      doubleArray1[7] = (double) (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 100.0, 1665, 100.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2.0, (-1.0), (-1.0), (-2400.0), 80.0, (-1.0), 80.0, (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)987);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(14);
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Integer integer1 = new Integer(121);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      Integer integer2 = new Integer((short)987);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(987, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)120;
      Integer integer3 = new Integer((byte)120);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(120, (int)integer3);
      
      Integer integer4 = new Integer((byte)120);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(120, (int)integer4);
      
      Integer integer5 = new Integer(108);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(108, (int)integer5);
      
      MutableInt mutableInt0 = new MutableInt(2145113356);
      assertEquals(2.14511334E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2145113356, mutableInt0.intValue());
      assertEquals(2145113356, (int)mutableInt0.getValue());
      assertEquals((short) (-10996), mutableInt0.shortValue());
      assertEquals(2145113356, (int)mutableInt0.toInteger());
      assertEquals(2.145113356E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals("2145113356", mutableInt0.toString());
      assertEquals(2145113356L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) byte0);
      assertEquals((-126L), mutableInt1.longValue());
      assertEquals((-126.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-126), mutableInt1.shortValue());
      assertEquals((-126.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-126", mutableInt1.toString());
      assertEquals((-126), mutableInt1.intValue());
      assertEquals((byte) (-126), mutableInt1.byteValue());
      assertEquals((-126), (int)mutableInt1.getValue());
      assertEquals((-126), (int)mutableInt1.toInteger());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      mutableInt1.add((Number) integer1);
      assertEquals((-5), mutableInt1.intValue());
      assertEquals((-5.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-5), (int)mutableInt1.toInteger());
      assertEquals((-5), (int)mutableInt1.getValue());
      assertEquals((byte) (-5), mutableInt1.byteValue());
      assertEquals((-5.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-5), mutableInt1.shortValue());
      assertEquals("-5", mutableInt1.toString());
      assertEquals((-5L), mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer6 = mutableInt1.getValue();
      assertEquals((-5), mutableInt1.intValue());
      assertEquals((-5.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-5), (int)mutableInt1.toInteger());
      assertEquals((-5), (int)mutableInt1.getValue());
      assertEquals((byte) (-5), mutableInt1.byteValue());
      assertEquals((-5.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-5), mutableInt1.shortValue());
      assertEquals("-5", mutableInt1.toString());
      assertEquals((-5L), mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals((-5), (int)integer6);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals(2.14511334E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2145113356, mutableInt0.intValue());
      assertEquals(2145113356, (int)mutableInt0.getValue());
      assertEquals((short) (-10996), mutableInt0.shortValue());
      assertEquals(2145113356, (int)mutableInt0.toInteger());
      assertEquals(2.145113356E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals("2145113356", mutableInt0.toString());
      assertEquals(2145113356L, mutableInt0.longValue());
      assertEquals(2145113356L, mutableInt2.longValue());
      assertEquals(2.14511334E9F, mutableInt2.floatValue(), 0.01F);
      assertEquals(2145113356, mutableInt2.intValue());
      assertEquals(2145113356, (int)mutableInt2.toInteger());
      assertEquals((short) (-10996), mutableInt2.shortValue());
      assertEquals(2145113356, (int)mutableInt2.getValue());
      assertEquals("2145113356", mutableInt2.toString());
      assertEquals((byte)12, mutableInt2.byteValue());
      assertEquals(2.145113356E9, mutableInt2.doubleValue(), 0.01);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      int int0 = mutableInt0.compareTo(mutableInt0);
      assertEquals(2.14511334E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2145113356, mutableInt0.intValue());
      assertEquals(2145113356, (int)mutableInt0.getValue());
      assertEquals((short) (-10996), mutableInt0.shortValue());
      assertEquals(2145113356, (int)mutableInt0.toInteger());
      assertEquals(2.145113356E9, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals("2145113356", mutableInt0.toString());
      assertEquals(2145113356L, mutableInt0.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertEquals(0, int0);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int) 127, (int) 987);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Short[] shortArray0 = new Short[20];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2));
      assertEquals(20, shortArray0.length);
      assertEquals(20, shortArray1.length);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertEquals(20, shortArray0.length);
      assertEquals(20, shortArray2.length);
      assertNotNull(shortArray2);
      
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (int)  (-2), 3);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, "org.apache.commons.lang3.builder.ToStringStyle");
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (-3226L), 2);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1027.6), 1665, (double) 2);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-2400.0), (-1), 2.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Y');
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-379L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, 1L);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      ArrayUtils.reverse(shortArray0, 2, (-2472));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-363), (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)454;
      intArray0[1] = (int) (short) (-363);
      intArray0[2] = (int) (short) (-363);
      intArray0[3] = (-1092);
      intArray0[4] = 2;
      intArray0[5] = (-4479);
      intArray0[6] = (int) (short) (-363);
      intArray0[7] = 2;
      ArrayUtils.swap(intArray0, (-363), 2, (-363));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {454, (-363), (-363), (-1092), 2, (-4479), (-363), 2}, intArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(36);
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) (-4479);
      integerArray0[3] = (Integer) (-363);
      Integer integer1 = new Integer((-4479));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-4479), (int)integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) (-363);
      integerArray0[6] = (Integer) (-363);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) (short)454);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {36, 2, (-4479), (-363), (-4479), (-363), (-363)}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-4479), (-363), 0.7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 926;
      intArray0[1] = 325;
      intArray0[2] = (-777);
      intArray0[3] = 686;
      intArray0[4] = 1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-777));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {926, 325, (-777), 686, 1}, intArray0);
      assertArrayEquals(new int[] {(-777), 926, 325, (-777), 686, 1}, intArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '\'';
      charArray0[3] = '?';
      charArray0[4] = '9';
      charArray0[5] = 'K';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', 'K', '\'', '?', '9', 'K'}, charArray1);
      assertArrayEquals(new char[] {'9', 'K', '\'', '?', '9', 'K'}, charArray0);
      
      ArrayUtils.shift((long[]) null, (-2146615591), (-2364), 1);
      char[] charArray2 = ArrayUtils.subarray(charArray1, 2147016261, (-777));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'9', 'K', '\'', '?', '9', 'K'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'9', 'K', '\'', '?', '9', 'K'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = 'G';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '?', '?', '?', 'G'}, charArray0);
      assertArrayEquals(new char[] {'?', '?', '?', '?', 'G'}, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'G';
      intArray0[1] = Integer.MIN_VALUE;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 71, 13);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {71, Integer.MIN_VALUE}, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-121), 16);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      Character character1 = new Character('?');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('?', (char)character1);
      
      Character character2 = Character.valueOf('2');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('2', (char)character2);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-965.0F);
      floatArray1[1] = (float) '?';
      floatArray1[2] = (float) '2';
      floatArray1[3] = (float) 71;
      floatArray1[4] = (-3013.8F);
      floatArray1[5] = (float) (-121);
      floatArray1[6] = (float) 71;
      floatArray1[7] = (float) '?';
      floatArray1[8] = (-413.54F);
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-965.0F), 63.0F, 50.0F, 71.0F, (-3013.8F), (-121.0F), 71.0F, 63.0F, (-413.54F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 5116L;
      longArray0[2] = 1905L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1234L);
      longArray0[5] = 2967L;
      longArray0[6] = 0L;
      longArray0[7] = 1263L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {5116L, 0L, 1905L, (-1L), (-1234L), 2967L, 0L, 1263L}, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 0L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'S');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 1773.8831667999998);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean0 = Boolean.valueOf("Zp^`UE1E/8^\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 567;
      intArray0[1] = 3;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {567, 3}, intArray0);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 567;
      longArray0[1] = (long) 567;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2239);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {567L, 567L, (-1L), 3L, 3L}, longArray0);
      assertArrayEquals(new long[] {567L, 567L, (-1L), 3L, 3L}, longArray1);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-5399L);
      longArray0[1] = 97L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5399L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-5399L));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 0, 324);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-5399L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray1);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray2);
      
      Short short0 = new Short((short)125);
      assertNotNull(short0);
      assertEquals((short)125, (short)short0);
      
      Short short1 = new Short((short)35);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)35, (short)short1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)0;
      shortArray2[1] = short0;
      shortArray2[2] = short1;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) (-3177));
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(3, shortArray3.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)125, (short)35}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2179L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {2179L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '?';
      Object object0 = ArrayUtils.get(objectArray0, (-747));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(objectArray0, 107, 2088);
      assertEquals(1, objectArray0.length);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 2088, 89);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'K';
      charArray2[1] = '?';
      charArray2[2] = '9';
      charArray2[3] = '?';
      char[] charArray3 = ArrayUtils.addAll(charArray2, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertEquals(4, charArray2.length);
      assertEquals(8, charArray3.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'K', '?', '9', '?'}, charArray2);
      assertArrayEquals(new char[] {'K', '?', '9', '?', 'K', '?', '9', '?'}, charArray3);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-848L);
      longArray0[1] = (-848L);
      longArray0[3] = (-219L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1527L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-848L), (-848L), 0L, (-219L)}, longArray0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((-219L));
      assertEquals((-219), (int)mutableInt0.toInteger());
      assertEquals((-219), (int)mutableInt0.getValue());
      assertEquals((-219L), mutableInt0.longValue());
      assertEquals((-219.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)37, mutableInt0.byteValue());
      assertEquals((-219.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-219), mutableInt0.shortValue());
      assertEquals((-219), mutableInt0.intValue());
      assertEquals("-219", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((-1));
      assertEquals("-218", mutableInt0.toString());
      assertEquals((byte)38, mutableInt0.byteValue());
      assertEquals((-218), (int)mutableInt0.getValue());
      assertEquals((-218), (int)mutableInt0.toInteger());
      assertEquals((-218L), mutableInt0.longValue());
      assertEquals((-218), mutableInt0.intValue());
      assertEquals((short) (-218), mutableInt0.shortValue());
      assertEquals((-218.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-218.0F), mutableInt0.floatValue(), 0.01F);
      
      MutableInt mutableInt1 = new MutableInt(2142);
      assertEquals(2142.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2142, mutableInt1.intValue());
      assertEquals(2142L, mutableInt1.longValue());
      assertEquals(2142.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2142", mutableInt1.toString());
      assertEquals((short)2142, mutableInt1.shortValue());
      assertEquals((byte)94, mutableInt1.byteValue());
      assertEquals(2142, (int)mutableInt1.getValue());
      assertEquals(2142, (int)mutableInt1.toInteger());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int1 = mutableInt1.addAndGet((Number) 0L);
      assertEquals(2142.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2142, mutableInt1.intValue());
      assertEquals(2142L, mutableInt1.longValue());
      assertEquals(2142.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2142", mutableInt1.toString());
      assertEquals((short)2142, mutableInt1.shortValue());
      assertEquals((byte)94, mutableInt1.byteValue());
      assertEquals(2142, (int)mutableInt1.getValue());
      assertEquals(2142, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(2142, int1);
      
      Integer integer1 = mutableInt1.toInteger();
      assertEquals(2142.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2142, mutableInt1.intValue());
      assertEquals(2142L, mutableInt1.longValue());
      assertEquals(2142.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2142", mutableInt1.toString());
      assertEquals((short)2142, mutableInt1.shortValue());
      assertEquals((byte)94, mutableInt1.byteValue());
      assertEquals(2142, (int)mutableInt1.getValue());
      assertEquals(2142, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2142, (int)integer1);
      
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-848L), 0L, (-219L), (-848L)}, longArray0);
      
      ArrayUtils.reverse(longArray0, (-1450), 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-848L), 0L, (-219L), (-848L)}, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1078);
      shortArray0[2] = (short) (-1078);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 185.9F;
      floatArray0[1] = (float) (-848L);
      floatArray0[2] = 2529.032F;
      floatArray0[3] = (-1.0F);
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(4, floatArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new float[] {185.9F, (-848.0F), 2529.032F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-618));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-618), 0, 0, 0, 0, 0}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '9';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '9', '9', '?', '?', '9'}, charArray1);
      assertArrayEquals(new char[] {'?', '9', '9', '?', '?', '9'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long long0 = mockRandom1.nextLong();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)64);
      assertNull(byteArray0);
      
      ArrayUtils.shift(shortArray0, (-167), (int) (short)0, 0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-95));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long long0 = 2244L;
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (byte)11, (long) (byte)11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-95);
      intArray0[1] = (-95);
      intArray0[2] = (-95);
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-95), (-95), (-95)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 6, (-95));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-95);
      doubleArray0[1] = (double) 1592;
      doubleArray0[2] = (double) 91;
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'a', 'K', 'K', '?'}, charArray1);
      assertArrayEquals(new char[] {'a', 'K', 'K', '?'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 'K');
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-5399L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-95);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-95);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)62, (byte)62, (byte) (-1), (byte) (-1), (byte)62, (byte) (-95)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray1);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (byte) (-1));
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1605.3094F);
      doubleArray0[3] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1105);
      longArray0[1] = 5311L;
      longArray0[2] = (long) (short) (-1105);
      longArray0[3] = (-3063L);
      longArray0[4] = (long) (short) (-1105);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1105L), 5311L, (-1105L), (-3063L), (-1105L)}, longArray0);
      
      boolean boolean3 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(boolean3);
      
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {(-1605.3094482421875), 0.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (-3063L), 3300);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      
      boolean boolean4 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)987);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(14);
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Integer integer1 = new Integer(121);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      Integer integer2 = new Integer((short)987);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(987, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)41);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray1);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short)987, (short)0, (short)0}, shortArray0);
      
      Integer integer3 = Integer.getInteger(".*{[0-9]+}.*");
      assertNull(integer3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer2);
      assertEquals(1, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short) (-1455));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)987, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1455), (short)987, (short)0, (short)0}, shortArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)127, (byte)120, (byte) (-126), (byte)120, (byte) (-126)}, byteArray1);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(boolean1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[2], (int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertEquals(0, int0);
      
      BitSet bitSet0 = new BitSet(261);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(320, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (int)integerArray0[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'o';
      charArray0[2] = 'e';
      charArray0[3] = '3';
      charArray0[4] = '@';
      charArray0[5] = 'p';
      charArray0[6] = 't';
      charArray0[7] = 'M';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'k');
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {' ', 'o', 'e', '3', '@', 'p', 't', 'M'}, charArray0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[2], (int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertEquals(0, int0);
      
      BitSet bitSet0 = new BitSet(261);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(320, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (int)integerArray0[2];
      floatArray0[2] = (float) (int)integerArray0[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'o';
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte byte1 = new Byte((byte)60);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)60, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      
      Long long0 = new Long(101);
      assertNotNull(long0);
      assertEquals(101L, (long)long0);
      
      Long long1 = new Long(101);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(101L, (long)long1);
      
      Long[] longArray0 = new Long[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      short short0 = (short)10;
      Float float0 = new Float((float) (short)10);
      assertNotNull(float0);
      assertEquals(10.0F, (float)float0, 0.01F);
      
      int int0 = 2146608298;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146608298, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146608298, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[3];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      ArrayUtils.shift(longArray0, 0, 2329, 0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-660), 1350);
      assertNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.swap(intArray0, (-4049), 127, 1861);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean4 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-1394), object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)0}, byteArray2);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      ArrayUtils.swap(doubleArray0, 1, (-1394));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (double) integerArray0[0]);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean3 = ArrayUtils.isNotEmpty(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-1394);
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (-658.215F);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (byte) (-45);
      floatArray0[6] = (float) (byte) (-45);
      floatArray0[7] = 3049.2078F;
      floatArray0[8] = (float) (byte) (-45);
      ArrayUtils.swap(floatArray0, 0, (int) integerArray0[0], Integer.MAX_VALUE);
      assertSame(integerArray0, integerArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1394.0F), 2.14748365E9F, (-658.215F), 1.0F, (-45.0F), (-45.0F), 3049.2078F, (-45.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, (int) (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift((float[]) null, (-191));
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-38));
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      float[] floatArray0 = new float[19];
      ArrayUtils.shift(floatArray0, (-2659));
      assertEquals(19, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[17];
      longArray0[0] = (-1L);
      longArray0[6] = (long) 'v';
      longArray0[2] = (-1L);
      longArray0[3] = (long) ':';
      longArray0[5] = (long) 0;
      longArray0[6] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(17, longArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 58L;
      floatArray0[3] = (float) 58L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 1333.0F;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {118.0F, 0.0F, 58.0F, 58.0F, 0.0F, 0.0F, 1333.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[24];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short) (-1742);
      shortArray0[2] = (short) (-1133);
      shortArray0[2] = (short)21028;
      shortArray0[4] = (short)36;
      ArrayUtils.shift(floatArray1, (int) (short)18688);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {118.0F, 0.0F, 58.0F, 58.0F, 0.0F, 0.0F, 1333.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'S');
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2484);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 4363;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-488);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-563));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2484), Integer.MAX_VALUE, 4363, Integer.MAX_VALUE, (-488)}, intArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, 1627);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) Integer.MAX_VALUE;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 2147483647L);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, stringArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotNull(stringArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2484);
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2484), 85, (-2484));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 85, (-6575));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2484), 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1286));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1046));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1046, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-4068), 11, (-4068));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2978.669));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2978.669F), (float)float1, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 118, 24, (-2308));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      Integer integer0 = new Integer(118);
      assertNotNull(integer0);
      assertEquals(118, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, 0);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(118, (int)integer1);
      
      ArrayUtils.hashCode((Object) integer1);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(118, charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 8, (-2145852935));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((-1116));
      assertNotNull(integer0);
      assertEquals((-1116), (int)integer0);
      
      Integer integer1 = new Integer((short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      long[] longArray0 = new long[19];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      Integer integer2 = new Integer(10);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      
      Integer integer3 = new Integer((short)0);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer(4440);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(4440, (int)integer4);
      
      MutableInt mutableInt0 = new MutableInt(1734);
      assertEquals(1734.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1734, mutableInt0.intValue());
      assertEquals(1734, (int)mutableInt0.toInteger());
      assertEquals(1734, (int)mutableInt0.getValue());
      assertEquals(1734L, mutableInt0.longValue());
      assertEquals(1734.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1734", mutableInt0.toString());
      assertEquals((short)1734, mutableInt0.shortValue());
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(4);
      assertEquals("4", mutableInt1.toString());
      assertEquals(4, mutableInt1.intValue());
      assertEquals(4.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(4L, mutableInt1.longValue());
      assertEquals(4.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)4, mutableInt1.byteValue());
      assertEquals(4, (int)mutableInt1.toInteger());
      assertEquals((short)4, mutableInt1.shortValue());
      assertEquals(4, (int)mutableInt1.getValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt1.incrementAndGet();
      assertEquals(5L, mutableInt1.longValue());
      assertEquals("5", mutableInt1.toString());
      assertEquals(5, mutableInt1.intValue());
      assertEquals(5.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(5.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)5, mutableInt1.byteValue());
      assertEquals(5, (int)mutableInt1.getValue());
      assertEquals(5, (int)mutableInt1.toInteger());
      assertEquals((short)5, mutableInt1.shortValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(5, int0);
      
      int int1 = mutableInt0.compareTo(mutableInt1);
      assertEquals(1734.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1734, mutableInt0.intValue());
      assertEquals(1734, (int)mutableInt0.toInteger());
      assertEquals(1734, (int)mutableInt0.getValue());
      assertEquals(1734L, mutableInt0.longValue());
      assertEquals(1734.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1734", mutableInt0.toString());
      assertEquals((short)1734, mutableInt0.shortValue());
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals(5L, mutableInt1.longValue());
      assertEquals("5", mutableInt1.toString());
      assertEquals(5, mutableInt1.intValue());
      assertEquals(5.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(5.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)5, mutableInt1.byteValue());
      assertEquals(5, (int)mutableInt1.getValue());
      assertEquals(5, (int)mutableInt1.toInteger());
      assertEquals((short)5, mutableInt1.shortValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Integer integer5 = mutableInt1.getValue();
      assertEquals(5L, mutableInt1.longValue());
      assertEquals("5", mutableInt1.toString());
      assertEquals(5, mutableInt1.intValue());
      assertEquals(5.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(5.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)5, mutableInt1.byteValue());
      assertEquals(5, (int)mutableInt1.getValue());
      assertEquals(5, (int)mutableInt1.toInteger());
      assertEquals((short)5, mutableInt1.shortValue());
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(5, (int)integer5);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3293);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertSame(intArray1, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2400);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2400)}, shortArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-529);
      doubleArray2[1] = (double) (-529);
      doubleArray2[2] = (double) (byte)11;
      doubleArray2[3] = (-2473.89892452858);
      doubleArray2[4] = (double) (short) (-2400);
      doubleArray2[5] = (double) (byte) (-95);
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 11.0, 696);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-529.0), (-529.0), 11.0, (-2473.89892452858), (-2400.0), (-95.0)}, doubleArray2, 0.01);
      assertEquals(2, int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Integer integer0 = new Integer(17);
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      Integer integer1 = new Integer((-1116));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1116), (int)integer1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3210;
      shortArray0[1] = (short) (byte)120;
      shortArray0[2] = (short)3210;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)3210);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3210, (short)120, (short)3210}, shortArray0);
      assertArrayEquals(new short[] {(short)120, (short)3210}, shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)3210;
      longArray0[1] = (long) (-1116);
      longArray0[2] = (long) 17;
      longArray0[3] = (long) (short)3210;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)120, 17);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {3210L, (-1116L), 17L, 3210L}, longArray0);
      
      ArrayUtils.reverse(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3210, (short)120, (short)3210}, shortArray0);
      assertArrayEquals(new short[] {(short)3210, (short)120}, shortArray1);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3210L, (-1116L), 17L, 3210L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3210, (short)120, (short)3210}, shortArray0);
      assertArrayEquals(new short[] {(short)3210, (short)120}, shortArray1);
      assertFalse(boolean0);
      
      ArrayUtils.shift(byteArray0, (int) (short) (-3652));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3652);
      intArray0[1] = (int) (short)3210;
      intArray0[2] = (int) (short)3210;
      intArray0[3] = (-1116);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3210, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2545.12);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 4262.0;
      doubleArray0[3] = (-2397.18449);
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 483.94445657, 2587.6095);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2545.12), 1.5, 4262.0, (-2397.18449), 1.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 148L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {148.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2002.309766));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2002.309766), (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 148.0;
      doubleArray1[2] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 148.0, 1.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) 'S';
      intArray0[2] = 1;
      intArray0[3] = (int) 'r';
      intArray0[4] = 2;
      intArray0[5] = (int) '_';
      ArrayUtils.shift(intArray0, (int) (byte)0, 1114111, 1974);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {95, 83, 1, 114, 2, 95}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1229));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), (int) (short)56, (-2146905745));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, 3279);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-386.6F));
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)65;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3, (byte)121, (byte)65}, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1775));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1775)}, intArray1);
      
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      String string0 = "no";
      try { 
        Integer.valueOf("no", (-1775));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1775 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 0, (-203));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1091.9831668;
      doubleArray0[1] = (double) (-203);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1592, 0, (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1091.9831668, (-203.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[0] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(0.0F, 0.0F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      Integer integer1 = new Integer((-1689));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1689), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 765);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2146615942L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-2146615942L);
      longArray1[1] = (Long) (-2146615942L);
      longArray1[2] = (Long) (-2146615942L);
      longArray1[3] = (Long) (-2146615942L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 1681L);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2146615942L), (-2146615942L), (-2146615942L), (-2146615942L)}, longArray2);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'A');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
      
      ArrayUtils.shift((char[]) null, 727);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) 97;
      floatArray0[2] = (float) 97;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 2692.094F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2692.094F, 97.0F, 97.0F, 97.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'X';
      charArray0[2] = ']';
      charArray0[3] = '?';
      charArray0[4] = '!';
      charArray0[5] = 'u';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'u', '!', '?', ']', 'X', '5'}, charArray0);
      
      ArrayUtils.shift((char[]) null, (-1715));
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, (Integer) null);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      
      Float[] floatArray1 = new Float[2];
      Float float0 = Float.valueOf((-487.2F));
      assertNotNull(float0);
      assertEquals((-487.2F), (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float((float) floatArray1[0]);
      assertEquals(2, floatArray1.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-487.2F), (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-487.2F), (-487.2F)}, floatArray2, 0.01F);
      
      byte byte1 = (byte)37;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)37);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) floatArray1, 2652, 121, (-1));
      assertEquals(2, floatArray1.length);
      
      Integer integer1 = new Integer(121);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (int) 37, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2757);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-2757), (-1), 78);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2757.0), (-1.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 78);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer(78);
      assertNotNull(integer0);
      assertEquals(78, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(78, object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 78, (-1), (-1983.488));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-2757.0), (-1.0)}, doubleArray0, 0.01);
      
      Integer integer1 = new Integer((-2146928001));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146928001), (int)integer1);
      
      Integer integer2 = new Integer(79);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      assertEquals(79, (int)integer2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '\\';
      charArray0[2] = 'I';
      charArray0[3] = 'v';
      int int0 = ArrayUtils.indexOf(charArray0, 'v', 79);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'', '\\', 'I', 'v'}, charArray0);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer[] integerArray0 = ArrayUtils.clone((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3111;
      ArrayUtils.shift((short[]) null, Integer.MAX_VALUE, 5, 3111);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 3111;
      longArray0[2] = (long) 91;
      longArray0[3] = (long) 1592;
      longArray0[4] = (long) 91;
      longArray0[5] = (long) 91;
      longArray0[6] = (long) 3111;
      longArray0[7] = (long) 5;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, 3111L, 91L, 1592L, 91L, 91L, 3111L, 5L}, longArray0);
      assertArrayEquals(new long[] {5L, 3111L, 91L, 1592L, 91L, 91L, 3111L, 5L}, longArray1);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '7');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3111L;
      objectArray0[1] = (Object) 91L;
      objectArray0[2] = (Object) 3111L;
      objectArray0[3] = (Object) 91L;
      objectArray0[4] = (Object) 91L;
      objectArray0[5] = (Object) 5L;
      objectArray0[6] = (Object) 91L;
      objectArray0[7] = (Object) 91L;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(objectArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertArrayEquals(new int[] {3111, 3111}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 91, (-730), (-2636));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-95);
      intArray0[1] = (-95);
      intArray0[2] = (-95);
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-95), (-95), (-95)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 6, (-95));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-95);
      doubleArray0[1] = (double) 1592;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 5037.2262261735;
      doubleArray0[4] = (double) 91;
      doubleArray0[5] = (double) (-95);
      doubleArray0[6] = (double) (-95);
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'F');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'F', '-'}, charArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1592.0;
      objectArray0[1] = (Object) 1592.0;
      objectArray0[2] = (Object) 91.0;
      objectArray0[3] = (Object) 91.0;
      objectArray0[4] = (Object) (-95);
      objectArray0[5] = (Object) 1592.0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertNotNull(objectArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-95), (-95), (-95)}, intArray0);
      assertArrayEquals(new int[] {(-95), (-95), (-95), (-95), (-95), (-95)}, intArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1263);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short) (-1008);
      shortArray0[4] = (short)2413;
      shortArray0[5] = (short)2413;
      shortArray0[6] = (short)2413;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1008), (-2050));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1263), (short)4, (short)4, (short) (-1008), (short)2413, (short)2413, (short)2413}, shortArray0);
      assertEquals(3, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Integer integer0 = new Integer(77);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(77, (int)integer0);
      
      Float float0 = new Float((-493.75376872012487));
      assertNotNull(float0);
      assertEquals((-493.75375F), (float)float0, 0.01F);
      
      Float float1 = new Float((-386.7851635241501));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-386.78516F), (float)float1, 0.01F);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Integer integer1 = new Integer(285);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(285, (int)integer1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1, (int) (short)4);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertSame(object0, object1);
      assertNotSame(object0, object2);
      assertNotSame(object1, object2);
      assertSame(object1, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object1.equals((Object)object2));
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, (-108), 1928);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-658.06854F);
      ArrayUtils.shift(floatArray0, 1136);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-658.06854F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)55, (int) (byte)55);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)55;
      intArray0[1] = 1136;
      intArray0[2] = 160;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {55, 1136, 160}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2978.669));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2978.669F), (float)float1, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      floatArray0[3] = 1777.769F;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) float1;
      objectArray0[1] = (Object) float0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertFalse(boolean0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1576.036);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1576.036, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-486.932469));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-486.932469), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, 1576.036, (-486.932469)}, doubleArray1, 0.01);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (double) (-1589);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (-1775);
      doubleArray0[7] = (double) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 63, (double) (byte)0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1589.0), 0.0, 0.0, (-1775.0), 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)76;
      shortArray0[4] = (short)76;
      ArrayUtils.shift(shortArray0, (-3318), (int) (short)76, (-2441));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)76, (short)76, (short)76}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 45;
      intArray0[1] = 3846;
      intArray0[2] = 2;
      intArray0[3] = 18688;
      intArray0[3] = 1;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-971));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {45, 3846, 2, 1, 0}, intArray0);
      assertArrayEquals(new int[] {(-971), 45, 3846, 2, 1, 0}, intArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '6';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', '6'}, charArray0);
      assertArrayEquals(new char[] {'9', '6'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(3846);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 3846);
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {45, 2, 1, 0, 3846}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-70));
      assertNull(byteArray0);
      
      ArrayUtils.shift(shortArray0, 2115903006, 1, 1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1508L;
      longArray0[1] = 0L;
      longArray0[2] = 2751L;
      int int0 = ArrayUtils.indexOf(longArray0, (-454L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1508L, 0L, 2751L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1508L;
      doubleArray0[1] = (double) 1508L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2751L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2145593256), (-113));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1508.0, 1508.0, 0.0, 2751.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray0, (-2145593256), 207, (-1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1508.0, 1508.0, 0.0, 2751.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', '9', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', '9', '?'}, charArray1);
      
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short)1836;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '?';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3613.0), (-309));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 63.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-39));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((-2152));
      assertEquals((-2152), (int)mutableInt0.toInteger());
      assertEquals((-2152), (int)mutableInt0.getValue());
      assertEquals((-2152L), mutableInt0.longValue());
      assertEquals((-2152), mutableInt0.intValue());
      assertEquals((-2152.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-2152), mutableInt0.shortValue());
      assertEquals((-2152.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-104), mutableInt0.byteValue());
      assertEquals("-2152", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((-2152), (int)mutableInt0.toInteger());
      assertEquals((-2152), (int)mutableInt0.getValue());
      assertEquals((-2152L), mutableInt0.longValue());
      assertEquals((-2152), mutableInt0.intValue());
      assertEquals((-2152.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-2152), mutableInt0.shortValue());
      assertEquals((-2152.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-104), mutableInt0.byteValue());
      assertEquals("-2152", mutableInt0.toString());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2152), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-620));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-620), (int)integer3);
      
      integerArray0[3] = integer3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) 0);
      assertEquals(4, integerArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'n';
      charArray0[2] = 'Z';
      charArray0[3] = 'b';
      ArrayUtils.shuffle(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'Z', 'b', ','}, charArray0);
      
      ArrayUtils.shift((Object[]) null, (int) (short) (-1), (-2146905745), (int) (short) (-1));
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {',', 'b', 'Z', 'n'}, charArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)2906);
      assertNotNull(integer0);
      assertEquals(2906, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null);
      assertNull(integer1);
      
      integerArray0[1] = null;
      Integer integer2 = new Integer((short) (-1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(2906, (int)integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer3);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      short[] shortArray0 = new short[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      ArrayUtils.shift((Object[]) null, 65536, 10, 0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1150);
      ArrayUtils.shift(shortArray0, (-1898), (int) (short) (-1150), (int) (short) (-1150));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1150)}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)74;
      shortArray0[2] = (short)2906;
      shortArray0[3] = (short)795;
      shortArray0[4] = (short)59;
      shortArray0[5] = (short) (-3352);
      shortArray0[6] = (short) (-951);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-101));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)74, (short)2906, (short)795, (short)59, (short) (-3352), (short) (-951)}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1150.1853631914594);
      doubleArray0[1] = (double) (short)59;
      doubleArray0[2] = (double) (short)74;
      doubleArray0[3] = (double) (short)795;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)795;
      int int1 = ArrayUtils.indexOf(doubleArray0, 1576.036, (int) (short) (-951));
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1150.1853631914594), 59.0, 74.0, 795.0, 2.0, 795.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 630L;
      longArray0[1] = (-1234L);
      longArray0[2] = 1L;
      longArray0[3] = 103L;
      longArray0[4] = (-2506L);
      longArray0[5] = 3668L;
      longArray0[6] = (-371L);
      int int0 = ArrayUtils.indexOf(longArray0, 3668L, 8192);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {630L, (-1234L), 1L, 103L, (-2506L), 3668L, (-371L)}, longArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'R';
      charArray0[2] = '%';
      charArray0[3] = 'F';
      charArray0[4] = '[';
      charArray0[5] = '>';
      charArray0[6] = '{';
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'F', 'R', '%', 'F', '[', '>', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-427);
      intArray0[1] = 1424;
      intArray0[2] = (-3953);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-427), 1424, (-3953)}, intArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-76);
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)30, (byte) (-82), (byte)17, (byte) (-93), (byte) (-1), (byte) (-93), (byte) (-104)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1424;
      integerArray0[1] = (Integer) (-3953);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1424, (-3953)}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'K';
      charArray0[2] = 'F';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'F');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'@', 'K', 'F'}, charArray0);
      assertArrayEquals(new char[] {'F', '@', 'K', 'F'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("nP%e:", (-45));
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      Integer integer2 = new Integer((-45));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-45), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(3, objectArray0.length);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Object object2 = ArrayUtils.get((Object[]) integerArray0, 166, objectArray0[1]);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(object2.equals((Object)boolean0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(false, object2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, objectArray0[2], 166);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, (Integer) 0);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeAllOccurrences((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'y';
      charArray0[2] = 'W';
      charArray0[3] = 'V';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'V', 1390);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'6', 'y', 'W', 'V'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2978.669));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2978.669F), (float)float1, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      floatArray0[3] = 1777.769F;
      floatArray0[4] = 1777.769F;
      Integer integer0 = new Integer((-4364));
      assertNotNull(integer0);
      assertEquals((-4364), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt(float1);
      assertEquals((-2978.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2978), mutableInt0.intValue());
      assertEquals((-2978.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-2978), mutableInt0.shortValue());
      assertEquals("-2978", mutableInt0.toString());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals((-2978), (int)mutableInt0.toInteger());
      assertEquals((-2978), (int)mutableInt0.getValue());
      assertEquals((-2978L), mutableInt0.longValue());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((-4364));
      assertEquals(1386, (int)mutableInt0.toInteger());
      assertEquals(1386, (int)mutableInt0.getValue());
      assertEquals(1386.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1386, mutableInt0.intValue());
      assertEquals(1386.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1386", mutableInt0.toString());
      assertEquals(1386L, mutableInt0.longValue());
      assertEquals((short)1386, mutableInt0.shortValue());
      assertEquals((byte)106, mutableInt0.byteValue());
      assertEquals((float)float1, (float)float0, 0.01F);
      
      int int0 = mutableInt0.addAndGet((Number) 1777.769F);
      assertEquals("3163", mutableInt0.toString());
      assertEquals(3163, mutableInt0.intValue());
      assertEquals(3163L, mutableInt0.longValue());
      assertEquals((short)3163, mutableInt0.shortValue());
      assertEquals(3163, (int)mutableInt0.getValue());
      assertEquals(3163, (int)mutableInt0.toInteger());
      assertEquals(3163.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3163.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)91, mutableInt0.byteValue());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3163, int0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals("3163", mutableInt0.toString());
      assertEquals(3163, mutableInt0.intValue());
      assertEquals(3163L, mutableInt0.longValue());
      assertEquals((short)3163, mutableInt0.shortValue());
      assertEquals(3163, (int)mutableInt0.getValue());
      assertEquals(3163, (int)mutableInt0.toInteger());
      assertEquals(3163.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3163.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)91, mutableInt0.byteValue());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3163, (int)integer1);
      
      Integer integer2 = new Integer(3163);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3163, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, (Integer) null);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer3 = new Integer(12);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(12, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (Object) abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(2237.9929693833);
      assertNotNull(double0);
      assertEquals(2237.9929693833, (double)double0, 0.01);
      
      Double double1 = new Double(2237.9929693833);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2237.9929693833, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) '_';
      intArray0[3] = (int) '_';
      ArrayUtils.shift(intArray0, (-3352), 1974, 114);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {95, 95, 75, 114}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(363);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Character character0 = new Character('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, 1345, 1345, 1345);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1527L;
      longArray0[1] = 1527L;
      longArray0[2] = (-219L);
      longArray0[3] = 1527L;
      longArray0[4] = 1L;
      longArray0[5] = 1527L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1527L);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1527L, 1527L, (-219L), 1527L, 1L, 1527L}, longArray0);
      assertEquals(5, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1527L;
      doubleArray0[1] = (double) 1527L;
      doubleArray0[2] = (double) 1527L;
      doubleArray0[3] = (double) 1527L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1527L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1527.0, 1527.0, 1527.0, 1527.0, 1.0, 1527.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((boolean[]) null, 0, 0, (-2144550711));
      Integer integer0 = new Integer((-1752));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1752), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-5399L);
      longArray0[1] = 97L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-5399L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-5399L), 97L, (-5399L), 97L}, longArray1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-5399L));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-6792);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-6792)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-6792), (short) (-6792)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-1), booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-6792);
      objectArray0[1] = (Object) (short) (-6792);
      ArrayUtils.shift(objectArray0, (int) (short) (-6792), (-4291), (int) (short) (-6792));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte)0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 731.196F;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte)5;
      boolean boolean2 = ArrayUtils.contains(floatArray0, (float) (byte)0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {731.196F, (-1.0F), (-1.0F), (-1.0F), 5.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)5);
      assertNull(shortArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-1);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (short)5;
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 5.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Integer integer0 = new Integer(1540);
      assertNotNull(integer0);
      assertEquals(1540, (int)integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = ArrayUtils.insert((int) integerArray0[4], (byte[]) null, (byte[]) null);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(9, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Float float0 = new Float((-2978.669));
      assertNotNull(float0);
      assertEquals((-2978.669F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2978.669));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2978.669F), (float)float1, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      floatArray0[3] = 1777.769F;
      floatArray0[4] = 1777.769F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-4364);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4364)}, intArray0);
      assertArrayEquals(new int[] {(-4364)}, intArray1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1, 2);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 120.49764763429336;
      doubleArray0[1] = (double) 1777.769F;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-2286);
      doubleArray0[4] = (double) 1777.769F;
      doubleArray0[5] = (double) 2078;
      doubleArray0[6] = (double) 1777.769F;
      doubleArray0[7] = (double) 4;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1465.42034), (double) 1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {120.49764763429336, 1777.76904296875, 1.0, (-2286.0), 1777.76904296875, 2078.0, 1777.76904296875, 4.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.insert((-2347), (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '9', '9', '?', '?', '?'}, charArray1);
      assertArrayEquals(new char[] {'?', '9', '9', '?', '?', '?'}, charArray0);
      
      short[] shortArray2 = ArrayUtils.remove(shortArray0, 0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 818, (-1158));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      intArray0[0] = 0;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short) (-1115), (-2347), 92);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2437;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 2437L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 2437L}, longArray1);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-1), 7, (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)58, 476);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)85, (byte)9, (byte)58, (byte)0}, byteArray0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 't';
      charArray0[2] = 'Z';
      charArray0[3] = '1';
      ArrayUtils.swap(charArray0, 1, 1, 1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'u', 't', 'Z', '1'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '1';
      intArray0[1] = 1;
      intArray0[2] = (int) '1';
      intArray0[3] = 2146615942;
      intArray0[4] = (int) 'u';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {49, 1, 49, 2146615942, 117}, intArray1);
      assertArrayEquals(new int[] {49, 1, 49, 2146615942, 117}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-248L);
      longArray0[1] = (long) 'u';
      longArray0[2] = (long) 49;
      longArray0[3] = 870L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 2491);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2491, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-980.9638549);
      doubleArray0[3] = (-2473.89892452858);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-980.9638549), (-2473.89892452858), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-980.9638549), (-2473.89892452858), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 2388);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-1.0);
      doubleArray2[1] = (Double) (-2473.89892452858);
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray3.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1.0), (-2473.89892452858)}, doubleArray3, 0.01);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-427);
      intArray0[1] = 1424;
      intArray0[2] = (-3953);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-427), 1424, (-3953)}, intArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 90.315246);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3953));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-427), 1424, (-3953)}, intArray0);
      assertEquals(2, int0);
      
      ArrayUtils.shift((double[]) null, (-2496));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)111;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)24, (byte)0, (byte)100, (byte)111}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)100;
      longArray0[1] = (long) (-427);
      ArrayUtils.shift(longArray0, (int) (byte)0, 71, (-3953));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-427L), 100L}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)100;
      shortArray0[2] = (short) (byte)100;
      shortArray0[3] = (short) (byte)111;
      ArrayUtils.swap(shortArray0, 2, (int) (byte)0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)100, (short)0, (short)111}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1707.65763035001);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 3187L);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 799.044464, 132.7296931, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
      
      short[] shortArray0 = new short[5];
      ArrayUtils.swap(shortArray0, (-1706), (int) (short)0, 6);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[0];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)31;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("+g/&");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0, (int) (short)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.class;
      Class<Integer> class2 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      classArray0[0] = class0;
      classArray0[1] = class2;
      classArray0[2] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1135.6476447953773));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1135.6476447953773), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (byte)0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals(6, objectArray0.length);
      assertNotNull(object0);
      assertEquals('I', object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      ArrayUtils.shift(objectArray0, (-1566), 2, (-1566));
      assertEquals(6, objectArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, (char) character0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      ArrayUtils.swap(charArray0, (-354), (int) (byte)0, (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '@';
      objectArray0[1] = (Object) ' ';
      objectArray0[2] = (Object) ' ';
      objectArray0[3] = (Object) ' ';
      objectArray0[4] = (Object) '@';
      ArrayUtils.shift(objectArray0, (-354), 1, Integer.MAX_VALUE);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = (double) ' ';
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) ' ';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {64.0, 32.0, 0.0, 32.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.shift(objectArray0, (-801), 1657, (-801));
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-848L);
      longArray0[1] = 622L;
      longArray0[2] = 1L;
      longArray0[3] = (-219L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1527L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-848L), 622L, 1L, (-219L)}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1527L;
      doubleArray0[1] = (double) 1527L;
      doubleArray0[2] = (double) 622L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-219L);
      doubleArray0[5] = 2611.334655572;
      doubleArray0[6] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1527.0, 1527.0, 622.0, 1.0, (-219.0), 2611.334655572, 1.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-1), 118, (-1));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)1;
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, (int) (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char char0 = 'v';
      char[] charArray0 = new char[8];
      charArray0[1] = 'v';
      charArray0[1] = 'v';
      charArray0[3] = '\u0000';
      ArrayUtils.reverse(charArray0, (int) (short)1, (-600));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(13, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1411));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.getInteger("<F7Aiz`-a./;0PQ", (int) (short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      long[] longArray0 = new long[14];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(14, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (-1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(14, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2113929216;
      intArray0[2] = (-1);
      boolean boolean1 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 2113929216, (-1)}, intArray0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2113929216, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 2113929216, (-1)}, intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-40));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)118);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)118, (byte)byte1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-2434.0F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-2434.0F)}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(121);
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      Integer integer1 = new Integer((byte)118);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(118, (int)integer1);
      
      Integer integer2 = new Integer(3668);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3668, (int)integer2);
      
      Integer integer3 = new Integer(3668);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(3668, (int)integer3);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (-2434.0F));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)118;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)118;
      shortArray0[4] = (short) (byte)118;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)118);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)118, (short)0, (short)118, (short)0, (short)118, (short)118}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)118, (short)0, (short)118, (short)118}, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 214;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)118;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)118;
      intArray0[7] = 3668;
      boolean boolean3 = ArrayUtils.contains(intArray0, 111);
      assertEquals(8, intArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new int[] {214, 0, 0, 118, 0, 0, 118, 3668}, intArray0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      int int0 = ArrayUtils.indexOf(intArray0, 1, 83);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {83, 83}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-238));
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short)1);
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 298);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 298, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1578), (-1578));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((-309));
      assertNotNull(integer0);
      assertEquals((-309), (int)integer0);
      
      Integer integer1 = Integer.getInteger("'_hd;c{RLH", 0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-1904));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)17);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift(intArray0, 0, 2, (-81));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), 13);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, 2447, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 13);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ' ';
      charArray0[3] = 'a';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1333.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'a', '\u0000', ' ', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) '\u0000';
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) 'a';
      ArrayUtils.shift(longArray0, 418, 0, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {32L, 0L, 0L, 97L}, longArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1350, 0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'a', '\u0000', ' ', '\u0000'}, charArray0);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1333.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray3 = ArrayUtils.removeAllOccurrences(floatArray1, (-3102.5747F));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals(2, floatArray3.length);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short)454;
      shortArray0[2] = (short)454;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-363), (short)454, (short)454}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3106.6138663709507;
      ArrayUtils.swap(doubleArray0, 0, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3106.6138663709507}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-965), 1333, (-2757));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-965.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1333;
      objectArray0[1] = (Object) 1333;
      objectArray0[2] = (Object) (-965);
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-965.0);
      objectArray0[6] = (Object) (-965.0);
      Integer integer0 = new Integer(1333);
      assertNotNull(integer0);
      assertEquals(1333, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, Integer.MAX_VALUE);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) (-965.0);
      doubleArray1[1] = (Double) (-965.0);
      doubleArray1[2] = (Double) (-965.0);
      doubleArray1[3] = (Double) (-965.0);
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-965.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-965.0), (-965.0), (-965.0), (-965.0), 0.0, 0.0, (-965.0)}, doubleArray2, 0.01);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-480));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      ArrayUtils.shift(floatArray0, 1261);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-658.06854F);
      ArrayUtils.shift(floatArray0, (-133));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-658.06854F), 1.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3428);
      assertNotNull(integer0);
      assertEquals(3428, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(77);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(77, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (-133));
      assertEquals(2, integerArray0.length);
      assertNull(integer2);
      
      String string0 = ArrayUtils.toString((Object) null, "org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", string0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      int int0 = 3704;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(3704, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(3704);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3704, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(3704, object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 3704, objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertTrue(object1.equals((Object)int0));
      assertNotNull(object1);
      assertEquals(3704, object1);
      
      objectArray0[1] = object1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-74);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)82);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-1), (byte)66, (byte)82, (byte) (-75), (byte) (-74)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 52;
      intArray0[2] = 754;
      intArray0[3] = (-499);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-499);
      doubleArray0[1] = (double) (-499);
      doubleArray0[2] = 1738.0;
      doubleArray0[3] = (double) 52;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 92);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-499.0), (-499.0), 1738.0, 52.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1738.0, 52.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) (-499);
      longArray0[2] = (long) 52;
      longArray0[3] = (long) 64;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {52L, (-499L), 52L, 64L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer((-1135));
      assertNotNull(integer0);
      assertEquals((-1135), (int)integer0);
      
      Integer integer1 = Integer.getInteger("<F7Aiz`-a./;0PQ", (int) (short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-1));
      assertFalse(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 8;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 75L, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, 49);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)16;
      ArrayUtils.reverse(byteArray0, 5, 121);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)6, (byte)16}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)6, (byte)16, (byte)9}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte) (-89));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-89.0)}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Integer integer0 = new Integer(49);
      assertNotNull(integer0);
      assertEquals(49, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (Object) integer0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-965), 1333, (-2757));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-965.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = 2690.033F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-965);
      floatArray0[3] = (float) 1333;
      floatArray0[4] = (float) 1333;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(12, floatArray0.length);
      assertNotNull(bitSet0);
      
      MutableInt mutableInt0 = new MutableInt(488);
      assertEquals(488L, mutableInt0.longValue());
      assertEquals(488, mutableInt0.intValue());
      assertEquals(488.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(488.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(488, (int)mutableInt0.toInteger());
      assertEquals("488", mutableInt0.toString());
      assertEquals((byte) (-24), mutableInt0.byteValue());
      assertEquals(488, (int)mutableInt0.getValue());
      assertEquals((short)488, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 1333.0F);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(12, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-188.6315);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) 0;
      ArrayUtils.shift(doubleArray0, 2, 1, 1333);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-188.6315), (-1.0), 1333.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1333;
      floatArray0[1] = Float.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1639.1967F);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1333.0F, Float.NaN}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        LongBuffer.allocate((-1310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)249;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-2179), 249.0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {249.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-1086), 13);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1138.6523132457414;
      doubleArray0[1] = 1138.6523132457414;
      doubleArray0[5] = 122.06322407249094;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      long[] longArray0 = new long[4];
      doubleArray0[0] = (double) 0;
      longArray0[1] = (-1287L);
      longArray0[2] = (-1689L);
      longArray0[3] = (-1287L);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1287L), (-1689L), (-1287L), 0L, (-1287L), (-1689L), (-1287L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-1287L), (-1689L), (-1287L)}, longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Integer integer0 = Integer.getInteger("Se1", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 757.8851131521501);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1138.6523132457414, 0.0, 0.0, 0.0, 122.06322407249094, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1138.6523132457414, 0.0, 0.0, 0.0, 122.06322407249094, 0.0}, doubleArray1, 0.01);
      
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(boolean2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, 1134);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 229);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) (-1812);
      doubleArray0[2] = 757.92337451278;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((-2461));
      assertNotNull(integer0);
      assertEquals((-2461), (int)integer0);
      
      Integer integer1 = new Integer((-965));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-965), (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt((-1812.0));
      assertEquals((-1812), (int)mutableInt0.getValue());
      assertEquals((-1812.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-20), mutableInt0.byteValue());
      assertEquals((-1812), (int)mutableInt0.toInteger());
      assertEquals("-1812", mutableInt0.toString());
      assertEquals((-1812L), mutableInt0.longValue());
      assertEquals((-1812.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1812), mutableInt0.intValue());
      assertEquals((short) (-1812), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-1812), (int)mutableInt0.getValue());
      assertEquals((-1812.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-20), mutableInt0.byteValue());
      assertEquals((-1812), (int)mutableInt0.toInteger());
      assertEquals("-1812", mutableInt0.toString());
      assertEquals((-1812L), mutableInt0.longValue());
      assertEquals((-1812.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1812), mutableInt0.intValue());
      assertEquals((short) (-1812), mutableInt0.shortValue());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1812), (int)integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-965);
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[0];
      floatArray0[1] = 2589.9802F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (int)integerArray0[1];
      floatArray0[4] = (float) (-1812);
      floatArray0[5] = (float) (-965);
      floatArray0[6] = (float) (-965);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3532.2F));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-965.0F), 2589.9802F, (-1.0F), (-2461.0F), (-1812.0F), (-965.0F), (-965.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      int[] intArray0 = new int[8];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(8, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(8, intArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      Object[] objectArray0 = new Object[3];
      Integer integer0 = new Integer((-4115));
      assertNotNull(integer0);
      assertEquals((-4115), (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) integer0);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(charArray0, (-4046), 1870);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, (-286));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2051);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)2357;
      ArrayUtils.swap(shortArray0, 1138, (int) (short)2357);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2051), (short)4, (short)2357}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (int) (short)2357;
      intArray0[1] = (int) (short)2357;
      intArray0[2] = (int) (short) (-2051);
      intArray0[3] = 121;
      intArray0[4] = 1138;
      intArray0[5] = (int) (short)2357;
      intArray0[6] = (int) (short)4;
      intArray0[7] = (int) (short) (-2051);
      intArray0[8] = (int) (short)2357;
      ArrayUtils.shift(intArray0, (-246));
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)8, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, false, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 219, 160, (-322));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 121;
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, int0);
      assertEquals(1, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 111;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 4;
      intArray0[4] = int0;
      intArray0[5] = (int) '\u0000';
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)64, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) 121);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      org.evosuite.runtime.Random.setNextRandom(2287);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1387);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1387}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[4] = (byte)16;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 132);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)0, (byte)0, (byte)0, (byte)124}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, 2181, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1394), 43);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      assertArrayEquals(new int[] {(-1394)}, intArray1);
      
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      Integer integer1 = new Integer((-1394));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1394), (int)integer1);
      
      Integer integer2 = new Integer(43);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(43, (int)integer2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) (-1394);
      objectArray0[4] = (Object) (-1394);
      objectArray0[5] = (Object) (-1394);
      objectArray0[6] = (Object) integer1;
      objectArray0[8] = (Object) integer2;
      Integer integer3 = new Integer((-1394));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1394), (int)integer3);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer3);
      assertEquals(9, objectArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(49);
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49L, mutableInt0.longValue());
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals(49, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) integer1);
      assertEquals(1443, mutableInt0.intValue());
      assertEquals(1443.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1443, (int)mutableInt0.toInteger());
      assertEquals(1443, (int)mutableInt0.getValue());
      assertEquals(1443L, mutableInt0.longValue());
      assertEquals((short)1443, mutableInt0.shortValue());
      assertEquals((byte) (-93), mutableInt0.byteValue());
      assertEquals(1443.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1443", mutableInt0.toString());
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2206L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 43, (-1));
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ArrayUtils.swap(doubleArray0, (int) (short)0, (-1));
      assertEquals(12, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-1237), (-1775));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2399);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2399, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2399;
      doubleArray0[1] = (double) 2399;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 189.412104;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 2);
      assertEquals(14, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) 2399;
      floatArray0[2] = (float) 2399;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) int0;
      int int1 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(6, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 2399.0F, 2399.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, int1);
      
      ArrayUtils.reverse(floatArray0, 2399, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2399.0F, 2399.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(2237.9929693833);
      assertNotNull(double0);
      assertEquals(2237.9929693833, (double)double0, 0.01);
      
      Double double1 = new Double(2237.9929693833);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2237.9929693833, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      charArray0[3] = 'Q';
      charArray0[4] = '+';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'_', 'K', 'r', 'Q', '+'}, charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Integer integer1 = new Integer(85);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(85, (int)integer1);
      
      Integer integer2 = new Integer(3027);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3027, (int)integer2);
      
      Integer integer3 = ArrayUtils.get((Integer[]) null, 3027);
      assertNull(integer3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3668;
      intArray0[1] = (-2324);
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3668, (-2324), 4}, intArray0);
      assertArrayEquals(new int[] {3668, (-2324), 4}, intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 620, 2078);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 121;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 120.49764763429336);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {121.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1601.0);
      assertNotNull(double0);
      assertEquals(1601.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(711.6248);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(711.6248, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1601.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1601.0, 711.6248}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 1, 1, 1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-1), Integer.MAX_VALUE, (-1030));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-3929), (-3929), (-13));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 718, 718);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("'_hd;c{RLH", 0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 213);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray1, (-653), 718, 0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 'v';
      longArray0[2] = (-1L);
      longArray0[3] = (long) ':';
      longArray0[4] = (long) ':';
      longArray0[5] = (long) 0;
      longArray0[6] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 118L, (-1L), 58L, 58L, 0L, (-1L)}, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 58L;
      floatArray0[2] = (float) 58L;
      floatArray0[3] = (float) 58L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = 1333.0F;
      floatArray0[7] = (float) 118L;
      floatArray0[8] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {118.0F, 58.0F, 58.0F, 58.0F, 0.0F, 0.0F, 1333.0F, 118.0F, (-1.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      short short0 = (short)18688;
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short) (-1759);
      shortArray0[2] = (short) (-1133);
      shortArray0[3] = (short)21028;
      shortArray0[4] = (short)36;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 3087L;
      longArray0[1] = 3087L;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 3087L;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) 799.044464;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 1);
      assertEquals(4, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '1';
      charArray1[2] = '1';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'l', '1', '1'}, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-63);
      intArray0[2] = (int) (short)1;
      int[] intArray1 = ArrayUtils.insert((int) (short)1, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-63), 0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {(-63), (-63), 0, 1, 0, 0, 1, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 266);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Long long0 = new Long(2400L);
      assertNotNull(long0);
      assertEquals(2400L, (long)long0);
      
      Long long1 = new Long(1809L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1809L, (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long0;
      longArray1[1] = long1;
      longArray1[2] = long0;
      longArray1[3] = long1;
      longArray1[4] = long0;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2400L, 1809L, 2400L, 1809L, 2400L, 2400L}, longArray2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-102);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)70);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte) (-1), (byte)1, (byte) (-102)}, byteArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) integerArray0, (-227), (-1775), (int) (byte)2);
      assertEquals(0, integerArray0.length);
      
      Integer integer0 = new Integer((-227));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-227), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (int) 3, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = 'V';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', 'P', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)3;
      ArrayUtils.swap(byteArray0, 1525, (int) (byte)3, (int) (byte) (-28));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-28), (byte)3, (byte) (-28), (byte)8, (byte) (-28), (byte)3}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(443);
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'V';
      characterArray0[1] = (Character) 'P';
      characterArray0[2] = (Character) 'P';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'P');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(3, charArray2.length);
      assertEquals(3, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'V', 'P', 'P'}, charArray2);
      
      Integer integer0 = new Integer(392);
      assertNotNull(integer0);
      assertEquals(392, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) integer0, 751);
      assertEquals(3, characterArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[0] = 1333;
      Integer integer0 = new Integer((-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Integer integer1 = new Integer((-57));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-57), (int)integer1);
      
      Integer integer2 = new Integer(1333);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1333, (int)integer2);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-23.42274F);
      floatArray0[1] = (float) 1333;
      floatArray0[2] = (float) (-57);
      floatArray0[3] = (float) 1333;
      floatArray0[4] = (float) 1540;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1333.0F, (-57.0F), 1333.0F, 1540.0F, (-23.42274F)}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertNotNull(string0);
      assertEquals("-965", string0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2583L);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2597.25849);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 1.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2597.25849)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double((-386.6F));
      assertNotNull(double0);
      assertEquals((-386.6000061035156), (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2597.25849);
      doubleArray1[1] = (Double) (-2597.25849);
      doubleArray1[2] = double0;
      long[] longArray0 = new long[3];
      longArray0[0] = 2583L;
      longArray0[1] = 2583L;
      longArray0[2] = 2583L;
      ArrayUtils.swap(longArray0, (-2379), (-2379), 420);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2583L, 2583L, 2583L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2379), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2379, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2875.88F;
      floatArray0[1] = 1338.986F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2875.88F, 1338.986F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2875.88F, 1338.986F, 0.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2875.88F, 1338.986F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2875.88F, 1338.986F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5928.168791;
      doubleArray0[1] = 75.5;
      doubleArray0[2] = 1228.26549117386;
      doubleArray0[3] = 93.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2717.784;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 673, 1064);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5928.168791, 75.5, 1228.26549117386, 93.0, 1.0, 1.0, 0.0, 2717.784, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1137));
      assertNotNull(integer0);
      assertEquals((-1137), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(673);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(673, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1073741824));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1073741824), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertEquals(6, integerArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1073741824), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-57));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-57), (int)integer4);
      
      integerArray0[4] = integer4;
      try { 
        Integer.valueOf(">\"", (int) integerArray0[0]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1137 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1712.6F;
      floatArray0[2] = (-876.68335F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1712.6F, (-876.68335F), Float.NaN, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1500);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, (-936));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((int[]) null, (-936));
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, (-319));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-965);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2663;
      floatArray0[1] = (float) (-965);
      floatArray0[2] = (float) 1333;
      floatArray0[3] = (float) 2663;
      floatArray0[4] = (float) (-965);
      floatArray0[5] = (float) 2663;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-2708));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2663.0F, (-965.0F), 1333.0F, 2663.0F, (-965.0F), 2663.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      ArrayUtils.shift(booleanArray0, 97);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 97L;
      objectArray0[1] = (Object) 97L;
      objectArray0[2] = (Object) 97L;
      objectArray0[3] = (Object) 97L;
      Integer integer0 = Integer.getInteger("", (-1073741824));
      assertNotNull(integer0);
      assertEquals((-1073741824), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 97;
      intArray0[1] = 122;
      intArray0[2] = (-2779);
      intArray0[3] = (-1073741824);
      intArray0[4] = (-1073741824);
      intArray0[5] = 110;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {97, 122, (-2779), (-1073741824), (-1073741824), 110}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer1 = new Integer((-190));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-190), (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-940), integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -940, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 75L, Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.reverse(byteArray0, (int) (short)2, (-835));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 4380.9F, 1701);
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[0] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1333, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1333, 0, 0}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1333;
      doubleArray0[1] = 1821.9614533255417;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int0 = new Integer(1333);
      assertEquals(1333, int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1333;
      longArray0[1] = (long) 1333;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-965);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-965L), (-1L), 1333L, 1333L}, longArray0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 1333);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)31;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("+g/&");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-44L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-44L)}, longArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)31;
      objectArray0[1] = (Object) (short)0;
      Object object0 = ArrayUtils.get(objectArray0, 1);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      objectArray0[2] = object0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      
      boolean boolean4 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.swap(byteArray0, (int) (byte)8, (int) (byte) (-28), (int) (byte)8);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(405);
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '\u0000');
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) 'w';
      floatArray0[2] = (float) (-1896);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-945.9095F));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {8.0F, 119.0F, (-1896.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '?', '?'}, charArray0);
      assertArrayEquals(new char[] {'?', '?', '?'}, charArray1);
      
      ArrayUtils.swap(charArray0, 0, 0, 0);
      assertNotSame(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'?', '?', '?'}, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = 1904.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '?';
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) '?';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 63.0, 0, (double) (-3303));
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 1904.0, 0.0, 0.0, 63.0, 0.0, 0.0, 0.0, 63.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean("");
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = new Boolean(false);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) '-';
      longArray0[3] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(4, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L, 45L, 0L}, longArray0);
      assertEquals(0, int1);
      
      Integer integer0 = Integer.getInteger("", (Integer) int0);
      assertTrue(int0 == int1);
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ' ';
      charArray0[3] = 'a';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1333.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'a', '\u0000', ' ', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[1] = (double) 0.0F;
      ArrayUtils.swap(doubleArray0, (-811), (-811), 2257);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'a', '\u0000', ' ', '\u0000'}, charArray0);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) '\u0000';
      floatArray2[1] = (float) ' ';
      floatArray2[2] = (float) 2257;
      int[] intArray1 = new int[5];
      intArray1[0] = (int) 'a';
      intArray1[1] = (int) ' ';
      intArray1[2] = (int) ' ';
      intArray1[3] = 2257;
      intArray1[4] = (int) '\u0000';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray2, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2257, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      Float float0 = new Float((-3225.128));
      assertNotNull(float0);
      assertEquals((-3225.128F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2978.669));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2978.669F), (float)float1, 0.01F);
      
      Float float2 = Float.valueOf(1777.769F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1777.769F, (float)float2, 0.01F);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1777.769F;
      floatArray0[1] = 1777.769F;
      floatArray0[2] = 1777.769F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1777.769F;
      doubleArray0[1] = (-3225.128);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1777.76904296875, (-3225.128)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3225.128), 1777.76904296875}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(3, intArray0.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {1777.769F, 1777.769F, 1777.769F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)128;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)128}, shortArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3225.128));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3225.128), 1777.76904296875}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2;
      longArray0[4] = 2486L;
      longArray0[5] = (long) 0;
      int int0 = ArrayUtils.indexOf(longArray0, 2486L, 0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 0L, 2L, 2486L, 0L}, longArray0);
      assertEquals(4, int0);
      
      double[] doubleArray0 = new double[6];
      longArray0[1] = 0L;
      doubleArray0[1] = (double) 2L;
      doubleArray0[0] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 4, 1003.9163);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3027.0412057), 321, (double) 2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 1.5, 1, (-3107.0580349));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-32), (byte) (-1), (byte)63, (byte)55, (byte)1, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)58, (byte) (-32), (byte) (-1), (byte)63, (byte)55, (byte)1, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1394);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, (-3923.0), 2641.365892);
      assertNotNull(doubleStream0);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("nP%e:", (-45));
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      Integer integer2 = new Integer((-45));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals((-45), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(3, objectArray0.length);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 5559.013F);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 'T';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'(', 'T'}, charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[0] = 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-268);
      floatArray0[4] = (-227.6F);
      ArrayUtils.shift(floatArray0, 0, (-1588), (-268));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-268.0F), (-227.6F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '\'';
      charArray0[2] = ']';
      charArray0[3] = '9';
      charArray0[4] = 'J';
      charArray0[5] = '%';
      charArray0[6] = 'h';
      ArrayUtils.shift(charArray0, (-268), 926, 0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'#', '\'', ']', '9', 'J', '%', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (short) (-1), 32, (int) (byte) (-99));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-99), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(721);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ';');
      assertNull(charArray0);
      
      ArrayUtils.shift(byteArray0, (-1), Integer.MAX_VALUE, (-1324));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-99), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (int) (byte) (-1), (int) (short) (-1));
      assertNull(charArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-1324));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1324L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (long) 721);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[9];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1540);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1540, (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      integerArray0[1] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(9, integerArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1280));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      char[] charArray0 = new char[6];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertEquals(2, int0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 322;
      intArray0[1] = 2;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[4] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2135);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {322, 2, Integer.MAX_VALUE, 0, 2}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      ArrayUtils.reverse(floatArray0, 10, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('}');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('}', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'e', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 101, (int) (byte)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      
      Long long0 = new Long(101);
      assertNotNull(long0);
      assertEquals(101L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-817));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 75L, Integer.MAX_VALUE);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (byte) (-1), (int) (short) (-1));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2, longArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      Short short0 = new Short((short) (-4683));
      assertNotNull(short0);
      assertEquals((short) (-4683), (short)short0);
      
      Short short1 = new Short((short) (-1));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray1, (short) (byte) (-1));
      assertNotSame(shortArray3, shortArray0);
      assertSame(shortArray3, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray3);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3813);
      assertNotNull(integer0);
      assertEquals(3813, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = ArrayUtils.get(integerArray0, (-730), integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3813, (int)integer1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) integer1, (-393));
      assertEquals(0, shortArray1.length);
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'u';
      charArray0[2] = 'T';
      int int1 = ArrayUtils.indexOf(charArray0, ')', 1708);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'o', 'u', 'T'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '1';
      charArray1[2] = '1';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'l', '1', '1'}, charArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[2] = '=';
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'R', '\u0000', '='}, charArray0);
      assertFalse(boolean2);
      
      ArrayUtils.shuffle(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)0);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte)0);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(20, booleanArray0.length);
      assertEquals(20, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[3];
      floatArray0[0] = (float) 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 0.0F;
      ArrayUtils.shift(floatArray0, 0, (-2164), Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2399);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2399, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) int0;
      longArray0[3] = (-1L);
      longArray0[4] = (long) 2399;
      longArray0[5] = (long) 2399;
      longArray0[6] = (-2146615942L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) int0, 0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1L), 2399L, 2399L, (-2146615942L)}, longArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)249);
      assertNotNull(short0);
      assertEquals((short)249, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1517));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1517), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1517));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-1517), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)249);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short)249, (short)short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)249, (short) (-1517), (short) (-1), (short) (-1517), (short)249}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1145;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1145);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1145, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1145, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), 35);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertSame(longArray1, longArray0);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 321, (-4912));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-891);
      objectArray0[1] = (Object) 5083;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 5083;
      longArray0[1] = 0L;
      longArray0[2] = (long) (-1074);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 5083);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {5083L, 0L, (-1074L)}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-1074);
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-1074.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5083, 2905);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {5083L, 0L, (-1074L)}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-891), (-891));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2905);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1073741823), (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((short)15178);
      assertNotNull(short0);
      assertEquals((short)15178, (short)short0);
      
      Short short1 = new Short((byte)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      try { 
        Short.valueOf((String) null, (-817));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)249);
      assertNotNull(short0);
      assertEquals((short)249, (short)short0);
      
      Short short1 = new Short((short)2);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)3886);
      assertNull(shortArray0);
      
      ArrayUtils.shuffle((Object[]) integerArray0);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)124;
      shortArray0[1] = (short) (byte)124;
      shortArray0[2] = (short) (byte)124;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1590, (int) (short)124);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)124, (short)124, (short)124}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.getInteger("<F7Aiz`-a./;0PQ", (-2384));
      assertNotNull(integer0);
      assertEquals((-2384), (int)integer0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)176);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)124, (short)124, (short)124}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)124, (short)124, (short)124}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)124;
      longArray0[1] = (long) (short)124;
      longArray0[2] = (long) (byte)124;
      longArray0[3] = (long) 8;
      longArray0[4] = 2332L;
      longArray0[5] = (long) (-2384);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {124L, 124L, 124L, 8L, 2332L, (-2384L), 0L}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1127), 2);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(7, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {124L, 124L, 124L, 8L, 2332L, (-2384L), 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 84);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, 5, 302);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)132, (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 553.9449F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {553.9449F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {553.9449F, 553.9449F}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = 553.9449F;
      floatArray2[1] = 553.9449F;
      floatArray2[2] = 553.9449F;
      floatArray2[3] = 553.9449F;
      floatArray2[4] = 553.9449F;
      boolean boolean1 = ArrayUtils.isSorted(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {553.9449F, 553.9449F, 553.9449F, 553.9449F, 553.9449F}, floatArray2, 0.01F);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {553.9449F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {553.9449F, 553.9449F}, floatArray1, 0.01F);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(floatArray0, 553.9449F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new float[] {553.9449F}, floatArray0, 0.01F);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2333.0227F;
      floatArray0[1] = (-2451.216F);
      floatArray0[2] = 91.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2333.0227F, (-2451.216F), 91.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "2zW1F*lN$_Z");
      assertNotNull(string0);
      assertEquals("89", string0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(89);
      assertNotNull(long0);
      assertEquals(89L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(89);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(89L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertEquals(4, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(89L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {89L, 89L, 89L, 0L}, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (long)longArray0[1];
      doubleArray0[1] = (double) (-2451.216F);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 89;
      doubleArray0[5] = 0.1;
      doubleArray0[6] = (double) (-2451.216F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 80, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {89.0, (-2451.216064453125), 1.0, 0.0, 89.0, 0.1, (-2451.216064453125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (byte)12);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 20;
      floatArray0[5] = (float) (-1334);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 20.0F);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 20.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)12);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-77), (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)67);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Long long0 = new Long(2400L);
      assertNotNull(long0);
      assertEquals(2400L, (long)long0);
      
      Long long1 = new Long(1809L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1809L, (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long0;
      longArray1[1] = long1;
      longArray1[2] = long0;
      longArray1[3] = long1;
      longArray1[4] = long0;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2400L, 1809L, 2400L, 1809L, 2400L, 2400L}, longArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1775);
      intArray0[1] = (-1775);
      intArray0[2] = 1136;
      intArray0[3] = (-1775);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1775));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1775), (-1775), 1136, (-1775)}, intArray0);
      assertArrayEquals(new int[] {1136}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1206L));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 3113, 7.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long long0 = new Long(2976L);
      assertNotNull(long0);
      assertEquals(2976L, (long)long0);
      
      float[] floatArray0 = ArrayUtils.insert(3113, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 82;
      intArray0[1] = 52;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1180));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {82, 52, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1180), 82, 52, 0, 0, 0, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 82;
      integerArray0[1] = (Integer) 82;
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 52;
      integerArray0[4] = (Integer) 52;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(5, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'b';
      charArray0[2] = '^';
      charArray0[3] = 'E';
      charArray0[4] = 'j';
      charArray0[5] = 'e';
      charArray0[6] = '%';
      charArray0[7] = 'X';
      charArray0[8] = '5';
      ArrayUtils.swap(charArray0, 32, 2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'8', 'b', '^', 'E', 'j', 'e', '%', 'X', '5'}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)935;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)127);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)935, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)935, (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = 92;
      int[] intArray1 = ArrayUtils.removeElement((int[]) null, (-150));
      assertNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-150), (long) 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -150, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      long[] longArray0 = new long[4];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-421L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)159;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '&');
      assertNull(charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)159;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '&', 159);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer((short)159);
      assertNotNull(integer0);
      assertEquals(159, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 159;
      integerArray0[1] = (Integer) 159;
      integerArray0[2] = (Integer) 159;
      integerArray0[3] = (Integer) 159;
      Integer integer1 = ArrayUtils.get(integerArray0, 2146704727);
      assertEquals(4, integerArray0.length);
      assertNull(integer1);
      
      Integer integer2 = new Integer((int) integerArray0[3]);
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(159, (int)integer2);
      
      Integer integer3 = new Integer(168);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(168, (int)integer3);
      
      Integer integer4 = new Integer(168);
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(168, (int)integer4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integerArray0[1], (Object) integer4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)16;
      ArrayUtils.reverse(byteArray0, 5, 121);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)77, (byte)6, (byte)16}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)6, (byte)16, (byte)9}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (byte) (-89));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-89.0)}, doubleArray0, 0.01);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-582));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(object0);
      
      Integer integer0 = new Integer(1375);
      assertNotNull(integer0);
      assertEquals(1375, (int)integer0);
      
      Object object1 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, 1, (Object) integer0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(object1);
      assertEquals(1375, object1);
      
      Integer integer1 = new Integer((byte)77);
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(77, (int)integer1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (Object) null, (int) (byte)77);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      Integer integer2 = new Integer((byte)16);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(16, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer2);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3210, (int) (short)3210);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-1);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (byte)48;
      floatArray1[1] = (float) (byte)48;
      floatArray1[2] = (float) (byte) (-15);
      floatArray1[3] = (float) (short)3210;
      floatArray1[4] = (float) (short)3210;
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {48.0F, 48.0F, (-15.0F), 3210.0F, 3210.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {48.0F, 48.0F, (-15.0F), 3210.0F, 3210.0F}, floatArray2, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 101, (-1050), (-1050));
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2336), 2, 321);
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 2680.2603F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) bitSet0;
      bitSet0.clear();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object1 = ArrayUtils.get(objectArray0, 121);
      assertEquals(3, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, (-90), (Object) integer0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object2);
      assertEquals(1, object2);
      
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object2));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1));
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(2, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, objectArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Integer integer2 = new Integer(10);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertNotNull(integer2);
      assertEquals(10, (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2757);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-2757), (-1), 78);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2757.0), (-1.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 78);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer(78);
      assertNotNull(integer0);
      assertEquals(78, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(78, object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (-2757.0);
      Object object1 = ArrayUtils.get(objectArray0, (-2257));
      assertEquals(6, objectArray0.length);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (-1.0);
      objectArray0[5] = (Object) bitSet0;
      Object object2 = ArrayUtils.get(objectArray0, 1, (Object) null);
      assertEquals(6, objectArray0.length);
      assertNotNull(object2);
      assertEquals((-2757.0), object2);
      
      Integer integer1 = new Integer(38);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertNotNull(integer1);
      assertEquals(38, (int)integer1);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, object3, 1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2757.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)91);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-3), (byte) (-75), (byte)93, (byte) (-20), (byte) (-1), (byte) (-126)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-75), (byte)93, (byte) (-20), (byte) (-1), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(935, doubleArray1, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 481, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-7);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-90));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-90), (byte)68, (byte) (-24), (byte) (-1), (byte) (-7)}, byteArray0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-7);
      doubleArray0[1] = 525.364;
      doubleArray0[2] = (double) (byte)68;
      doubleArray0[3] = (double) (byte) (-24);
      doubleArray0[4] = (double) (byte)68;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-7.0), 525.364, 68.0, (-24.0), 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.0), 525.364, 68.0, (-24.0), 68.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-90);
      floatArray0[1] = (float) (byte) (-24);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (byte) (-90);
      floatArray0[4] = (float) (byte) (-7);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-90.0F), (-24.0F), 1.0F, (-90.0F), (-7.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-90.0F), (-24.0F), 1.0F, (-90.0F), (-7.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, (-7.0), 525.364, 68.0, (-24.0), 68.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-7.0), 525.364, 68.0, (-24.0), 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7.0), 525.364, 68.0, (-24.0), 68.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)12;
      shortArray0[3] = (short)12;
      shortArray0[4] = (short)12;
      ArrayUtils.swap(shortArray0, 408, (int) (short)12);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short) (-1), (short)12, (short)12, (short)12}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short)12, 1012);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)64;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (short)12;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)12, (double) (byte)64);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {64.0, (-1.0), 1.0, 12.0}, doubleArray0, 0.01);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 121;
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, int0);
      assertEquals(1, integerArray0.length);
      assertNull(integer3);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (int) (byte)0, (double) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 765L;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (byte)0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {765L}, longArray0);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 3668);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'S'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)17);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift((int[]) null, (int) (byte)17, (int) (byte)17, (int) (byte)17);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      int int1 = ArrayUtils.lastIndexOf(charArray0, ':', 0);
      assertEquals(7, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(3, int2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) ':';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ':';
      ArrayUtils.swap(longArray0, 0, 0, 3);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {58L, 58L, 0L, 58L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1074), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1074, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1394);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1394.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1394), 0.0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{7}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1394.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[5] = (double) (-31);
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer((short)1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)23;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)9);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55, (byte)58, (byte) (-62), (byte)23}, byteArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, (int) 58, (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2663;
      floatArray0[1] = (float) (-965);
      floatArray0[2] = (float) 1333;
      floatArray0[3] = (float) 2663;
      floatArray0[4] = (float) (-965);
      floatArray0[5] = (float) 2663;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-2708));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2663.0F, (-965.0F), 1333.0F, 2663.0F, (-965.0F), 2663.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.insert((-5035), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer integer0 = new Integer((-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Integer integer1 = new Integer(1540);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1540, (int)integer1);
      
      Integer integer2 = new Integer((-965));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-965), (int)integer2);
      
      Integer[] integerArray0 = new Integer[12];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(12, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-965.0F), 1333.0F, 2663.0F, (-965.0F), 2663.0F, 2663.0F}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(string0);
      assertEquals("-965", string0);
      
      Integer[] integerArray2 = new Integer[8];
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      integerArray2[0] = integer1;
      integerArray2[1] = integer0;
      integerArray2[2] = integer2;
      integerArray2[3] = integer1;
      integerArray2[4] = integer1;
      integerArray2[5] = integer1;
      integerArray2[6] = integer2;
      integerArray2[7] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1287), integerArray1, integerArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1287, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[5] = (double) (-31);
      doubleArray0[6] = (double) (-31);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, (-2757), (-1), (-1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), 0.0, (-31.0), (-31.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-31), object0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-1.0), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (-1.0F);
      Integer integer0 = new Integer((-31));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-31), (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (short)1, (float) (-2757));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-2757.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = new Integer(3081);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(3081, (int)integer2);
      
      Integer integer3 = new Integer((byte)0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      boolean boolean1 = ArrayUtils.isEquals(integer2, integer3);
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3081;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2839.96693650205);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3081.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3081.0}, doubleArray1, 0.01);
      
      Integer integer4 = new Integer((-2100));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-2100), (int)integer4);
      
      Integer integer5 = Integer.getInteger("offset cannot be negative", integer1);
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '8';
      charArray0[2] = '\\';
      charArray0[3] = '/';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, (-1775));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'g', '8', '\\', '/'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 1115L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(1, int0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.insert(1, shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (-31);
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) (-31);
      floatArray0[5] = (float) 'a';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-31.0F), 97.0F, (-31.0F), 97.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-1394));
      assertEquals(2, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-3354.387857));
      assertNotNull(float0);
      assertEquals((-3354.388F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3354.387857));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-3354.388F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-3354.387857));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-3354.388F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3354.388F), (-3354.388F), (-3354.388F)}, floatArray1, 0.01F);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((double) floatArray0[2]);
      assertEquals(3, floatArray0.length);
      assertNotNull(double0);
      assertEquals((-3354.387939453125), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1891.4691);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1891.4691, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) floatArray0[0]);
      assertEquals(3, floatArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-3354.387939453125), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-3354.387939453125), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-715.486286656631));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals((-715.486286656631), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals((-3354.387939453125), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1.0));
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      assertEquals((-1.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-113.851));
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      assertEquals((-113.851), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(0.1);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotNull(double8);
      assertEquals(0.1, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = Float.valueOf((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 121;
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, int0);
      assertEquals(1, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 111;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 4;
      intArray0[4] = int0;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = int0;
      intArray1[2] = int0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {4, 121, 121}, intArray1);
      assertArrayEquals(new int[] {4, 111, 0, 4, 121, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2185);
      assertNotNull(integer0);
      assertEquals(2185, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(2185, object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object2);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, object0);
      assertSame(object0, object3);
      assertSame(object0, object2);
      assertSame(object3, object2);
      assertSame(object3, object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object3);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertSame(object0, object3);
      assertSame(object0, object2);
      assertSame(object3, object2);
      assertSame(object3, object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer integer1 = new Integer((-470));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-470), (int)integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, 2418, integer1);
      assertEquals(8, integerArray0.length);
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-470), (int)integer2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-470);
      intArray0[1] = (int) integerArray0[7];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-470), 2185}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'U';
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) 'H';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
      
      short[] shortArray1 = ArrayUtils.addFirst((short[]) null, (short) (-30));
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-30)}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-7), 2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-30)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-30)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((Object[]) floatArray1, (-133));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, (-133), 937, 937);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, 0);
      assertEquals(3, integerArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(2, booleanArray3.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)49);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) booleanArray2[1];
      objectArray0[2] = (Object) int0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) booleanArray2[1];
      ArrayUtils.swap(objectArray0, 0, 2394, 0);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-1394), object0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-37));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-105), (byte)106, (byte)106}, byteArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) integer0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) (byte) (-105);
      objectArray0[4] = (Object) integer1;
      ArrayUtils.swap(objectArray0, (-1), (-1), (-1394));
      assertEquals(5, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '@', 2038);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1394);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-5L);
      longArray0[1] = (-5L);
      longArray0[2] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-5L), (-5L), 0L}, longArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 681.9;
      objectArray0[3] = (Object) (-5L);
      objectArray0[4] = (Object) (-5L);
      objectArray0[5] = (Object) (-5L);
      objectArray0[6] = (Object) 681.9;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 121, (-2146905745));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2146905745), (int) (short) (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'v';
      int int0 = ArrayUtils.indexOf(charArray0, 'v', (-2617));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'~', 'v'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1905);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3100));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1905)}, intArray0);
      assertArrayEquals(new int[] {(-3100), (-1905)}, intArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-3100);
      doubleArray0[2] = (double) (-1905);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-3100);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1905), (-1905.0));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-3100.0), (-1905.0), 0.0, (-1.0), (-1.0), (-3100.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1905);
      longArray0[1] = (long) (-1905);
      longArray0[2] = (long) (short)987;
      longArray0[3] = (long) (short)987;
      longArray0[4] = 1003L;
      longArray0[5] = (long) 1333;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 1333L, 1003L, 987L, 987L, (-1905L), (-1905L)}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.get(objectArray0, 1);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shift(objectArray0, 1333);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = 683.6664F;
      floatArray0[1] = 1442.41F;
      floatArray0[2] = 2902.977F;
      floatArray0[3] = 1442.41F;
      floatArray0[4] = 1442.41F;
      floatArray0[5] = 1442.41F;
      floatArray0[6] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {683.6664F, 1442.41F, 2902.977F, 1442.41F, 1442.41F, 1442.41F, 1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      ArrayUtils.swap((Object[]) integerArray0, 683, 683);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2120300309));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, 2254, 32);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '}', 0);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(3, int2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) ':';
      ArrayUtils.swap(longArray0, (-1), 0, 3);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {58L, 58L, (-1L), 58L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1074), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1074, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = 3277.1005;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(2, int0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {2.147483647E9, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 322;
      intArray0[1] = 2;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 3283;
      intArray0[4] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2, 2135);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {322, 2, Integer.MAX_VALUE, 3283, 2}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      ArrayUtils.reverse(floatArray0, 10, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-107);
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-107), (byte) (-118)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "<=^{");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1333);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, (-965), 1333, 0}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = 1821.9614533255417;
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)4;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertArrayEquals(new short[] {(short)4}, shortArray1);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Integer integer1 = Integer.valueOf((-965));
      assertNotNull(integer1);
      assertEquals((-965), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), int0);
      
      short[] shortArray2 = ArrayUtils.addFirst((short[]) null, (short) (byte)37);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)37}, shortArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Array element ");
      assertNull(stringArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'k', (int) (byte)37);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2400;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short) (-1897);
      shortArray0[3] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2400, (short)8, (short) (-1897), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2400, (short)8, (short) (-1897), (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 951L;
      longArray0[1] = 539L;
      longArray0[2] = 1822L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1296L);
      longArray0[5] = 1L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {951L, 539L, 1822L, (-1L), (-1296L), 1L}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-171);
      shortArray0[1] = (short) (-3437);
      shortArray0[2] = (short)1285;
      shortArray0[3] = (short) (-1);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-171));
      assertEquals(4, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-171), (short) (-3437), (short)1285, (short) (-1)}, shortArray0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 13;
      Integer integer0 = new Integer(13);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(13, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1867);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1867, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short) (-3437));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals((-3437), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(13, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(13, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-809));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)int0));
      assertNotNull(integer7);
      assertEquals((-809), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 10;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 5116L;
      longArray0[1] = 0L;
      longArray0[2] = 1905L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1234L);
      longArray0[5] = 2967L;
      longArray0[6] = 0L;
      longArray0[7] = 1263L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {5116L, 0L, 1905L, (-1L), (-1234L), 2967L, 0L, 1263L}, longArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(17, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)94;
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte)94;
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte)94;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte)0, (byte)94, (byte)94, (byte)67, (byte)94, (byte)94}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      
      byte[] byteArray3 = new byte[9];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)67;
      byteArray3[1] = (byte)94;
      byteArray3[2] = (byte)67;
      byteArray3[3] = (byte)94;
      byteArray3[4] = (byte)67;
      byteArray3[5] = (byte)67;
      byteArray3[6] = (byte)67;
      byteArray3[7] = (byte)125;
      byteArray3[8] = (byte)67;
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray3, (byte) (-1));
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertEquals(9, byteArray4.length);
      assertEquals(9, byteArray3.length);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)67, (byte)94, (byte)67, (byte)94, (byte)67, (byte)67, (byte)67, (byte)125, (byte)67}, byteArray4);
      assertArrayEquals(new byte[] {(byte)67, (byte)94, (byte)67, (byte)94, (byte)67, (byte)67, (byte)67, (byte)125, (byte)67}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1322.204F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1322.204F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'E';
      charArray0[2] = '0';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'0', 'E', '0'}, charArray0);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, (int) 0);
      assertNull(integer0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, (int) (short)31);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0);
      assertEquals(0, integerArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 11.7916F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11.7916F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '#';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'H', '#'}, charArray0);
      assertArrayEquals(new char[] {'H', '#', 'H', '#'}, charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '#';
      longArray0[1] = (long) 'H';
      longArray0[2] = (long) '#';
      longArray0[3] = (long) 'H';
      longArray0[4] = (long) 'H';
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {35L, 72L, 35L, 72L, 72L}, longArray0);
      assertArrayEquals(new long[] {0L, 35L, 72L, 35L, 72L, 72L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-169), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertArrayEquals(new char[] {'h'}, charArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'L';
      floatArray0[1] = (float) '2';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'h';
      boolean boolean0 = ArrayUtils.contains(floatArray0, 91.0F);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 50.0F, 0.0F, 104.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', '\u0000', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', '\u0000', '?'}, charArray1);
      
      ArrayUtils.shift((long[]) null, (-601), 0, 102);
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-2146889435), 1350);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'9', '\u0000', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', '\u0000', '?'}, charArray1);
      assertArrayEquals(new char[] {'9', '\u0000', '?'}, charArray2);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray1, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[3];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray4 = new boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray4, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertEquals(1, booleanArray4.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray1, (int) (short)0, 1365, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray4);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray4));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray4));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 3087L;
      longArray0[1] = 3087L;
      ArrayUtils.shift(longArray0, 1, 15, 1219);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {3087L, 0L, 3087L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 64;
      intArray0[2] = 754;
      intArray0[3] = (-499);
      ArrayUtils.swap(intArray0, 52, (-2007));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 64, 754, (-499)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (-499), 96);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, 3547);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 64, 754, (-499)}, intArray0);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(96);
      assertNotNull(long0);
      assertEquals(96L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {96L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 36;
      intArray0[1] = (-783);
      intArray0[4] = (-2897);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2663;
      floatArray0[1] = (float) (-965);
      floatArray0[2] = (float) 1313;
      floatArray0[3] = (float) 2663;
      floatArray0[4] = (float) (-965);
      floatArray0[5] = (float) 2663;
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-965), 2663);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-289.9516906738281));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      short[] shortArray0 = new short[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(887, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 887, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Integer integer0 = new Integer(50);
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("50", string0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2663;
      floatArray0[1] = (float) (-965);
      floatArray0[2] = (float) 1333;
      floatArray0[3] = (float) 2663;
      floatArray0[4] = (float) (-965);
      floatArray0[5] = (float) 2663;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-2708));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2663.0F, (-965.0F), 1333.0F, 2663.0F, (-965.0F), 2663.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.insert((-5035), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer integer0 = new Integer((-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Integer integer1 = new Integer(1540);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1540, (int)integer1);
      
      Integer integer2 = new Integer((-965));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-965), (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-965.0F), 1333.0F, 2663.0F, (-965.0F), 2663.0F, 2663.0F}, floatArray0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(string0);
      assertEquals("-965", string0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-41);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (-974.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (int) (byte)49);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.14748365E9F, (-974.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) Integer.MAX_VALUE, 0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2.14748365E9F, (-974.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)50;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[6] = '}';
      charArray0[7] = '}';
      char[] charArray1 = ArrayUtils.add(charArray0, '+');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}', '}'}, charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '}', '}', '+'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 266;
      ArrayUtils.shift(doubleArray0, 266);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 266.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(266);
      assertNotNull(integer0);
      assertEquals(266, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'n');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'n';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 110.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 122;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 122}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1605.3094F);
      doubleArray0[2] = (double) 122;
      doubleArray0[3] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 122.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean3 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 122.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1105));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(longArray0, (-905), 18688, (-2));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-1L), 0L}, longArray0);
      
      Integer integer0 = new Integer((-2133071005));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2133071005), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      Integer integer1 = Integer.getInteger("*<LIe{");
      assertNull(integer1);
      
      integerArray0[6] = null;
      integerArray0[7] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.swap(doubleArray0, (-1), 13, (-1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)82;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)65, (byte)9, (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 0);
      assertTrue(integer0.equals((Object)object0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertTrue(integer0.equals((Object)object0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = ' ';
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2686.806));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2686.806), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2686.806));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-2686.806)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 2, 5, 6}", bitSet0.toString());
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf(charArray0, 'U', (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '@', '@', ' ', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '@';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 64.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {64.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {64.0F, 64.0F}, floatArray1, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), (int) (byte)0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {64.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)31;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("+g/&");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-44L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-44L)}, longArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)31;
      objectArray0[1] = (Object) (short)0;
      Object object0 = ArrayUtils.get(objectArray0, 1);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      objectArray0[2] = object0;
      ArrayUtils.reverse(objectArray0, (-455), (int) (short)31);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)987);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      
      Integer integer0 = new Integer(14);
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Integer integer1 = new Integer(121);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      Integer integer2 = new Integer((short)987);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(987, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-126));
      assertNotNull(byte0);
      assertEquals((byte) (-126), (byte)byte0);
      
      byte byte1 = (byte)102;
      Byte byte2 = new Byte((byte)102);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)102, (byte)byte2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-44));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-126), (int) (byte)120);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Long long0 = new Long(2400L);
      assertNotNull(long0);
      assertEquals(2400L, (long)long0);
      
      Long long1 = new Long(1809L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1809L, (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long0;
      longArray1[1] = long1;
      longArray1[2] = long0;
      longArray1[3] = long1;
      longArray1[4] = long0;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2400L, 1809L, 2400L, 1809L, 2400L, 2400L}, longArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      ArrayUtils.shuffle((Object[]) integerArray0, (Random) null);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)49);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)49);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      Integer integer0 = new Integer(97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer1 = ArrayUtils.get(integerArray0, 114);
      assertEquals(0, integerArray0.length);
      assertNull(integer1);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2757), (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(1044, booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      Integer integer0 = new Integer(65);
      assertNotNull(integer0);
      assertEquals(65, (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Integer integer2 = new Integer((-4199));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-4199), (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer(65);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(65, (int)integer3);
      
      integerArray0[1] = integer3;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer integer4 = ArrayUtils.get(integerArray0, 110);
      assertEquals(4, integerArray0.length);
      assertNull(integer4);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-557), (int) (byte)64);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE, 1099.7263);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.hashCode((Object) integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = '&';
      charArray0[3] = 'O';
      int int2 = ArrayUtils.indexOf(charArray0, '&');
      assertEquals(4, charArray0.length);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'A', 'A', '&', 'O'}, charArray0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)4}, shortArray0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)4;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (short)4;
      objectArray0[3] = (Object) (short)4;
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)4);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4.0F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf(1333.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1333.0F, (float)float2, 0.01F);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ',');
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) ',';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-2880L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {44L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {44L, 0L, 0L, (-2880L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)8;
      ArrayUtils.swap(byteArray0, 14, (-455), (int) (byte)8);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(859);
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'U';
      characterArray0[1] = (Character) 'U';
      characterArray0[2] = (Character) 'U';
      Float float0 = new Float(4514.0);
      assertNotNull(float0);
      assertEquals(4514.0F, (float)float0, 0.01F);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-7));
      assertNotNull(integer0);
      assertEquals((-7), (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertEquals((-7), (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer((-2106));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2106), (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer((-1715));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1715), (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(15);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(15, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertEquals(7, integerArray0.length);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals((-2106), (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer((-2519));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals((-2519), (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(76);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      assertEquals(76, (int)integer7);
      
      integerArray0[6] = integer7;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(5, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer7));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer integer0 = new Integer((-3244));
      assertNotNull(integer0);
      assertEquals((-3244), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-3244), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3244, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = 'G';
      charArray0[4] = '-';
      charArray0[5] = 'G';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'J', '-', '-', 'G', '-', 'G'}, charArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-60);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-60), (int) (byte) (-60));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-106), (byte) (-60)}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)87;
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) (-2779);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (byte) (-106);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 2839.96693650205, Double.NaN);
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(5, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {87.0, 74.0, (-2779.0), Double.NaN, (-106.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)13;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)13}, shortArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = ';';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1365;
      shortArray0[1] = (short)121;
      shortArray0[2] = (short) (-684);
      shortArray0[3] = (short)18875;
      shortArray0[4] = (short) (-1701);
      Integer integer0 = new Integer((short) (-684));
      assertNotNull(integer0);
      assertEquals((-684), (int)integer0);
      
      Integer integer1 = new Integer((-2137));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2137), (int)integer1);
      
      Integer integer2 = new Integer((-3092));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3092), (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer2;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer2;
      integerArray0[7] = integer1;
      Integer integer3 = ArrayUtils.get(integerArray0, (int)  (-684));
      assertEquals(8, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-669), (int) (short)18875);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) integerArray0[0], (double) integerArray0[7]);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '>';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(15, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      Integer integer0 = Integer.getInteger("", 1238);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1238, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) int0);
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      Short short0 = new Short((short)65);
      assertNotNull(short0);
      assertEquals((short)65, (short)short0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      short short0 = (short)591;
      shortArray0[1] = (short)591;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)52, (-541));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)9, (short)591, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      char char0 = 'g';
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = 'g';
      charArray0[4] = 'h';
      ArrayUtils.shuffle(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'g', 'n', 'g', 'h', '|'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '|';
      objectArray0[1] = (Object) (short)9;
      objectArray0[2] = (Object) 'h';
      objectArray0[3] = (Object) 'h';
      int int1 = (-1579);
      ArrayUtils.shift(objectArray0, (-1), (-1579), (int) (short)0);
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) 'n';
      intArray0[2] = (-1332);
      intArray0[3] = (int) (short)591;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1332), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1332, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1605.3094F);
      floatArray0[1] = (-1605.3094F);
      floatArray0[3] = (-1605.3094F);
      floatArray0[4] = (-1605.3094F);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1605.3094F), (-1605.3094F), 0.0F, (-1605.3094F), (-1605.3094F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 122;
      intArray0[1] = 122;
      intArray0[2] = 122;
      ArrayUtils.reverse(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {122, 122, 122}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1105);
      shortArray0[1] = (short) (-2);
      shortArray0[2] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1105), (short) (-2), (short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105), (short) (-2), (short) (-1105)}, shortArray1);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 122;
      doubleArray1[1] = 1155.30251694175;
      doubleArray1[2] = (double) (short) (-2);
      doubleArray1[3] = (-2273.9);
      doubleArray1[4] = (double) (short) (-1105);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {122.0, 1155.30251694175, (-2.0), (-2273.9), (-1105.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 105.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 105.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {105.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {105.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-92);
      floatArray0[1] = (float) (-92);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-92), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -92, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short) (-363);
      shortArray0[0] = (short)28937;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'f';
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('f', (char)character4);
      
      Long long0 = new Long((byte)49);
      assertNotNull(long0);
      assertEquals(49L, (long)long0);
      
      Long long1 = new Long((short)28937);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(28937L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((short)28937);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(28937L, (long)long3);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)28937, (short) (-363), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)28937, (short) (-363), (short)0}, shortArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-363);
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) (short)64;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-363), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -363, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.insert(0, (float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) ':';
      longArray0[4] = (-1L);
      longArray0[5] = (long) 'v';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {58L, 118L, 118L, 58L, (-1L), 118L}, longArray0);
      assertTrue(boolean0);
      
      int int0 = 19;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 19;
      floatArray0[2] = (float) 58L;
      floatArray0[3] = (float) 118L;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) ':';
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) ':';
      floatArray0[8] = (float) 58L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(19, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 1432);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)35);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)35, (byte)byte1);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)0, (int) (byte)0);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(0, int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int int0 = (-1775);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte byte1 = (byte)35;
      Byte byte2 = new Byte((byte)35);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)35, (byte)byte2);
      
      byte byte3 = (byte)120;
      Byte byte4 = new Byte((byte)120);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)120, (byte)byte4);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = byte4;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte3);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byte3 == byte1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)120}, byteArray2);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray2, (byte)0, (int) (byte)0);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byte3 == byte1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)120}, byteArray2);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-2779));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-3501));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-965);
      longArray0[2] = (long) 110;
      longArray0[3] = (long) (-3501);
      longArray0[4] = (long) 1333;
      longArray0[5] = (long) (-2779);
      longArray0[6] = (long) (-2779);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, (-965L), 110L, (-3501L), 1333L, (-2779L), (-2779L)}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)539;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)539}, shortArray0);
      
      ArrayUtils.shift(longArray0, (int) (short)539);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, (-965L), 110L, (-3501L), 1333L, (-2779L), (-2779L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[0] = 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      ArrayUtils.shift(longArray0, 0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'S'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short)454;
      shortArray0[2] = (short)28937;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-363), (short)454, (short)28937}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)28937;
      objectArray0[1] = (Object) (short)28937;
      objectArray0[2] = (Object) (short)28937;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(objectArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2225);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2225, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1544.0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1590;
      intArray0[1] = (-2170);
      intArray0[2] = (-381);
      intArray0[3] = 420;
      intArray0[4] = (-1927);
      intArray0[5] = (-1732);
      intArray0[6] = 1547;
      intArray0[7] = 2145553306;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145553306, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      int[] intArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, Integer.MAX_VALUE);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2.0F;
      floatArray0[1] = 922.93445F;
      floatArray0[2] = 1015.5F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-209), 3355);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 922.93445F, 1015.5F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 922.93445F, 1015.5F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(floatArray1, 920.9161F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 922.93445F, 1015.5F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 922.93445F, 1015.5F}, floatArray1, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-363);
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short)454;
      short short1 = (short)28937;
      shortArray0[2] = (short)28937;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1333;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1860);
      shortArray0[1] = (short)120;
      doubleArray0[7] = (double) (short) (-446);
      shortArray0[3] = (short)4013;
      shortArray0[4] = (short) (-3664);
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short)4013;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertEquals(3, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1860), (short)120, (short) (-3664)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1860), (short)120, (short)0, (short)4013, (short) (-3664), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)4013, (short)0, (short)0}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) doubleStream0;
      objectArray0[1] = (Object) doubleStream0;
      objectArray0[2] = (Object) (short) (-1);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)56;
      shortArray1[1] = (short)56;
      shortArray1[2] = (short)2242;
      shortArray1[3] = (short)56;
      shortArray1[4] = (short)56;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)56, (short)56, (short)2242, (short)56, (short)56}, shortArray1);
      assertArrayEquals(new short[] {(short)56, (short)56, (short)2242, (short)56, (short)56}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)8;
      ArrayUtils.swap(byteArray0, 14, (-455), (int) (byte)8);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)8}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(859);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-28);
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) (byte) (-28);
      doubleArray0[3] = (double) 'U';
      doubleArray0[4] = (double) 'U';
      doubleArray0[5] = (double) 859;
      doubleArray0[6] = (double) (byte)8;
      doubleArray0[7] = (double) 'U';
      ArrayUtils.swap(doubleArray0, 14, (-1896), (-7));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-28.0), 72.0, (-28.0), 85.0, 85.0, 859.0, 8.0, 85.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-7);
      intArray0[1] = (int) (byte)8;
      intArray0[2] = 14;
      intArray0[3] = (-1896);
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) 'U';
      intArray0[6] = (int) (byte) (-28);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-28));
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-7), 8, 14, (-1896), 72, 85, (-28)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '3');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) 1333;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[2] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3381;
      shortArray0[1] = (short)610;
      shortArray0[2] = (short)1996;
      ArrayUtils.reverse(shortArray0, 0, 1333);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1996, (short)610, (short)3381}, shortArray0);
      
      ArrayUtils.swap(intArray0, (int) (short)610, 0, (int) (short)610);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-965));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1996, (short)610, (short)3381}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)3381;
      doubleArray0[1] = 1948.3;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1062.81;
      doubleArray0[4] = (double) 1333;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-203.0), 1333, 1.5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3381.0, 1948.3, 0.0, 1062.81, 1333.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (int) (short)1996, (int) (short)1996);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)1996;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-965);
      longArray0[5] = (long) (short)0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-965L));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1996L, (-1L), (-965L), 0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) 'v';
      longArray0[2] = (long) 'v';
      longArray0[3] = (long) ':';
      longArray0[4] = (-1L);
      longArray0[5] = (long) 'v';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {58L, 118L, 118L, 58L, (-1L), 118L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 121;
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, int0);
      assertEquals(1, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 111;
      intArray0[2] = 3668;
      intArray0[3] = 4;
      intArray0[4] = int0;
      intArray0[5] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4, 111, 3668, 4, 121, 0}, intArray1);
      assertArrayEquals(new int[] {4, 111, 3668, 4, 121, 0}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)64, 9);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) 121);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf(charArray0, '2');
      assertEquals(4, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'S', 'S'}, charArray0);
      assertEquals((-1), int2);
      
      ArrayUtils.shift(floatArray0, 4, 4, (-884));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[5] = (double) (-31);
      doubleArray0[6] = (double) (-31);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, (-2757), (-1), (-1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), (-1.0), 0.0, (-31.0), (-31.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-31), object0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-1.0), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (-1.0F);
      Integer integer0 = new Integer((-31));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-31), (int)integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-418));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.addFirst((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ' ';
      doubleArray0[1] = (double) ' ';
      doubleArray0[2] = (double) ' ';
      doubleArray0[3] = (double) ' ';
      ArrayUtils.shift(doubleArray0, (-1939), 1, (-1315));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, 32.0, 32.0, 32.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-965), 1333, (-2757));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-965.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = 2690.033F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-965);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 1333;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(12, floatArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = 488;
      MutableInt mutableInt0 = new MutableInt(488);
      assertEquals(488.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(488, (int)mutableInt0.toInteger());
      assertEquals(488, (int)mutableInt0.getValue());
      assertEquals(488, mutableInt0.intValue());
      assertEquals(488L, mutableInt0.longValue());
      assertEquals(488.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)488, mutableInt0.shortValue());
      assertEquals("488", mutableInt0.toString());
      assertEquals((byte) (-24), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-965);
      longArray0[5] = (long) 488;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals(6, longArray0.length);
      assertNotNull(longBuffer0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L, (-965L), 488L}, longArray0);
      
      BitSet bitSet1 = BitSet.valueOf(longBuffer0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(0, longBuffer0.position());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertEquals(6, longBuffer0.remaining());
      assertTrue(longBuffer0.hasArray());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=6 cap=6]", longBuffer0.toString());
      assertEquals(6, longBuffer0.limit());
      assertEquals(6, longBuffer0.capacity());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 256, 257, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 325, 326, 327, 328}", bitSet1.toString());
      assertEquals(384, bitSet1.size());
      assertEquals(329, bitSet1.length());
      assertEquals(192, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L, (-965L), 488L}, longArray0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(488.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(488, (int)mutableInt0.toInteger());
      assertEquals(488, (int)mutableInt0.getValue());
      assertEquals(488, mutableInt0.intValue());
      assertEquals(488L, mutableInt0.longValue());
      assertEquals(488.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)488, mutableInt0.shortValue());
      assertEquals("488", mutableInt0.toString());
      assertEquals((byte) (-24), mutableInt0.byteValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(488, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(488.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(488, (int)mutableInt0.toInteger());
      assertEquals(488, (int)mutableInt0.getValue());
      assertEquals(488, mutableInt0.intValue());
      assertEquals(488L, mutableInt0.longValue());
      assertEquals(488.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)488, mutableInt0.shortValue());
      assertEquals("488", mutableInt0.toString());
      assertEquals((byte) (-24), mutableInt0.byteValue());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(488, object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-965.0);
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 2690.033F;
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[2], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 121, (-2146905745));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146758635);
      intArray0[1] = (int) (short)2906;
      intArray0[2] = 1;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (short)56, (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-2146758635), 2906, 1}, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2906;
      doubleArray0[2] = (double) 121;
      ArrayUtils.shift(doubleArray0, (-2145260579), (int) (short)56, 1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {121.0, 1.0, 2906.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90, 83);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-40));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)118);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)118, (byte)byte1);
      
      Byte byte2 = new Byte((byte)120);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)120, (byte)byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byte byte3 = (byte)107;
      Byte byte4 = new Byte((byte)107);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)107, (byte)byte4);
      
      byteArray0[1] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte3);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)118, (byte)107}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)120;
      ArrayUtils.reverse(shortArray0, (int) (byte)107, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)120}, shortArray0);
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Integer integer1 = new Integer((short)88);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(88, (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, (int) 107);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertNull(abstractMap_SimpleImmutableEntry3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 1561);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)115, (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)118, (byte)107}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)107;
      shortArray0[1] = (short)56;
      shortArray0[2] = (short) (-350);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2956;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)107, (short)56, (short) (-350), (short) (-1), (short)2956}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.swap((short[]) null, (-15), 1138);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      ArrayUtils.shift(intArray0, (int) (byte)60);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';', (int) (byte)60);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'%', 'Z'}, charArray0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)60;
      byteArray1[1] = (Byte) (byte)60;
      byteArray1[2] = (Byte) (byte)60;
      byteArray1[3] = (Byte) (byte)60;
      byteArray1[4] = (Byte) (byte)60;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)60);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1365;
      shortArray0[1] = (short)121;
      shortArray0[2] = (short) (-684);
      shortArray0[3] = (short)18875;
      shortArray0[4] = (short) (-1701);
      shortArray0[5] = (short)53;
      shortArray0[6] = (short) (-1);
      short short0 = (short)12;
      shortArray0[7] = (short)12;
      ArrayUtils.swap(shortArray0, (int) (short)1365, (int) (short) (-1701));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1365, (short)121, (short) (-684), (short)18875, (short) (-1701), (short)53, (short) (-1), (short)12}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1365;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (short)18875, (double) (short)1365);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18875, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      ArrayUtils.swap(shortArray0, 408, (int) (short) (-1));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (short) (-1), (int) (short) (-1));
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), (double) (byte)40);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {40.0, (-1.0), 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-6798);
      doubleArray0[1] = (double) (short) (-6798);
      doubleArray0[2] = (double) 1627;
      ArrayUtils.shift(doubleArray0, 1627);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1627.0, (-6798.0), (-6798.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-1L));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (byte)0, 2);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 1853L;
      longArray0[2] = 2216L;
      longArray0[3] = 90L;
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1003.70166F));
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1003.70166F)}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[3];
      int int0 = 121;
      Integer integer0 = new Integer(121);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(121, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(121);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (-2184));
      assertEquals(3, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2184);
      intArray0[1] = 4;
      intArray0[2] = 121;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2184), 4, 121}, intArray0);
      assertArrayEquals(new int[] {(-2184), 4, 121}, intArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-112);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-112), int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-112)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-112)}, byteArray1);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) int0;
      longArray1[1] = (long) int0;
      longArray1[2] = (long) 4;
      ArrayUtils.shuffle(longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {121L, 4L, 121L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      ArrayUtils.swap((char[]) null, (int) (short)1, (-151), (-965));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 877.3607643300498;
      doubleArray0[1] = (double) 'S';
      doubleArray0[2] = (double) 'S';
      doubleArray0[3] = (double) (byte)64;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)64;
      doubleArray0[6] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 114.3780491264, 0.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {877.3607643300498, 83.0, 83.0, 64.0, 0.0, 64.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      String string0 = "nP%e:";
      Integer integer0 = Integer.getInteger("nP%e:", (-45));
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertEquals(3, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Object object2 = ArrayUtils.get((Object[]) integerArray0, 166, objectArray0[1]);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(object2.equals((Object)boolean0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(false, object2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 530.9000244140625, 166, 120.49764763429336);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      bitSet0.andNot(bitSet1);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, byteArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-2331), 91, 138);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 84;
      ArrayUtils.shift(floatArray0, (-1), 294, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {84.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-4068.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4068.0), 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = 2740;
      intArray0[1] = 2740;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 7);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2740, 2740, 0, 0}, intArray0);
      assertArrayEquals(new int[] {7, 2740, 2740, 0, 0}, intArray1);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, (double) 2740);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2740.0}, doubleArray1, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)112;
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)110, (byte)0, (byte) (-127), (byte)121, (byte) (-119), (byte) (-68), (byte) (-14)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte)121);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)121;
      doubleArray0[1] = (double) (byte) (-68);
      doubleArray0[2] = (double) (byte) (-14);
      doubleArray0[3] = (double) (byte) (-68);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {121.0, (-68.0), (-14.0), (-68.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {121.0, (-68.0), (-14.0), (-68.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (byte) (-14);
      doubleArray2[1] = (double) (byte)112;
      doubleArray2[2] = (-3802.19975);
      doubleArray2[3] = (double) (byte) (-119);
      doubleArray2[4] = (double) (byte) (-14);
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, (-85.49095869886));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-14.0), 112.0, (-3802.19975), (-119.0), (-14.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-85.49095869886), (-14.0), 112.0, (-3802.19975), (-119.0), (-14.0)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      long[] longArray0 = new long[14];
      longArray0[0] = (long) 765;
      longArray0[1] = (long) int0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 539L, int0);
      assertEquals(14, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 765L;
      longArray1[1] = (Long) 765L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-629L));
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {765L, 765L}, longArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-75);
      ArrayUtils.swap(byteArray0, 0, 0, 1003);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-75)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1333);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, (-965), 1333, 0}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = 1821.9614533255417;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = (double) 1333;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1333, 1333, (double) 1333);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-965.0), 1821.9614533255417, 1333.0, 1333.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1333;
      longArray0[1] = (long) (-965);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-965);
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-965L), (-1L), (-965L), 1333L}, longArray0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 1333);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 1333.0;
      ArrayUtils.shift(objectArray0, 1333);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.swap(intArray1, 2064, 1412, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, (-965), 1333, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[5] = (double) (-31);
      doubleArray0[6] = (double) (-31);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, (-2757), (-1), (-1));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), 0.0, (-31.0), (-31.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 3156, object0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-1.0), object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (-1.0F);
      Integer integer0 = new Integer((-31));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-31), (int)integer0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) integer0, (-418));
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Float float0 = new Float((double) (-1394));
      assertNotNull(float0);
      assertEquals((-1394.0F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      ArrayUtils.swap(doubleArray0, 0, (int) (short) (-1), 2905);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1394);
      floatArray0[3] = (float) (-1394);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (-1394);
      floatArray0[8] = (float) 2905;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2905, (-3646));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1394.0F), (-1394.0F), 0.0F, 0.0F, 0.0F, (-1394.0F), 2905.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'm';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ',';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer(92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      Integer integer1 = Integer.getInteger("'_hd;c{RLH", (int) (short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (int) 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)70);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)70}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-35)}, byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)70;
      intArray0[2] = (-156);
      intArray0[3] = (int) (byte)70;
      intArray0[4] = 2;
      ArrayUtils.shift(intArray0, (-24), 2, (int) (byte)70);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), 70, (-156), 70, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-1));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.shift(intArray0, (-1), 1, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1));
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3210, (int) (short)3210);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93, (byte)120, (byte)48, (byte) (-1), (byte)120, (byte)7, (byte)48, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)48, (byte) (-1), (byte)120, (byte)7, (byte)48, (byte)0, (byte)0, (byte)93}, byteArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      long[] longArray0 = new long[4];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 12;
      floatArray0[1] = (float) 12;
      floatArray0[2] = (float) 12;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-964);
      intArray0[0] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1333, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1333, 0, 0}, intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-964);
      doubleArray0[3] = (-3107.639489866468);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3107.639489866468), (-1134), (-964.0));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-964.0), 0.0, (-3107.639489866468)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.insert(1, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '-';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', '-'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '-'}, charArray1);
      
      ArrayUtils.swap(charArray1, 3798, 3798, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'-', 'K', '-'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '-'}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2394;
      doubleArray0[1] = (double) 'K';
      doubleArray0[2] = (double) int0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 110.0, (-3303), (double) 2394);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {2394.0, 75.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)77;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = 4470.91F;
      floatArray0[2] = (float) (byte)9;
      floatArray0[3] = (float) (byte)77;
      floatArray0[4] = (float) (byte)77;
      floatArray0[5] = (float) (byte)77;
      floatArray0[6] = 1333.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)9);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {77.0F, 4470.91F, 9.0F, 77.0F, 77.0F, 77.0F, 1333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9.0F, 77.0F, 4470.91F, 9.0F, 77.0F, 77.0F, 77.0F, 1333.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'0', 'E'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 418;
      longArray0[1] = (long) '0';
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      longArray0[4] = (long) '0';
      longArray0[5] = (long) '0';
      ArrayUtils.shift(longArray0, (-4), 418, (int) (byte)9);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {6L, 48L, 48L, 418L, 48L, 6L}, longArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1043, 2023);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'0', 'E'}, charArray0);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {77.0F, 4470.91F, 9.0F, 77.0F, 77.0F, 77.0F, 1333.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Long long0 = new Long(2400L);
      assertNotNull(long0);
      assertEquals(2400L, (long)long0);
      
      Long long1 = new Long(1809L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1809L, (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long0;
      longArray1[1] = long1;
      longArray1[2] = long0;
      longArray1[3] = long1;
      longArray1[4] = long0;
      longArray1[5] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {2400L, 1809L, 2400L, 1809L, 2400L, 2400L}, longArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray1, (Object) integer0);
      assertEquals(6, longArray1.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', 'S', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', '\u0000'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.5);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) integer0, 121);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int1);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Float float0 = new Float((double) Integer.MAX_VALUE);
      assertNotNull(float0);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (int) (short)0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 110.0F;
      floatArray0[1] = 209.765F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3544.5833F);
      floatArray0[5] = (-2937.4F);
      floatArray0[6] = (-289.9517F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-3544.5833F), 36);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, 209.765F, (-1.0F), 0.0F, (-3544.5833F), (-2937.4F), (-289.9517F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 36, (int) (byte)78);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-62), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte) (-62);
      short short0 = (short)109;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)109);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)78, (short) (-62)}, shortArray0);
      assertArrayEquals(new short[] {(short)109, (short)78, (short) (-62)}, shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-289.9517F);
      doubleArray0[1] = (double) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 55, 55, 9);
      long[] longArray0 = ArrayUtils.insert(9, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.insert(99, (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((byte)0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer[] integerArray1 = new Integer[3];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      Integer integer3 = new Integer((-1218));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1218), (int)integer3);
      
      integerArray1[1] = integer3;
      Integer integer4 = new Integer(1276);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(1276, (int)integer4);
      
      integerArray1[2] = integer4;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray1, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(0, integerArray2.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 2394, 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) 2394;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 2394L, 2394L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 2394L, 2394L, 0L, 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-1), (byte)94, (byte) (-1), (byte)119, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (byte)94;
      intArray2[1] = (int) (byte)119;
      intArray2[2] = (int) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (-1440), (-2379), 65);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-2732.7815), 172);
      assertEquals(0, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (short)2178, (-1), (-1283));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)6;
      shortArray0[0] = (short)6;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)6, (int) (short)6);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char char0 = 'v';
      char[] charArray0 = new char[4];
      charArray0[1] = 'v';
      charArray0[1] = 'v';
      charArray0[0] = '\u0000';
      ArrayUtils.reverse(charArray0, (int) (short)6, (-600));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'v', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(13, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, 28);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-286));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '7');
      assertNull(charArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) '7';
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1);
      intArray0[6] = (int) '7';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray1, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[3];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 1365;
      intArray0[7] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 1365;
      intArray0[5] = 1365;
      intArray0[6] = 1365;
      intArray0[7] = 1365;
      intArray0[8] = (int) (short)0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray2.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1365, 1365, 1365, 1365, 1365}, intArray2);
      assertArrayEquals(new int[] {0, 1365, 0, 0, 1365, 1365, 1365, 1365, 0}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1365, object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-37);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-11));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)9, (byte)1, (byte) (-11), (byte)9, (byte)84, (byte) (-37)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)9, (byte)1, (byte)9, (byte)84, (byte) (-37)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift((long[]) null, Integer.MAX_VALUE, 92, Integer.MAX_VALUE);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte) (-28);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), (-2670), (int) (byte) (-28));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8, (byte)8, (byte) (-28), (byte) (-28)}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(0);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'H');
      assertNull(charArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-28), (-1124), (-621));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8, (byte)8, (byte) (-28), (byte) (-28)}, byteArray0);
      
      char[] charArray1 = new char[8];
      charArray1[0] = 'H';
      charArray1[1] = 'H';
      charArray1[2] = 'H';
      charArray1[3] = 'H';
      charArray1[4] = 'H';
      charArray1[5] = 'H';
      charArray1[6] = 'H';
      charArray1[7] = 'H';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte) (-1), 877);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray1);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 530.9F;
      floatArray0[1] = (-1.0F);
      int int0 = 2663;
      int int1 = (-2145636850);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2663, (-2145636850));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      short short0 = (short)2;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (short)2;
      longArray0[2] = (long) 2663;
      longArray0[3] = (long) 2663;
      longArray0[4] = (long) (short)2;
      longArray0[6] = (-27L);
      char[] charArray0 = new char[0];
      int int2 = 84;
      char[] charArray1 = ArrayUtils.subarray(charArray0, 84, 82);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2663L;
      try { 
        Integer.valueOf("", 84);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 84 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)104;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)104, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)987;
      shortArray0[1] = (short)987;
      shortArray0[2] = (short)987;
      shortArray0[3] = (short)987;
      shortArray0[4] = (short)987;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1056), 2624);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)987, (short)987, (short)987, (short)987, (short)987}, shortArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = '|';
      charArray0[2] = '|';
      ArrayUtils.swap(charArray0, 1728, (-1223));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'C', '|', '|'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)14, 1728);
      assertEquals(2, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      Integer integer1 = new Integer((-1689));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1689), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, 765);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2146615942L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-2146615942L);
      longArray1[1] = (Long) (-2146615942L);
      longArray1[2] = (Long) (-2146615942L);
      longArray1[3] = (Long) (-2146615942L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) 765);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2146615942L), (-2146615942L), (-2146615942L), (-2146615942L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1422;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1422L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = 0;
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(int0 == int1);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger(" in an array of ", 1876);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1876, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(265);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(265, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3523);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(3523, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(3523);
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(3523, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(265);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int1));
      assertNotNull(integer7);
      assertEquals(265, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[4];
      intArray0[1] = (int) integerArray0[7];
      intArray0[2] = (int) integerArray0[4];
      intArray0[3] = (int) integerArray0[3];
      intArray0[4] = int0;
      intArray0[5] = (-1);
      intArray0[6] = (-658);
      intArray0[7] = (int) integerArray0[5];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3523, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-76);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2185);
      assertNotNull(integer0);
      assertEquals(2185, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(2185, object1);
      
      objectArray0[1] = object1;
      Float float0 = new Float(5559.0130540146);
      assertNotNull(float0);
      assertEquals(5559.013F, (float)float0, 0.01F);
      
      Float float1 = new Float(939.260333396);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(939.2603F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf((float) 2185);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(2185.0F, (float)float2, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)84;
      shortArray0[1] = (short)987;
      shortArray0[2] = (short)987;
      shortArray0[3] = (short)31;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)31;
      shortArray0[6] = (short)987;
      shortArray0[7] = (short)987;
      shortArray0[8] = (short)31;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)987, (-1817));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)84, (short)987, (short)987, (short)31, (short)0, (short)31, (short)987, (short)987, (short)31}, shortArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.swap(charArray0, 1, (int) (short)31);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-24);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-24), 4);
      assertEquals(4, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[5] = 120.49764763429336;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1287L);
      longArray0[2] = (-1689L);
      longArray0[3] = (-1287L);
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1287L), (-1689L), (-1287L), 0L, (-1287L), (-1689L), (-1287L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-1287L), (-1689L), (-1287L)}, longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'L';
      charArray0[2] = ',';
      charArray0[3] = '{';
      charArray0[4] = 'E';
      ArrayUtils.swap(charArray0, 2, 171);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'L', ',', '{', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((byte) (-46));
      assertNotNull(integer0);
      assertEquals((-46), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertNotNull(integer1);
      assertEquals((-46), (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[0]);
      assertEquals((-46), (int)mutableInt0.getValue());
      assertEquals((-46L), mutableInt0.longValue());
      assertEquals((short) (-46), mutableInt0.shortValue());
      assertEquals((-46.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-46", mutableInt0.toString());
      assertEquals((-46), mutableInt0.intValue());
      assertEquals((-46.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-46), (int)mutableInt0.toInteger());
      assertEquals((byte) (-46), mutableInt0.byteValue());
      assertEquals(4, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-46), (int)mutableInt0.getValue());
      assertEquals((-46L), mutableInt0.longValue());
      assertEquals((short) (-46), mutableInt0.shortValue());
      assertEquals((-46.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-46", mutableInt0.toString());
      assertEquals((-46), mutableInt0.intValue());
      assertEquals((-46.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-46), (int)mutableInt0.toInteger());
      assertEquals((byte) (-46), mutableInt0.byteValue());
      assertEquals(4, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-46), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2217);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2217, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = new Integer[1];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer2;
      Integer[] integerArray2 = ArrayUtils.removeElements(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertEquals(3, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray2));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-46), (-46), (-46), 2217}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      integerArray0[5] = (Integer) (-1);
      integerArray0[6] = (Integer) (-1);
      integerArray0[7] = (Integer) (-1);
      integerArray0[8] = (Integer) (-1);
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 2, (float) 2L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 530.9F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2663, (-2145636850));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray1);
      
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = (long) (short)2;
      longArray1[2] = (long) 2663;
      longArray1[3] = (long) 2663;
      longArray1[4] = (long) (short)2;
      longArray1[6] = (-27L);
      longArray1[7] = (-1287L);
      long[] longArray2 = ArrayUtils.insert((int) (short)2, longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(16, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2L, 2663L, 2663L, 2L, 0L, (-27L), (-1287L)}, longArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3067);
      assertNotNull(integer0);
      assertEquals(3067, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3541));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3541), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(100);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(100, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F), 530.9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1797));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(12L);
      assertNotNull(mockRandom0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-1), 899);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      ArrayUtils.reverse((float[]) null, (-1797), (-2043));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 252, 252);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'm';
      charArray0[3] = 'J';
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 803.6111087116007;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 'm';
      doubleArray0[4] = (double) 'v';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {803.6111087116007, 0.0, 109.0, 118.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short)0, 64);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      ArrayUtils.shift(charArray0, (-1896), (-75), (-1896));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) 'w', (-1896));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((short[]) null, (int) 'w');
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1896), 9);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-98);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-98.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-98));
      assertNotNull(integer0);
      assertEquals((-98), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-98);
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-98)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (int)integerArray0[0];
      doubleArray1[1] = (double) (byte) (-98);
      doubleArray1[2] = (double) (int)integerArray0[0];
      doubleArray1[3] = (double) (short) (-98);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-98.0), (-98.0), (-98.0), (-98.0)}, doubleArray1, 0.01);
      assertTrue(boolean1);
      
      ArrayUtils.swap(doubleArray0, (int) integerArray0[0], (int) (byte) (-98));
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(integerArray0, integerArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, integerArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-98.0)}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (-98.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-98.0), (-98.0), (-98.0), (-98.0)}, doubleArray1, 0.01);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-98);
      floatArray0[1] = (float) (byte) (-98);
      floatArray0[2] = (float) (short) (-98);
      floatArray0[3] = (float) (short) (-98);
      floatArray0[4] = (float) (short) (-98);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (byte) (-98);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) integerArray0[0]);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(integerArray0, integerArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertEquals(1, integerArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-98.0F), (-98.0F), (-98.0F), (-98.0F), 0.0F, (-98.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-98.0F), (-98.0F), (-98.0F), (-98.0F), (-98.0F), 0.0F, (-98.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3627);
      shortArray0[1] = (short)1028;
      shortArray0[2] = (short) (-3108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3627), (short)1028, (short) (-3108)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)16;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      assertArrayEquals(new char[] {'w', 'N', 'w', 'N'}, charArray1);
      
      ArrayUtils.swap(byteArray0, (-322), (-2651));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, 0);
      assertEquals(3, integerArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, true);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(2, booleanArray3.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)49);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-744));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-43), (-215));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.valueOf((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = Integer.valueOf((-31));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-31), (int)integer1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer0;
      objectArray0[7] = (Object) integer0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = object0;
      objectArray0[4] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) integer0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1);
      
      Integer integer2 = new Integer(3571);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(3571, (int)integer2);
      
      boolean boolean2 = ArrayUtils.contains(objectArray0, object2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean2);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1), (int) (short)1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-31));
      assertNotNull(long0);
      assertEquals((-31L), (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 255L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-31L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 0, 1121);
      assertEquals((-1), int0);
      
      Short short0 = new Short((byte)103);
      assertNotNull(short0);
      assertEquals((short)103, (short)short0);
      
      Short short1 = new Short((byte)103);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)103, (short)short1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("/");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'D';
      charArray0[2] = 'p';
      charArray0[3] = 'k';
      ArrayUtils.shuffle(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'D', 'p', 'k', '\u0000', '\u0000', '*'}, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'k';
      ArrayUtils.shift(objectArray0, (-2133071005), (-207), (-207));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      shortArray0[1] = (short)31;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)31);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)987, (short)31, (short)0}, shortArray0);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '/';
      charArray0[2] = 'C';
      charArray0[3] = 'n';
      ArrayUtils.swap(charArray0, (-2882), (-2146274479));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'|', '/', 'C', 'n', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-24), (-2882));
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1.0);
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.insert(935, doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameType(objectArray0[0], objectArray0[1]);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-446));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -446, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      Integer integer0 = new Integer((-1775));
      assertNotNull(integer0);
      assertEquals((-1775), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1394), (-1394));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (int) (short)0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2006.3);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2514.1432554);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2006.3), 0.0, (-2514.1432554)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2006.3), 0.0, (-2514.1432554)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (byte)12);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 20;
      floatArray0[2] = (float) (-1334);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 20.0F);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 20.0F, (-1334.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)12;
      shortArray0[3] = (short)793;
      shortArray0[4] = (short) (byte)12;
      shortArray0[5] = (short) (-2853);
      shortArray0[6] = (short) (byte)12;
      shortArray0[7] = (short) (byte)12;
      shortArray0[8] = (short) (byte)12;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)793, (short)12, (short) (-2853), (short)12, (short)12, (short)12, (short)89}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      charArray0[2] = '\u008B';
      ArrayUtils.swap(charArray0, (-354), 0, 0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {':', 'v', '\u008B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(booleanArray1, 148);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-45);
      doubleArray0[1] = (double) 1365;
      doubleArray0[2] = (double) 148;
      doubleArray0[3] = (-417.72361);
      doubleArray0[4] = (double) (short)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-45.0), 1365.0, 148.0, (-417.72361), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = 91L;
      longArray0[2] = (long) 148;
      longArray0[3] = (long) 1365;
      longArray0[4] = (long) 148;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {91L, 148L, 1365L, 148L}, longArray1);
      assertArrayEquals(new long[] {0L, 91L, 148L, 1365L, 148L}, longArray0);
      
      Short short0 = new Short((short)89);
      assertNotNull(short0);
      assertEquals((short)89, (short)short0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3019));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3019), (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.removeAllOccurences(intArray2, 677);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, (boolean) boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'C');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf((int[]) null, 59, (-2692));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 18);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'V';
      charArray0[5] = '-';
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.shift(intArray0, (-1492), 385, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1508);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'D', '-', '-', '-', 'V', '-'}, charArray0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-4257));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2, (-4257)}, intArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) '-';
      longArray0[5] = 68L;
      longArray0[6] = (long) 'V';
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 1508);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, 5L, 2L, 2L, 45L, 68L, 86L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-306);
      shortArray0[2] = (short) (-2196);
      shortArray0[3] = (short)5308;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1226;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)16);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-306), (short) (-2196), (short)5308, (short)1, (short)1226}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)0, (short) (-306), (short) (-2196), (short)5308, (short)1, (short)1226}, shortArray1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)96;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1048;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)96, (short) (-1), (short)1048}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (short) (-1790), (-6103), (int) (short) (-1790));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-70);
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-70), (byte) (-31), (byte)51, (byte) (-24)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, int0);
      assertEquals("{0, 1, 3, 4, 5, 6, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(9, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-31);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (byte) (-31);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (byte) (-31));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -31, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2659.1652045664;
      doubleArray0[1] = (-2.002879987607524);
      doubleArray0[2] = (-597.763);
      doubleArray0[3] = (-4444.67763384);
      doubleArray0[4] = 1513.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2659.1652045664, (-597.763), (-4444.67763384), 1513.0, (-2.002879987607524)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3613.0F);
      floatArray0[1] = 89.0F;
      floatArray0[2] = 2310.2275F;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-3613.0F);
      objectArray0[1] = (Object) 1513.0;
      objectArray0[2] = (Object) 89.0F;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) 1513.0;
      objectArray0[5] = (Object) 1513.0;
      objectArray0[6] = (Object) doubleStream0;
      ArrayUtils.reverse(objectArray0, (-488), 1182);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2355.4985F);
      floatArray0[1] = (float) (-484);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-2355.4985F);
      floatArray1[1] = 28.316944F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-2355.4985F), (-484.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2355.4985F), 28.316944F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-484.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (int) 'k', (int) 'k');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, '`');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.getInteger((String) null, (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Integer integer0 = Integer.getInteger(".G", 97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      Integer integer1 = Integer.getInteger("1>el", (-1610612736));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1610612736), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals(97, object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer1));
      assertNotNull(object1);
      assertEquals(97, object1);
      
      Integer integer2 = new Integer((-1337));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)object0));
      assertNotNull(integer2);
      assertEquals((-1337), (int)integer2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".G";
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertEquals(1, objectArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object1.equals((Object)integer2));
      assertFalse(object1.equals((Object)integer1));
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      char[] charArray1 = ArrayUtils.clone((char[]) null);
      assertNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1337);
      longArray0[1] = (long) (-1337);
      longArray0[2] = (long) (-1610612736);
      longArray0[3] = (long) (-1610612736);
      longArray0[4] = (long) 'h';
      longArray0[5] = (long) 97;
      longArray0[6] = 2781L;
      longArray0[7] = (long) 'h';
      long[] longArray1 = ArrayUtils.add(longArray0, (-965L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1337L), (-1337L), (-1610612736L), (-1610612736L), 104L, 97L, 2781L, 104L}, longArray0);
      assertArrayEquals(new long[] {(-1337L), (-1337L), (-1610612736L), (-1610612736L), 104L, 97L, 2781L, 104L, (-965L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2659.1652045664;
      doubleArray0[1] = (-2.002879987607524);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 4749);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 4749);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("", (-2889));
      assertNotNull(integer0);
      assertEquals((-2889), (int)integer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Integer integer1 = new Integer(110);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(110, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 1591, integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1591, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1333;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1513.0;
      doubleArray0[4] = (-4444.67763384);
      doubleArray0[5] = (double) (-2779);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 1333;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new double[] {0.0, 0.0, 1513.0, (-4444.67763384), (-2779.0), 0.0, 1333.0, 1333.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 89.0F;
      ArrayUtils.shift(floatArray0, (-268), (-268), 1333);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {89.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1110.489F);
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, 0, 20);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1110.489F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-891));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, (-1074), 3);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-1553), 2, 3);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-4007));
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (-352.0);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-4479);
      doubleArray0[8] = (double) (-1074);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-891), 0.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-352.0), 0.0, 0.0, (-4479.0), 0.0, (-1074.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, 1, 1, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, 1627);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '7');
      assertNull(charArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ArrayUtils.shift(doubleArray0, (-1775));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[14];
      char[] charArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      doubleArray0[1] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(14, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '7');
      assertNull(charArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4363;
      intArray0[1] = 14;
      intArray0[2] = 4363;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1775));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {4363, 14, 4363}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4363;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4363;
      doubleArray0[3] = (double) 4363;
      doubleArray0[4] = (double) 4363;
      doubleArray0[5] = (double) 1651;
      ArrayUtils.shift(doubleArray0, 1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1651.0, 4363.0, (-1.0), 4363.0, 4363.0, 4363.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1833), 4363);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {4363, 14, 4363}, intArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)78, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)78;
      floatArray0[2] = (float) (-1);
      int int2 = ArrayUtils.indexOf(floatArray0, 0.0F, (-2692));
      assertEquals(8, floatArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {(-1.0F), 78.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, int2);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(3);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1042.7481027090755);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-31);
      intArray0[2] = 3;
      intArray0[3] = (-488);
      intArray0[4] = (-31);
      intArray0[5] = (-1);
      intArray0[6] = (-2692);
      intArray0[7] = (int) (short)78;
      intArray0[8] = Integer.MAX_VALUE;
      int int3 = ArrayUtils.lastIndexOf(intArray0, (-2484));
      assertEquals(9, intArray0.length);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertArrayEquals(new int[] {(-1), (-31), 3, (-488), (-31), (-1), (-2692), 78, Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int3);
      
      ArrayUtils.shift(doubleArray1, 49);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 64;
      intArray0[2] = 754;
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '_';
      charArray0[2] = '4';
      charArray0[3] = 'x';
      charArray0[4] = 'o';
      charArray0[5] = 'v';
      charArray0[6] = '/';
      charArray0[7] = 'C';
      charArray0[8] = ')';
      ArrayUtils.shuffle(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'_', '4', 'x', 'o', 'v', '/', 'C', ')', '9'}, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'o';
      objectArray0[1] = (Object) '_';
      objectArray0[2] = (Object) '4';
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) '4';
      objectArray0[5] = (Object) 'x';
      objectArray0[6] = (Object) '/';
      ArrayUtils.shift(objectArray0, (-4115), 754, 754);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayUtils.shift(objectArray0, (-811), 1646, (-811));
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = ArrayUtils.get((Integer[]) null, 3967);
      assertNull(integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Float float0 = new Float((double) 3967);
      assertNotNull(float0);
      assertEquals(3967.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 3967);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3967.0F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf((float) (short)0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2185);
      assertNull(floatArray0);
      
      ArrayUtils.swap((byte[]) null, (-419), 0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(20, shortArray0.length);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) (short)4;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray0[1] = (Object) (short)4;
      objectArray0[2] = (Object) (short)4;
      objectArray0[3] = (Object) (short)4;
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)4);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4.0F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf(1333.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1333.0F, (float)float2, 0.01F);
      
      Float float3 = new Float((double) (short)2413);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(2413.0F, (float)float3, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)5;
      ArrayUtils.swap(byteArray0, (int) (short)4, (int) (byte)5);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)96, (byte)5}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 18688, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3627);
      shortArray0[1] = (short)1028;
      shortArray0[2] = (short) (-3108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3627), (short)1028, (short) (-3108)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)16;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      assertArrayEquals(new char[] {'w', 'N', 'w', 'N'}, charArray1);
      
      ArrayUtils.swap(byteArray0, (-322), (-2651));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (byte)0, (-714));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Integer integer0 = new Integer(83);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      Float float0 = new Float((double) 83);
      assertNotNull(float0);
      assertEquals(83.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (byte)0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = new Float((double) 1333.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1333.0F, (float)float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1365, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1365, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (-1), 1506);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertSame(intArray1, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Float float0 = new Float(939.260333396);
      assertNotNull(float0);
      assertEquals(939.2603F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) 2185);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2185.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[4];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(1809L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1809L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      longArray0[3] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2779);
      doubleArray0[1] = (double) (-2779);
      doubleArray0[2] = (double) (-2779);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2779.0), (-2779.0), (-2779.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray1, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[3];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 1365;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 1365;
      intArray0[5] = 1365;
      intArray0[6] = 1365;
      intArray0[7] = 1365;
      intArray0[8] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 1365, 0, 0, 1365, 1365, 1365, 1365, 0}, intArray0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray2.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {1365, 1365, 1365, 1365, 1365}, intArray2);
      assertArrayEquals(new int[] {0, 1365, 0, 0, 1365, 1365, 1365, 1365, 0}, intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1365, object0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray3, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertEquals(2, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'%'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 5, 1365);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (byte)64;
      doubleArray0[3] = (double) 'R';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5.0, (double) (byte)64);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, 5.0, 64.0, 82.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)987);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      
      int int0 = 14;
      Integer integer0 = new Integer(14);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(14, (int)integer0);
      
      Integer integer1 = new Integer(121);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      Integer integer2 = new Integer((short)987);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(987, (int)integer2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int1 = 77;
      Integer integer3 = new Integer(77);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int1));
      assertNotNull(integer3);
      assertEquals(77, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, 114);
      assertEquals(3, integerArray0.length);
      assertNull(integer4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = int0;
      intArray0[1] = int1;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {14, 77}, intArray1);
      assertArrayEquals(new int[] {14, 77}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2757), (int) (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)64}, byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2757);
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) 121;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) int1, 1.5);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new double[] {(-2757.0), 14.0, 121.0}, doubleArray0, 0.01);
      assertEquals((-1), int2);
      
      int int3 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null);
      assertEquals(3, integerArray0.length);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {987.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'S'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Integer integer1 = new Integer(85);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(85, (int)integer1);
      
      Integer integer2 = new Integer(3027);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3027, (int)integer2);
      
      Integer integer3 = ArrayUtils.get((Integer[]) null, 3027);
      assertNull(integer3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3668;
      intArray0[1] = (-2286);
      intArray0[2] = 4;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3668, (-2286), 4}, intArray0);
      assertArrayEquals(new int[] {3668, (-2286), 4}, intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 620, 2078);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 121;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 120.49764763429336);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {121.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1027.6), 2, (double) 2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1), (-2162));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      Integer integer0 = new Integer((-1371));
      assertNotNull(integer0);
      assertEquals((-1371), (int)integer0);
      
      Integer integer1 = new Integer(62);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(62, (int)integer1);
      
      Integer integer2 = new Integer((-1250));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1250), (int)integer2);
      
      boolean boolean0 = ArrayUtils.isEquals(integer1, integer2);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = Integer.getInteger("Arguments cannot both be null", integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals((-1371), (int)integer4);
      
      Integer integer5 = new Integer((-2498));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-2498), (int)integer5);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer3);
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer5));
      assertNotNull(object0);
      assertEquals(0, object0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer5, object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)object0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer4));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer5));
      assertTrue(boolean1);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-2779));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1250);
      longArray0[2] = (long) (-1371);
      longArray0[3] = (long) (-1250);
      longArray0[4] = (long) (-1371);
      longArray0[5] = 210L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1250L), (-1371L), (-1250L), (-1371L), 210L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1250L), (-1371L), (-1250L), (-1371L), 210L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[2];
      intArray0[0] = 0;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1115);
      Integer integer0 = new Integer((short) (-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-3946));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-3946), (int)integer1);
      
      Integer integer2 = new Integer((-1995));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1995), (int)integer2);
      
      MutableInt mutableInt0 = new MutableInt(1734);
      assertEquals(1734.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1734, mutableInt0.intValue());
      assertEquals((short)1734, mutableInt0.shortValue());
      assertEquals("1734", mutableInt0.toString());
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals(1734, (int)mutableInt0.getValue());
      assertEquals(1734, (int)mutableInt0.toInteger());
      assertEquals(1734.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1734L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(1734.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1734, mutableInt0.intValue());
      assertEquals((short)1734, mutableInt0.shortValue());
      assertEquals("1734", mutableInt0.toString());
      assertEquals((byte) (-58), mutableInt0.byteValue());
      assertEquals(1734, (int)mutableInt0.getValue());
      assertEquals(1734, (int)mutableInt0.toInteger());
      assertEquals(1734.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1734L, mutableInt0.longValue());
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(1734, (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer1, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short)2;
      ArrayUtils.shift(shortArray0, (int) (short)2, 6185, (int) (short)2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)8, (short) (-1), (short)2, (short)2, (short)2, (short) (-1), (short) (-1)}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)8, (short) (-1), (short)2, (short)2, (short)2, (short) (-1), (short) (-1)}, shortArray0);
      assertTrue(boolean2);
      
      ArrayUtils.swap((byte[]) null, 754, (int) (short)2, 1072);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Integer integer0 = new Integer(53);
      assertNotNull(integer0);
      assertEquals(53, (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1717986918));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(Integer.MAX_VALUE, object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      ArrayUtils.shift((long[]) null, Integer.MAX_VALUE, (-1394), (-1394));
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, Integer.MAX_VALUE);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert((-1900), (int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short) (-2145));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2145)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2659.1652045664;
      doubleArray0[1] = (-2.002879987607524);
      doubleArray0[2] = (-597.763);
      doubleArray0[3] = (-4444.67763384);
      doubleArray0[4] = 1513.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character character1 = Character.valueOf('[');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('[', (char)character1);
      
      Character character2 = new Character('r');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('r', (char)character2);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3123.29F;
      floatArray0[1] = (-34.0F);
      floatArray0[2] = (float) 'r';
      floatArray0[3] = (float) 'r';
      floatArray0[4] = 1416.36F;
      floatArray0[5] = (float) 'r';
      floatArray0[6] = 2721.485F;
      floatArray0[7] = (float) 'r';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3123.29F, (-34.0F), 114.0F, 114.0F, 1416.36F, 114.0F, 2721.485F, 114.0F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1365, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1365, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1365, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1365, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(1365, (int)integer5);
      
      integerArray0[5] = integer5;
      MutableInt mutableInt0 = new MutableInt(2146327370);
      assertEquals(2146327370L, mutableInt0.longValue());
      assertEquals(2146327370, mutableInt0.intValue());
      assertEquals(2.14632737E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14632742E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146327370, (int)mutableInt0.toInteger());
      assertEquals("2146327370", mutableInt0.toString());
      assertEquals(2146327370, (int)mutableInt0.getValue());
      assertEquals((short)23370, mutableInt0.shortValue());
      assertEquals((byte)74, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer6 = mutableInt0.getValue();
      assertEquals(2146327370L, mutableInt0.longValue());
      assertEquals(2146327370, mutableInt0.intValue());
      assertEquals(2.14632737E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.14632742E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146327370, (int)mutableInt0.toInteger());
      assertEquals("2146327370", mutableInt0.toString());
      assertEquals(2146327370, (int)mutableInt0.getValue());
      assertEquals((short)23370, mutableInt0.shortValue());
      assertEquals((byte)74, mutableInt0.byteValue());
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(2146327370, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[3]);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1365, 1365, 1365, 1365, 1365, 1365, 2146327370}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5091;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5091, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5091);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5091, (-891)}, intArray0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[2] = (Integer) (-891);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (-1364));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1364), (-1364), (-891)}, intArray2);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-753.1671384578519), (-2321), (double) integerArray0[2]);
      assertEquals(3, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[3] = 1821.9614533255417;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1775);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1775), 0.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1821.9614533255417, 0.0, (-1775.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '~';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 863);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2146175300);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146175300, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Float float0 = new Float(939.260333396);
      assertNotNull(float0);
      assertEquals(939.2603F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) 2185);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2185.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = '4';
      charArray0[2] = 'r';
      charArray0[3] = '*';
      charArray0[4] = 'f';
      charArray0[5] = '+';
      charArray0[6] = 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2185, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2185, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1334), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1334, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)454;
      doubleArray0[1] = (double) (short)454;
      doubleArray0[2] = 3226.0;
      doubleArray0[3] = (double) (byte)3;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (short) (-363);
      doubleArray0[6] = (double) (byte)3;
      ArrayUtils.swap(doubleArray0, (int) (byte)3, 1817);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {454.0, 454.0, 3226.0, 3.0, 1.0, (-363.0), 3.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {'#', '#'}, charArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, 3942);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)89, (byte)0, (byte) (-54)}, byteArray0);
      
      Integer integer0 = Integer.valueOf((-151));
      assertNotNull(integer0);
      assertEquals((-151), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1689);
      longArray0[1] = (long) 3942;
      longArray0[2] = (long) (byte)89;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (-151);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-54), (-2146615942));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1689L), 3942L, 89L, 0L, (-151L)}, longArray0);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = '/';
      charArray0[2] = 'R';
      charArray0[3] = '3';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4188), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4188, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)1;
      ArrayUtils.reverse(byteArray0, 5, 121);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)77, (byte)6, (byte)1}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-178), (-1885));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)77;
      intArray0[1] = (-178);
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (-178);
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (-1);
      intArray0[6] = (-178);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      Integer integer1 = new Integer(1759);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1759, (int)integer1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer1);
      assertEquals(1, objectArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
      
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer((-321));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-321), (int)integer3);
      
      Integer integer4 = new Integer(91);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(91, (int)integer4);
      
      MutableInt mutableInt0 = new MutableInt(1759);
      assertEquals(1759, mutableInt0.intValue());
      assertEquals((byte) (-33), mutableInt0.byteValue());
      assertEquals(1759.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1759.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1759, mutableInt0.shortValue());
      assertEquals(1759, (int)mutableInt0.toInteger());
      assertEquals(1759, (int)mutableInt0.getValue());
      assertEquals(1759L, mutableInt0.longValue());
      assertEquals("1759", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) integer2);
      assertEquals((byte) (-34), mutableInt0.byteValue());
      assertEquals(1758.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1758.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1758, mutableInt0.intValue());
      assertEquals((short)1758, mutableInt0.shortValue());
      assertEquals(1758L, mutableInt0.longValue());
      assertEquals(1758, (int)mutableInt0.toInteger());
      assertEquals(1758, (int)mutableInt0.getValue());
      assertEquals("1758", mutableInt0.toString());
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer5 = mutableInt0.getValue();
      assertEquals((byte) (-34), mutableInt0.byteValue());
      assertEquals(1758.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1758.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1758, mutableInt0.intValue());
      assertEquals((short)1758, mutableInt0.shortValue());
      assertEquals(1758L, mutableInt0.longValue());
      assertEquals(1758, (int)mutableInt0.toInteger());
      assertEquals(1758, (int)mutableInt0.getValue());
      assertEquals("1758", mutableInt0.toString());
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(1758, (int)integer5);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = integer4;
      MutableInt mutableInt1 = new MutableInt((Number) integer4);
      assertEquals(91.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(91L, mutableInt1.longValue());
      assertEquals(91, mutableInt1.intValue());
      assertEquals("91", mutableInt1.toString());
      assertEquals((short)91, mutableInt1.shortValue());
      assertEquals(91.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)91, mutableInt1.byteValue());
      assertEquals(91, (int)mutableInt1.getValue());
      assertEquals(91, (int)mutableInt1.toInteger());
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals((byte) (-34), mutableInt0.byteValue());
      assertEquals(1758.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1758.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1758, mutableInt0.intValue());
      assertEquals((short)1758, mutableInt0.shortValue());
      assertEquals(1758L, mutableInt0.longValue());
      assertEquals(1758, (int)mutableInt0.toInteger());
      assertEquals(1758, (int)mutableInt0.getValue());
      assertEquals("1758", mutableInt0.toString());
      assertEquals(91.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(91L, mutableInt1.longValue());
      assertEquals(91, mutableInt1.intValue());
      assertEquals("91", mutableInt1.toString());
      assertEquals((short)91, mutableInt1.shortValue());
      assertEquals(91.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)91, mutableInt1.byteValue());
      assertEquals(91, (int)mutableInt1.getValue());
      assertEquals(91, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(1, int0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = integer5;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 0, (-1));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1333);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, (-965), 1333, 0}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = 1821.9614533255417;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = (double) 1333;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1333, 1333, (double) 1333);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-965.0), 1821.9614533255417, 1333.0, 1333.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) (-965);
      longArray0[2] = (long) 2394;
      longArray0[3] = (long) 2394;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-965L), (-965L), 2394L, 2394L}, longArray0);
      assertArrayEquals(new long[] {(-965L), (-965L), 2394L, 2394L}, longArray1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-965);
      intArray2[1] = (-1);
      intArray2[2] = (-2370);
      ArrayUtils.swap(intArray2, (-1448), (-965));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-965), (-1), (-2370)}, intArray2);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-965), (-1448));
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1448), (-4257));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)10);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger(".*{[0-9]+}.*");
      assertNull(integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(3, integerArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ' ';
      charArray0[3] = 'a';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1333.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', ' ', 'a', '\u0000', ' ', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) '\u0000';
      longArray0[2] = (long) '\u0000';
      longArray0[3] = (long) 'a';
      ArrayUtils.shift(longArray0, 418, 0, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {32L, 0L, 0L, 97L}, longArray0);
      
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {32L, 0L, 0L, 97L, 32L, 0L, 0L, 97L}, longArray1);
      assertArrayEquals(new long[] {32L, 0L, 0L, 97L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)97;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)81, (byte) (-91), (byte) (-113), (byte) (-102), (byte)97}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short) (-363);
      shortArray0[0] = (short)28937;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'f';
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('f', (char)character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray1);
      
      ArrayUtils.swap(intArray0, 3221, 787);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) (short)28937;
      floatArray0[4] = (float) (short)28937;
      floatArray0[5] = (float) char0;
      floatArray0[6] = (float) char0;
      floatArray0[7] = (float) (byte)49;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 102.0F, (int) (short) (-363));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 102.0F, 102.0F, 28937.0F, 28937.0F, 102.0F, 102.0F, 49.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, (int) char0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 102.0F, 102.0F, 28937.0F, 28937.0F, 102.0F, 102.0F, 49.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)49}, byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)35);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)35, (byte)byte1);
      
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)120, (byte)byte3);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = byte3;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte2);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)120}, byteArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) byte2;
      shortArray0[2] = (short) (byte)35;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)120;
      shortArray0[5] = (short) byte2;
      shortArray0[6] = (short)88;
      shortArray0[7] = (short) byte2;
      ArrayUtils.reverse(shortArray0, (-1), 2757);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)120, (short)88, (short)120, (short)120, (short)0, (short)35, (short)120, (short)120}, shortArray0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Integer integer0 = new Integer(2757);
      assertNotNull(integer0);
      assertEquals(2757, (int)integer0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 812);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray0.length);
      assertNull(abstractMap_SimpleImmutableEntry3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, 776);
      assertEquals(0, integerArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[0] = 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>((Integer) null, (Integer) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry1;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 1737);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNull(abstractMap_SimpleImmutableEntry3);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) abstractMap_SimpleImmutableEntryArray0, (Object) null, 1114111);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = new BitSet((byte)115);
      assertEquals(128, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      byte byte0 = (byte)75;
      Byte byte1 = new Byte((byte)75);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte)1);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)1, (byte)byte2);
      
      Byte byte3 = new Byte((byte)36);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)36, (byte)byte3);
      
      Byte byte4 = new Byte((byte)1);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)1, (byte)byte4);
      
      byte byte5 = (byte)35;
      Byte byte6 = new Byte((byte)35);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte)35, (byte)byte6);
      
      Byte byte7 = new Byte((byte)120);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      assertEquals((byte)120, (byte)byte7);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte6;
      byteArray0[1] = byte1;
      byteArray0[2] = byte4;
      byteArray0[3] = byte3;
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byte0 == byte5);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)35, (byte)75, (byte)1, (byte)36, (byte)35}, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-4188);
      shortArray0[1] = (short) byte5;
      shortArray0[2] = (short) (byte) (-93);
      shortArray0[3] = (short) (byte) (-93);
      ArrayUtils.reverse(shortArray0, 2058, 0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4188), (short)35, (short) (-93), (short) (-93)}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-93);
      intArray0[1] = 2058;
      intArray0[2] = (int) (byte)120;
      intArray0[3] = 3942;
      intArray0[4] = (int) (byte)75;
      intArray0[5] = (int) (short) (-4188);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)75, (-2553));
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-93), 2058, 120, 3942, 75, (-4188)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1115);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1115);
      shortArray0[4] = (short)1136;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1115), (short)18688, (short) (-1), (short) (-1115), (short)1136}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short) (-1);
      doubleArray1[1] = (-4340.417634973164);
      doubleArray1[2] = (-2337.634);
      doubleArray1[3] = (double) (short) (-1115);
      doubleArray1[4] = (double) 2394;
      doubleArray1[5] = (double) 1.0F;
      doubleArray1[6] = (double) (short)18688;
      doubleArray1[7] = (double) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1115), doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1115, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-47);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-47), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -47, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3652);
      shortArray0[1] = (short)3067;
      shortArray0[2] = (short)3210;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3210, (int) (short) (-3652));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3652), (short)3067, (short)3210}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)3210;
      floatArray0[1] = (float) (short)3067;
      floatArray0[2] = (float) (short) (-3652);
      floatArray0[3] = (float) (short) (-3652);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3210.0F, 3067.0F, (-3652.0F), (-3652.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(2, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.length());
      assertEquals("{3, 4}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(7, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((-2432.821377344));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-2432.821377344), (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[4] = double3;
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[5] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2432.821377344), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)120;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, 64);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)3, (byte)99, (byte)0, (byte)3, (byte)120, (byte)3, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 2553L;
      longArray0[4] = (long) (-2146615942);
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2553L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2553L, (-2146615942L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {2553L, 0L, 0L, 0L, 2553L, (-2146615942L), 0L, 0L}, longArray1);
      
      ArrayUtils.reverse(objectArray0, 1761, 1776);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = 665.0F;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 665.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = '#';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'H', 'H', 'H', '#', 'H', 'H', 'H', '#'}, charArray1);
      assertArrayEquals(new char[] {'H', 'H', 'H', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray1, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[3];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = new Short((short)0);
      assertEquals((short)0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1513.0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new double[] {1513.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((float[]) null, (int) (short)0, (int) (short)0, (-1348));
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2659.1652045664;
      doubleArray0[1] = (-2.002879987607524);
      doubleArray0[2] = (-597.763);
      doubleArray0[3] = (-4444.67763384);
      doubleArray0[4] = 1513.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2659.1652045664, (-597.763), (-4444.67763384), 1513.0, (-2.002879987607524)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3613.0F);
      floatArray0[1] = 89.0F;
      floatArray0[2] = 2310.2275F;
      ArrayUtils.shift(floatArray0, 1182, 1182, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-3613.0F), 89.0F, 2310.2275F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-183.728087084));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1655);
      shortArray0[1] = (short) short0;
      shortArray0[2] = (short) short0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, 40, (int) short0, 2622);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1655), (short)0, (short)0, (short)0}, shortArray0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double((-4246.0794309));
      assertNotNull(double0);
      assertEquals((-4246.0794309), (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      Short[] shortArray0 = new Short[10];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1399);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-3599.41993));
      assertFalse(boolean0);
      
      ArrayUtils.swap(shortArray1, (int) (short)1399, (-4987), (int) (short)1399);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1394), 43);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      assertArrayEquals(new int[] {(-1394)}, intArray1);
      
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      Integer integer1 = new Integer((-1394));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1394), (int)integer1);
      
      Integer integer2 = new Integer(43);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(43, (int)integer2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) (-1394);
      objectArray0[4] = (Object) (-1394);
      objectArray0[5] = (Object) (-1394);
      objectArray0[6] = (Object) integer1;
      objectArray0[7] = (Object) (-1394);
      objectArray0[8] = (Object) integer2;
      Integer integer3 = new Integer((-1394));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1394), (int)integer3);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer3);
      assertEquals(9, objectArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 49;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1689), (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {49L}, longArray0);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(49);
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49, mutableInt0.intValue());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) integer1);
      assertEquals(1443L, mutableInt0.longValue());
      assertEquals(1443.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1443, mutableInt0.intValue());
      assertEquals((short)1443, mutableInt0.shortValue());
      assertEquals("1443", mutableInt0.toString());
      assertEquals(1443, (int)mutableInt0.getValue());
      assertEquals((byte) (-93), mutableInt0.byteValue());
      assertEquals(1443, (int)mutableInt0.toInteger());
      assertEquals(1443.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 2206L);
      assertNotSame(longArray2, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '|';
      charArray0[2] = '9';
      charArray0[3] = '5';
      charArray0[4] = 'Z';
      charArray0[5] = '&';
      charArray0[6] = 'd';
      charArray0[7] = 'I';
      charArray0[8] = '>';
      ArrayUtils.reverse(charArray0, (-1394), 1870);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'>', 'I', 'd', '&', 'Z', '5', '9', '|', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      doubleArray0[0] = 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = ArrayUtils.get(abstractMap_SimpleImmutableEntryArray0, 1737);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) abstractMap_SimpleImmutableEntryArray0, (Object) null, 1114111);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      BitSet bitSet0 = new BitSet((byte)115);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(128, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, (-1775), Double.NaN);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((byte[]) null, 0, 53, 0);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(0, int1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 739;
      doubleArray0[1] = (double) 739;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 739.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {739.0, 739.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-224);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-224)}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      ArrayUtils.swap(doubleArray0, (int) (short) (-224), (-1775));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (double) (byte)0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      doubleArray0[1] = (double) 1984L;
      doubleArray0[2] = (double) (-7);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1984.0, (-7.0), (-7.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)8;
      ArrayUtils.swap(byteArray0, 14, (-455), (int) (byte)8);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-28), (byte)8}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom(859);
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) 'U';
      characterArray0[1] = (Character) 'U';
      characterArray0[2] = (Character) 'U';
      characterArray0[3] = (Character) 'H';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[1]);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'H'}, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-455);
      intArray0[1] = 859;
      ArrayUtils.reverse(intArray0, (-455), 14);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {859, (-455)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2399);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2399, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      ArrayUtils.swap(charArray0, 1238, 2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'D';
      charArray0[2] = 'p';
      charArray0[3] = 'k';
      charArray0[4] = 'J';
      charArray0[5] = 'V';
      ArrayUtils.swap(charArray0, (-2882), (-2146274479));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'*', 'D', 'p', 'k', 'J', 'V'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-24), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 2394;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)1;
      intArray0[5] = 2394;
      intArray0[6] = (int) (short)1;
      intArray0[7] = (-696);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 2394, 1, 1, 1, 2394, 1, (-696)}, intArray0);
      assertArrayEquals(new int[] {1, 1, 2394, 1, 1, 1, 2394, 1, (-696)}, intArray1);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 2394;
      integerArray0[1] = (Integer) 1;
      Integer integer0 = new Integer((-2070));
      assertNotNull(integer0);
      assertEquals((-2070), (int)integer0);
      
      integerArray0[2] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 1;
      boolean boolean1 = ArrayUtils.isSorted(integerArray0);
      assertEquals(5, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new int[] {1, 2394, 1, 1, 1, 2394, 1, (-696)}, intArray0);
      assertFalse(boolean3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3613.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1091.9831668, (-1812), 681.9);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3613.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2461));
      assertNotNull(integer0);
      assertEquals((-2461), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3855);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3855, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((-3613.0));
      assertEquals((-3613), (int)mutableInt0.getValue());
      assertEquals((-3613), (int)mutableInt0.toInteger());
      assertEquals((-3613.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-29), mutableInt0.byteValue());
      assertEquals((short) (-3613), mutableInt0.shortValue());
      assertEquals("-3613", mutableInt0.toString());
      assertEquals((-3613), mutableInt0.intValue());
      assertEquals((-3613L), mutableInt0.longValue());
      assertEquals((-3613.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-3613), (int)mutableInt0.getValue());
      assertEquals((-3613), (int)mutableInt0.toInteger());
      assertEquals((-3613.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-29), mutableInt0.byteValue());
      assertEquals((short) (-3613), mutableInt0.shortValue());
      assertEquals("-3613", mutableInt0.toString());
      assertEquals((-3613), mutableInt0.intValue());
      assertEquals((-3613L), mutableInt0.longValue());
      assertEquals((-3613.0F), mutableInt0.floatValue(), 0.01F);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-3613), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      short[] shortArray0 = new short[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 3187L);
      assertNull(longArray0);
      
      Short short0 = new Short((short) (-1655));
      assertNotNull(short0);
      assertEquals((short) (-1655), (short)short0);
      
      Short[] shortArray0 = new Short[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1155.30251694175);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 132.7296931, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short) (-1655);
      shortArray1[1] = (short) (-1655);
      shortArray1[2] = (short) (-1655);
      shortArray1[3] = (short) (-1655);
      shortArray1[4] = (short) (-1655);
      ArrayUtils.swap(shortArray1, (-1706), (int) (short) (-1655), 0);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1655), (short) (-1655), (short) (-1655), (short) (-1655), (short) (-1655)}, shortArray1);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (int) (short) (-1655));
      assertEquals(0, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "org.apache.commons.lang3.builder.ToStringStyle");
      assertEquals(1, byteArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-5096);
      ArrayUtils.swap(shortArray0, (int) (short) (-5096), (int) (short) (-5096), (int) (short) (-5096));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-5096)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 64;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-947);
      shortArray0[1] = (short) (-9);
      shortArray0[2] = (short)1182;
      shortArray0[3] = (short)2486;
      shortArray0[4] = (short)260;
      shortArray0[5] = (short)3788;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-947), (short) (-9), (short)1182, (short)2486, (short)260, (short)3788, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {52, 64, 0, 0}, intArray0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)260;
      longArray0[1] = (long) 64;
      longArray0[2] = (-1098L);
      longArray0[3] = (long) (short)3788;
      longArray0[4] = (long) (short)260;
      longArray0[5] = (long) (short)260;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {260L, 64L, (-1098L), 3788L, 260L, 260L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-768.5247F);
      floatArray0[1] = 4895.014F;
      int int0 = ArrayUtils.indexOf(floatArray0, 4895.014F, 2667);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-768.5247F), 4895.014F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, 2667);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-768.5247F);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-768.5247F);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 2667;
      doubleArray0[6] = (double) (-768.5247F);
      doubleArray0[7] = (double) (-768.5247F);
      ArrayUtils.shift(doubleArray0, 2667, (-2146650967), 83);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-768.5247192382812), (-1.0), (-1.0), (-768.5247192382812), (-1.0), 2667.0, (-768.5247192382812), (-768.5247192382812)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2412), (byte) (-33));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2412, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2185);
      assertNotNull(integer0);
      assertEquals(2185, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(2185, object1);
      
      objectArray0[1] = object1;
      Float float0 = new Float(5559.0130540146);
      assertNotNull(float0);
      assertEquals(5559.013F, (float)float0, 0.01F);
      
      Float float1 = new Float(939.260333396);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(939.2603F, (float)float1, 0.01F);
      
      Float float2 = Float.valueOf((float) 2185);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(2185.0F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0077655F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {5559.013F, 5559.013F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1898;
      shortArray0[1] = (short)12484;
      shortArray0[2] = (short)21;
      shortArray0[3] = (short)4230;
      shortArray0[4] = (short) (-891);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)9;
      shortArray0[7] = (short) (-9541);
      shortArray0[8] = (short)513;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1898, (short)12484, (short)21, (short)4230, (short) (-891), (short) (-1), (short)9, (short) (-9541), (short)513}, shortArray0);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short)9;
      longArray0[2] = (long) (short)4230;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-891);
      intArray0[1] = (int) (short)9;
      intArray0[2] = (int) (short) (-9541);
      intArray0[3] = (int) (short)12484;
      intArray0[4] = (int) (short)4230;
      intArray0[5] = (int) (short)12484;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = (int) (short)513;
      intArray0[8] = (int) (short)1898;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.clone((long[]) null);
      assertNull(longArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) integerArray0, object0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, (-4068));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short) (-18));
      assertNotNull(short0);
      assertEquals((short) (-18), (short)short0);
      
      Short short1 = new Short((short)12);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)12, (short)short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)12);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((long[]) null, 65, (-1775));
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'a';
      charArray0[2] = '>';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2306.4F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1193.0F);
      floatArray0[3] = (-1237.9F);
      floatArray0[4] = 1192.5F;
      floatArray0[5] = 2887.4019F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.4019F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.4019F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 733;
      longArray0[1] = (long) 1044;
      ArrayUtils.swap(longArray0, 1044, 733, 1044);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {733L, 1044L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Integer integer0 = Integer.getInteger("0nZ}rDXTjh");
      assertNull(integer0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1192.5F;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      Integer integer1 = new Integer(2045222521);
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2045222521, (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt((-2306.4F));
      assertEquals("-2306", mutableInt0.toString());
      assertEquals((-2306), (int)mutableInt0.getValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2306), (int)mutableInt0.toInteger());
      assertEquals((short) (-2306), mutableInt0.shortValue());
      assertEquals((-2306L), mutableInt0.longValue());
      assertEquals((-2306.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2306.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2306), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract(0);
      assertEquals("-2306", mutableInt0.toString());
      assertEquals((-2306), (int)mutableInt0.getValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2306), (int)mutableInt0.toInteger());
      assertEquals((short) (-2306), mutableInt0.shortValue());
      assertEquals((-2306L), mutableInt0.longValue());
      assertEquals((-2306.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2306.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2306), mutableInt0.intValue());
      
      int int1 = mutableInt0.addAndGet((Number) integer1);
      assertEquals((short) (-27273), mutableInt0.shortValue());
      assertEquals(2045220215, mutableInt0.intValue());
      assertEquals(2.045220215E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2045220215, (int)mutableInt0.toInteger());
      assertEquals(2045220215, (int)mutableInt0.getValue());
      assertEquals(2045220215L, mutableInt0.longValue());
      assertEquals((byte)119, mutableInt0.byteValue());
      assertEquals("2045220215", mutableInt0.toString());
      assertEquals(2.04522022E9F, mutableInt0.floatValue(), 0.01F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(2045220215, int1);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((short) (-27273), mutableInt0.shortValue());
      assertEquals(2045220215, mutableInt0.intValue());
      assertEquals(2.045220215E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2045220215, (int)mutableInt0.toInteger());
      assertEquals(2045220215, (int)mutableInt0.getValue());
      assertEquals(2045220215L, mutableInt0.longValue());
      assertEquals((byte)119, mutableInt0.byteValue());
      assertEquals("2045220215", mutableInt0.toString());
      assertEquals(2.04522022E9F, mutableInt0.floatValue(), 0.01F);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(2045220215, (int)integer2);
      
      ArrayUtils.shift(longArray0, (-2301));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1044L, 733L}, longArray0);
      
      ArrayUtils.reverse(longArray0, 733, 1044);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1044L, 733L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, (int) (byte) (-46), 42, (int) (byte) (-46));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.swap(byteArray0, (-1117), (-1117), 42);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1775);
      doubleArray0[3] = 1821.9614533255417;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1775);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1775), (-1775.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1775.0), 1821.9614533255417, 0.0, (-1775.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '~';
      ArrayUtils.swap(byteArray0, (-1775), (-1775), 0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      float[] floatArray0 = new float[16];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(16, floatArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3809.589;
      doubleArray0[2] = (double) (-4);
      doubleArray0[3] = (double) (-4);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 3809.589, (-4.0), (-4.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-4));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = ',';
      charArray0[2] = 'v';
      charArray0[3] = ':';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = ':';
      charArray0[7] = 'z';
      charArray0[8] = 'z';
      ArrayUtils.swap(charArray0, (-2330), 2667, (-2330));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'v', ',', 'v', ':', 'z', 'z', ':', 'z', 'z'}, charArray0);
      
      boolean boolean2 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'T';
      charArray0[2] = 'Q';
      ArrayUtils.swap(charArray0, (-1), Integer.MAX_VALUE, 13);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'D', 'T', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2583L);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2597.25849);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, 1.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2597.25849)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double((-386.6F));
      assertNotNull(double0);
      assertEquals((-386.6000061035156), (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-2597.25849);
      doubleArray1[1] = (Double) (-2597.25849);
      doubleArray1[2] = double0;
      Double double1 = new Double((-2014.82));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2014.82), (double)double1, 0.01);
      
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) (-2597.25849);
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) (-2597.25849);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2597.25849), (-2597.25849), (-386.6000061035156), (-2014.82), (-386.6000061035156), (-2597.25849), (-386.6000061035156), (-2597.25849)}, doubleArray2, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = 'g';
      charArray0[4] = '>';
      charArray0[5] = '\\';
      charArray0[6] = 'c';
      charArray0[7] = ' ';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'D', 'j', 'y', 'g', '>', '\\', 'c', ' '}, charArray0);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', 'j', 'y', 'g', '>', '\\', 'c', ' '}, charArray0);
      assertArrayEquals(new char[] {'D', 'j', 'y', 'g', '>', '\\', 'c', ' '}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-386.6F));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) int0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-2014.82), (-2597.25849));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      Double double0 = new Double((double) doubleArray1[3]);
      assertEquals(7, doubleArray1.length);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int0);
      
      Float float0 = new Float(2.147483647E9);
      assertNotNull(float0);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-1);
      shortArray2[1] = (short) (-1);
      shortArray2[2] = (short) (-1);
      ArrayUtils.shift(shortArray2, 121, (-2146905745), (-26));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      ArrayUtils.swap((short[]) null, 6, (-1005), 6);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) ' ';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1005);
      floatArray0[4] = (float) (-1005);
      floatArray0[5] = (float) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1005.0F), (-1706));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 32.0F, 0.0F, (-1005.0F), (-1005.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-45);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-45);
      longArray0[3] = (long) (-45);
      longArray0[4] = (long) (-45);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-45));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-45L), 0L, (-45L), (-45L), (-45L)}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1655));
      assertNotNull(short0);
      assertEquals((short) (-1655), (short)short0);
      
      doubleArray0[2] = (double) (short)short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, (-1655.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
      
      short[] shortArray2 = new short[2];
      shortArray2[0] = (short) (-1655);
      shortArray2[1] = (short) (-1655);
      ArrayUtils.swap(shortArray2, (-1), 17, 6);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1655), (short) (-1655)}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap(shortArray0, (-406), 2126221433, 83);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'X');
      assertNull(charArray0);
      
      Long long0 = new Long((-166L));
      assertNotNull(long0);
      assertEquals((-166L), (long)long0);
      
      Long long1 = new Long((-793L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-793L), (long)long1);
      
      Long long2 = new Long(1809L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1809L, (long)long2);
      
      Long long3 = new Long(32L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(32L, (long)long3);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long3;
      longArray0[1] = long0;
      longArray0[2] = long3;
      longArray0[3] = long0;
      longArray0[4] = long2;
      longArray0[5] = long2;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {32L, (-166L), 32L, (-166L), 1809L, 1809L, (-166L)}, longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[6]);
      assertNotSame(longArray2, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {32L, (-166L), 32L, (-166L), 1809L, 1809L, (-166L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}', (int) '}');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1821.9614533255417;
      doubleArray0[1] = 2659.1652045664;
      doubleArray0[2] = 1821.9614533255417;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-4214.0);
      doubleArray0[5] = (double) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1821.9614533255417, 0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1821.9614533255417, 2659.1652045664, 1821.9614533255417, 0.0, (-4214.0), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1039;
      shortArray0[1] = (short)1039;
      shortArray0[2] = (short)1039;
      shortArray0[3] = (short)1039;
      shortArray0[4] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1039, (short)1039, (short)1039, (short)1039, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)1039, (short)1039, (short)1039, (short)1039, (short)2, (short)2}, shortArray1);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int[] intArray2 = new int[0];
      int[] intArray3 = ArrayUtils.removeElements((int[]) null, intArray2);
      assertEquals(0, intArray2.length);
      assertNull(intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      
      ArrayUtils.swap((int[]) null, (int) (short)1039, (-2));
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) (-2), (-15));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1821.9614533255417, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1039);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1039}, shortArray1);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray2);
      
      ArrayUtils.swap((int[]) null, (-1448), (int) (short)1039);
      float[] floatArray0 = new float[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 3644.6536F, 0);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 3644.6536F);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)77;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)77;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("Array element ");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)9;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 5L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L}, longArray0);
      assertArrayEquals(new long[] {5L, 9L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 9L;
      Object object0 = ArrayUtils.get(objectArray0, 102);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(objectArray0, (int) (byte)77, 102);
      assertEquals(1, objectArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 102;
      doubleArray0[1] = (double) 77.0F;
      doubleArray0[2] = (double) (byte)9;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 5L, (int) (byte)9, 942.373221);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {102.0, 77.0, 9.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), '6');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)3;
      ArrayUtils.shift(byteArray0, (-2146595212), (int) (byte)3, (-2900));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)50, (byte) (-41), (byte)50, (byte)49, (byte)3}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)50;
      longArray0[1] = (long) (byte)3;
      longArray0[2] = (long) (byte)108;
      longArray0[3] = (long) (byte)49;
      longArray0[4] = (long) (byte) (-41);
      ArrayUtils.shift(longArray0, (-2841));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3L, 108L, 49L, (-41L), 50L}, longArray0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '\"';
      charArray0[2] = '|';
      charArray0[3] = '6';
      charArray0[4] = 'C';
      charArray0[5] = 'B';
      charArray0[6] = '4';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-2656), '%');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2656, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1394));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      assertArrayEquals(new int[] {(-1394), (-1394)}, intArray1);
      
      Integer integer0 = new Integer(1333);
      assertNotNull(integer0);
      assertEquals(1333, (int)integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1394);
      longArray0[1] = (long) (-1394);
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1394L), (-1394L)}, longArray0);
      
      Object object0 = ArrayUtils.get((Object[]) null, (-3487));
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) null, (-3487));
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertArrayEquals(new int[] {2394, 0, 2394, 0}, intArray2);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean4;
      booleanArray0[1] = boolean4;
      Boolean boolean5 = Boolean.valueOf("0x");
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[2] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (-279.09F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-279.09F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-279.09F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-2142127681));
      assertEquals(3, booleanArray0.length);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-1775);
      doubleArray0[3] = 1821.9614533255417;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-1775);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1775), (-1775.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1775.0), 1821.9614533255417, 0.0, (-1775.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = '~';
      ArrayUtils.shift(charArray0, 166);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', 'C', 'C'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, '~');
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'~', 'C', 'C'}, charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer[] integerArray0 = new Integer[1];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-2143205935), integer1);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer2);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(1, object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get((Object[]) integerArray0, 146);
      assertEquals(1, integerArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, 4828);
      assertEquals(6, objectArray0.length);
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) int0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1394), 43);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      assertArrayEquals(new int[] {(-1394)}, intArray1);
      
      ArrayUtils.reverse(intArray0, (-1334), 2083);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, 43);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[16];
      floatArray0[0] = (float) 2083;
      floatArray0[1] = (float) (-1394);
      floatArray0[2] = (float) (-1394);
      floatArray0[3] = (float) 2083;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 2083;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 2083);
      assertEquals(16, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-116);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-116), 2817);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-116)}, intArray0);
      assertArrayEquals(new int[] {(-116)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), 2262);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      Integer integer0 = new Integer((-789));
      assertNotNull(integer0);
      assertEquals((-789), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float float0 = new Float((double) 2388);
      assertNotNull(float0);
      assertEquals(2388.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) 2388);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2388.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 110.0F;
      floatArray0[1] = 209.765F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3544.5833F);
      floatArray0[5] = (-2937.4F);
      floatArray0[6] = (-289.9517F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-3544.5833F), 36);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, 209.765F, (-1.0F), 0.0F, (-3544.5833F), (-2937.4F), (-289.9517F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 36, (int) (byte)78);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-62), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte) (-62);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)109);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)78, (short) (-62)}, shortArray0);
      assertArrayEquals(new short[] {(short)109, (short)78, (short) (-62)}, shortArray1);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) (-289.9517F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 110.0F;
      doubleArray0[3] = 2202.9741456790684;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-289.9517F));
      assertEquals(10, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-289.9516906738281), 0.0, 110.0, 2202.9741456790684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)78;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {78L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short)1439);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(7, arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-129), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, 43, (double) 43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(11, intArray0.length);
      
      ArrayUtils.shift((short[]) null, 1592, 1592, 1592);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 1592;
      doubleArray0[3] = (double) 1592;
      doubleArray0[4] = (double) (-1394);
      doubleArray0[5] = (-827.69);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1091.9831668, (-363), 1324.16813);
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 1592.0, 1592.0, (-1394.0), (-827.69)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 4206, (double) 1592);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4206, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1), (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Integer integer0 = new Integer((-45));
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      
      Integer integer1 = Integer.getInteger("nP%e:", (-45));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-45), (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals((-45), object0);
      
      Integer integer2 = new Integer((-45));
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-45), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(3, objectArray0.length);
      assertTrue(integer2.equals((Object)object0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '=';
      charArray0[2] = 'h';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'h', '=', 'l'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-896.011996192));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short)975;
      shortArray0[3] = (short) (byte)12;
      shortArray0[4] = (short) (byte)12;
      shortArray0[5] = (short) (byte)12;
      shortArray0[6] = (short) (byte)12;
      shortArray0[7] = (short) (byte)12;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-891), (int) (short)12);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)12, (short)975, (short)12, (short)12, (short)12, (short)12, (short)12}, shortArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = 1809L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)975;
      longArray0[4] = (long) (short)12;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)12);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {12L, 1809L, 0L, 975L, 12L}, longArray0);
      assertArrayEquals(new long[] {1809L, 0L, 975L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertArrayEquals(new int[] {2394, 0, 2394, 0}, intArray2);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean5;
      booleanArray0[1] = boolean5;
      Boolean boolean6 = Boolean.valueOf("0x");
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[2] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)2906, (short) (-1), (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      shortArray0[1] = (short) (byte)3;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2906, (short)3, (short) (-1), (short)56, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (short)2906;
      objectArray0[2] = (Object) (short)3;
      objectArray0[3] = (Object) (short)3;
      objectArray0[4] = (Object) (short) (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.147483647E9;
      doubleArray0[1] = (double) 3067;
      doubleArray0[2] = (double) (short)2906;
      doubleArray0[3] = (-896.011996192);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), (int) (byte)90);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 3067.0, 2906.0, (-896.011996192)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short) (-1110));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (short) (-1110), (int) (short) (-1110), (int) (short) (-1110));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-95);
      intArray0[1] = (-95);
      intArray0[2] = (-95);
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-95), (-95), (-95)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 6, (-95));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-95);
      doubleArray0[1] = (double) 1592;
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = 5037.2262261735;
      doubleArray0[4] = (double) 91;
      doubleArray0[5] = (double) (-95);
      doubleArray0[6] = (double) (-95);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1592.0, 91.0, 5037.2262261735, 91.0, (-95.0), (-95.0), (-95.0)}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      charArray0[2] = 'z';
      ArrayUtils.swap(charArray0, (-354), 0, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {':', 'v', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_CHAR_ARRAY, 'T');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[3] = (short) (-4479);
      shortArray0[7] = (short)16089;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1398), (-2379));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-4479), (short)0, (short)0, (short)0, (short)16089, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)115);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-4479), (short)0, (short)0, (short)0, (short)16089, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-4479), (short)0, (short)0, (short)0, (short)16089, (short)0, (short)115}, shortArray2);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, (int) 0);
      assertNull(integer0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'U';
      charArray0[2] = 'z';
      charArray0[3] = 'G';
      charArray0[4] = '/';
      charArray0[5] = '$';
      charArray0[6] = 'G';
      charArray0[7] = '^';
      charArray0[8] = 'r';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '^');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', 'U', 'z', 'G', '/', '$', 'G', 'r'}, charArray1);
      assertArrayEquals(new char[] {'J', 'U', 'z', 'G', '/', '$', 'G', '^', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1394.0);
      doubleArray0[1] = (-597.763);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 110.0;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (-232.18496320000008);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2577.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1394.0), (-597.763), 1.0, 110.0, 1.5, (-232.18496320000008)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1394.0), (-597.763), 1.0, 110.0, 1.5, (-232.18496320000008)}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(6185);
      assertNotNull(integer0);
      assertEquals(6185, (int)integer0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 6185;
      intArray0[1] = 6185;
      int int0 = (-178);
      intArray0[2] = (-178);
      intArray0[3] = 6185;
      intArray0[4] = 6185;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1136, (-2146251161));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {6185, 6185, (-178), 6185, 6185}, intArray0);
      
      bitSet0.clear(1136, 6185);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {6185, 6185, (-178), 6185, 6185}, intArray0);
      
      // Undeclared exception!
      try { 
        bitSet0.set(6185, (-2146251161));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -2146251161
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2577);
      shortArray0[1] = (short) (-11);
      shortArray0[2] = (short) (-30989);
      shortArray0[3] = (short) (-1437);
      shortArray0[4] = (short)91;
      shortArray0[5] = (short) (-1335);
      shortArray0[6] = (short)9;
      shortArray0[7] = (short)1055;
      shortArray0[8] = (short) (-3613);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3401, (int) (short) (-3613));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2577), (short) (-11), (short) (-30989), (short) (-1437), (short)91, (short) (-1335), (short)9, (short)1055, (short) (-3613)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)91;
      floatArray0[2] = (float) (short) (-1437);
      floatArray0[3] = (float) (short)1055;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short) (-3613));
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {91.0F, 91.0F, (-1437.0F), 1055.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-2577);
      doubleArray0[1] = (double) (short)1055;
      doubleArray0[2] = (double) (short)91;
      doubleArray0[3] = (double) (short) (-1335);
      doubleArray0[4] = (double) (short) (-1437);
      doubleArray0[5] = (double) (short) (-3613);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)9);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2577.0), 1055.0, 91.0, (-1335.0), (-1437.0), (-3613.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      Integer integer0 = new Integer((short)1055);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1055, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      Integer integer1 = new Integer((-3652));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-3652), (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Integer integer2 = new Integer((short) (-2577));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2577), (int)integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer2, integer0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry8);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry7);
      assertNotSame(abstractMap_SimpleImmutableEntry8, abstractMap_SimpleImmutableEntry6);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)111);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 62;
      intArray0[1] = (-1775);
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-1775), 690L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1775, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      assertFalse(boolean2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray1, (Random) mockRandom0);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-260));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-260));
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(0.0F, 0.0F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      Integer integer1 = new Integer((-1689));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1689), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 765);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2146615942L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-2146615942L);
      longArray1[1] = (Long) (-2146615942L);
      longArray1[2] = (Long) (-2146615942L);
      longArray1[3] = (Long) (-2146615942L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 1681L);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2146615942L), (-2146615942L), (-2146615942L), (-2146615942L)}, longArray2);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'A');
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 5051, 5051);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-79);
      ArrayUtils.shuffle(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-79), (byte) (-79)}, byteArray1);
      
      double double0 = (-1165.78677);
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1165.78677));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1165.78677)}, doubleArray0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      
      double double1 = (-1110.489013671875);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1110.489013671875), (int) (short)2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1165.78677)}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1385));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1385, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)32736;
      shortArray0[1] = (short) (-1964);
      shortArray0[2] = (short) (-1964);
      shortArray0[3] = (short) (-1050);
      shortArray0[4] = (short)5738;
      shortArray0[5] = (short) (-1964);
      shortArray0[6] = (short)5738;
      ArrayUtils.shift(shortArray0, (int) (short) (-1050));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)32736, (short) (-1964), (short) (-1964), (short) (-1050), (short)5738, (short) (-1964), (short)5738}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, 6);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, (double) 148L);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Double double0 = new Double(148L);
      assertNotNull(double0);
      assertEquals(148.0, (double)double0, 0.01);
      
      Double double1 = new Double(148L);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(148.0, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) '_';
      intArray0[3] = (int) '_';
      ArrayUtils.shift(intArray0, (-3352), 1974, 114);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {95, 95, 75, 114}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(363);
      int int0 = ArrayUtils.indexOf(intArray0, 114, 34);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {95, 95, 75, 114}, intArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      int int0 = 2;
      ArrayUtils.shift(longArray0, 97, (-7), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 0L}, longArray0);
      
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(827);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(827, (int)integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 97;
      doubleArray0[1] = (double) (int)integerArray0[1];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2792.028), 827, 97.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {97.0, 827.0, 2.0, 85.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {97.0, 827.0, 2.0, 85.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_CLASS_ARRAY, (Object[]) arrayUtils0.EMPTY_METHOD_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Object object0 = ArrayUtils.get(objectArray0, 2373);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("nP%e:", 2373);
      assertNotNull(integer0);
      assertEquals(2373, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      Integer integer2 = new Integer(2373);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals(2373, (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(3, objectArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Object object2 = ArrayUtils.get((Object[]) integerArray0, 166, objectArray0[1]);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(object2.equals((Object)boolean0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(false, object2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 1155.30251694175, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2373;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2373;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 2373;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 166;
      longArray1[2] = 53L;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray2.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 166L, 53L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {2373L, 2373L, 2373L, 0L}, longArray2);
      assertArrayEquals(new long[] {2373L, 0L, 2373L, 0L, 2373L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 84);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 84;
      longArray0[3] = (-2213L);
      longArray0[4] = (long) 84;
      longArray0[5] = (long) (-1);
      longArray0[6] = 1295L;
      longArray0[7] = (long) 84;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 84L, (-2213L), 84L, (-1L), 1295L, 84L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 84L, (-2213L), 84L, (-1L), 1295L, 84L, (-1L)}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)35);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)35}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-556L);
      longArray0[1] = (-556L);
      longArray0[2] = 270L;
      longArray0[3] = (-1L);
      longArray0[4] = 767L;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 270L;
      longArray1[1] = (-556L);
      longArray1[2] = 767L;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-556L), (-556L), 270L, (-1L), 767L}, longArray0);
      assertArrayEquals(new long[] {270L, (-556L), 767L}, longArray1);
      assertArrayEquals(new long[] {(-556L), (-1L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 530.9F;
      floatArray0[1] = 20.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2663, (-2145636850));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {530.9F, 20.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4370);
      shortArray0[1] = (short) (-4370);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1287L);
      longArray0[1] = (long) 2663;
      longArray0[3] = (long) 1952;
      Integer integer0 = new Integer(2239);
      assertNotNull(integer0);
      assertEquals(2239, (int)integer0);
      
      Integer integer1 = Integer.getInteger("]c\"<'mt[3K#o zH", integer0);
      assertNotNull(integer1);
      assertEquals(2239, (int)integer1);
      
      Integer integer2 = new Integer((-2145636850));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-2145636850), (int)integer2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(object0.equals((Object)integer2));
      assertNotNull(object0);
      assertEquals(2239, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(object0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[7] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(integer0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Integer integer0 = new Integer(3081);
      assertNotNull(integer0);
      assertEquals(3081, (int)integer0);
      
      Integer integer1 = new Integer(1519);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1519, (int)integer1);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 1.0}, doubleArray1, 0.01);
      
      Integer integer2 = new Integer((-440));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-440), (int)integer2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1519;
      longArray0[1] = (long) 1925;
      longArray0[2] = (long) 1519;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.insert(1925, longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1519L, 1925L, 1519L, 2147483647L, 2147483647L, 0L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {1519L, 1925L, 1519L, 2147483647L, 2147483647L, 0L, 2147483647L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '7');
      assertNull(charArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray3.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-810.8452F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-2451.216F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-810.8452F), 5);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-810.8452F), (-1.0F), Float.NaN, (-2451.216F)}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[6];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2451.216F), 5);
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer((byte)0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1605.3094F), 3668);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 78.0F, (int) '\u0000');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(68);
      assertNotNull(integer0);
      assertEquals(68, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)48;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)48, (byte)3, (byte)48}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)48, (byte)3, (byte)48, (byte) (-10)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 1, 2216.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 2023, 2023);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1770));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1770)}, intArray1);
      
      ArrayUtils.shift(byteArray0, 2023, (-1770), 453);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 97;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 97);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {97}, intArray0);
      assertArrayEquals(new int[] {97, 97}, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE, (-269), 62);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {97}, intArray0);
      assertTrue(boolean1);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, (Integer) 97);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1956;
      shortArray0[4] = (short)1072;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1956);
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)1956, (short)1072}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)1956, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (short)1956;
      objectArray0[2] = (Object) (short)1956;
      objectArray0[3] = (Object) (short)1956;
      objectArray0[4] = (Object) (short) (-1);
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer((-590));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-590), (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = null;
      integerArray0[2] = null;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[0]);
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-590), (int)mutableInt0.getValue());
      assertEquals((-590), (int)mutableInt0.toInteger());
      assertEquals((-590.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-590.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-590L), mutableInt0.longValue());
      assertEquals((-590), mutableInt0.intValue());
      assertEquals((short) (-590), mutableInt0.shortValue());
      assertEquals("-590", mutableInt0.toString());
      assertEquals(4, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-590), (int)mutableInt0.getValue());
      assertEquals((-590), (int)mutableInt0.toInteger());
      assertEquals((-590.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-590.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-590L), mutableInt0.longValue());
      assertEquals((-590), mutableInt0.intValue());
      assertEquals((short) (-590), mutableInt0.shortValue());
      assertEquals("-590", mutableInt0.toString());
      assertEquals(4, integerArray0.length);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-590), (int)integer2);
      
      integerArray0[3] = integer2;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 0L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (int) (byte) (-1), 2437, 1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2, (short) (-1)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 0L}, longArray1);
      assertArrayEquals(new long[] {97L, 0L}, longArray0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)16;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short) (byte) (-1);
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short)2299;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)2299}, shortArray3);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-342));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 90, object0);
      assertEquals(9, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 97L;
      objectArray0[3] = (Object) (short)16;
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertNull(object2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) bitSet0;
      objectArray0[6] = (Object) (short)16;
      objectArray0[7] = (Object) (short) (-1);
      objectArray0[8] = (Object) 2.0F;
      boolean boolean3 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'u');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, longArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 97L;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-1);
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 97.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2146868373), 3283);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '}';
      charArray0[2] = '9';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'9', '}', 'A'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, 3283);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3283, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer(20);
      assertNotNull(integer0);
      assertEquals(20, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (byte)12);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 20;
      floatArray0[2] = (float) (-1334);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 20.0F);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 20.0F, (-1334.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 1853L;
      longArray0[2] = 2216L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-346.1929F);
      floatArray0[1] = (float) 1L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2216L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-346.1929F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2216.0F, (-346.1929F), 1.0F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2216L;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-346.1929F);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) (-346.1929F);
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) 1853L;
      int int0 = 7;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_LONG_ARRAY, (long[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      long[] longArray0 = new long[20];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(20, longArray0.length);
      assertEquals(40, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5083;
      longArray0[1] = (long) 5083;
      ArrayUtils.shift(longArray0, (-7), (-7), (-891));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {5083L, 5083L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-891);
      doubleArray0[1] = (double) (-1074);
      doubleArray0[2] = (double) (-1074);
      doubleArray0[3] = (double) (-1074);
      doubleArray0[4] = (double) (-1074);
      doubleArray0[5] = (double) 5083;
      doubleArray0[6] = (double) (-1074);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1074.0), (-1074.0), (-1074.0), (-1074.0), 5083.0, (-1074.0), (-891.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)8;
      ArrayUtils.swap(byteArray0, Integer.MAX_VALUE, 0, (int) (byte)8);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-28), (byte)8, (byte)37, (byte)8}, byteArray0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5083L, 5083L}, longArray0);
      assertArrayEquals(new long[] {5083L, 5083L, 5083L, 5083L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2137.0);
      ArrayUtils.swap(doubleArray0, 0, (int) (byte)12);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2137.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-121), 862);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'v', 72);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1782.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2137.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2137.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-810.8452F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-2451.216F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-810.8452F), 5);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-810.8452F), (-1.0F), Float.NaN, (-2451.216F)}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[2] = (-1380.0);
      doubleArray0[4] = (double) (-1.0F);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'W');
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-810.8452F), 3040);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), (-810.8452F), (-1.0F), Float.NaN, (-2451.216F)}, floatArray0, 0.01F);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 3040, 3040);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, ',');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 122;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 122}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1605.3094F);
      doubleArray0[2] = (double) 122;
      doubleArray0[3] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 122.0, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\"', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('j');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('j', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('%');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('%', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('k');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('k', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('f');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('f', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'f');
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\"', '\"', 'j', '%', 'k', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      Integer integer1 = new Integer(3111);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3111, (int)integer1);
      
      char char0 = 'y';
      char char1 = 'L';
      Character character0 = Character.valueOf('L');
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      char char2 = 'P';
      Character character1 = new Character('y');
      assertFalse(character1.equals((Object)char2));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertNotNull(character1);
      assertEquals('y', (char)character1);
      
      Character character2 = Character.valueOf('y');
      assertFalse(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)char2));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('y', (char)character2);
      
      Character[] characterArray0 = new Character[25];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      Character character3 = Character.valueOf('P');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('P', (char)character3);
      
      characterArray0[5] = character3;
      characterArray0[6] = character2;
      characterArray0[7] = character2;
      characterArray0[8] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char2);
      assertEquals(25, charArray0.length);
      assertEquals(25, characterArray0.length);
      assertFalse(char2 == char1);
      assertFalse(char2 == char0);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      characterArray0[14] = character1;
      objectArray0[2] = (Object) char1;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) char0;
      objectArray0[5] = (Object) character3;
      ArrayUtils.shift(objectArray0, (int) char1, (-1217), 78);
      assertEquals(6, objectArray0.length);
      assertFalse(char1 == char0);
      assertFalse(char1 == char2);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Y');
      assertNotSame(charArray0, charArray1);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      int[] intArray0 = new int[0];
      byte[] byteArray0 = new byte[2];
      longArray0[1] = (long) (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray1);
      
      Integer integer0 = new Integer(97);
      assertNotNull(integer0);
      assertEquals(97, (int)integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) integer0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[3]);
      assertEquals(4, objectArray0.length);
      assertTrue(boolean0);
      
      int int0 = new Integer((byte)5);
      assertEquals(5, int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-1L);
      longArray1[1] = (Long) 97L;
      longArray1[2] = (Long) 97L;
      longArray1[3] = (Long) (-1L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-705L));
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-1L), 97L, 97L, (-1L)}, longArray2);
      
      ArrayUtils.shift(intArray0, (int) (byte)0, (int) (byte) (-1), 5);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'L');
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'h', 'L'}, charArray0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((char[]) null, (-363), 54, 55);
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-98);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40), (byte) (-97), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, int0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-1));
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-98), 55);
      int[] intArray0 = new int[2];
      intArray0[0] = 54;
      intArray0[1] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 55, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2038);
      shortArray0[1] = (short) (-2038);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2038), (short) (-2038)}, shortArray0);
      
      ArrayUtils.shift((long[]) null, (int) (short) (-2038));
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-2038), (short) (-2038)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2473.89892452858);
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1.0, (-2473.89892452858), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-2473.89892452858)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      int int0 = 935;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(935, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'h';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '6';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {54}, intArray0);
      assertArrayEquals(new int[] {54, 54}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 91L, (-1807));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1984L}, longArray0);
      
      Short short0 = new Short((short) (-4683));
      assertNotNull(short0);
      assertEquals((short) (-4683), (short)short0);
      
      Short short1 = new Short((short) (-4683));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-4683), (short)short1);
      
      Short[] shortArray0 = new Short[5];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4683), (short) (-4683), (short) (-4683), (short) (-4683), (short) (-4683)}, shortArray1);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U', 'H', 'h', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'U', 'H', 'h', '\u0000'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) shortArray0[4]);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      Integer[] integerArray0 = new Integer[10];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = ArrayUtils.get(integerArray0, 0);
      assertEquals(10, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      ArrayUtils.swap((float[]) null, (-2398), 0, 0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 1984L;
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      byte byte0 = (byte)19;
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte) (-11);
      byteArray0[0] = (byte) (-11);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-11), (int) (byte)19);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[8];
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3933));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-3933);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2147483647L, 0L, (-3933L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 2147483647L, 0L, (-3933L)}, longArray1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-3933));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-1298));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1298)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("+g/&");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      Object object0 = ArrayUtils.get((Object[]) null, Integer.MAX_VALUE);
      assertNull(object0);
      
      ArrayUtils.reverse((Object[]) null, Integer.MAX_VALUE, (-354));
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      longArray0[0] = (long) 'H';
      charArray0[2] = 'h';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '6';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {54}, intArray0);
      assertArrayEquals(new int[] {54, 54}, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("0x");
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(boolean0);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {72L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 72L}, longArray2);
      
      ArrayUtils.reverse((Object[]) booleanArray0, 54, 1);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 834.7247F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)78, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)78;
      int int2 = ArrayUtils.indexOf(floatArray0, 0.0F, (-2692));
      assertEquals(8, floatArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new float[] {(-1.0F), 78.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, int2);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(2);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2.0, (double)double1, 0.01);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)41}, byteArray0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)41, (int) (byte)41);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[0] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2394L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 809.7F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {809.7F, 2394.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2394.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2200.8767F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2200.8767F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray0);
      assertSame(floatArray0, objectArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Integer integer0 = Integer.valueOf((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1562L), (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short) (-21844));
      assertNotNull(short0);
      assertEquals((short) (-21844), (short)short0);
      
      Short short1 = new Short((short)3);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)3, (short)short1);
      
      Short[] shortArray2 = new Short[4];
      shortArray2[0] = short0;
      shortArray2[1] = short1;
      shortArray2[2] = short1;
      shortArray2[3] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(4, shortArray3.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short) (-21844), (short)3, (short)3, (short) (-21844)}, shortArray3);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertEquals(2, objectArray1.length);
      assertEquals(2, objectArray0.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-66));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      Byte byte0 = new Byte((byte)81);
      assertNotNull(byte0);
      assertEquals((byte)81, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)81);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)81;
      shortArray0[1] = (short) (byte)81;
      shortArray0[2] = (short) (-182);
      shortArray0[3] = (short)2069;
      shortArray0[4] = (short) (byte)81;
      shortArray0[5] = (short) (-182);
      shortArray0[6] = (short) (byte)81;
      ArrayUtils.reverse(shortArray0, (-858), (-1664));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)81, (short)81, (short) (-182), (short)2069, (short)81, (short) (-182), (short)81, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 3087L;
      longArray0[1] = 3087L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {3087L, 0L, 3087L}, longArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1155.30251694175, (-2695));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 132.7296931, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3087L, 0L, 3087L}, longArray0);
      assertArrayEquals(new long[] {3087L, 0L, 3087L, 0L}, longArray1);
      
      Long[] longArray2 = new Long[8];
      longArray2[0] = (Long) 0L;
      longArray2[1] = (Long) 0L;
      longArray2[2] = (Long) 3087L;
      longArray2[3] = (Long) 3087L;
      longArray2[4] = (Long) 3087L;
      longArray2[5] = (Long) 0L;
      longArray2[6] = (Long) 3087L;
      longArray2[7] = (Long) 3087L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (long) longArray2[3]);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertEquals(8, longArray3.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L, 0L, 3087L, 3087L, 3087L, 0L, 3087L, 3087L}, longArray3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'C';
      charArray0[2] = 'v';
      charArray0[3] = '0';
      charArray0[4] = 'K';
      charArray0[5] = 'o';
      charArray0[6] = ' ';
      charArray0[7] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'|', 'C', 'v', '0', 'K', 'o', ' ', '9'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-499);
      intArray0[1] = 52;
      intArray0[2] = 64;
      ArrayUtils.swap(intArray0, (-499), 24);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-499), 52, 64}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, (-2834), (-2834));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 24;
      floatArray0[1] = (float) (-499);
      floatArray0[2] = (float) 64;
      floatArray0[3] = (float) (-499);
      floatArray0[4] = (float) 64;
      floatArray0[5] = (float) 24;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-499.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {24.0F, 64.0F, (-499.0F), 64.0F, 24.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {24.0F, (-499.0F), 64.0F, (-499.0F), 64.0F, 24.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (int) (byte) (-1), 2437, 1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2, (short) (-1)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)16;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short) (byte) (-1);
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short)2299;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)2299}, shortArray3);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-342));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-297);
      floatArray0[2] = (float) (-297);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-297.0F), (-297.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = 0;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 12, 0}, intArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((char[]) null, (-363), 54, 55);
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-97);
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-363);
      intArray0[1] = (int) (byte) (-40);
      intArray0[2] = 55;
      intArray0[3] = (int) (byte) (-97);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1121));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-363), (-40), 55, (-97)}, intArray0);
      assertArrayEquals(new int[] {(-363), (-40), 55, (-97), (-1121)}, intArray1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 'B');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, 'B');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'V';
      charArray0[5] = '-';
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.shift(intArray0, (-1492), 385, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1508);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'D', '-', '-', '-', 'V', '-'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) '-';
      floatArray0[2] = (float) (-1492);
      floatArray0[3] = (float) '-';
      floatArray0[4] = (float) '-';
      floatArray0[5] = (float) 1508;
      floatArray0[6] = (float) 'D';
      floatArray0[7] = (float) 385;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {5.0F, 45.0F, (-1492.0F), 45.0F, 45.0F, 1508.0F, 68.0F, 385.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-4257));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, (-4257)}, intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-277));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-277));
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-269));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-269));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -269
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-2779));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-3501));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(2326);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2326, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer(110);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(110, (int)integer2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-965), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -965, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 97);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      short[] shortArray0 = new short[11];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1956;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1956;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1956;
      shortArray0[7] = (short)1956;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1956, (short) (-1), (short) (-1), (short) (-1), (short)1956, (short) (-1), (short)1956, (short)1956}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)1956;
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (short) (-1);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      ArrayUtils.reverse(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'h';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '6';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {54}, intArray0);
      assertArrayEquals(new int[] {54, 54}, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean("0x");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(boolean0);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean4));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[5] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 96;
      longArray0[1] = (long) 96;
      ArrayUtils.swap(longArray0, 96, 96, 96);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {96L, 96L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 96, 96, 7.3506045);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      int[] intArray0 = new int[1];
      char[] charArray0 = new char[3];
      charArray0[1] = '|';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '|';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 124.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {124.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1611.8765384), (double) '|');
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {124.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2088), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2088, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "`y)CI-j[g^?!Hw~!");
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 1853L;
      longArray0[2] = 2216L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-346.1929F);
      floatArray0[1] = (float) 1L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2216L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-346.1929F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2216.0F, (-346.1929F), 1.0F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2216L;
      objectArray0[1] = (Object) 1853L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 37);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray1, (float) 1L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-346.1929F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2216.0F, (-346.1929F), 1.0F}, floatArray1, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)7);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)97);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      Integer integer0 = new Integer((-2653));
      assertNotNull(integer0);
      assertEquals((-2653), (int)integer0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3102.5747F));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), arrayUtils0.EMPTY_LONG_ARRAY, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2432.821377344));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2432.821377344), (double)double1, 0.01);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-87);
      floatArray0[1] = (float) (-87);
      floatArray0[2] = (float) (-87);
      floatArray0[3] = (float) (-87);
      floatArray0[4] = 804.2F;
      floatArray0[5] = (float) (-3646);
      floatArray0[6] = (float) (-3646);
      floatArray0[7] = (float) (-3646);
      floatArray0[8] = (float) (-87);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3404), 9);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-87.0F), (-87.0F), (-87.0F), (-87.0F), 804.2F, (-3646.0F), (-3646.0F), (-3646.0F), (-87.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-87.0F), (-87.0F), (-87.0F), 804.2F, (-3646.0F), (-3646.0F), (-3646.0F), (-87.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 183, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 530.9F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2663, (-2145636850));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4370);
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4370), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4370), (short)2}, shortArray1);
      
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1809), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1809, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3404), 7);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[16];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(16, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 128;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(128, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 530.9F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2663, (-2145636850));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {530.9F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4370);
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4370), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4370), (short)2}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1287L);
      longArray0[1] = (long) 2663;
      longArray0[2] = (long) (short) (-4370);
      longArray0[3] = (long) 1952;
      longArray0[4] = (long) (-2145636850);
      longArray0[5] = (long) (short)2;
      longArray0[6] = (long) (short) (-4370);
      longArray0[7] = (long) (short) (-4370);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1952, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1952, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-286);
      shortArray0[2] = (short)78;
      shortArray0[3] = (short)51;
      shortArray0[4] = (short)2656;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)78, (int) (short)51);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-286), (short)78, (short)51, (short)2656}, shortArray0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-286));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-286), (int)integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.decode("?D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      long[] longArray0 = new long[6];
      longArray0[0] = 3097L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 3097L;
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 3097L, 0L, 0L, 3097L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3933));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-481));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-481), (int)integer1);
      
      Integer integer2 = new Integer(79);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(79, (int)integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) Integer.MAX_VALUE;
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = (Integer) Integer.MAX_VALUE;
      integerArray0[7] = (Integer) Integer.MAX_VALUE;
      Integer[] integerArray1 = new Integer[0];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Integer[] integerArray2 = ArrayUtils.insert(Integer.MAX_VALUE, integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray2, integerArray1);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(8, integerArray2.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert(84, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[0] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      
      ArrayUtils.swap(intArray0, (-2370), 387);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)102;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte)55, (byte) (-105), (byte)100, (byte)43, (byte) (-58), (byte)3, (byte)102}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)55, (byte) (-105), (byte)100, (byte)43, (byte) (-58), (byte)3, (byte)102}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (int) (byte) (-1), 2437, 1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2, (short) (-1)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)16;
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      shortArray1[3] = (short) (byte) (-1);
      shortArray1[4] = (short)2;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)16, (short)2, (short)2, (short) (-1), (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2, (short) (-1)}, shortArray0);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (int) (short)454);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom(290L);
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, 0, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1333);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, (-965), 1333, 0}, intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = 1821.9614533255417;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = (double) 1333;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1333, 1333, (double) 1333);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-965.0), 1821.9614533255417, 1333.0, 1333.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) (-965);
      longArray0[2] = (long) (-965);
      longArray0[3] = (long) 2394;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-965L), (-965L), (-965L), 2394L}, longArray0);
      assertArrayEquals(new long[] {(-965L), (-965L), (-965L), 2394L}, longArray1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-965);
      intArray2[1] = (-1);
      intArray2[2] = (-2370);
      ArrayUtils.swap(intArray2, (-1448), (-965));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(3, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-965), (-1), (-2370)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'9', 'K', '?'}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom(2583L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 2394}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      doubleArray0[1] = (double) 1984L;
      doubleArray0[2] = (double) (-7);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1687, 2416.1512967999997);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-1));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-3933);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 1, (-1), (-1), (-3933)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (-3933), 55);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L)}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'c';
      charArray0[2] = '';
      charArray0[3] = '$';
      charArray0[4] = '*';
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CLASS_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Integer integer0 = new Integer(3081);
      assertNotNull(integer0);
      assertEquals(3081, (int)integer0);
      
      Integer integer1 = new Integer(1519);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1519, (int)integer1);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 1.0}, doubleArray1, 0.01);
      
      Integer integer2 = new Integer((-440));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-440), (int)integer2);
      
      Integer integer3 = Integer.getInteger(" in an array of ", integer2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-440), (int)integer3);
      
      Integer integer4 = new Integer(3081);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(3081, (int)integer4);
      
      boolean boolean2 = ArrayUtils.isSameType(integer3, integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer4));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(boolean2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (byte)0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      float[] floatArray0 = new float[0];
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean3);
      
      ArrayUtils.shift((short[]) null, (int) (byte)0);
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte) (-1), booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-810.8452F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-2451.216F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-810.8452F), 5);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-810.8452F), (-1.0F), Float.NaN, (-2451.216F)}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1380.0);
      doubleArray0[3] = (double) (-810.8452F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      ArrayUtils.swap(doubleArray0, (-1957), 49, 3283);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, 1.0, (-1380.0), (-810.84521484375), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3090);
      shortArray0[2] = (short) (-306);
      ArrayUtils.shift(shortArray0, (int) (short) (-3090));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short) (-3090), (short) (-306)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) (short) (-3090);
      floatArray0[2] = (float) (byte)3;
      floatArray0[3] = (float) 'J';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)3, (int) (short) (-3090));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {74.0F, (-3090.0F), 3.0F, 74.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, 1958L, (int) (short) (-306));
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.shift(shortArray0, 0, (int) (short)76, (int) (short)76);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ArrayUtils.shift(shortArray0, (-4068), (int) (short)56, (int) (short)56);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      float[] floatArray0 = new float[1];
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[1];
      floatArray0[0] = (float) (short) (-3110);
      ArrayUtils.shift(shortArray0, 2388);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1010.5465F, (int) (short)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-3110.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((long[]) null, 1958L, 2788);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[0] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      
      ArrayUtils.swap(intArray0, (-2370), 387);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)5738;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-1050);
      shortArray0[5] = (short) (-1964);
      ArrayUtils.shift(shortArray0, (int) (short) (-1050));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)4, (short)5738, (short)6, (short) (-1050), (short) (-1964)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (short) (-1964), (-2370));
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((byte[]) null, (-2146350411), (int) (byte)49, (int) (byte)60);
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2146350411), (-503));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, Integer.MAX_VALUE, 0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      Integer integer1 = new Integer((-1689));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1689), (int)integer1);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 765);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2146615942L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-2146615942L);
      longArray1[1] = (Long) (-2146615942L);
      longArray1[2] = (Long) (-2146615942L);
      longArray1[3] = (Long) (-2146615942L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 1681L);
      assertNotSame(longArray2, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2146615942L), (-2146615942L), (-2146615942L), (-2146615942L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-6));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("<F7Aiz`-a./;0PQ", (-584));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-584), (int)integer1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-45));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-965);
      longArray0[2] = (long) (-965);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 1333);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-965L), (-965L)}, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-965L), (-965L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      ArrayUtils.shift(byteArray0, (-5063));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)94, (byte)94, (byte)94}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1333, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Integer integer0 = Integer.valueOf((-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2146615942);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 2553L;
      longArray0[4] = (long) (-2146615942);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = 2478L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2240L, (int) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2146615942L), 0L, 0L, 2553L, (-2146615942L), 0L, 2478L}, longArray0);
      
      Short short0 = new Short((short) (-4683));
      assertNotNull(short0);
      assertEquals((short) (-4683), (short)short0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 676.67817;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {676.67817}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {676.67817}, doubleArray1, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) integerArray0[3], (int) 0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 110.0F;
      floatArray0[1] = 209.765F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3544.5833F);
      floatArray0[5] = (-2937.4F);
      floatArray0[6] = (-289.9517F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-3544.5833F), 36);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, 209.765F, (-1.0F), 0.0F, (-3544.5833F), (-2937.4F), (-289.9517F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 36, (int) (byte)78);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-62), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte) (-62);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)109);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)78, (short) (-62)}, shortArray0);
      assertArrayEquals(new short[] {(short)109, (short)78, (short) (-62)}, shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-289.9517F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 110.0F;
      doubleArray0[3] = 2202.9741456790684;
      doubleArray0[4] = (double) (byte)78;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-289.9517F));
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-289.9516906738281), 0.0, 110.0, 2202.9741456790684, 78.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-488);
      shortArray0[1] = (short)15738;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3104);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-488), (short)15738, (short)0}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(21, doubleArray0.length);
      assertEquals(20, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      doubleArray0[1] = (double) 1984L;
      doubleArray0[2] = (double) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-827.69), (-2481), (double) 1984L);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(51);
      assertNotNull(integer0);
      assertEquals(51, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'U';
      doubleArray1[1] = (double) 'U';
      doubleArray1[2] = (double) 'U';
      doubleArray1[3] = (double) (-7);
      doubleArray1[4] = 23.4520074176581;
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 85.0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {85.0, 85.0, (-7.0), 23.4520074176581}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {85.0, 85.0, 85.0, (-7.0), 23.4520074176581}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2484);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 4363;
      intArray0[4] = (-488);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2484));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2484), Integer.MAX_VALUE, 4363, 0, (-488)}, intArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(doubleArray0, 1627);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)73);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) floatArray1, (Object) null);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(2237.9929693833);
      assertNotNull(double0);
      assertEquals(2237.9929693833, (double)double0, 0.01);
      
      Double double1 = new Double(2237.9929693833);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2237.9929693833, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) '_';
      intArray0[3] = (int) '_';
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 803, 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {75, 114, 95, 95}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)78, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)78;
      floatArray0[2] = (float) (-1);
      int int2 = ArrayUtils.indexOf(floatArray0, 0.0F, (-2692));
      assertEquals(8, floatArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {(-1.0F), 78.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, int2);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(3);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1042.7481027090755);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-31);
      intArray0[2] = 3;
      intArray0[3] = (-488);
      intArray0[4] = (-31);
      intArray0[5] = (-1);
      intArray0[6] = (-2692);
      intArray0[7] = (int) (short)78;
      intArray0[8] = Integer.MAX_VALUE;
      int int3 = ArrayUtils.lastIndexOf(intArray0, (-2484));
      assertEquals(9, intArray0.length);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertArrayEquals(new int[] {(-1), (-31), 3, (-488), (-31), (-1), (-2692), 78, Integer.MAX_VALUE}, intArray0);
      assertEquals((-1), int3);
      
      ArrayUtils.shift(doubleArray1, 49);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      short[] shortArray0 = new short[7];
      ArrayUtils.shift(shortArray0, (-4035), (int) (short)47, (int) (short)47);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-2146720613), (-1), (-2146720613));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      ArrayUtils.shift(longArray0, 0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      Short short0 = new Short((short) (-905));
      assertNotNull(short0);
      assertEquals((short) (-905), (short)short0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 32L, (-2113));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Short[] shortArray2 = new Short[5];
      shortArray2[0] = short0;
      shortArray2[1] = short0;
      shortArray2[2] = short0;
      shortArray2[3] = short0;
      shortArray2[4] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)78);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short) (-905), (short) (-905), (short) (-905), (short) (-905), (short) (-905)}, shortArray3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'S';
      charArray0[2] = ')';
      charArray0[3] = '1';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = 'o';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'A', 'S', ')', '1', '', '6', 'o'}, charArray1);
      assertArrayEquals(new char[] {'A', 'S', ')', '1', '', '6', 'o'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1883));
      assertNotNull(short0);
      assertEquals((short) (-1883), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1883)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 40.0, 0.0, 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 40.0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2, 3081);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 's', 2256);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-1394), object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-45), (int) (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE, 0.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte)1, (int) (byte)1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'S', 'S'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'S', 'S'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 121;
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(3668);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3668, (int)integer1);
      
      Integer integer2 = new Integer(121);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, int0);
      assertEquals(1, integerArray0.length);
      assertNull(integer3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 111;
      intArray0[2] = 3668;
      intArray0[3] = 4;
      intArray0[4] = int0;
      intArray0[5] = (int) '\u0000';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4, 111, 3668, 4, 121, 0}, intArray1);
      assertArrayEquals(new int[] {4, 111, 3668, 4, 121, 0}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)64, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) 121);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-939));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), 117);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) 117);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 1695, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      char[] charArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 89;
      MutableInt mutableInt0 = new MutableInt(89);
      assertEquals(89.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(89L, mutableInt0.longValue());
      assertEquals(89, mutableInt0.intValue());
      assertEquals(89.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)89, mutableInt0.byteValue());
      assertEquals("89", mutableInt0.toString());
      assertEquals(89, (int)mutableInt0.toInteger());
      assertEquals(89, (int)mutableInt0.getValue());
      assertEquals((short)89, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(89.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(89L, mutableInt0.longValue());
      assertEquals(89, mutableInt0.intValue());
      assertEquals(89.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)89, mutableInt0.byteValue());
      assertEquals("89", mutableInt0.toString());
      assertEquals(89, (int)mutableInt0.toInteger());
      assertEquals(89, (int)mutableInt0.getValue());
      assertEquals((short)89, mutableInt0.shortValue());
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 1;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertFalse(int0 == int1);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(89, (int)integer2);
      
      integerArray0[2] = integer2;
      int int2 = 49;
      Integer integer3 = new Integer(49);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(49, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int2);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int2));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(integer6);
      assertEquals(49, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int2);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int2));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(integer7);
      assertEquals(49, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = mutableInt0.getValue();
      assertEquals(89.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(89L, mutableInt0.longValue());
      assertEquals(89, mutableInt0.intValue());
      assertEquals(89.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)89, mutableInt0.byteValue());
      assertEquals("89", mutableInt0.toString());
      assertEquals(89, (int)mutableInt0.toInteger());
      assertEquals(89, (int)mutableInt0.getValue());
      assertEquals((short)89, mutableInt0.shortValue());
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int1));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int2));
      assertNotNull(integer8);
      assertEquals(89, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, int0, int0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (byte)5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      long[] longArray0 = new long[10];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1634L), 1);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)103);
      assertNotNull(short0);
      assertEquals((short)103, (short)short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-2146781040), 0, (-2146781040));
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1527L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift((boolean[]) null, 0, 50, (-1534));
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-484));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)10, 2644);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)109, (byte) (-45), (byte)10}, byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      Double double0 = new Double((-35.74435));
      assertNotNull(double0);
      assertEquals((-35.74435), (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)54);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      ArrayUtils.swap(objectArray0, (int) (byte) (-37), (int) (byte) (-37), (-1679));
      assertEquals(3, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '@', (-1352));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.insert(427, doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      ArrayUtils.reverse((float[]) null, 50, (-2146775571));
      ArrayUtils.swap(doubleArray0, 50, 322);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray2, (double) (-2146775571));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-3360), (-3360));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3360, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((char[]) null, (-363), 54, 55);
      float[] floatArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-39);
      byte byte0 = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-71);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-39), (byte) (-97), (byte) (-98), (byte) (-71)}, byteArray0);
      assertEquals(0, int0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-1));
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(0, int1);
      
      ArrayUtils.reverse((float[]) null, (int) (byte) (-98), 55);
      int[] intArray0 = new int[2];
      intArray0[0] = 54;
      intArray0[1] = (int) (byte) (-71);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 55, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 2394L, (-1L), (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 2394L, (-1L), (-1L), 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-1), (byte)94, (byte) (-1), (byte)119, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (byte)94;
      intArray2[1] = (int) (byte)89;
      intArray2[2] = (int) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (-1440), (-2379), 65);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, (int) (byte) (-1), 2437, 1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)2, (short) (-1)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (short)2;
      ArrayUtils.shift(doubleArray0, (int) (short) (-1), 987, 18688);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (short) (-1));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3652);
      shortArray0[1] = (short)3067;
      shortArray0[2] = (short)3210;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3210, (int) (short) (-3652));
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3652), (short)3067, (short)3210}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)3210;
      floatArray0[1] = (float) (short)3067;
      floatArray0[2] = (float) (short) (-3652);
      floatArray0[3] = (float) (short) (-3652);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3210.0F, 3067.0F, (-3652.0F), (-3652.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)3, (byte)0, (byte)48}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 2);
      assertEquals("{2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, booleanArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3652.0F);
      doubleArray0[1] = (double) (short) (-3652);
      doubleArray0[2] = (double) (short) (-3652);
      doubleArray0[3] = (double) (byte)48;
      doubleArray0[4] = (-554.6609001869299);
      doubleArray0[5] = (double) 3067.0F;
      doubleArray0[6] = 2925.71426986;
      ArrayUtils.shift(doubleArray0, 55, (int) (short)3067, 8);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-3652.0), (-3652.0), (-3652.0), 48.0, (-554.6609001869299), 3067.0, 2925.71426986}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '%';
      charArray0[2] = '`';
      charArray0[3] = 'W';
      charArray0[4] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L');
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\\', '%', '`', 'W', 'a'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1239), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1239), 0, 0, 0, 0, (-1239), 0, 0, 0}, intArray1);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean4;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean2;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[7] = boolean6;
      booleanArray0[8] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false, true}, booleanArray1));
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-965);
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray0, 1333, objectArray0[6]);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(8, objectArray0.length);
      assertFalse(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(object2);
      assertEquals(1333, object2);
      
      objectArray1[0] = object2;
      objectArray1[1] = object1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-447);
      shortArray0[3] = (short) (-3512);
      shortArray0[4] = (short) (-3054);
      shortArray0[5] = (short)3113;
      shortArray0[6] = (short) (-1855);
      ArrayUtils.reverse(shortArray0, (int) (short)2, 13);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short) (-1855), (short)3113, (short) (-3054), (short) (-3512), (short) (-447)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Short[] shortArray0 = new Short[10];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1399);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertEquals(10, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399}, shortArray1);
      assertArrayEquals(new short[] {(short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399, (short)1399}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      Integer integer0 = new Integer((short)56);
      assertNotNull(integer0);
      assertEquals(56, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2900));
      assertNotNull(integer0);
      assertEquals((-2900), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)3);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)3);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(3, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (-2900));
      assertEquals(3, integerArray0.length);
      assertNull(integer3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.get((Object[]) integerArray0, (-3532), object2);
      assertSame(object2, object3);
      assertNotSame(object2, object1);
      assertNotSame(object3, object1);
      assertSame(object3, object2);
      assertEquals(3, integerArray0.length);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      Integer integer4 = new Integer((-2900));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2900), (int)integer4);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer4);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(bitSet0);
      
      Integer integer5 = new Integer((-2481));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-2481), (int)integer5);
      
      Integer integer6 = ArrayUtils.get(integerArray0, (int) integerArray0[0], integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      assertEquals((-2900), (int)integer6);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1650);
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (-2003);
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte)3;
      shortArray0[6] = (short) (byte)3;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1650), (short)3, (short)3, (short) (-2003), (short)3, (short)3, (short)3}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1650), (short)3, (short)3, (short) (-2003), (short)3, (short)3, (short)3}, shortArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2185);
      assertNotNull(integer0);
      assertEquals(2185, (int)integer0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-41);
      ArrayUtils.shift(byteArray0, 2, 1003, (int) (byte) (-41));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte) (-41), (byte) (-41), (byte)50, (byte)50, (byte) (-41), (byte) (-41)}, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-41);
      intArray0[1] = 2185;
      intArray0[2] = (int) (byte) (-41);
      intArray0[3] = (-2146595212);
      intArray0[4] = (int) (byte)50;
      intArray0[5] = (int) (byte)50;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-41), 2185, (-41), (-2146595212), 50, 50}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1003;
      ArrayUtils.shift(longArray0, (int) (byte)50);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1003L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-642);
      intArray0[1] = 78;
      intArray0[2] = 4412;
      intArray0[3] = 1942;
      ArrayUtils.swap(intArray0, (-1), 78, (-657));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-642), 78, 4412, 1942}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      Byte byte1 = new Byte((byte)23);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)23, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)126);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)23}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)0, (int) (byte)48);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)23}, byteArray1);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-46), 2063);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte) (-46));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      ArrayUtils.shift(byteArray0, (int) (byte) (-46), 611, (int) (byte) (-46));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte) (-46)}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-46), 611, 99);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte) (-46)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1394);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1394.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      ArrayUtils.swap(byteArray0, (int) (byte)8, 52, 120);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-28), (byte)37, (byte) (-28), (byte)8, (byte) (-28), (byte)8, (byte)8, (byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)82, (int) (byte)82);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-41);
      ArrayUtils.shift(byteArray0, 0, 5, 1136);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)50, (byte) (-41)}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1136}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) 1136;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) (-2841);
      longArray0[4] = (long) 1136;
      longArray0[5] = (long) (byte)50;
      ArrayUtils.shift(longArray0, 2);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1136L, 50L, 2147483647L, 1136L, 5L, (-2841L)}, longArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte) (-41));
      assertNotNull(short0);
      assertEquals((short) (-41), (short)short0);
      
      shortArray0[0] = short0;
      try { 
        Short.decode("No instructions to disable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"No instructions to disable\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (int) (byte) (-46), 43, (int) (byte) (-46));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-2078L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, (long) (byte)0);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1192L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1192L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3933));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-3933);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2147483647L, 0L, (-3933L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 2147483647L, 0L, (-3933L)}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-3933L);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) Integer.MAX_VALUE;
      floatArray0[8] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-3933.0F), 2.14748365E9F, (-1.0F), 0.0F, 0.0F, 2.14748365E9F, 0.0F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3652);
      shortArray0[1] = (short)3067;
      shortArray0[2] = (short)3210;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3210, (int) (short) (-3652));
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3652), (short)3067, (short)3210}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)3210;
      floatArray0[1] = (float) (short)3067;
      floatArray0[2] = (float) (short) (-3652);
      floatArray0[3] = (float) (short) (-3652);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3210.0F, 3067.0F, (-3652.0F), (-3652.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, 2146718244, (int) (short) (-3652));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)3, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-57);
      ArrayUtils.reverse(byteArray0, (-1017), (int) (byte)2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)2, (byte) (-50), (byte)2, (byte) (-57)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte) (-57);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1, "org.apache.commons.lang3.builder.ToStringStyle");
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(2237.9929693833);
      assertNotNull(double0);
      assertEquals(2237.9929693833, (double)double0, 0.01);
      
      Double double1 = new Double(2237.9929693833);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2237.9929693833, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'K';
      charArray0[2] = 'r';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'r';
      intArray0[2] = (int) '_';
      intArray0[3] = (int) '_';
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "Ecu+tu'");
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "org.apache.commons.lang3.builder.ToStringStyle");
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1379.376);
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((short[]) null, 100, 100, 50);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)57);
      assertNotNull(byte0);
      assertEquals((byte)57, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-68));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-68), (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)31;
      Byte byte3 = new Byte((byte)31);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)31, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte2);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)31, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "Ecu+tu'");
      assertSame(byteArray0, byteArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, byteArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '&');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '&';
      ArrayUtils.swap(intArray0, 38, 38, 38);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {38}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 38;
      doubleArray0[1] = (double) 38;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {38.0, 38.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {38.0, 38.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      int[] intArray0 = new int[6];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)3;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)50;
      longArray0[1] = (long) (byte)3;
      longArray0[2] = (long) (byte)108;
      longArray0[3] = (long) (byte)49;
      longArray0[4] = (long) (byte) (-41);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2146595212), (int) (byte) (-41));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'J';
      charArray0[2] = 'Z';
      charArray0[3] = 'w';
      charArray0[4] = '{';
      charArray0[5] = 'F';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Z');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', 'J', 'Z', 'w', '{', 'F'}, charArray0);
      assertArrayEquals(new char[] {'j', 'J', 'Z', 'w', '{', 'F', 'Z'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(1, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray1, (Object) null);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-45);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-45);
      longArray0[3] = (long) (-45);
      longArray0[4] = (long) (-45);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-45));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-45L), 0L, (-45L), (-45L), (-45L)}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1655));
      assertNotNull(short0);
      assertEquals((short) (-1655), (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1394);
      longArray0[1] = (long) (-1394);
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1394L), (-1394L)}, longArray0);
      
      Object object0 = ArrayUtils.get((Object[]) null, (-3487));
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) null, (-3487));
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 1853L;
      longArray0[2] = 2216L;
      longArray0[3] = 90L;
      longArray0[4] = 68L;
      longArray0[5] = 3097L;
      longArray0[6] = (-1L);
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 3097L, 68L, 90L, 2216L, 1853L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 0, 197);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-965), (-965));
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer((-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1110.489F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 804.2F;
      floatArray0[4] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F), 0.0F, 0.0F, 804.2F, (-1110.489F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1110.489F), 0.0F, 0.0F, 804.2F, (-1110.489F)}, floatArray0, 0.01F);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1110.489F);
      doubleArray0[3] = (double) (-1110.489F);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-965.0), (-1.0), (-1110.489013671875), (-1110.489013671875)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-965.0), (-1.0), (-1110.489013671875), (-1110.489013671875)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 1, 3164);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Character character0 = Character.valueOf('\u0081');
      assertNotNull(character0);
      assertEquals('\u0081', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      ArrayUtils.shift(byteArray0, (-188), 1184, (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = '>';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'5', 'K', 'K', '>'}, charArray0);
      assertArrayEquals(new char[] {'5', 'K', 'K', '>'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-917.0F));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1708);
      doubleArray0[0] = (double) (-917.0F);
      doubleArray0[3] = (double) '>';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-917.0), (-1708.0), 0.0, 62.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '>';
      longArray0[1] = (long) '>';
      longArray0[2] = (long) '5';
      longArray0[3] = 440L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {62L, 62L, 53L, 440L}, longArray0);
      assertArrayEquals(new long[] {62L, 62L, 53L, 440L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 99.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray2, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 120.49764763429336;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = 799.044464;
      doubleArray0[4] = (-2190.986315368);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 120.49764763429336, 1333.0, 799.044464, (-2190.986315368)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-965));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-1));
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 99.0F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 457.3F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[2] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) 1333;
      longArray0[2] = (-514L);
      longArray0[3] = (-2880L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1333;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2146615942L), (-965));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-965L), 1333L, (-514L), (-2880L), 0L, 1333L, 0L, 0L, 0L}, longArray0);
      
      Short[] shortArray0 = new Short[10];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)249);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)249, (short)249, (short)249, (short)249, (short)249, (short)249, (short)249, (short)249, (short)249, (short)249}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 102;
      longArray0[1] = (long) 102;
      ArrayUtils.swap(longArray0, 102, 102, 102);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {102L, 102L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {102L, 102L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {102L, 102L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte)0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (byte)5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {102L, 102L}, longArray0);
      assertEquals((-1), int1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((short[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-46);
      shortArray0[1] = (short) (byte) (-46);
      shortArray0[2] = (short) (byte) (-46);
      shortArray0[3] = (short) (byte) (-46);
      shortArray0[4] = (short) (byte) (-46);
      shortArray0[5] = (short)79;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-46), (short) (-46), (short) (-46), (short) (-46), (short) (-46), (short)79}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.removeElement((AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) null, object0);
      assertNull(abstractMap_SimpleImmutableEntryArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer(92);
      assertNotNull(integer0);
      assertEquals(92, (int)integer0);
      
      Integer integer1 = Integer.getInteger("'_hd;c{RLH", (int) (short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (int) 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 7);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, (Integer) null);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Integer integer3 = new Integer(92);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(92, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      Integer integer4 = new Integer(2146279226);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(2146279226, (int)integer4);
      
      Integer integer5 = new Integer((short)0);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer4, integer5);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer5));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry7;
      Integer integer6 = new Integer(92);
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(92, (int)integer6);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) integer6);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      // Undeclared exception!
      try { 
        BitSet.valueOf((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, longArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 97L;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-1);
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 97.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2146868373), 3283);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      float[] floatArray0 = new float[10];
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      Character character0 = new Character('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1538L));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1538L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)36);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)80;
      longArray0[1] = (long) 733;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, true, true}, booleanArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 40.0, 0.0, 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      Integer integer1 = Integer.getInteger("'_hd;c{RLH", (int) (byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (int) 101);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(0, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 644.10807337, (-2146615591), (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 40.0, 0.0, 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), (-1), (-1313.7858455934));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)265;
      shortArray0[1] = (short) (-1046);
      shortArray0[2] = (short) (-2746);
      shortArray0[3] = (short)1667;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)265, (short) (-1046), (short) (-2746), (short)1667}, shortArray0);
      assertArrayEquals(new short[] {(short)265, (short)265, (short) (-1046), (short) (-2746), (short)1667, (short) (-1046), (short) (-2746), (short)1667}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-3933);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 1, (-1), (-1), (-3933)}, intArray0);
      
      ArrayUtils.reverse((byte[]) null, (-3933), 55);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L)}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'c';
      charArray0[2] = '';
      charArray0[3] = '$';
      charArray0[4] = '*';
      charArray0[5] = '7';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'7', '*', '$', '', 'c', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Byte byte0 = new Byte((byte)35);
      assertNotNull(byte0);
      assertEquals((byte)35, (byte)byte0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)35, (int) (byte) (-67));
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 120.49764763429336;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = 799.044464;
      doubleArray0[4] = (-2190.986315368);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 120.49764763429336, 1333.0, 799.044464, (-2190.986315368)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', Integer.MAX_VALUE);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-106);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte) (-106);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-106)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-39), (byte) (-106), (byte) (-126), (byte) (-106)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-106), (byte) (-39), (byte) (-39), (byte) (-106), (byte) (-126), (byte) (-106)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2146512488, 2146512488, 1251);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      ArrayUtils.shift(longArray0, (-1027), 15, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {15L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1377);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1377);
      assertNotNull(integer0);
      assertEquals(1377, (int)integer0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 52, 1175, 1377);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-6);
      ArrayUtils.swap(byteArray0, 1173, 1293, 2583);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (short)50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)54;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)54, 84);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)54}, shortArray0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = 'b';
      charArray0[4] = '|';
      ArrayUtils.shuffle(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'g', 'n', 'b', '|', 'g'}, charArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) 'n';
      ArrayUtils.shift(objectArray0, (-4115), 0, 0);
      assertEquals(2, objectArray0.length);
      
      short short0 = (short)102;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-4115), (short)102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4115, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte) (-14), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte) (-14), (byte)2}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte) (-14);
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 40.0, (-14.0), 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 40.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[6] = (Object) (byte)2;
      objectArray0[7] = (Object) 101.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (-2192));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.hashCode(objectArray0[1]);
      assertEquals(8, objectArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte) (-14), (byte)2}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Long long0 = new Long(1184L);
      assertNotNull(long0);
      assertEquals(1184L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (long)longArray0[0];
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = (float) (long)longArray0[0];
      floatArray0[3] = (float) (long)longArray0[0];
      floatArray0[4] = (float) 1184L;
      floatArray0[5] = (float) 1184L;
      floatArray0[6] = (float) (long)longArray0[0];
      floatArray0[7] = (float) 1184L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1184.0F, 1184.0F, 1184.0F, 1184.0F, 1184.0F, 1184.0F, 1184.0F, 1184.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = 'H';
      charArray0[6] = 'h';
      charArray0[7] = '6';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'h', '6', '6', '6', '6', 'H', 'h', '6'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '6';
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {54.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-940);
      shortArray0[1] = (short)3138;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)814;
      shortArray0[5] = (short) (-1115);
      shortArray0[6] = (short)1136;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-940), (short)3138, (short)18688, (short) (-1), (short)814, (short) (-1115), (short)1136}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 2394L, (-1L), (-1L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 2394L, (-1L), (-1L), 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-1), (byte)94, (byte) (-1), (byte)119, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (byte)94;
      intArray2[1] = (int) (byte)89;
      intArray2[2] = (int) (byte) (-1);
      int[] intArray3 = ArrayUtils.removeAll(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(3, intArray2.length);
      assertEquals(2, intArray3.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {94, 89, (-1)}, intArray2);
      assertArrayEquals(new int[] {89, (-1)}, intArray3);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (-3431), 33, (-3431));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Integer integer0 = new Integer(1365);
      assertNotNull(integer0);
      assertEquals(1365, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      MockRandom mockRandom0 = new MockRandom(2143L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (int) (short) (-81);
      intArray0[2] = 1365;
      intArray0[3] = 3511;
      intArray0[4] = 108;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, (-81), 1365, 3511, 108}, intArray0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 108;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)5145;
      longArray0[4] = (long) 108;
      ArrayUtils.shift(longArray0, (-832), 2, (int) (short)0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {108L, 2L, 0L, 5145L, 108L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-2724), 512, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 1, 1, 1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-2146807428), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = new Short((short)1);
      assertEquals((short)1, int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte) (-41), 1, 77);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2146595212);
      intArray0[1] = 77;
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-2146595212), 77}, intArray0);
      assertTrue(boolean1);
      
      ArrayUtils.shift((long[]) null, (-2145076155));
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      ArrayUtils.shift((byte[]) null, (-2124141433), (-2124141433), (-2146595212));
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils.shift(longArray2, (-2124141433));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 120.49764763429336;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)50;
      ArrayUtils.shift(byteArray0, 77, (-2146595212), (int) (byte)49);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)90, (byte)49, (byte)50, (byte)3, (byte) (-41), (byte)50}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (-668);
      intArray0[2] = (int) (byte)50;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-668), 50}, intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-668);
      longArray0[1] = (long) (byte)108;
      longArray0[2] = (long) (byte)108;
      longArray0[3] = (long) (-2146595212);
      longArray0[4] = (long) 50;
      longArray0[5] = (long) (byte)108;
      longArray0[6] = (long) (byte)49;
      longArray0[7] = (long) (byte)50;
      ArrayUtils.shift(longArray0, (int) (byte)90);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {49L, 50L, (-668L), 108L, 108L, (-2146595212L), 50L, 108L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte)0}, byteArray0);
      
      Integer[] integerArray0 = new Integer[20];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1390));
      assertEquals(20, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      Integer integer0 = new Integer((-1390));
      assertNotNull(integer0);
      assertEquals((-1390), (int)integer0);
      
      Integer integer1 = new Integer((byte)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer2 = ArrayUtils.get(integerArray0, (-887));
      assertEquals(20, integerArray0.length);
      assertNull(integer2);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2839.96693650205);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertNull(object1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer3 = new Integer((-1390));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)object0));
      assertNotNull(integer3);
      assertEquals((-1390), (int)integer3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, integer3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, integer0);
      assertTrue(boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_CLASS_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      charArray0[3] = '@';
      Integer integer0 = Integer.valueOf((int) (byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (byte)0, 2590.363081, 2590.363081);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = Long.valueOf(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0L, 53, (double) 0L);
      assertEquals((-1), int0);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.clone(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) long0;
      floatArray0[0] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 53;
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte)1, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 's', 387);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 387, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)58, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = 0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)4}, shortArray0);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)4;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) (short)4;
      objectArray0[3] = (Object) (short)4;
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object2 = ArrayUtils.get(objectArray0, 84, (Object) integer0);
      assertEquals(4, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(object2.equals((Object)int0));
      assertTrue(object2.equals((Object)int1));
      assertNotNull(object2);
      assertEquals((-1), object2);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, object3);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(bitSet0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)object2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      Integer integer2 = new Integer(117);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)object2));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(117, (int)integer2);
      
      integerArray0[6] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, 2230, (Integer) int0);
      assertEquals(7, integerArray0.length);
      assertFalse(int0 == int1);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)object2));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)96;
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)123, (-891));
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)1, (byte)123, (byte) (-1), (byte) (-108), (byte)92, (byte) (-95), (byte)123, (byte)96}, byteArray0);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], (-790));
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, objectArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Never disable parameterized test method itself");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(2185);
      assertNotNull(integer0);
      assertEquals(2185, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(2185, object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, object0);
      assertSame(object0, object3);
      assertNotSame(object0, object2);
      assertSame(object3, object0);
      assertNotSame(object3, object2);
      assertEquals(4, objectArray0.length);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object3);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 3}", bitSet0.toString());
      assertSame(object0, object3);
      assertNotSame(object0, object2);
      assertSame(object3, object0);
      assertNotSame(object3, object2);
      assertEquals(4, objectArray0.length);
      assertFalse(object0.equals((Object)object2));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer integer1 = new Integer((-470));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object1));
      assertNotNull(integer1);
      assertEquals((-470), (int)integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray0, 2418, integer1);
      assertEquals(8, integerArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)object1));
      assertNotNull(integer2);
      assertEquals((-470), (int)integer2);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-3929), (-3929), 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-120));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120)}, byteArray0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (int) (byte) (-120), (-1), (int) (byte) (-120));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-891);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-891), (-1074), (double) (-891));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-891.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1511.0F;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 3273);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1511.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '=';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '|';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'U');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', '?', '|', '\u0000', 'q'}, charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', '?', '|', '\u0000', 'q'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'=', '?', '?', '|', '\u0000', 'q', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'm';
      charArray0[3] = 'J';
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 803.6111087116007;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 'm';
      doubleArray0[4] = (double) 'v';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {803.6111087116007, 0.0, 109.0, 118.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1), (double) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      shortArray0[1] = (short) (-363);
      shortArray0[2] = (short)28937;
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)28937;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {28937}, intArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'f';
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('~');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('~', (char)character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) (byte)49;
      floatArray0[5] = (float) (short)28937;
      floatArray0[6] = (float) 28937;
      floatArray0[7] = (float) 28937;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (short) (-363), 28937.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -363, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) null, (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1589.944426;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1019.4553845103741);
      doubleArray0[3] = 844.11998993169;
      doubleArray0[4] = (-2376.883192);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1589.944426, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 873L;
      ArrayUtils.swap(longArray0, 1072, 512);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 873L}, longArray0);
      
      Byte byte0 = new Byte((byte)78);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte)78);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)78, (byte)byte2);
      
      Byte byte3 = new Byte((byte)78);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)78, (byte)byte3);
      
      Byte byte4 = new Byte((byte)47);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)47, (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-114));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte) (-114), (byte)byte5);
      
      Byte byte6 = new Byte((byte)5);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte)5, (byte)byte6);
      
      Byte byte7 = new Byte((byte)10);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      assertEquals((byte)10, (byte)byte7);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 844.11998993169, (-1065));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1589.944426, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1110.489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(19, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)4042);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)4042;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1110.489F), (-1442));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {4042.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 635L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 13);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {635L}, longArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 1793, 1793, 98);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 98;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 98;
      int int0 = ArrayUtils.indexOf(floatArray0, 98.0F, 98);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {98.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("");
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      
      int int0 = ArrayUtils.indexOf((float[]) null, 1.0F);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2500;
      shortArray0[1] = (short)3675;
      shortArray0[2] = (short) (-639);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)688;
      shortArray0[5] = (short)18688;
      shortArray0[6] = (short)1680;
      shortArray0[7] = (short)52;
      boolean boolean6 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2500, (short)3675, (short) (-639), (short)1, (short)688, (short)18688, (short)1680, (short)52}, shortArray0);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3210, (int) (short)3210);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)120;
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-618));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)120;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-93.0), (-555));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 120.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 49, (-2145852935));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((-1135));
      assertNotNull(integer0);
      assertEquals((-1135), (int)integer0);
      
      Integer integer1 = Integer.getInteger("<F7Aiz`-a./;0PQ", (int) (short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 8;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 75L, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      ArrayUtils.shift(byteArray0, 1956);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2306.4F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1193.0F);
      floatArray0[3] = (-1237.9F);
      floatArray0[4] = 1192.5F;
      floatArray0[5] = 2887.4019F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.4019F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.4019F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 733;
      longArray0[1] = (long) 1044;
      ArrayUtils.swap(longArray0, 1044, 733, 1044);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {733L, 1044L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1044;
      intArray0[1] = 1044;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {1044, 1044}, intArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1782.0);
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 120.49764763429336;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'h';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'6', 'h', '6', '6', 'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-965);
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (-965);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-965);
      floatArray0[5] = (float) (short)2;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-965.0F), 2.0F, (-965.0F), 0.0F, (-965.0F), 2.0F}, floatArray0, 0.01F);
      assertEquals(3, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1333;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2742L));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1333L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)56;
      shortArray0[2] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1956);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short)56, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)50;
      ArrayUtils.shift(byteArray0, (-2135423550), (int) (byte)108, (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)3, (byte)49, (byte)50, (byte)90}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (short)1956;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {3, 1956}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-266);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2974, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2974, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(longArray0, 679, (-972));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      ArrayUtils.shift(byteArray0, (int) (byte)49, 676, (-1389));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)108, (byte)108}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short)28937;
      shortArray0[3] = (short)454;
      shortArray0[2] = (short)28937;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)1956, (short)28937, (short)454, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) (-965);
      objectArray0[2] = (Object) (short)28937;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-363);
      short short0 = (short)454;
      shortArray0[1] = (short)454;
      short short1 = (short)28937;
      shortArray0[2] = (short)28937;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-363), (short)454, (short)28937}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) (short)28937;
      objectArray0[2] = (Object) (short)28937;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)28937;
      longArray0[1] = (long) (short)28937;
      longArray0[2] = (long) (short) (-363);
      longArray0[3] = (long) (short)454;
      longArray0[4] = (long) (short)28937;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)4}, shortArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '1';
      charArray0[2] = '+';
      charArray0[3] = 'c';
      charArray0[4] = 'P';
      charArray0[5] = 'X';
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (short)2);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      Float float2 = Float.valueOf((float) (-1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      floatArray0[3] = float1;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 1.0F, (-1.0F), 2.0F, 2.0F, 1.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)46);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)46);
      assertNotNull(long0);
      assertEquals(46L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2413);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2413L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short)4);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(4L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = Long.getLong("", long1);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(2413L, (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {46L, 2413L, 4L, 2413L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 0.0;
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-95);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-95), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 3087L;
      longArray0[1] = 3087L;
      longArray0[2] = 3087L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {3087L, 3087L, 3087L}, longArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1155.30251694175, (-2695));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 132.7296931, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-883);
      intArray0[1] = (-2695);
      intArray0[2] = (-2695);
      intArray0[3] = (-2695);
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer1));
      assertNotNull(object0);
      assertEquals((-1394), object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((short[]) null);
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-480), (-480));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      Short short0 = new Short((short) (-905));
      assertNotNull(short0);
      assertEquals((short) (-905), (short)short0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short)78;
      floatArray0[3] = (float) (short) (-905);
      floatArray0[4] = (float) (-514L);
      floatArray0[7] = (float) (-1);
      floatArray0[6] = (float) (-31);
      floatArray0[7] = (float) (short)2;
      int int1 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-1));
      assertEquals(8, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 78.0F, (-905.0F), (-514.0F), 0.0F, (-31.0F), 2.0F}, floatArray0, 0.01F);
      assertEquals(0, int1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-31.0F));
      assertNotNull(double0);
      assertEquals((-31.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-31.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-1.0F));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-31.0), (-31.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2306.4F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1193.0F);
      floatArray0[3] = (-1237.9F);
      floatArray0[4] = 1192.5F;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-181), (-1431655764));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer(1667);
      assertNotNull(integer0);
      assertEquals(1667, (int)integer0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1667);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1388), 3, 3);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-1)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'L';
      charArray0[2] = 'f';
      charArray0[3] = 'a';
      charArray0[4] = ')';
      charArray0[5] = 'S';
      ArrayUtils.reverse(charArray0, (-965), 1333);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'S', ')', 'a', 'f', 'L', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      char[] charArray0 = new char[7];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1333.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1333.0F, 0.0F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Float float0 = new Float((double) (-1394));
      assertNotNull(float0);
      assertEquals((-1394.0F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      ArrayUtils.swap(doubleArray0, 0, (int) (short) (-1), 2905);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ArrayUtils.swap(doubleArray0, (int) (short)0, (-1));
      assertEquals(12, doubleArray0.length);
      
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 2925.71426986);
      assertEquals(12, doubleArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 733, 733);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'O', 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, (-679));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-891);
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1072;
      shortArray1[1] = (short)56;
      shortArray1[2] = (short)1072;
      shortArray1[3] = (short)1072;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short)1072);
      assertEquals(4, bitSet1.length());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 2, 3}", bitSet1.toString());
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)1072, (short)56, (short)1072, (short)1072}, shortArray1);
      
      ArrayUtils.shift((byte[]) null, (-126), 41, (-1513));
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 42, 3478, 3478);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)1072;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1956);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)56, (short)1072}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)50;
      ArrayUtils.shift(byteArray0, 1021, (int) (short)56, 807);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)108, (byte)3, (byte)49, (byte)50}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)90;
      intArray0[1] = (int) (short)56;
      intArray0[2] = (-2638);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (byte)50;
      intArray0[6] = (int) (short)56;
      intArray0[7] = (int) (short)2906;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {90, 56, (-2638), (-1), (-1), 50, 56, 2906}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1110.489F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[9];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) true;
      booleanArray2[2] = (Boolean) false;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray2[3] = boolean0;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) false;
      booleanArray2[6] = (Boolean) false;
      booleanArray2[7] = (Boolean) false;
      booleanArray2[8] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false, false}, booleanArray3));
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1821.9614533255417, (-1), (double) (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.clone((long[]) null);
      assertNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 20.0F, Integer.MAX_VALUE);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 8, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 49, (-2145852935));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer((-1135));
      assertNotNull(integer0);
      assertEquals((-1135), (int)integer0);
      
      Integer integer1 = Integer.getInteger("<F7Aiz`-a./;0PQ", (int) (short)0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-1));
      assertFalse(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 8;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 75L, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 8L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 277;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {277, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 277, 0, 0}, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(7, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {277, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 277, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 277, 0, 0, 277, 0, 0}, intArray2);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("0x");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf("{}");
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 82;
      intArray0[1] = 52;
      intArray0[2] = (-2146251161);
      intArray0[3] = 62;
      intArray0[4] = 53;
      intArray0[5] = 110;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2388);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {82, 52, (-2146251161), 62, 53, 110}, intArray0);
      assertArrayEquals(new int[] {82, 52, (-2146251161), 62, 53, 110}, intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 82;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 82);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray0));
      
      Integer integer0 = new Integer(110);
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Integer integer1 = Integer.getInteger("The array must not contain any null elements", 97);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(97, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, (-2146251161));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3933));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, 0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-3933);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 2147483647L, 0L, (-3933L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 2147483647L, 0L, (-3933L)}, longArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2837;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-66);
      shortArray0[3] = (short)75;
      shortArray0[4] = (short)2388;
      shortArray0[5] = (short)1247;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2388);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2837, (short)1, (short) (-66), (short)75, (short)1247, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)2837, (short)1, (short) (-66), (short)75, (short)2388, (short)1247, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1296);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3652);
      shortArray0[1] = (short)3067;
      shortArray0[2] = (short)3210;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3210, (int) (short) (-3652));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-3652), (short)3067, (short)3210}, shortArray0);
      
      float[] floatArray0 = new float[16];
      floatArray0[0] = (float) (short)3210;
      floatArray0[1] = (float) (short)3067;
      floatArray0[2] = (float) (short) (-3652);
      floatArray0[3] = (float) (short) (-3652);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(16, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)3, (byte)0, (byte)48}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)48, (byte)120}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, (-4));
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.cardinality());
      assertEquals("{0, 1, 3, 4, 5}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = Long.valueOf(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 62;
      intArray0[1] = (-176);
      intArray0[2] = 53;
      intArray0[3] = 92;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 62);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {62, (-176), 53, 92}, intArray0);
      assertArrayEquals(new int[] {(-176), 53, 92}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 62, (-535L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 82;
      intArray0[0] = 82;
      intArray0[1] = 52;
      intArray0[2] = (-2146251161);
      intArray0[3] = 62;
      intArray0[4] = 53;
      intArray0[5] = 110;
      int int1 = 2388;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2388);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {82, 52, (-2146251161), 62, 53, 110}, intArray0);
      assertArrayEquals(new int[] {82, 52, (-2146251161), 62, 53, 110}, intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 82;
      long long0 = 2553L;
      longArray0[1] = 2553L;
      longArray0[2] = (long) 110;
      longArray0[3] = (long) 82;
      longArray0[4] = (long) 62;
      longArray0[5] = (long) (-2146251161);
      longArray0[6] = (long) (-2146251161);
      longArray0[7] = (long) 53;
      longArray0[8] = (long) 52;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {82L, 2553L, 110L, 82L, 62L, (-2146251161L), (-2146251161L), 53L, 52L}, longArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 110, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 97, (float) 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2306.4F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1193.0F);
      floatArray0[3] = (-1237.9F);
      floatArray0[4] = 1192.5F;
      floatArray0[5] = 2887.9207F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.9207F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2306.4F), 1.0F, (-1193.0F), (-1237.9F), 1192.5F, 2887.9207F}, floatArray1, 0.01F);
      
      Integer[] integerArray0 = new Integer[0];
      int int0 = 1044;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 1044, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1044, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      longArray0[2] = (-239L);
      longArray0[3] = 0L;
      longArray0[4] = 3073L;
      longArray0[5] = 2524L;
      longArray0[6] = (-1L);
      longArray0[7] = 3087L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-239L), 0L, 3073L, 2524L, (-1L), 3087L, 1298L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1722.7), 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2687, 1044);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Integer integer0 = new Integer(3613);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(3613, (int)integer0);
      
      Integer integer1 = Integer.getInteger("{y(0}1(>J{VEe-", 102);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(102, (int)integer1);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 2317);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'f');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'f';
      ArrayUtils.swap((int[]) null, (-2007), (-2007));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'f';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 102L, (-2007));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {102L}, longArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 102L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 102L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {102.0F, (-1.0F), 102.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {102.0F, (-1.0F), 102.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1039);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1039}, shortArray1);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray2);
      
      ArrayUtils.swap((int[]) null, (-1448), (int) (short)1039);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'h';
      charArray0[3] = '6';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U', 'H', 'h', '6'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '6';
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (int) 'H';
      intArray0[2] = (int) 'H';
      intArray0[3] = (int) '6';
      intArray0[4] = (int) 'U';
      intArray0[5] = (int) 'U';
      intArray0[6] = (int) 'U';
      intArray0[7] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      Integer integer0 = new Integer(756);
      assertNotNull(integer0);
      assertEquals(756, (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer1 = new Integer((int) integerArray0[3]);
      assertEquals(8, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(756, (int)integer1);
      
      integerArray0[6] = integer1;
      int int0 = 18;
      Integer integer2 = new Integer(18);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(18, (int)integer2);
      
      integerArray0[7] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotNull(integerArray1);
      
      char char0 = 'T';
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '_';
      charArray0[2] = 'T';
      charArray0[3] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', (-1394));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'Z', '_', 'T', 'Z'}, charArray0);
      
      Integer integer3 = new Integer(18);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(18, (int)integer3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integerArray0[1], (Object) integerArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Long long0 = new Long(1184L);
      assertNotNull(long0);
      assertEquals(1184L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1184L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      Integer integer0 = ArrayUtils.get((Integer[]) null, 2143229026);
      assertNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 101, (int) (byte)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      
      Long long0 = new Long(101);
      assertNotNull(long0);
      assertEquals(101L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1394);
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Long long0 = new Long((-1394));
      assertNotNull(long0);
      assertEquals((-1394L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-1394));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-1394L), (long)long3);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1394L)}, longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-125);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte)0}, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-125));
      assertNotNull(integer0);
      assertEquals((-125), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1390));
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(1, integerArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-1390);
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) (int)integerArray0[0];
      longArray0[5] = (long) (-1390);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)5, (byte)2, (byte)2, (byte)82, (byte) (-90), (byte)2}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      charArray0[3] = 'y';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', 493);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'E', 'a', '&', 'y', 'E', 'E'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, (int) (byte) (-46), 39, (int) (byte) (-46));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-125));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-125)}, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-125);
      longArray0[1] = (long) (byte) (-46);
      longArray0[2] = (long) 39;
      longArray0[3] = (long) (byte) (-125);
      ArrayUtils.swap(longArray0, (-856), 39, (-526));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-125L), (-46L), 39L, (-125L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      int int0 = 733;
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1412L;
      longArray0[2] = (long) 97;
      longArray0[3] = (long) 733;
      longArray0[4] = (long) 733;
      longArray0[5] = (long) 97;
      longArray0[6] = (long) (-95);
      longArray0[7] = (long) (-95);
      longArray0[8] = (long) 97;
      int int1 = 943;
      int int2 = 217;
      ArrayUtils.swap(longArray0, (-95), 943, 217);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 1412L, 97L, 733L, 733L, 97L, (-95L), (-95L), 97L}, longArray0);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 11;
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = 'u';
      ArrayUtils.swap(charArray0, 11, 11, 11);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'(', 'u'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 15;
      Integer integer0 = new Integer(15);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals(15, (int)mutableInt0.getValue());
      assertEquals("15", mutableInt0.toString());
      assertEquals(15, (int)mutableInt0.toInteger());
      assertEquals(15.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(15L, mutableInt0.longValue());
      assertEquals(15.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)15, mutableInt0.shortValue());
      assertEquals(15, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals(15, (int)mutableInt0.getValue());
      assertEquals("15", mutableInt0.toString());
      assertEquals(15, (int)mutableInt0.toInteger());
      assertEquals(15.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(15L, mutableInt0.longValue());
      assertEquals(15.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)15, mutableInt0.shortValue());
      assertEquals(15, mutableInt0.intValue());
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(15, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(15);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(15, (int)integer3);
      
      integerArray0[3] = integer3;
      int int1 = mutableInt0.decrementAndGet();
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals("14", mutableInt0.toString());
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14, mutableInt0.intValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = mutableInt0.getAndAdd((Number) int0);
      assertEquals("29", mutableInt0.toString());
      assertEquals(29, (int)mutableInt0.getValue());
      assertEquals((short)29, mutableInt0.shortValue());
      assertEquals(29, (int)mutableInt0.toInteger());
      assertEquals((byte)29, mutableInt0.byteValue());
      assertEquals(29.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(29, mutableInt0.intValue());
      assertEquals(29.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(29L, mutableInt0.longValue());
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(14, int2);
      
      Integer integer4 = mutableInt0.toInteger();
      assertEquals("29", mutableInt0.toString());
      assertEquals(29, (int)mutableInt0.getValue());
      assertEquals((short)29, mutableInt0.shortValue());
      assertEquals(29, (int)mutableInt0.toInteger());
      assertEquals((byte)29, mutableInt0.byteValue());
      assertEquals(29.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(29, mutableInt0.intValue());
      assertEquals(29.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(29L, mutableInt0.longValue());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(29, (int)integer4);
      
      integerArray0[4] = integer4;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int3 = ArrayUtils.lastIndexOf(booleanArray0, false, int0);
      assertEquals(3, booleanArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(2, int3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 's';
      ArrayUtils.swap(charArray0, 14, 1470, (-1));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'z', 's'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_SHORT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer(4811);
      assertNotNull(integer0);
      assertEquals(4811, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, 4811, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4811, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1), (Integer) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 2, (Integer) 1333);
      assertNotSame(intArray0, intArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Float float0 = new Float((double) (-1394));
      assertNotNull(float0);
      assertEquals((-1394.0F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      ArrayUtils.swap(doubleArray0, (-1394), (int) (short) (-1), 2905);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1394);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', 45);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'?', '?', '?'}, charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 40.0, 0.0, 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', 89);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'O', 'O'}, charArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(2, int0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[0];
      MockRandom mockRandom1 = new MockRandom(296L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        mockRandom1.longs((-529L), 1L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)56;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)84, (byte)1, (byte)8, (byte)0, (byte)82, (byte)56}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)1, (byte)8, (byte)0, (byte)82, (byte)56}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(1, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      ArrayUtils.shift(intArray1, (-45), 56, 0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1333;
      integerArray0[1] = (Integer) (-965);
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (-965);
      doubleArray0[2] = (double) (-965);
      doubleArray0[3] = (double) (-45);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      ArrayUtils.reverse(doubleArray0, 1893, 1893);
      assertEquals(18, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 1793, 1793, 97);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'E';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = '&';
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, 69, 1793);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) (-1), (Object) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 120.49764763429336;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'R';
      charArray0[2] = 'Z';
      charArray0[3] = 'T';
      charArray0[4] = 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'T', 68);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', 'R', 'Z', 'T', 'q'}, charArray0);
      
      Integer integer1 = new Integer(68);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(68, (int)integer1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) integer0, (Object) integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = ']';
      charArray0[2] = '^';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', ']', '^'}, charArray0);
      assertArrayEquals(new char[] {'j', ']', '^'}, charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, 493);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 493, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1394);
      longArray0[1] = (long) 91;
      longArray0[2] = (long) 1592;
      longArray0[3] = (long) 1592;
      longArray0[4] = (long) 91;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 1592);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1394L), 91L, 1592L, 1592L, 91L}, longArray0);
      assertArrayEquals(new long[] {(-1394L), 91L, 91L}, longArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1237.9F);
      floatArray0[1] = (float) 91L;
      floatArray0[2] = (float) 91;
      floatArray0[3] = (float) (-1394);
      floatArray0[4] = (float) 1592;
      floatArray0[5] = (float) 91L;
      floatArray0[6] = (float) 91L;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1237.9F), 91.0F, 91.0F, (-1394.0F), 1592.0F, 91.0F, 91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1237.9F), 91.0F, 91.0F, (-1394.0F), 1592.0F, 91.0F, 91.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1239);
      integerArray0[1] = (Integer) (-1239);
      integerArray0[2] = (Integer) (-1239);
      integerArray0[3] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1239);
      integerArray0[6] = (Integer) (-1239);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) integerArray0[1]);
      assertEquals(7, integerArray0.length);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[6];
      doubleArray0[1] = (double) (-1239);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (int)integerArray0[5];
      doubleArray0[4] = (double) (int)integerArray0[6];
      doubleArray0[5] = (double) 'K';
      doubleArray0[6] = (-1379.376);
      doubleArray0[7] = (double) (-1239);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1239.0), (-1239.0), 0.0, (-1239.0), (-1239.0), 75.0, (-1379.376), (-1239.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (-1239);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1239));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1239L)}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)2906);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1, (-354), (-260));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, (-3213), (-3213), 2906);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 120.49764763429336;
      doubleArray0[2] = (double) 1333;
      doubleArray0[3] = 799.044464;
      doubleArray0[4] = (-2190.986315368);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 120.49764763429336, 1333.0, 799.044464, (-2190.986315368)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-965));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'v';
      charArray0[2] = 'z';
      ArrayUtils.swap(charArray0, (-354), (-965), (-965));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {':', 'v', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-686), arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -686, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1239);
      integerArray0[1] = (Integer) (-1239);
      integerArray0[2] = (Integer) (-1239);
      integerArray0[3] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1239);
      integerArray0[6] = (Integer) (-1239);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) integerArray0[1]);
      assertEquals(7, integerArray0.length);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[6];
      doubleArray0[1] = (double) (-1239);
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = new Integer((-1239));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1239), (int)integer2);
      
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(7, integerArray0.length);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1239), (int)integer3);
      
      Integer integer4 = new Integer(10);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(10, (int)integer4);
      
      Integer integer5 = new Integer((-2035));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-2035), (int)integer5);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2695), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2695, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5003);
      assertNotNull(integer0);
      assertEquals(5003, (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5003, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5003, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(111);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2070);
      assertNotNull(integer0);
      assertEquals(2070, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.insert(1, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 120.49764763429336;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[1] = 1155.30251694175;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 1155.30251694175, 120.49764763429336, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 69);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(2, int0);
      
      int int1 = 1209;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      integerArray0[0] = integer0;
      int int2 = 121;
      Integer integer1 = new Integer(121);
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(121, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals(121, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int2));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1209);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1209, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-2035));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals((-2035), (int)integer5);
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1209, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1209, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'a';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'@', ' ', 'a', '@', '@', ' ', ' '}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 3929.45F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1720L), 2146121325);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      short short0 = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), int0);
      
      int int1 = (-31);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-31), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -31, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = 'V';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', 'P', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 't', int0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'J', 'P', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Integer integer1 = new Integer((-2900));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2900), (int)integer1);
      
      Integer integer2 = ArrayUtils.get(integerArray1, (-1181));
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNull(integer2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray1, object0, (-1181));
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      BitSet bitSet1 = new BitSet((byte)3);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[7];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = ' ';
      Integer integer0 = Integer.getInteger("", (int) (byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-2192));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = new Integer[19];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      Object[] objectArray0 = new Object[0];
      Integer integer0 = new Integer((-1775));
      assertNotNull(integer0);
      assertEquals((-1775), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)101, (byte)0, (byte)1, (byte)0, (byte)2}, byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 40.0, 0.0, 40.0, 0.0, 101.0, 1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 40.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[6] = (Object) (byte)2;
      objectArray0[7] = (Object) 101.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (-2192));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 132.7296931;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-595.2888680601));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 132.7296931}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2178;
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3475.225);
      doubleArray0[2] = 176.06519727;
      doubleArray0[3] = 757.653;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 911);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-3475.225), 176.06519727, 757.653}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Float float0 = new Float((double) (-1394));
      assertNotNull(float0);
      assertEquals((-1394.0F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-896.011996192);
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (int) (short)0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-896.011996192), (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-896.011996192), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-896.011996192), (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)16);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-595.2888680601);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-595.2888680601));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-595.2888680601)}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-595.2888680601)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = ']';
      charArray0[2] = '^';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', ']', '^'}, charArray0);
      assertArrayEquals(new char[] {'j', ']', '^'}, charArray1);
      
      boolean boolean3 = ArrayUtils.contains((short[]) null, (short)1113);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'j';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 5);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 106.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short)56;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2906);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short) (-1), (short)0, (short)56, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      shortArray0[1] = (short) (byte)3;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (short)2906;
      objectArray0[2] = (Object) (short)3;
      objectArray0[3] = (Object) (short)3;
      objectArray0[4] = (Object) (short)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.147483647E9;
      doubleArray0[1] = (double) 3067;
      doubleArray0[2] = (double) (short)2906;
      doubleArray0[3] = (-896.011996192);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), (int) (byte)90);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 3067.0, 2906.0, (-896.011996192)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short)2490);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (short) (-2));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[2] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) 1333;
      longArray0[2] = (-514L);
      longArray0[3] = (-2880L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1333;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2146615942L), (-965));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(9, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-965L), 1333L, (-514L), (-2880L), 0L, 1333L, 0L, 0L, 0L}, longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)249);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      Short short0 = new Short((short) (-21846));
      assertNotNull(short0);
      assertEquals((short) (-21846), (short)short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-21846)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1394);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, (-3923.0), 2641.4);
      assertNotNull(doubleStream0);
      
      floatArray0[0] = 0.0F;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Object object0 = ArrayUtils.get(objectArray0, (int) 0);
      assertEquals(1, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
      
      Integer integer0 = Integer.getInteger("LNEF87Y", (-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Integer integer1 = Integer.valueOf((-2146615942));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146615942), (int)integer1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1238L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 2553L;
      longArray0[4] = (long) (-2146615942);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = 2478L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2240L, (int) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1238L, 0L, 0L, 2553L, (-2146615942L), 0L, 2478L}, longArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-4683));
      assertNotNull(short0);
      assertEquals((short) (-4683), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)0);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4683), (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-65);
      intArray0[1] = (int) (short)0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 1365;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-65), 0, Integer.MAX_VALUE, 1365}, intArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Character character0 = new Character('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 9, (short) (-179));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.nullToEmpty((Integer[]) null, (Class<Integer[]>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 15;
      Integer integer0 = new Integer(15);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(15, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(15);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(15, (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) int0);
      assertEquals(15L, mutableInt0.longValue());
      assertEquals(15.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(15.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(15, (int)mutableInt0.toInteger());
      assertEquals(15, (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals("15", mutableInt0.toString());
      assertEquals(15, mutableInt0.intValue());
      assertEquals((short)15, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertEquals(15L, mutableInt0.longValue());
      assertEquals(15.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(15.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(15, (int)mutableInt0.toInteger());
      assertEquals(15, (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals("15", mutableInt0.toString());
      assertEquals(15, mutableInt0.intValue());
      assertEquals((short)15, mutableInt0.shortValue());
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(15, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(15);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(15, (int)integer3);
      
      integerArray0[3] = integer3;
      int int1 = mutableInt0.decrementAndGet();
      assertEquals("14", mutableInt0.toString());
      assertEquals(14L, mutableInt0.longValue());
      assertEquals(14.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(14, (int)mutableInt0.toInteger());
      assertEquals(14, (int)mutableInt0.getValue());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertEquals(14.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)14, mutableInt0.shortValue());
      assertEquals(14, mutableInt0.intValue());
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = mutableInt0.getAndAdd((Number) int0);
      assertEquals(29, mutableInt0.intValue());
      assertEquals(29L, mutableInt0.longValue());
      assertEquals((byte)29, mutableInt0.byteValue());
      assertEquals(29, (int)mutableInt0.toInteger());
      assertEquals(29, (int)mutableInt0.getValue());
      assertEquals((short)29, mutableInt0.shortValue());
      assertEquals(29.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("29", mutableInt0.toString());
      assertEquals(29.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(14, int2);
      
      Integer integer4 = mutableInt0.toInteger();
      assertEquals(29, mutableInt0.intValue());
      assertEquals(29L, mutableInt0.longValue());
      assertEquals((byte)29, mutableInt0.byteValue());
      assertEquals(29, (int)mutableInt0.toInteger());
      assertEquals(29, (int)mutableInt0.getValue());
      assertEquals((short)29, mutableInt0.shortValue());
      assertEquals(29.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("29", mutableInt0.toString());
      assertEquals(29.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(29, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("LwWI/(NNfpP,-.");
      assertNull(integer5);
      
      integerArray0[5] = null;
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)int2));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int1));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(integer6);
      assertEquals(15, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int2));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      assertEquals(15, (int)integer7);
      
      integerArray0[7] = integer7;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-891.0), 124, 1740.70627535988);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {14.0, 14.0, 15.0, 15.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (-1), (double) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1394);
      doubleArray0[2] = (double) 91;
      doubleArray0[3] = (double) 1592;
      doubleArray0[4] = (double) (-1394);
      doubleArray0[5] = (-827.69);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1091.9831668, (-363), 1324.16813);
      assertEquals(4, bitSet0.length());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1394.0), 0.0, 91.0, 1592.0, (-1394.0), (-827.69)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 1793, 1793, 98);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-37);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-37), (byte) (-37), (byte) (-37), (byte)124, (byte) (-37), (byte)124, (byte)124, (byte) (-37)}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-37), (byte) (-110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -37, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, 1, (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)2906;
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '&';
      ArrayUtils.shift(charArray0, (int) (short)2906, 469, 469);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\"', '&'}, charArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) (short)1028;
      intArray0[2] = (int) '\"';
      intArray0[3] = (int) (byte)16;
      intArray0[4] = (int) (byte) (-2);
      intArray0[5] = (int) (short)2906;
      intArray0[6] = (int) (short) (-1);
      intArray0[7] = (int) (byte)16;
      intArray0[8] = (int) (short)2906;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {38, 1028, 34, 16, (-2), 2906, (-1), 16, 2906}, intArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      short[] shortArray0 = new short[5];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte) (-53), (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3627);
      shortArray0[1] = (short)1028;
      short short0 = (short) (-3108);
      shortArray0[2] = (short) (-3108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3627), (short)1028, (short) (-3108)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)57;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)16, (byte)89, (byte) (-37), (byte)124, (byte)57}, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte)57;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, 1883, (byte)58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1883, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-891);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-891), (-1074), (double) (-891));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-891.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1511.0F;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 3273);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1511.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '=';
      charArray0[2] = '?';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'Y';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'U');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', 'u', '|', 'Y', 'q'}, charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', 'u', '|', 'Y', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-4994.0), (-345.73583));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      intArray0[2] = 3050;
      intArray0[3] = 0;
      intArray0[4] = 609;
      short[] shortArray0 = ArrayUtils.insert((-31), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1708);
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 50;
      intArray0[0] = 80;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(679, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 679, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      ArrayUtils.swap((Object[]) floatArray1, 1832, 1832);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-4450));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      ArrayUtils.swap((Object[]) shortArray0, 56, (int) (short) (-2), 65536);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      short[] shortArray0 = new short[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_SHORT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1442.41F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3809.589;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3809.589, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2146251161));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5145;
      shortArray0[1] = (short) (-81);
      shortArray0[2] = (short)1113;
      MockRandom mockRandom0 = new MockRandom((short)5145);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-81), (short)1113, (short)5145}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)5);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-1), (byte)0}, byteArray1);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short) (byte)0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3548.739109615473), (int) (byte)5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = 'P';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', '2', 'P'}, charArray0);
      assertArrayEquals(new char[] {'}', '2', 'P'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      Object object0 = ArrayUtils.get(objectArray0, (int) 0);
      assertEquals(1, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
      
      Integer integer0 = Integer.getInteger("NEF87Y", (-2146615942));
      assertNotNull(integer0);
      assertEquals((-2146615942), (int)integer0);
      
      Integer integer1 = Integer.valueOf((-2146615942));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2146615942), (int)integer1);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object1);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1238L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 2553L;
      longArray0[4] = (long) (-2146615942);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = 2478L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2240L, (int) (byte)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1238L, 0L, 0L, 2553L, (-2146615942L), 0L, 2478L}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 70L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {70L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      ArrayUtils.shift((Object[]) integerArray0, (-802), (-802), (-802));
      assertEquals(6, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[3] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Integer integer0 = new Integer((-3184));
      assertNotNull(integer0);
      assertEquals((-3184), (int)integer0);
      
      Integer integer1 = new Integer((-3184));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3184), (int)integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 's';
      charArray0[2] = 'Z';
      charArray0[3] = 'R';
      charArray0[4] = 'Z';
      charArray0[5] = '^';
      charArray0[6] = 'Z';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z', 85);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'Z', 's', 'Z', 'R', 'Z', '^', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 15;
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) 15;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {15.0F, 15.0F, 15.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1386);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 120.49764763429336;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 0.0, 120.49764763429336, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 69);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2058.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 3364.642F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2058.0F, 1.0F, 3364.642F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 3364.642F;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1354L);
      longArray0[1] = (-396L);
      longArray0[2] = (-1265L);
      longArray0[3] = (-1078L);
      longArray0[4] = (-844L);
      longArray0[5] = (-2227L);
      longArray0[6] = 2623L;
      longArray0[7] = (-313L);
      longArray0[8] = (-1L);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-396L), (-1265L), (-1078L), (-844L), (-2227L), 2623L, (-313L), (-1L), (-1354L)}, longArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2881.0), (-2695));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3364.64208984375, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      int int0 = 3067;
      int int1 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)1072;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1956);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)56, (short)1072}, shortArray0);
      
      byte byte0 = (byte)90;
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)2906, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2906, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-31), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -31, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-374.016F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      shortArray0[1] = (short)54;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short)54);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      int int0 = (-972);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)987;
      longArray0[1] = (long) (short)54;
      longArray0[2] = (long) 679;
      ArrayUtils.swap(longArray0, (-1768), (-1648));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {987L, 54L, 679L}, longArray0);
      
      int int1 = (-4260);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4260), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4260, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeAll(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 1264, 0, 3653);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)120;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-76), (byte) (-110), (byte)0, (byte)4, (byte)120}, byteArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte) (-76), (byte) (-110), (byte)0, (byte)4, (byte)120}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)4;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)120;
      shortArray0[3] = (short) (byte) (-110);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)0, (short)120, (short) (-110)}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = new char[4];
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)1136);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      charArray0[0] = 'c';
      charArray0[1] = '#';
      boolean[] booleanArray0 = ArrayUtils.insert(1560, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      charArray0[2] = '#';
      charArray0[3] = 'c';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c', '#', '#', 'c'}, charArray0);
      assertArrayEquals(new char[] {'c', '#', '#', 'c'}, charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 180L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-16);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-16), (int) (byte) (-16));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)0}, byteArray0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-16), 1, (int) (byte) (-16));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)6);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-57);
      ArrayUtils.reverse(byteArray0, (-1017), (int) (byte)2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-57), (byte)2, (byte) (-50), (byte)2, (byte) (-57)}, byteArray0);
      
      long[] longArray0 = bitSet0.toLongArray();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(bitSet0, bitSet1);
      assertEquals(1, charArray0.length);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertNotNull(longArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BYTE_ARRAY, (-3), (-3));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 50;
      ArrayUtils.reverse(byteArray0, 5051, 50);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)120;
      ArrayUtils.shuffle(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)120, (byte) (-79)}, byteArray1);
      
      double[] doubleArray0 = ArrayUtils.add(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1165.78677));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1165.78677)}, doubleArray0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      
      int int1 = 76;
      int[] intArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int2 = 943;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1385));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1385, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'h';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'u', (-1074));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'U', 'H', 'h', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)3210, (int) (short)3210);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '@', 3221);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 733, 733);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'O', 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 1793, 1793, 97);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'E';
      charArray0[2] = ' ';
      charArray0[3] = '@';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = '&';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (-446));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'a', 'E', ' ', '@', 'W', 'W', '&'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert((-342), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      intArray0[2] = 3050;
      intArray0[3] = 0;
      intArray0[4] = 609;
      short[] shortArray0 = ArrayUtils.insert((-31), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3050;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3050.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3050.0F, 3050.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (short)1;
      ArrayUtils.swap(longArray0, 0, (int) (short)1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 1L, 0L, 0L, 0L, (-1L), 1L}, longArray0);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1379.376);
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((short[]) null, 100, 100, 50);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      MockRandom mockRandom0 = new MockRandom(50);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, 1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'f');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      assertEquals(0, integerArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      
      Integer integer0 = new Integer((-795));
      assertNotNull(integer0);
      assertEquals((-795), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) integerArray0, object0);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, integerArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Integer[] integerArray2 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray2);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.get((Object[]) integerArray0, (int) 0, object1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertEquals(0, integerArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) integerArray1, (Object[]) integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 1155.30251694175;
      doubleArray0[2] = 120.49764763429336;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 120.49764763429336;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 120.49764763429336;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      Integer integer0 = Integer.getInteger("n%e: ", (-45));
      assertNotNull(integer0);
      assertEquals((-45), (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      assertEquals(0, object1);
      
      Integer integer2 = new Integer((-45));
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-45), (int)integer2);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer2);
      assertEquals(3, objectArray0.length);
      assertFalse(integer2.equals((Object)object1));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Object object2 = ArrayUtils.get((Object[]) integerArray0, 166, objectArray0[1]);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(object2.equals((Object)boolean0));
      assertNotNull(object2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(false, object2);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) integerArray0, objectArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(3, objectArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((byte[]) null, 816);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray2);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object2 = ArrayUtils.get(objectArray0, 1333, objectArray0[6]);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(8, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(object2.equals((Object)integer0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals(1333, object2);
      
      objectArray1[0] = object2;
      objectArray1[1] = object1;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1862);
      assertNotNull(integer0);
      assertEquals(1862, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(109);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(109, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(2, integerArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)249);
      assertNotNull(short0);
      assertEquals((short)249, (short)short0);
      
      Integer integer2 = new Integer((-75));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-75), (int)integer2);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3645.4475F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {3645.4475F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)30);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-1239);
      integerArray0[1] = (Integer) (-1239);
      integerArray0[2] = (Integer) (-1239);
      integerArray0[3] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1239);
      integerArray0[6] = (Integer) (-1239);
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) integerArray0[1]);
      assertEquals(7, integerArray0.length);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (int)integerArray0[5];
      doubleArray0[4] = (double) (int)integerArray0[6];
      doubleArray0[5] = (double) 'K';
      doubleArray0[6] = (-1379.376);
      doubleArray0[7] = (double) (-1239);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1239.0), 0.0, (-1239.0), (-1239.0), 75.0, (-1379.376), (-1239.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (-1239);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1239));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1239L)}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray1 = ArrayUtils.add((float[]) null, 0.0F);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2223);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2507);
      shortArray0[4] = (short)5686;
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(2343);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2343, (int)integer1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Long long0 = Long.valueOf((-783L));
      assertNotNull(long0);
      assertEquals((-783L), (long)long0);
      
      MutableInt mutableInt0 = new MutableInt(0L);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = new Integer(2343);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(2343, (int)integer3);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer1, integer3);
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry1);
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double[]) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)112);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)112, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      ArrayUtils.swap(longArray0, 679, (-972));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-972);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (-972);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-972.0), 0.0, 0.0, 0.0, (-972.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-972.0), 0.0, 0.0, 0.0, (-972.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      int[] intArray0 = new int[3];
      Short short0 = new Short((short) (-3195));
      assertNotNull(short0);
      assertEquals((short) (-3195), (short)short0);
      
      ArrayUtils.shift(intArray0, (int) short0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.shift(intArray0, 1544);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2051);
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)2357;
      ArrayUtils.swap(shortArray0, 1138, (int) (short)2357);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2051), (short)4, (short)2357}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2357;
      intArray0[1] = (int) (short)2357;
      intArray0[2] = (int) (short) (-2051);
      intArray0[3] = 121;
      intArray0[4] = 1138;
      intArray0[5] = (int) (short)2357;
      intArray0[6] = (int) (short)4;
      intArray0[7] = (int) (short) (-2051);
      intArray0[8] = (int) (short)2357;
      ArrayUtils.shift(intArray0, (-246));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {121, 1138, 2357, 4, (-2051), 2357, 2357, 2357, (-2051)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals((-1), object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.shift(intArray0, (-1), 2096, (-1));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      ArrayUtils.shift(intArray1, (-45), 56, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 1333;
      integerArray0[1] = (Integer) (-965);
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (-965);
      doubleArray0[2] = (double) (-965);
      doubleArray0[3] = (double) (-45);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1333.0, (-965.0), (-965.0), (-45.0), 56.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      ArrayUtils.reverse(doubleArray0, 1893, 1893);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1333.0, (-965.0), (-965.0), (-45.0), 56.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      intArray0[3] = (-2410);
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double((-2432.821377344));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-2432.821377344), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2432.821377344), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-87);
      intArray0[1] = 3842;
      intArray0[2] = (-1114);
      intArray0[3] = (-518);
      intArray0[4] = (-1038);
      intArray0[5] = (-96);
      intArray0[6] = 11;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-87), 3842, (-1114), (-518), (-1038), (-96), 11}, intArray1);
      assertArrayEquals(new int[] {(-87), 3842, (-1114), (-518), (-1038), (-96), 11}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-87);
      floatArray0[1] = (float) (-1114);
      floatArray0[2] = 2026.183F;
      floatArray0[3] = (float) (-518);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-518);
      floatArray0[6] = (float) (-518);
      floatArray0[7] = (float) 3842;
      ArrayUtils.swap(floatArray0, 40, (-96), (-96));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-87.0F), (-1114.0F), 2026.183F, (-518.0F), 0.0F, (-518.0F), (-518.0F), 3842.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-2432.821377344));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-2432.821377344), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals(0.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2432.821377344), 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-87);
      intArray0[1] = 3842;
      intArray0[2] = (-1114);
      intArray0[3] = (-518);
      intArray0[4] = (-1038);
      intArray0[5] = (-96);
      intArray0[6] = 11;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-87), 3842, (-1114), (-518), (-1038), (-96), 11}, intArray0);
      assertArrayEquals(new int[] {(-87), 3842, (-1114), (-518), (-1038), (-96), 11}, intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-87);
      floatArray0[1] = (float) (-1114);
      floatArray0[2] = 2026.183F;
      floatArray0[3] = (float) (-518);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-518);
      floatArray0[6] = (float) (-518);
      floatArray0[7] = (float) 3842;
      ArrayUtils.swap(floatArray0, 40, (-96), (-96));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-87.0F), (-1114.0F), 2026.183F, (-518.0F), 0.0F, (-518.0F), (-518.0F), 3842.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, 1627);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, 1627, 2133, (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1976.0564884827);
      doubleArray0[6] = 0.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-62);
      intArray0[1] = 1148;
      intArray0[2] = 1729;
      intArray0[3] = 1358;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1358);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-62), 1148, 1729, 1358}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-59.0), (-2453));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 0L;
      Long long1 = Long.valueOf(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0L, 53, (double) 0L);
      assertEquals((-1), int0);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.clone(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) long0;
      floatArray0[0] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 53;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) 53;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-1.0F), 1.0F, 0.0F, 53.0F, 1.0F, 53.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 128, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1394);
      longArray0[1] = (long) (-1394);
      longArray0[2] = (long) (-1394);
      longArray0[3] = (long) (-1394);
      longArray0[4] = (long) (-1394);
      longArray0[5] = (long) (-1394);
      longArray0[6] = (long) (-1394);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1394L), (-1394L), (-1394L), (-1394L), (-1394L), (-1394L), (-1394L)}, longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1394, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      intArray0[2] = 0;
      intArray0[3] = (-2410);
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-1151);
      shortArray0[3] = (short)2331;
      shortArray0[4] = (short)2331;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)68, (short)18688, (short) (-1151), (short)2331, (short)2331}, shortArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      Integer integer0 = Integer.getInteger("", 110);
      assertFalse(integer0.equals((Object)object0));
      assertNotNull(integer0);
      assertEquals(110, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, 0, integer0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(integer0.equals((Object)object0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 36;
      Integer integer2 = new Integer(36);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(36, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(36, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf(0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(36, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1311);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(1311, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(54);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals(54, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)int0));
      assertTrue(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      assertEquals(36, (int)integer8);
      
      integerArray0[8] = integer8;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      Integer integer0 = Integer.getInteger("", (-965));
      assertNotNull(integer0);
      assertEquals((-965), (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals((-965), object1);
      
      objectArray0[7] = object1;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 1199L, 3067);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2906;
      shortArray0[1] = (short)1956;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)56;
      shortArray0[4] = (short)1072;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1956);
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)56, (short)1072}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)3;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2906, (short)1956, (short) (-1), (short)56, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (short)2906;
      objectArray0[2] = (Object) (short)1956;
      objectArray0[3] = (Object) (short)1956;
      objectArray0[4] = (Object) (short) (-1);
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) (-965));
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1333;
      longArray0[2] = (long) 1333;
      longArray0[3] = (long) (-965);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1549), (-1549));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1333L, 1333L, (-965L)}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[1];
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1634L), 1);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1;
      Short short0 = new Short((byte)103);
      assertNotNull(short0);
      assertEquals((short)103, (short)short0);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Object object0 = ArrayUtils.get(objectArray0, (-45));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[2] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) 1333;
      longArray0[2] = (-514L);
      longArray0[3] = (-2880L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      longArray0[8] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (-1549));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-965L), 1333L, (-514L), (-2880L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) (-514L);
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 1333L;
      longArray1[3] = (Long) (-514L);
      longArray1[4] = (Long) 0L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) (-514L);
      longArray1[7] = (Long) 1333L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) (-1549));
      assertNotSame(longArray2, longArray0);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-514L), 0L, 1333L, (-514L), 0L, 0L, (-514L), 1333L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((byte[]) null, (-2146350411), (int) (byte)49, (int) (byte)50);
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 324, (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      
      MockRandom mockRandom0 = new MockRandom((long) short0);
      assertTrue(short0.equals((Object)short1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertTrue(short0.equals((Object)short1));
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)49;
      doubleArray0[1] = (double) 324;
      doubleArray0[2] = (double) (-2146350411);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.146350411E9), 324.0, 49.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      intArray0[2] = 0;
      intArray0[3] = (-2410);
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, 59, 700, 2222);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1239), 0, (-2410), 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-2410);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1086.55341259798;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) (-1239);
      doubleArray0[3] = (double) (-2410);
      doubleArray0[4] = (double) (-1239);
      doubleArray0[5] = (double) (-1239);
      doubleArray0[6] = (double) int0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1086.55341259798, 0.0, (-1239.0), (-2410.0), (-1239.0), (-1239.0), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      ArrayUtils.reverse(doubleArray0, 0, 1893);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1239.0), (-1239.0), (-2410.0), (-1239.0), 0.0, 1086.55341259798}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1039);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1039}, shortArray1);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int[] intArray2 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '~';
      charArray0[2] = '@';
      charArray0[3] = ' ';
      charArray0[4] = 'C';
      charArray0[5] = 'T';
      charArray0[6] = '+';
      ArrayUtils.shift(charArray0, (int) (short)1039);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'C', 'T', '+', '}', '~', '@', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)4926;
      shortArray0[1] = (short)1525;
      shortArray0[2] = (short) (-3933);
      shortArray0[3] = (short)2;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)4926);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)4926, (short)1525, (short) (-3933), (short)2}, shortArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (short)1;
      ArrayUtils.swap(longArray0, 0, (int) (short)1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 1L, 1L, 0L, 0L, 0L, (-1L), 1L}, longArray0);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)1;
      shortArray1[2] = (short)1;
      shortArray1[3] = (short)1;
      shortArray1[4] = (short)1;
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)1;
      shortArray1[7] = (short)1;
      short[] shortArray2 = ArrayUtils.insert(0, shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)0, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)0, (short)1, (short)1}, shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 3087L;
      longArray0[1] = 3087L;
      ArrayUtils.shift(longArray0, 1, 15, 1219);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {3087L, 0L, 3087L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3087L;
      floatArray0[1] = (float) 1219;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 3087L;
      floatArray0[4] = (float) 1219;
      floatArray0[5] = (float) 3087L;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(12, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3087.0F, 1219.0F, 0.0F, 3087.0F, 1219.0F, 3087.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 0.0, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1155.30251694175, 0.0, 799.044464, 0.0, (-2190.986315368), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1599.5826F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1599.5826F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3582.0F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {3582.0F}, floatArray0, 0.01F);
      
      Integer integer0 = ArrayUtils.get(integerArray0, 0);
      assertEquals(3, integerArray0.length);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertEquals(0, intArray3.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)4}, shortArray0);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((short)2);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = Integer.getInteger("Array and element cannot both be null", integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(1, (int)integer2);
      
      Integer integer3 = new Integer((short)2413);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(2413, (int)integer3);
      
      Integer integer4 = ArrayUtils.get((Integer[]) null, 629);
      assertNull(integer4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (-666.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (short)2;
      floatArray0[7] = (float) (short)2413;
      floatArray0[8] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 2413.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2413.0F, 1.0F, 2.0F, 2.0F, (-666.0F), 0.0F, 2.0F, 2.0F, 2413.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2.0F, 2.0F, (-666.0F), 0.0F, 2.0F, 2.0F, 2413.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, 1365);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1110.489F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1110.489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1110.489F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Boolean[] booleanArray2 = new Boolean[4];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray3));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray4 = new boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      
      booleanArray4[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray4, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      assertEquals(1, booleanArray4.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray4));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1365;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 1365;
      longArray0[3] = (long) 1365;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) 1365;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) 1365;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1365L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1365L, 1365L, 0L, 1365L, 0L, 0L, 1365L}, longArray1);
      assertArrayEquals(new long[] {1365L, 0L, 1365L, 1365L, 0L, 1365L, 0L, 0L, 1365L}, longArray0);
      
      ArrayUtils.reverse((char[]) null, Integer.MAX_VALUE, 1365);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, 1073741824);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      longArray0[2] = (-239L);
      longArray0[3] = 0L;
      longArray0[4] = 3073L;
      longArray0[5] = 2524L;
      longArray0[6] = (-1L);
      longArray0[7] = 3087L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-239L), 0L, 3073L, 2524L, (-1L), 3087L, 1298L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1722.7), 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'v';
      charArray0[2] = 'o';
      charArray0[3] = '(';
      charArray0[4] = '3';
      charArray0[5] = '+';
      charArray0[6] = 'F';
      ArrayUtils.reverse(charArray0, 0, (-2281));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'m', 'v', 'o', '(', '3', '+', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 3087L;
      longArray0[4] = 2524L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 3087L, 2524L, (-1L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 3);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)35);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BOOLEAN_ARRAY, booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-1), (-1), 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1379.376);
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift((short[]) null, 100, 100, 50);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-327);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-327.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-327.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-327.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1394);
      doubleArray0[2] = 681.9;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3923.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-1394);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1394.0), 681.9, 0.0, (-3923.0), 0.0, (-1394.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(0L, (-3923.0), 2641.365892);
      assertNotNull(doubleStream0);
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-446));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -446, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1976.0564884827);
      doubleArray0[6] = 0.0;
      ArrayUtils.reverse((double[]) null, 20, 2);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-60));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-127), (byte)0, (byte)13}, byteArray1);
      
      Integer integer0 = new Integer((-95));
      assertNotNull(integer0);
      assertEquals((-95), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((float[]) null, 69, 40);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3108);
      shortArray0[1] = (short)12;
      shortArray0[2] = (short) (-3108);
      shortArray0[3] = (short)96;
      shortArray0[4] = (short) (-3108);
      shortArray0[5] = (short)40;
      shortArray0[6] = (short) (-3108);
      shortArray0[7] = (short)9;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3108), (short)12, (short) (-3108), (short)96, (short) (-3108), (short)40, (short) (-3108), (short)9}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)9;
      intArray0[1] = 1255;
      intArray0[2] = (int) (short)9;
      intArray0[3] = (int) (short) (-3108);
      intArray0[4] = (int) (short) (-3108);
      intArray0[5] = (int) (short) (-3108);
      intArray0[6] = (int) (short) (-3108);
      intArray0[7] = (int) (short)40;
      intArray0[8] = (int) (short)12;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {9, 1255, 9, (-3108), (-3108), (-3108), (-3108), 40, 12}, intArray0);
      assertFalse(boolean1);
      
      ArrayUtils.swap((float[]) null, 2146838344, 2146100732, (-1663));
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-891);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-891), (-1074), (double) (-891));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-891.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1511.0F;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 3273);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1511.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '=';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'{', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'{', '=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-891.0), 0.0, (-891.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-891.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2088, (int) (short)2088);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)2088;
      doubleArray0[1] = (-2103.66504343);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2088.0, (-2103.66504343)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2088.0, (-2103.66504343)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (short)2088;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (short)2088;
      floatArray0[7] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-4064), 114, (int) (short)2088);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 2088.0F, (-1.0F), 2088.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-891);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-891), (-1074), (double) (-891));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-891.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1511.0F;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 3273);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1511.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '=';
      charArray0[2] = '?';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '{');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', '?', 'u', '|', '\u0000', 'q'}, charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', 'u', '|', '\u0000', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5083;
      intArray0[1] = (-891);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1074), (-1074));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-4479), 5083);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-4479), (-891), (-891));
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {5083, (-891)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-126));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-891);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-891), (-1074), (double) (-891));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-891.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1511.0F;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 1, 3273);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1511.0F, (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '=';
      charArray0[2] = '?';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'Y';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'U');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', 'u', '|', 'Y', 'q'}, charArray1);
      assertArrayEquals(new char[] {'{', '=', '?', 'u', '|', 'Y', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 945;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(945, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 945, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[4];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      
      ArrayUtils.reverse((double[]) null);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1699), 2);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      longArray0[2] = (-239L);
      longArray0[3] = 0L;
      longArray0[5] = 2524L;
      longArray0[6] = (-1L);
      longArray0[7] = 3087L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-239L), 0L, 0L, 2524L, (-1L), 3087L, 1298L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1722.7), 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1549);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 3394;
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1549), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1549, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1492);
      shortArray0[1] = (short) (-1492);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-29));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-29));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-29), (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals((-29), object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)199, 5);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1492), (short) (-1492)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2146251161));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 4562);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2058.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 3364.642F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2058.0F, 1.0F, 3364.642F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 3364.642F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 2058.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3364.64208984375, (-1.0), 1.0, 2058.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2146251161));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-8);
      shortArray0[1] = (short) (byte) (-8);
      shortArray0[2] = (short) (byte) (-8);
      shortArray0[3] = (short) (-4479);
      shortArray0[4] = (short) (byte) (-8);
      shortArray0[5] = (short) (byte) (-8);
      shortArray0[6] = (short) (byte) (-8);
      shortArray0[7] = (short)16089;
      shortArray0[8] = (short) (byte) (-8);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1398), (-2379));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-8), (short) (-8), (short) (-8), (short) (-4479), (short) (-8), (short) (-8), (short) (-8), (short)16089, (short) (-8)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)115);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-8), (short) (-8), (short) (-8), (short) (-4479), (short) (-8), (short) (-8), (short) (-8), (short)16089, (short) (-8)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-8), (short) (-8), (short) (-8), (short) (-4479), (short) (-8), (short) (-8), (short) (-8), (short)16089, (short) (-8), (short)115}, shortArray2);
      
      Integer integer0 = ArrayUtils.get((Integer[]) null, (int)  (-8));
      assertNull(integer0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-126));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1230));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1230), (int)integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((int) integerArray0[1]);
      assertEquals((-1230.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1230), mutableInt0.intValue());
      assertEquals((-1230), (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((-1230.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1230), (int)mutableInt0.getValue());
      assertEquals((short) (-1230), mutableInt0.shortValue());
      assertEquals((-1230L), mutableInt0.longValue());
      assertEquals("-1230", mutableInt0.toString());
      assertEquals(9, integerArray0.length);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals((-1230.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1230), mutableInt0.intValue());
      assertEquals((-1230), (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((-1230.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1230), (int)mutableInt0.getValue());
      assertEquals((short) (-1230), mutableInt0.shortValue());
      assertEquals((-1230L), mutableInt0.longValue());
      assertEquals("-1230", mutableInt0.toString());
      assertEquals(9, integerArray0.length);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1230), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = mutableInt0.getValue();
      assertEquals((-1230.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1230), mutableInt0.intValue());
      assertEquals((-1230), (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((-1230.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1230), (int)mutableInt0.getValue());
      assertEquals((short) (-1230), mutableInt0.shortValue());
      assertEquals((-1230L), mutableInt0.longValue());
      assertEquals("-1230", mutableInt0.toString());
      assertEquals(9, integerArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1230), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = mutableInt0.getValue();
      assertEquals((-1230.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1230), mutableInt0.intValue());
      assertEquals((-1230), (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((-1230.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1230), (int)mutableInt0.getValue());
      assertEquals((short) (-1230), mutableInt0.shortValue());
      assertEquals((-1230L), mutableInt0.longValue());
      assertEquals("-1230", mutableInt0.toString());
      assertEquals(9, integerArray0.length);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-1230), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(0, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = mutableInt0.getValue();
      assertEquals((-1230.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1230), mutableInt0.intValue());
      assertEquals((-1230), (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((-1230.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1230), (int)mutableInt0.getValue());
      assertEquals((short) (-1230), mutableInt0.shortValue());
      assertEquals((-1230L), mutableInt0.longValue());
      assertEquals("-1230", mutableInt0.toString());
      assertEquals(9, integerArray0.length);
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals((-1230), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2932);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals(2932, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-654));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      assertEquals((-654), (int)integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-31));
      assertNotNull(double0);
      assertEquals((-31.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-31.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-1.0F));
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-31.0), (-31.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1377);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1377), (-1));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1377)}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-60));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((byte)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2;
      ArrayUtils.shift(shortArray0, (int) (byte) (-1), 2437, (int) (byte) (-1));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short) (-1)}, shortArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)2;
      ArrayUtils.shift(doubleArray0, (int) (short)2, 987, 18688);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 43, 43, 43);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      Integer integer1 = new Integer((-1230));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1230), (int)integer1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(0, (int)integer3);
      
      Integer integer4 = mutableInt0.getValue();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer((-549));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-549), (int)integer5);
      
      Integer integer6 = mutableInt0.getValue();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(0, (int)integer6);
      
      Integer integer7 = new Integer(1263);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(1263, (int)integer7);
      
      Integer integer8 = new Integer((-3184));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      assertEquals((-3184), (int)integer8);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer8;
      integerArray0[1] = integer4;
      Integer integer9 = new Integer((-654));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer1));
      assertNotNull(integer9);
      assertEquals((-654), (int)integer9);
      
      integerArray0[2] = integer9;
      integerArray0[3] = integer8;
      integerArray0[4] = integer6;
      integerArray0[5] = integer4;
      integerArray0[6] = integer4;
      Integer integer10 = new Integer((int) integerArray0[0]);
      assertEquals(8, integerArray0.length);
      assertFalse(integer10.equals((Object)integer9));
      assertFalse(integer10.equals((Object)integer1));
      assertFalse(integer10.equals((Object)integer4));
      assertFalse(integer10.equals((Object)integer3));
      assertFalse(integer10.equals((Object)integer6));
      assertFalse(integer10.equals((Object)integer7));
      assertFalse(integer10.equals((Object)integer5));
      assertFalse(integer10.equals((Object)integer2));
      assertFalse(integer10.equals((Object)integer0));
      assertTrue(integer10.equals((Object)integer8));
      assertNotNull(integer10);
      assertEquals((-3184), (int)integer10);
      
      integerArray0[7] = integer10;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'q';
      charArray0[2] = 'Z';
      charArray0[3] = 's';
      charArray0[4] = 'Z';
      charArray0[5] = '4';
      charArray0[6] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R', (int) integerArray0[0]);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertSame(integerArray0, integerArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', 'q', 'Z', 's', 'Z', '4', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '', (-1));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-2145);
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, 1);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = 0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Object object3 = ArrayUtils.toPrimitive((Object) integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(object3.equals((Object)integer0));
      assertTrue(object3.equals((Object)int0));
      assertNotNull(object3);
      assertEquals(0, object3);
      
      objectArray0[3] = object3;
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = null;
      objectArray1[2] = null;
      objectArray1[3] = (Object) integer0;
      objectArray1[4] = object3;
      objectArray1[5] = object3;
      objectArray1[6] = null;
      objectArray1[7] = object3;
      Object object4 = ArrayUtils.get(objectArray1, 0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object4);
      
      objectArray0[4] = null;
      int int1 = (-939);
      Integer integer2 = new Integer((-939));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)object3));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertNotNull(integer2);
      assertEquals((-939), (int)integer2);
      
      char[] charArray0 = new char[1];
      char char0 = '`';
      charArray0[0] = '`';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '`');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      intArray0[2] = 3050;
      intArray0[3] = 0;
      intArray0[4] = 609;
      short[] shortArray0 = ArrayUtils.insert((-31), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3050, booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3050, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1226), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1226, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(800);
      assertNotNull(integer0);
      assertEquals(800, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(800);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(800, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 115;
      Integer integer2 = new Integer(115);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(115, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-236));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-236), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1238);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(1238, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(100);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(100, (int)integer5);
      
      integerArray0[5] = integer5;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(integerArray0, int0);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert(643, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-125), (byte) (-88)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte) (-125));
      assertNotNull(integer0);
      assertEquals((-125), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1390));
      assertEquals(1, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-446), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -446, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((float[]) null);
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 11.7916F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11.7916F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(2420);
      assertNotNull(integer0);
      assertEquals(2420, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertNotNull(integer1);
      assertEquals(2420, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(629);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(629, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (-1549));
      assertEquals(4, integerArray0.length);
      assertNull(integer4);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1984L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1984L}, longArray0);
      assertArrayEquals(new long[] {1984L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      ArrayUtils.shift((long[]) null, (-7), (-7), (-7));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-7);
      doubleArray0[1] = (double) 1984L;
      doubleArray0[2] = (double) (-7);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) int0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1687, 2416.1512967999997);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-1));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) int0, 1.0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-7.0), 1984.0, (-7.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'H';
      intArray0[1] = (int) 'U';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1687);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {72, 85}, intArray0);
      assertArrayEquals(new int[] {1687, 72, 85}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-1105));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1105L)}, longArray1);
      
      char[] charArray0 = new char[3];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1019.4553845103741);
      doubleArray0[3] = 844.11998993169;
      doubleArray0[4] = (-2376.883192);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[18];
      longArray0[0] = 1123L;
      longArray0[1] = 873L;
      char[] charArray0 = new char[24];
      longArray0[2] = (long) '=';
      charArray0[1] = 'a';
      charArray0[2] = '#';
      charArray0[3] = '`';
      charArray0[4] = '9';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertEquals(48, charArray1.length);
      assertEquals(24, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 97, 97);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 0L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[0];
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1589.944426;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1019.4553845103741);
      doubleArray0[3] = 844.11998993169;
      doubleArray0[4] = (-2376.883192);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1589.944426, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1589.944426, 0.0, (-1019.4553845103741), 844.11998993169, (-2376.883192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1123L;
      longArray0[1] = 873L;
      ArrayUtils.swap(longArray0, 1072, 512);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1123L, 873L}, longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)78);
      assertNotNull(byte0);
      assertEquals((byte)78, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)78);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)78, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)78);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)78, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)47);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte)47, (byte)byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-114));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte) (-114), (byte)byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte)5);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      assertEquals((byte)5, (byte)byte6);
      
      byteArray0[6] = byte6;
      Byte byte7 = new Byte((byte)10);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertNotNull(byte7);
      assertEquals((byte)10, (byte)byte7);
      
      byteArray0[7] = byte7;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte) (-46));
      assertNotNull(float0);
      assertEquals((-46.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-46.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      Integer integer0 = new Integer((-789));
      assertNotNull(integer0);
      assertEquals((-789), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Float float0 = new Float((double) 2388);
      assertNotNull(float0);
      assertEquals(2388.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) 2388);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2388.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[2] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2388.0F, 2388.0F, 2388.0F, 2388.0F, 2388.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(757.0445F);
      assertNotNull(float0);
      assertEquals(757.0445F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-12.04143));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-12.04143F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-12.04143));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-12.04143F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[5]);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      assertEquals(0.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(0.0);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertNotNull(float7);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {757.0445F, (-12.04143F), 0.0F, (-12.04143F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = 541L;
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {541L, (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-68);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)112;
      ArrayUtils.shift(byteArray0, (-343), (int) (byte) (-14), (int) (byte) (-127));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-68), (byte)0, (byte)121, (byte) (-127), (byte)0, (byte)110, (byte)112}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {121, 0, 0, 112, 0}, intArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 112;
      integerArray0[2] = (Integer) 112;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integer0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      Integer[] integerArray2 = ArrayUtils.removeElement(integerArray1, (Object) integerArray0[2]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertEquals(3, integerArray2.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertNotNull(integerArray2);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (byte) (-16));
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'd';
      charArray0[2] = 'N';
      charArray0[3] = 'H';
      charArray0[4] = 'S';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2413), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2413, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-1L));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((byte)0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      intArray0[4] = (int) 'X';
      intArray0[5] = (int) 'X';
      ArrayUtils.shift(intArray0, 88, (int) (byte)0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 88, 88, 88, 88}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) characterArray0, 88, 871, 324);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      BitSet bitSet0 = BitSet.valueOf(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2306.4F);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-101);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte)90, (byte) (-101)}, byteArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (byte)90;
      int int0 = 2589;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 2589, object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertFalse(object3.equals((Object)byte0));
      assertNotNull(object3);
      assertEquals((byte)90, object3);
      
      BitSet bitSet0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (Object) null, 2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)80);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.get(objectArray0, (int) 80, (Object) integer0);
      assertEquals(8, objectArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      assertEquals(0, object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object2.equals((Object)int0));
      assertNotNull(object2);
      assertEquals(0, object2);
      
      objectArray0[2] = object2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, 's');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 563.65094F;
      floatArray0[1] = 844.063F;
      floatArray0[2] = 2381.2126F;
      ArrayUtils.swap(floatArray0, (-3652), (-3652), 3210);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {563.65094F, 844.063F, 2381.2126F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Integer integer0 = new Integer(1540);
      assertNotNull(integer0);
      assertEquals(1540, (int)integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray1, ">>h'!@ `?4:2");
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertEquals(0, stringArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1379.376);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-3923.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1741.4));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1379.376), (-1.0), (-3923.0), 0.0, 1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)9, (int) (short)9, 2568);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, 2568, 2568, 2568);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.swap(booleanArray0, 0, 3653, 0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-76);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 1264, 0, 3653);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-2541);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-2541)}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1605.3094F);
      doubleArray0[3] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1605.3094482421875), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-1105));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1105);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-1105));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1105L)}, longArray0);
      assertArrayEquals(new long[] {(-1105L), (-1105L)}, longArray1);
      
      ArrayUtils.swap(booleanArray0, (-1562), (-2143882233), 1861);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 2, 345, 345);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 1793, 1793, 97);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = 1793;
      intArray0[3] = 97;
      intArray0[4] = 97;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {97, 97, 1793, 97, 97}, intArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)6);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      Long long0 = new Long((-1128L));
      assertNotNull(long0);
      assertEquals((-1128L), (long)long0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2470), (int) (short)2);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2127));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2127), (short)2, (short)2, (short)2}, shortArray1);
      
      ArrayUtils.reverse((int[]) null, (-1295), 588);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3627);
      shortArray0[1] = (short)1028;
      shortArray0[2] = (short) (-3108);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3627), (short)1028, (short) (-3108)}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)16;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.shift(charArray0, (-322), (-1896), (-322));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      assertArrayEquals(new char[] {'w', 'N'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 2748.7412F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1896);
      doubleArray0[1] = (double) 'N';
      doubleArray0[3] = (double) '?';
      doubleArray0[4] = (double) 2748.7412F;
      doubleArray0[5] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1896.0), 78.0, 0.0, 63.0, 2748.7412109375, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2748.7412109375, 63.0, 0.0, 78.0, (-1896.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((int[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      Short short0 = new Short((short) (-905));
      assertNotNull(short0);
      assertEquals((short) (-905), (short)short0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[1] = (float) (short)78;
      floatArray0[3] = (float) (short) (-905);
      floatArray0[4] = (float) (-514L);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), 78.0F, 0.0F, (-905.0F), (-514.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) 97;
      ArrayUtils.swap(longArray0, 97, 733, 733);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {97L, 97L}, longArray0);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray0);
      assertArrayEquals(new char[] {'-', 'K', '?'}, charArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 2394}, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) int0;
      longArray0[3] = (long) '-';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 'K';
      long[] longArray1 = ArrayUtils.add(longArray0, 75L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {75L, 63L, 0L, 45L, 0L, 75L}, longArray0);
      assertArrayEquals(new long[] {75L, 63L, 0L, 45L, 0L, 75L, 75L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1605.3094F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean2);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-1605.3094F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1605.3094482421875), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short) (-1105));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {(-1105L), 0L}, longArray1);
      
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?', 2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      Short short0 = new Short((short)54);
      assertNotNull(short0);
      assertEquals((short)54, (short)short0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character character0 = new Character('N');
      assertNotNull(character0);
      assertEquals('N', (char)character0);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(boolean2);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      long long2 = (-1L);
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-1L));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(0L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(0L, (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-1123L));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertNotNull(long6);
      assertEquals((-1123L), (long)long6);
      
      longArray0[5] = long6;
      String string0 = "";
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'f');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      
      char[] charArray1 = new char[4];
      charArray1[0] = 'f';
      charArray1[1] = 'f';
      charArray1[2] = 'f';
      charArray1[3] = 'f';
      char[] charArray2 = ArrayUtils.addAll((char[]) null, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2413, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)4}, shortArray0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '1';
      charArray0[2] = 'J';
      charArray0[3] = 'c';
      charArray0[4] = 'P';
      charArray0[5] = '#';
      charArray0[6] = 'y';
      charArray0[7] = 'A';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'+', '1', 'J', 'c', 'P', '#', 'y', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)17;
      shortArray0[2] = (short)515;
      shortArray0[3] = (short) (-1608);
      shortArray0[4] = (short)1469;
      shortArray0[5] = (short)78;
      shortArray0[6] = (short)99;
      shortArray0[7] = (short) (-3392);
      shortArray0[8] = (short)2;
      short[] shortArray1 = ArrayUtils.insert(9, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)17, (short)515, (short) (-1608), (short)1469, (short)78, (short)99, (short) (-3392), (short)2}, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (short)2);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)3962, (int) (short) (-3392));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)17, (short)515, (short) (-1608), (short)1469, (short)78, (short)99, (short) (-3392), (short)2}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)78;
      floatArray0[1] = (float) (short)99;
      floatArray0[2] = 1881.29F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (short) (-1608));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {78.0F, 99.0F, 1881.29F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte) (-51));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-51)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      int[] intArray0 = new int[15];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(15, intArray0.length);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      Character character1 = Character.valueOf('f');
      assertNotNull(character1);
      assertEquals('f', (char)character1);
      
      char char0 = 'L';
      Character character2 = Character.valueOf('L');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('L', (char)character2);
      
      Character character3 = Character.valueOf('f');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      
      Character character4 = new Character('f');
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('f', (char)character4);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      
      ArrayUtils.swap(intArray0, 1385, (int) char0);
      assertEquals(15, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 787;
      floatArray0[1] = (-3686.2278F);
      floatArray0[2] = (float) (byte)49;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1385, (-1));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {787.0F, (-3686.2278F), 49.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1694.4591F, (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {787.0F, (-3686.2278F), 49.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = char0;
      char[] charArray1 = ArrayUtils.add(charArray0, '}');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertArrayEquals(new char[] {'L', '}'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      byte[] byteArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-54);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)97;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1508);
      intArray0[1] = 6;
      intArray0[2] = (-4068);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-2145772579);
      intArray0[5] = 755;
      ArrayUtils.swap(intArray0, (-1508), (-2145772579), 6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1508), 6, (-4068), Integer.MAX_VALUE, (-2145772579), 755}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (-2398);
      ArrayUtils.swap(intArray0, (-2398), 0, 168);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {89, (-2398)}, intArray0);
      
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("89", string0);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 266, (double) 266);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1157.306410082897, (-556), (double) (-556));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, (-283));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1377), (int) (short) (-1377));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1098, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1098, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 3418L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, 3418L, 1L, 1L}, longArray0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = ArrayUtils.insert((-2164), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = new Integer((int) integerArray0[2]);
      assertEquals(3, integerArray0.length);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) integerArray0, (Object) integer0);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2168.0582291));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1394);
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1394)}, intArray0);
      
      ArrayUtils.shift((short[]) null, 1592, 91, 1592);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1394);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1394.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1653);
      assertNotNull(integer0);
      assertEquals(1653, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(1653, object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, object0, (-1394));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift(longArray0, 1);
      assertNotSame(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 68L;
      longArray0[1] = 2216L;
      longArray0[2] = 2216L;
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2216L, 2216L, 68L}, longArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1535), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2216L;
      objectArray0[1] = (Object) 2216L;
      objectArray0[2] = (Object) 2216L;
      objectArray0[3] = (Object) 2216L;
      objectArray0[4] = (Object) 68L;
      objectArray0[5] = (Object) 2216L;
      objectArray0[6] = (Object) 2216L;
      objectArray0[7] = (Object) 68L;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (-1775));
      assertEquals(8, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1.0);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(935, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 935, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)83);
      assertNotNull(integer0);
      assertEquals(83, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {83}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 36;
      Integer integer2 = new Integer(36);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(36, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(36, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf(0);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      assertEquals(36, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1311);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(1311, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(54);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      assertEquals(54, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(int0);
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)int0));
      assertNotNull(integer8);
      assertEquals(36, (int)integer8);
      
      integerArray0[8] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1, 36, 36, 0, 36, 1311, 54, 36}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1155.30251694175;
      doubleArray0[1] = 799.044464;
      doubleArray0[2] = 132.7296931;
      doubleArray0[3] = (-2190.986315368);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1976.0564884827);
      doubleArray0[6] = 0.0;
      ArrayUtils.reverse(doubleArray0, 20, 20);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1155.30251694175, 799.044464, 132.7296931, (-2190.986315368), 0.0, (-1976.0564884827), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'S');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((Object[]) shortArray0, 0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-965), 1333, 0}, intArray0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) 1333;
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 1333;
      objectArray0[2] = (Object) 0;
      objectArray0[6] = (Object) 1333;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (-965);
      longArray0[1] = (long) 1333;
      longArray0[2] = (-514L);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 658, (-571), 0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-125);
      Integer[] integerArray0 = new Integer[20];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-1390));
      assertEquals(20, integerArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(20, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3111;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2905;
      ArrayUtils.swap(doubleArray0, 127, 3111, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2905.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3111}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(148L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 148L, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Double double0 = new Double(2237.9929693833);
      assertNotNull(double0);
      assertEquals(2237.9929693833, (double)double0, 0.01);
      
      Double double1 = new Double(2237.9929693833);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2237.9929693833, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      Integer integer0 = new Integer((-1394));
      assertNotNull(integer0);
      assertEquals((-1394), (int)integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(Integer.MAX_VALUE, object0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = Float.valueOf((float) Integer.MAX_VALUE);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.14748365E9F, (float)float1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-45)}, byteArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean1);
      
      ArrayUtils.swap(doubleArray0, 1, (-1394));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (double) integerArray0[0]);
      assertSame(integerArray0, integerArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      ArrayUtils.reverse((byte[]) null, 0, (int) (byte)3);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_CHAR_ARRAY, ',');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 1643);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, (-2707));
      objectArray0[0] = null;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      ArrayUtils.nullToEmpty(byteArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)40;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte)1;
      ArrayUtils.swap(doubleArray0, (int) (byte)101, 2993);
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      ArrayUtils.removeAllOccurrences(charArray0, 'z');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 40.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 40.0;
      objectArray0[5] = (Object) '4';
      objectArray0[6] = (Object) (byte)2;
      objectArray0[7] = (Object) 101.0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) (-484);
      doubleArray0[1] = (double) (-484);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2473.89892452858));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-1.0);
      Integer integer0 = new Integer(152);
      ArrayUtils.get(objectArray0, 152);
      ArrayUtils.shift(objectArray0, 152);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 152;
      floatArray0[1] = (float) 152;
      floatArray0[2] = (float) 152;
      floatArray0[3] = (float) 152;
      floatArray0[4] = (float) 152;
      floatArray0[5] = (float) 152;
      floatArray0[6] = (float) 152;
      floatArray0[7] = (float) 152;
      ArrayUtils.swap(floatArray0, 152, 2223, 152);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 987, 2233, 987);
      ArrayUtils.subarray((long[]) null, (-866), 1);
      ArrayUtils.add((int[]) null, (-68));
      ArrayUtils.shift((double[]) null, (-68));
      ArrayUtils.isSameLength((double[]) null, (double[]) null);
      ArrayUtils.isSorted((double[]) null);
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      int[] intArray0 = new int[19];
      intArray0[0] = 3111;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 3111;
      integerArray0[1] = (Integer) 3111;
      integerArray0[2] = (Integer) 3111;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(64.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(3111);
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {64.0, 3111.0}, doubleArray1, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.toPrimitive(byteArray0, (byte) (-71));
      boolean boolean1 = ArrayUtils.contains(intArray1, (int) integerArray0[2]);
      assertEquals(20, intArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-66));
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      Integer integer1 = new Integer(3111);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3111;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[3] = (double) Integer.MIN_VALUE;
      doubleArray0[4] = (double) 3111;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) 3111;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      ArrayUtils.toPrimitive((Float[]) null, Float.NaN);
      ArrayUtils.removeElements((float[]) null, (float[]) null);
      ArrayUtils.toStringArray((Object[]) integerArray0);
      Integer[] integerArray1 = ArrayUtils.addAll((Integer[]) null, (Integer[]) null);
      assertNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byte byte2 = (byte)35;
      Byte byte3 = new Byte((byte)35);
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      ArrayUtils.lastIndexOf(byteArray2, (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte) (-86));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1239);
      intArray0[2] = 0;
      intArray0[3] = (-2410);
      intArray0[4] = 0;
      ArrayUtils.shift(intArray0, 59, 700, 2222);
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-2410);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.addAll(integerArray0, integerArray0);
      assertEquals(8, integerArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1086.55341259798;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) (-1239);
      doubleArray0[3] = (double) (-2410);
      doubleArray0[4] = (double) (-1239);
      doubleArray0[5] = (double) (-1239);
      doubleArray0[6] = (double) int0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)11);
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)35);
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)2, (byte)11, (byte)35}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      intArray0[2] = 3050;
      intArray0[3] = 0;
      intArray0[4] = 609;
      ArrayUtils.insert((-31), (short[]) null, (short[]) null);
      Double double0 = new Double(0.0);
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1724.6804F);
      floatArray0[1] = (-2762.54F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((-1773.53343319));
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double((-1724.6804F));
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      doubleArray0[7] = double7;
      Double double8 = new Double(1982.1);
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      Boolean[] booleanArray0 = new Boolean[4];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      int[] intArray0 = new int[1];
      intArray0[0] = 3438;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3438, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-431);
      shortArray0[1] = (short)56;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)7;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1238;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      ArrayUtils.isEmpty((short[]) null);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[6];
      intArray0[0] = (-2900);
      intArray0[1] = (-1708);
      intArray0[2] = 3050;
      intArray0[3] = 0;
      intArray0[4] = 609;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3050, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2021);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.isEmpty(arrayUtils0.EMPTY_LONG_ARRAY);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), 287);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      charArray0[2] = 'A';
      charArray0[3] = '_';
      charArray0[4] = '1';
      charArray0[5] = 'e';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.isSorted(floatArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)45;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_SHORT_ARRAY, (short)961);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)47);
      assertNotNull(byteArray1);
      assertEquals(17, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3652);
      shortArray0[1] = (short)3067;
      shortArray0[2] = (short)3210;
      ArrayUtils.indexesOf(shortArray0, (short)3210, (int) (short) (-3652));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)3210;
      floatArray0[1] = (float) (short)3067;
      floatArray0[2] = (float) (short) (-3652);
      floatArray0[3] = (float) (short) (-3652);
      ArrayUtils.toObject(floatArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      ArrayUtils.isNotEmpty(byteArray0);
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)0, (byte)48, (byte)120}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2);
      assertEquals(6, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, 2146718244, (int) (short) (-3652));
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      
      ArrayUtils.swap((long[]) null, (int) (byte)0, (int) (byte)3);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, (-3418), 33, (-3418));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.indexOf(shortArray0, (short)125);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      long[] longArray0 = new long[7];
      longArray0[0] = (-371L);
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) 12;
      ArrayUtils.swap(longArray0, 380, (-1));
      assertArrayEquals(new long[] {(-371L), 2147483647L, (-1L), 1L, 1L, 12L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)7);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      
      ArrayUtils.contains(intArray0, (int) (short)7);
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)97);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2653));
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      Integer integer1 = new Integer(997);
      integerArray0[4] = integer1;
      integerArray0[5] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)40);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-1)}, byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)2413;
      shortArray0[2] = (short) (byte)40;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)40;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte)40;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)34);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 12);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)40;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = 1400L;
      longArray0[3] = (long) (short)2413;
      longArray0[4] = (long) (short)40;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 12;
      ArrayUtils.swap(longArray0, (int) (byte) (-1), (-975));
      assertArrayEquals(new long[] {40L, (-1L), 1400L, 2413L, 40L, (-1L), 12L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1715.0));
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1715.0));
      assertArrayEquals(new double[] {(-1715.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1715.0));
      assertArrayEquals(new double[] {(-1715.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift((boolean[]) null, (-1));
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, (Object) arrayUtils0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, (int)  (-123));
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) arrayUtils0, (-1));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 0;
      intArray0[2] = (-3627);
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3627));
      assertEquals("{2}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.addFirst(intArray0, 2394);
      char[] charArray0 = new char[3];
      charArray0[1] = 'K';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      Short short0 = new Short((short)157);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.removeAllOccurences(doubleArray0, (-2788.56668093));
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.isEmpty(booleanArray0);
      ArrayUtils.shift(charArray1, (-1));
      assertArrayEquals(new char[] {'K', '?', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-362), 1853, (-362));
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '%';
      charArray0[5] = '8';
      ArrayUtils.shift(charArray0, (-1001));
      assertArrayEquals(new char[] {'8', '\u0000', '%', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, (-2103), (-2103), (-2103));
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), (double) (-1));
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-120));
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (byte) (-120));
      org.evosuite.runtime.Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-6798));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      boolean boolean1 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)101);
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2473.89892453));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer[] integerArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Integer) (-1));
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      ArrayUtils.removeAllOccurences((int[]) null, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.indexesOf(doubleArray0, 1821.9614533255417, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1039);
      assertArrayEquals(new short[] {(short)1039}, shortArray1);
      
      ArrayUtils.addAll((int[]) null, (int[]) null);
      ArrayUtils.removeElements((int[]) null, (int[]) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '~';
      charArray0[2] = '@';
      charArray0[3] = ' ';
      charArray0[4] = 'C';
      charArray0[5] = 'T';
      charArray0[6] = '+';
      ArrayUtils.shift(charArray0, (int) (short)1039);
      assertArrayEquals(new char[] {'C', 'T', '+', '}', '~', '@', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isSorted(integerArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'L';
      ArrayUtils.indexesOf(charArray0, '2');
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2582, 91);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean[] booleanArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 2553, 2553);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2553;
      longArray0[1] = (long) 2553;
      longArray0[2] = (long) 2553;
      longArray0[3] = 0L;
      longArray0[4] = (long) 2553;
      longArray0[5] = (long) 2553;
      ArrayUtils.indexesOf(longArray0, 2553L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)995;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)995;
      intArray0[1] = (int) (short)995;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 995, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY);
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_CHAR_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = ArrayUtils.contains(charArray0, ')');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '~');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, '(', (-1));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2779));
      Object[] objectArray0 = new Object[2];
      ArrayUtils.get(objectArray0, 0);
      Integer.getInteger("", 110);
      ArrayUtils.toPrimitive((Object) null);
      ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      ArrayUtils.removeElements((char[]) null, (char[]) null);
      ArrayUtils.isSorted((boolean[]) null);
      ArrayUtils.shift((int[]) null, (-1115), (-636), 110);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's');
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      ArrayUtils.indexesOf(charArray0, '-');
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, (int) (byte)5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      int[] intArray0 = new int[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 168);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 168;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), (-1));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = 3277.1005;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, 1, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {2.147483647E9, 3277.1005, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Float[] floatArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ArrayUtils.shift((Object[]) integerArray0, (-4512));
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ArrayUtils.shift((Object[]) integerArray0, 54);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[4];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)31;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)31;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (byte)0);
      assertEquals(0, int0);
      
      ArrayUtils.swap(charArray0, (int) (short)0, 0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-38), 89);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3961;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3961, (int) (short)3961);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-514L));
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)78, (-1));
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)78;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-514L);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-1237.9F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2145), 358);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      ArrayUtils.shift((Object[]) integerArray0, (-4517));
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[1] = 60;
      intArray0[4] = (-2146251161);
      intArray0[3] = 62;
      intArray0[5] = 92;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2388);
      assertEquals(10, intArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      ArrayUtils.insert((-2437), (short[]) null, (short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2437));
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short)26859, (-2841));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)10, (int) (short)10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      ArrayUtils.removeAllOccurences((int[]) null, 0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[0] = true;
      ArrayUtils.indexesOf((int[]) null, 0);
      ArrayUtils.swap(longArray0, 679, (-972));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(16, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (short)0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, 1.0F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1437), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (-352), 1853, (-352));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY);
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'D';
      charArray0[3] = 'k';
      ArrayUtils.shuffle(charArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'k';
      ArrayUtils.shift(objectArray0, (-2133071005), (-207), (-207));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.removeAllOccurences(floatArray0, (-374.016F));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)987;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)0;
      ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)54);
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '/';
      charArray0[2] = 'C';
      charArray0[3] = 'n';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      charArray0[6] = ',';
      ArrayUtils.shuffle(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) '|';
      objectArray0[2] = (Object) ',';
      objectArray0[3] = (Object) ',';
      ArrayUtils.shift(objectArray0, (int) (short)0, (int) (short)987, (int) (short)987);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntryArray0[0]);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      ArrayUtils.indexesOf((short[]) null, (short)3210, (int) (short)3210);
      ArrayUtils.toObject((float[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)120;
      ArrayUtils.isArrayIndexValid((Integer[]) null, (-618));
      ArrayUtils.isNotEmpty((short[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)120;
      ArrayUtils.lastIndexOf(doubleArray0, (-93.0), (-555));
      ArrayUtils.toObject((long[]) null);
      ArrayUtils.removeElement((boolean[]) null, false);
      Integer integer0 = new Integer((byte) (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-2379));
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(intArray1, 0, (-1334));
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-35);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)12, (byte)45, (byte)1, (byte)35, (byte)13, (byte) (-127), (byte) (-35)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1298L;
      longArray0[1] = 0L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)54;
      ArrayUtils.lastIndexOf(shortArray0, (short)54, 84);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = 'b';
      charArray0[4] = '|';
      ArrayUtils.shuffle(charArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) 'n';
      ArrayUtils.shift(objectArray0, (-4115), 0, 0);
      ArrayUtils.removeAllOccurences(longArray0, 2216L);
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      ArrayUtils.clone((long[]) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      ArrayUtils.toArray(integerArray0);
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)1658;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, (byte[]) null);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1));
      boolean boolean0 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[17];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)50);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Integer integer0 = new Integer((-3732));
      ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      ArrayUtils.toArray(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, arrayUtils0.EMPTY_INT_ARRAY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\u0000');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      ArrayUtils.removeElement(byteArray0, (byte)100);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)13);
      integerArray0[0] = integer0;
      try { 
        Integer.decode("MwE'M>l>bF138x3o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"MwE'M>l>bF138x3o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0L);
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 15, 9);
      assertNotNull(doubleArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray2);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Float.valueOf((float) (byte)0);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.isArrayIndexValid(integerArray0, (-1775));
      ArrayUtils.clone((long[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.removeElement(byteArray0, (byte)0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.toArray(integerArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0);
      ArrayUtils.addAll(byteArray0, byteArray0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, Integer>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      ArrayUtils.toArray(abstractMap_SimpleImmutableEntryArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.removeElement(booleanArray0, false);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1446;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1446, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      Long long0 = new Long(1179L);
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {1179L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.addFirst(intArray0, 2394);
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexOf(doubleArray0, (double) 0, (-1), 1821.9614533255417);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      ArrayUtils.clone(longArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)94;
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-674));
      ArrayUtils.removeAll(intArray0, intArray0);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1581L));
      assertArrayEquals(new long[] {(-1581L), (-1581L), (-1581L), (-1581L), (-1581L), (-1581L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-965);
      intArray0[1] = 1333;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertArrayEquals(new int[] {1333, 0}, intArray1);
      
      ArrayUtils.shift((boolean[]) null, 0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-965);
      objectArray0[1] = (Object) 1333;
      Integer integer0 = new Integer(1333);
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) integer0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1333;
      longArray0[2] = (long) 1333;
      longArray0[3] = (long) (-965);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1549), (-1549));
      assertEquals((-1), int0);
      
      Long[] longArray1 = new Long[1];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 1L);
      assertArrayEquals(new long[] {1L}, longArray2);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 52;
      intArray0[0] = 52;
      intArray0[1] = 64;
      byte byte0 = (byte)94;
      byte byte1 = (byte)1;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byte byte2 = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byte byte3 = (byte)19;
      ArrayUtils.lastIndexOf(byteArray0, (byte)19, (int) (byte)94);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-83), (-10));
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = Long.valueOf(0L);
      longArray0[0] = long0;
      ArrayUtils.toPrimitive(longArray0, 0L);
      ArrayUtils.indexOf((double[]) null, (double) 0L, 53, (double) 0L);
      long[] longArray1 = new long[0];
      ArrayUtils.clone(longArray1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)94;
      ArrayUtils.lastIndexOf(byteArray0, (byte)94, (-726));
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)94;
      intArray0[2] = 53;
      intArray0[3] = (int) (byte)94;
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)102;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 19, Integer.MAX_VALUE);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      int[] intArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2223);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2507);
      shortArray0[4] = (short)5686;
      shortArray0[5] = (short) (-3481);
      shortArray0[6] = (short)3143;
      shortArray0[7] = (short)90;
      shortArray0[8] = (short)3913;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3591), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3591, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2484);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 4363;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-488);
      ArrayUtils.lastIndexOf(intArray0, (-563));
      ArrayUtils.shift(doubleArray0, 1627);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ArrayUtils.toObject(byteArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) Integer.MAX_VALUE;
      ArrayUtils.toPrimitive(floatArray1, (float) 2147483647L);
      ArrayUtils.indexesOf(doubleArray0, (double) (-1L), 1627, (double) (-2484));
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      byte[] byteArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-95), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.insert((-31), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-63);
      intArray0[1] = (-31);
      intArray0[2] = (int) (short)1;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.insert((int) (short)1, intArray0, intArray0);
      assertArrayEquals(new int[] {(-63), (-63), (-31), 1, (-1), (-31), 1, (-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 127);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {127, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 11;
      boolean boolean0 = ArrayUtils.contains(longArray0, 11L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      boolean boolean0 = ArrayUtils.isSorted(integerArray0);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1680()  throws Throwable  {
      long[] longArray0 = new long[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1, 1);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1681()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      char[] charArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_CHAR_ARRAY, '1');
      assertNotNull(charArray0);
      
      long[] longArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1));
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1682()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 758.2;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      ArrayUtils.toObject(doubleArray1);
      assertArrayEquals(new double[] {3.0, 758.2}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1683()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1684()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1442.41F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1442.41F;
      objectArray0[1] = (Object) 1442.41F;
      ArrayUtils.swap(objectArray0, 0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1685()  throws Throwable  {
      Float float0 = new Float(2118.902363406592);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1686()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      Double[] doubleArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1687()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1688()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1689()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1690()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1), (-1));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1691()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1692()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)71);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1693()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1694()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      Byte[] byteArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1695()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      long[] longArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_LONG_ARRAY, 77L);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1696()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1697()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, (-484));
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-484), (-1633));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1698()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(1, bitSet0.length());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      ArrayUtils.reverse(byteArray0, (int) (byte)111, 0);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1699()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2394);
      assertArrayEquals(new int[] {2394, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      ArrayUtils.isSorted(integerArray0);
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '?';
      ArrayUtils.clone(charArray0);
      ArrayUtils.removeAllOccurrences((float[]) null, 0.0F);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'K';
      longArray0[3] = (long) 2394;
      longArray0[4] = (long) int0;
      longArray0[5] = (long) '-';
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {45L, 75L, 2394L, 45L}, longArray1);
  }
}
