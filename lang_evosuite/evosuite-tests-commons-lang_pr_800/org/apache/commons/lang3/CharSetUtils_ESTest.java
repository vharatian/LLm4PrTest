/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:25:41 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.CharSetUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharSetUtils_ESTest extends CharSetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "EQ{f_'h:@g?9";
      String string0 = CharSetUtils.squeeze("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abbreviation width with ofset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6gVuuc`WW@";
      String string0 = CharSetUtils.squeeze("6gVuuc`WW@", stringArray0);
      assertEquals("6gVuc`W@", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = CharSetUtils.squeeze((String) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FE'v{wd|";
      String string0 = CharSetUtils.delete("FE'v{wd|", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "Q!~/\" hPW";
      String string0 = CharSetUtils.squeeze("B8eDkos)vd>>>.", stringArray0);
      assertEquals("B8eDkos)vd>>>.", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FE'v{wd|";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[25];
      stringArray0[4] = "...";
      String string0 = CharSetUtils.squeeze("...", stringArray0);
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A-Za-z";
      String string0 = CharSetUtils.squeeze("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abreviation width with ofset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = CharSetUtils.squeeze("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = CharSetUtils.squeeze("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A-Za-z";
      String string0 = CharSetUtils.keep("u", stringArray0);
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = CharSetUtils.keep("", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = CharSetUtils.keep(stringArray0[0], stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A-Za-z";
      String string0 = CharSetUtils.delete("y2{L5[7", stringArray0);
      assertEquals("2{5[7", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = CharSetUtils.delete("y2{L5[7", stringArray0);
      assertEquals("y2{L5[7", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = CharSetUtils.delete((String) null, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = CharSetUtils.keep("DOXJ(D9CF", (String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A-Za-z";
      int int0 = CharSetUtils.count("#V9`_>/^Z51", stringArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = CharSetUtils.count("#V9`_>/^Z51", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = CharSetUtils.count("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "FE'v{wd|";
      boolean boolean0 = CharSetUtils.containsAny("org.apache.commons.lang3.CharSetUtils", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A-Za-z";
      boolean boolean0 = CharSetUtils.containsAny("jp%yT", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = CharSetUtils.containsAny("jp%yT", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = CharSetUtils.containsAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharSetUtils charSetUtils0 = new CharSetUtils();
  }
}
