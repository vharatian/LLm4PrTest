/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 00:00:08 GMT 2025
 */

package org.apache.commons.lang3.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Stream;
import org.apache.commons.lang3.stream.Streams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Streams_ESTest extends Streams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Streams.FailableStream<Object> streams_FailableStream0 = Streams.stream((Collection<Object>) linkedList0);
      Stream<Object> stream0 = streams_FailableStream0.stream();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Streams.ArrayCollector<Integer> streams_ArrayCollector0 = new Streams.ArrayCollector<Integer>(class0);
      Supplier<List<Integer>> supplier0 = streams_ArrayCollector0.supplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Streams.stream((Collection<Stream<Stream>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.stream.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stream<Object> stream0 = Stream.empty();
      Streams.FailableStream<Object> streams_FailableStream0 = new Streams.FailableStream<Object>(stream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Streams.FailableStream<Object> streams_FailableStream0 = Streams.stream((Collection<Object>) linkedList0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConsumer<Integer, Object> biConsumer0 = (BiConsumer<Integer, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiConsumer<Integer, Integer> biConsumer1 = (BiConsumer<Integer, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      streams_FailableStream0.collect(supplier0, (BiConsumer<Integer, ? super Object>) biConsumer0, biConsumer1);
      // Undeclared exception!
      try { 
        streams_FailableStream0.makeTerminated();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This stream is already terminated.
         //
         verifyException("org.apache.commons.lang3.stream.Streams$FailableStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Streams.ArrayCollector<Integer> streams_ArrayCollector0 = new Streams.ArrayCollector<Integer>(class0);
      BinaryOperator<List<Integer>> binaryOperator0 = streams_ArrayCollector0.combiner();
      assertNotNull(binaryOperator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Streams.ArrayCollector<Object> streams_ArrayCollector0 = new Streams.ArrayCollector<Object>(class0);
      Set<Collector.Characteristics> set0 = (Set<Collector.Characteristics>)streams_ArrayCollector0.characteristics();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Streams.ArrayCollector<Object> streams_ArrayCollector0 = new Streams.ArrayCollector<Object>(class0);
      Function<List<Object>, Object[]> function0 = streams_ArrayCollector0.finisher();
      assertNotNull(function0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Streams.ArrayCollector<Object> streams_ArrayCollector0 = new Streams.ArrayCollector<Object>(class0);
      BiConsumer<List<Object>, Object> biConsumer0 = streams_ArrayCollector0.accumulator();
      assertNotNull(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Streams streams0 = new Streams();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Collector<Object, ?, Object[]> collector0 = Streams.toArray(class0);
      assertNotNull(collector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-4781));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      BinaryOperator<Integer> binaryOperator0 = BinaryOperator.minBy((Comparator<? super Integer>) comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Streams.FailableStream<Integer> streams_FailableStream0 = Streams.stream((Collection<Integer>) linkedList0);
      Integer integer1 = streams_FailableStream0.reduce(integer0, binaryOperator0);
      assertEquals((-4781), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Stream<Object>> linkedList0 = new LinkedList<Stream<Object>>();
      Streams.FailableStream<Stream<Object>> streams_FailableStream0 = Streams.stream((Collection<Stream<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        streams_FailableStream0.collect((Collector<? super Stream<Object>, Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Streams.FailableStream<Object> streams_FailableStream0 = Streams.stream((Collection<Object>) linkedList0);
      streams_FailableStream0.makeTerminated();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Streams.FailableStream<Object> streams_FailableStream0 = Streams.stream((Stream<Object>) null);
      assertNotNull(streams_FailableStream0);
  }
}
