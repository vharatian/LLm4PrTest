/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 19:23:48 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.RoundingMode;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.text.Collator;
import java.time.Duration;
import java.time.Month;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahEra;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.time.chrono.ThaiBuddhistDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = ObjectUtils.median(locale_CategoryArray0);
      assertEquals(Locale.Category.DISPLAY, locale_Category2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integerArray0[0];
      integerArray0[5] = integer0;
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn((long)0, (long)(-1), (long)(-1), (-1546L), (-1836L)).when(toLongFunction0).applyAsLong(anyInt());
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction0);
      Integer integer1 = ObjectUtils.median(comparator0, integerArray0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = ObjectUtils.max(integerArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectUtils0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      //  // Unstable assertion: assertEquals(1477051301, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Period period0 = Period.ZERO;
      StringBuilder stringBuilder0 = new StringBuilder("B%)Z]");
      ObjectUtils.identityToString(stringBuilder0, (Object) period0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(7);
      Integer integer0 = new Integer(7);
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Function<Object, ArrayDeque<Integer>> function0 = (Function<Object, ArrayDeque<Integer>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      Comparator<ArrayDeque<Object>> comparator1 = Comparator.comparing((Function<? super ArrayDeque<Object>, ? extends ArrayDeque<Integer>>) function0, (Comparator<? super ArrayDeque<Integer>>) comparator0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDequeArray0[0];
      arrayDequeArray0[2] = arrayDequeArray0[0];
      arrayDequeArray0[3] = arrayDequeArray0[1];
      arrayDequeArray0[4] = arrayDequeArray0[0];
      arrayDequeArray0[5] = arrayDequeArray0[0];
      arrayDequeArray0[6] = arrayDequeArray0[4];
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.median(comparator1, arrayDequeArray0);
      assertFalse(arrayDeque1.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[1];
      chronoUnitArray0[0] = chronoUnit0;
      ChronoUnit chronoUnit1 = ObjectUtils.max(chronoUnitArray0);
      assertSame(chronoUnit1, chronoUnit0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt();
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 5);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(mutableInt0).when(supplier0).get();
      supplierArray0[0] = supplier0;
      MutableInt mutableInt1 = (MutableInt)ObjectUtils.getFirstNonNull(supplierArray0);
      assertEquals(0, mutableInt1.intValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      Class<Object> class0 = ObjectUtils.getClass((Object) month0);
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedHashMap0;
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)ObjectUtils.firstNonNull(objectArray0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = new Integer(102);
      Object[] objectArray0 = new Object[4];
      Object object0 = ObjectUtils.mode(objectArray0);
      boolean boolean0 = ObjectUtils.equals(object0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashMap<Month, Integer> linkedHashMap0 = new LinkedHashMap<Month, Integer>();
      Month month0 = Month.SEPTEMBER;
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)ObjectUtils.defaultIfNull((Object) linkedHashMap0, (Object) month0);
      assertTrue(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer((-407));
      Integer integer1 = new Integer(48);
      int int0 = ObjectUtils.compare(integer1, integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer((-850));
      int int0 = ObjectUtils.compare((Integer) null, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)928);
      assertEquals((short)928, short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Comparable<Integer> comparable0 = ObjectUtils.CONST((Comparable<Integer>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = ObjectUtils.CONST((long) 929);
      assertEquals(929L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-1175L));
      assertEquals((-1175L), long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = ObjectUtils.CONST(3874);
      assertEquals(3874, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-2811));
      assertEquals((-2811), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = ObjectUtils.CONST(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) 16);
      assertEquals(16.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char char0 = ObjectUtils.CONST('*');
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = ObjectUtils.CONST('0');
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)2);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) null, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds(9223372036854775807L);
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) "", duration0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((HashMap<Object, Object>) null, "x/DR-7X,)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // x/DR-7X,)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((HijrahEra[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) collator0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.RuleBasedCollator cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Integer integer0 = new Integer(1048);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charBuffer0, (Object) integer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) null, (Object) "java.lang.Integer@1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      // Undeclared exception!
      try { 
        ObjectUtils.hashCodeMulti(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        ObjectUtils.hashCodeHex(linkedHashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        ObjectUtils.hashCode((Object) linkedHashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone((Object) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception cloning Cloneable type java.util.LinkedHashMap
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      RoundingMode roundingMode1 = ObjectUtils.requireNonEmpty(roundingMode0, "N0`(FsFp#i");
      assertSame(roundingMode1, roundingMode0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(hashMap0, hashMap0);
      boolean boolean0 = ObjectUtils.isEmpty(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Integer, Comparable<Object>> hashMap0 = new HashMap<Integer, Comparable<Object>>();
      boolean boolean0 = ObjectUtils.isEmpty(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      arrayDeque0.add(japaneseDate0);
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-3580));
      boolean boolean0 = ObjectUtils.isArray(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = ObjectUtils.max((Integer[]) null);
      Integer integer1 = ObjectUtils.defaultIfNull((Integer) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(102);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer((-850));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(32767);
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(2601);
      int int0 = ObjectUtils.compare(integer0, integer0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer((-850));
      Integer integer1 = new Integer((-850));
      int int0 = ObjectUtils.compare(integer1, integer0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectUtils0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      boolean boolean0 = ObjectUtils.allNotNull(comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      boolean boolean0 = ObjectUtils.allNotNull(comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      String string0 = ObjectUtils.identityHashCodeHex(arrayDeque0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) "", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String string0 = ObjectUtils.toString((Object) integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object0, linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) linkedHashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = ObjectUtils.mode((Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      linkedHashMap0.put(linkedHashMap0, (Integer) null);
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)ObjectUtils.requireNonEmpty((Object) linkedHashMap0);
      assertFalse(linkedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer((-730));
      boolean boolean0 = ObjectUtils.isEmpty(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      arrayDeque0.add(minguoDate0);
      boolean boolean0 = ObjectUtils.isNotEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      boolean boolean0 = ObjectUtils.isNotEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isArray((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      String string0 = ObjectUtils.identityToString((Object) thaiBuddhistDate0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 17);
      int int0 = ObjectUtils.hashCodeMulti(comparableArray0);
      assertEquals((-997072353), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.getIfNull(arrayDeque0, (Supplier<ArrayDeque<Object>>) null);
      assertSame(arrayDeque0, arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = ObjectUtils.getIfNull((Object) null, (Supplier<Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Supplier<Integer>[] supplierArray0 = (Supplier<Integer>[]) Array.newInstance(Supplier.class, 14);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Integer integer0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Object> class0 = ObjectUtils.getClass((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Class<ArrayDeque<Integer>> class0 = ObjectUtils.getClass(arrayDeque0);
      assertEquals("class java.util.ArrayDeque", class0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ObjectUtils.wait(object0, (Duration) null);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [2147483645]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-997072353));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-997072353]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2989);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2989]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-201]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer(45);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(344);
      integerArray0[5] = integer1;
      Integer integer2 = ObjectUtils.max(integerArray0);
      assertEquals(344, (int)integer2);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MinguoDate minguoDate0 = MockMinguoDate.now();
      ChronoLocalDate[] chronoLocalDateArray0 = new ChronoLocalDate[2];
      chronoLocalDateArray0[0] = (ChronoLocalDate) minguoDate0;
      ChronoLocalDate chronoLocalDate0 = ObjectUtils.min(chronoLocalDateArray0);
      assertSame(chronoLocalDate0, minguoDate0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) "");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = ObjectUtils.cloneIfPossible(hashMap0);
      assertNotSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = ObjectUtils.max((Integer[]) null);
      Integer integer1 = ObjectUtils.clone(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer((-850));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Duration duration0 = Duration.ofMillis((-1351L));
      // Undeclared exception!
      try { 
        ObjectUtils.wait((Object) duration0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      ObjectUtils.hashCode((Object) linkedHashMap0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Function<Object, ArrayDeque<Integer>> function0 = (Function<Object, ArrayDeque<Integer>>) mock(Function.class, new ViolatedAssumptionAnswer());
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      Comparator<ArrayDeque<Object>> comparator1 = Comparator.comparing((Function<? super ArrayDeque<Object>, ? extends ArrayDeque<Integer>>) function0, (Comparator<? super ArrayDeque<Integer>>) comparator0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 7);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparator1, arrayDequeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuffer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-2832));
      assertEquals((short) (-2832), short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Object object0 = linkedHashMap0.clone();
      // Undeclared exception!
      try { 
        ObjectUtils.requireNonEmpty(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // object
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ObjectUtils.firstNonNull(integerArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (-305));
      assertEquals((-305.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      String string0 = ObjectUtils.toString((Object) objectUtils0, (Supplier<String>) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = ObjectUtils.CONST((Object) hashMap0);
      Integer integer0 = new Integer(127);
      hashMap0.put(object0, integer0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception cloning Cloneable type java.util.HashMap
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char char0 = ObjectUtils.CONST('L');
      assertEquals('L', char0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = ObjectUtils.hashCodeHex((Object) null);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      StringBuilder stringBuilder0 = new StringBuilder("rF#C1oy8[P");
      ObjectUtils.identityToString((Appendable) stringBuilder0, (Object) linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HijrahEra[] hijrahEraArray0 = new HijrahEra[8];
      // Undeclared exception!
      try { 
        ObjectUtils.median(hijrahEraArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(194);
      int int0 = ObjectUtils.compare(integer0, integer0);
      assertEquals(0, int0);
  }
}
